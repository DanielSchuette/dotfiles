{"version":3,"sources":["../../src/rules/validTypes.js"],"names":["asExpression","jsdoc","report","utils","context","settings","allowEmptyNamepaths","options","mode","tags","forEach","tag","validNamepathParsing","namepath","tagName","handled","includes","endChar","slice","startChar","charAt","validTypeParsing","type","thisNamepath","description","replace","test","thatNamepath","name","otherModeMaps","filter","mde","map","getTagStructureForMode","tagMightHaveNamePosition","modeInfo","mightHaveTypePosition","tagMightHaveTypePosition","tagMustHaveNamePosition","mustHaveTypePosition","tagMustHaveTypePosition","tagMissingRequiredTypeOrNamepath","hasTypePosition","Boolean","hasNameOrNamepathPosition","tagMightHaveNamepath","parseClosureTemplateTag","iterateAllJsdocs","meta","docs","url","schema","additionalProperies","properties","default"],"mappings":"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","sourcesContent":["import {\n  parse,\n} from 'jsdoctypeparser';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst asExpression = /as\\s+/u;\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  utils,\n  context,\n  settings,\n}) => {\n  const {\n    allowEmptyNamepaths = false,\n  } = context.options[0] || {};\n  const {mode} = settings;\n  if (!jsdoc.tags) {\n    return;\n  }\n  // eslint-disable-next-line complexity\n  jsdoc.tags.forEach((tag) => {\n    const validNamepathParsing = function (namepath, tagName) {\n      try {\n        parse(namepath, {mode});\n      } catch {\n        let handled = false;\n\n        if (tagName) {\n          if (['memberof', 'memberof!'].includes(tagName)) {\n            const endChar = namepath.slice(-1);\n            if (['#', '.', '~'].includes(endChar)) {\n              try {\n                parse(namepath.slice(0, -1), {mode});\n                handled = true;\n              } catch {\n                // Use the original error for including the whole type\n              }\n            }\n          } else if (tagName === 'borrows') {\n            const startChar = namepath.charAt();\n            if (['#', '.', '~'].includes(startChar)) {\n              try {\n                parse(namepath.slice(1), {mode});\n                handled = true;\n              } catch {\n                // Use the original error for including the whole type\n              }\n            }\n          }\n        }\n\n        if (!handled) {\n          report(`Syntax error in namepath: ${namepath}`, null, tag);\n\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    const validTypeParsing = function (type) {\n      try {\n        parse(type, {mode});\n      } catch {\n        report(`Syntax error in type: ${type}`, null, tag);\n\n        return false;\n      }\n\n      return true;\n    };\n\n    if (tag.tag === 'borrows') {\n      const thisNamepath = tag.description.replace(asExpression, '');\n\n      if (!asExpression.test(tag.description) || !thisNamepath) {\n        report(`@borrows must have an \"as\" expression. Found \"${tag.description}\"`, null, tag);\n\n        return;\n      }\n\n      if (validNamepathParsing(thisNamepath, 'borrows')) {\n        const thatNamepath = tag.name;\n\n        validNamepathParsing(thatNamepath);\n      }\n\n      return;\n    }\n\n    const otherModeMaps = ['jsdoc', 'typescript', 'closure', 'permissive'].filter(\n      (mde) => {\n        return mde !== mode;\n      },\n    ).map((mde) => {\n      return utils.getTagStructureForMode(mde);\n    });\n\n    const tagMightHaveNamePosition = utils.tagMightHaveNamePosition(tag.tag, otherModeMaps);\n    if (tagMightHaveNamePosition !== true && tag.name) {\n      const modeInfo = tagMightHaveNamePosition === false ? '' : ` in \"${mode}\" mode`;\n      report(`@${tag.tag} should not have a name${modeInfo}.`, null, tag);\n\n      return;\n    }\n\n    const mightHaveTypePosition = utils.tagMightHaveTypePosition(tag.tag, otherModeMaps);\n    if (mightHaveTypePosition !== true && tag.type) {\n      const modeInfo = mightHaveTypePosition === false ? '' : ` in \"${mode}\" mode`;\n      report(`@${tag.tag} should not have a bracketed type${modeInfo}.`, null, tag);\n\n      return;\n    }\n\n    // REQUIRED NAME\n    const tagMustHaveNamePosition = utils.tagMustHaveNamePosition(tag.tag, otherModeMaps);\n\n    // Don't handle `@param` here though it does require name as handled by\n    //  `require-param-name` (`@property` would similarly seem to require one,\n    //  but is handled by `require-property-name`)\n    if (tagMustHaveNamePosition !== false && !tag.name && !allowEmptyNamepaths && ![\n      'param', 'arg', 'argument',\n      'property', 'prop',\n    ].includes(tag.tag) &&\n      (tag.tag !== 'see' || !tag.description.includes('{@link'))\n    ) {\n      const modeInfo = tagMustHaveNamePosition === true ? '' : ` in \"${mode}\" mode`;\n      report(`Tag @${tag.tag} must have a name/namepath${modeInfo}.`, null, tag);\n\n      return;\n    }\n\n    // REQUIRED TYPE\n    const mustHaveTypePosition = utils.tagMustHaveTypePosition(tag.tag, otherModeMaps);\n    if (mustHaveTypePosition !== false && !tag.type) {\n      const modeInfo = mustHaveTypePosition === true ? '' : ` in \"${mode}\" mode`;\n      report(`Tag @${tag.tag} must have a type${modeInfo}.`, null, tag);\n\n      return;\n    }\n\n    // REQUIRED TYPE OR NAME/NAMEPATH\n    const tagMissingRequiredTypeOrNamepath = utils.tagMissingRequiredTypeOrNamepath(tag, otherModeMaps);\n    if (tagMissingRequiredTypeOrNamepath !== false && !allowEmptyNamepaths) {\n      const modeInfo = tagMissingRequiredTypeOrNamepath === true ? '' : ` in \"${mode}\" mode`;\n      report(`Tag @${tag.tag} must have either a type or namepath${modeInfo}.`, null, tag);\n\n      return;\n    }\n\n    // VALID TYPE\n    const hasTypePosition = mightHaveTypePosition === true && Boolean(tag.type);\n    if (hasTypePosition) {\n      validTypeParsing(tag.type);\n    }\n\n    // VALID NAME/NAMEPATH\n    const hasNameOrNamepathPosition = (\n      tagMustHaveNamePosition !== false ||\n      utils.tagMightHaveNamepath(tag.tag)\n    ) && Boolean(tag.name);\n\n    if (hasNameOrNamepathPosition) {\n      if (mode !== 'jsdoc' && tag.tag === 'template') {\n        utils.parseClosureTemplateTag(tag).forEach((namepath) => {\n          validNamepathParsing(namepath);\n        });\n      } else {\n        validNamepathParsing(tag.name, tag.tag);\n      }\n    }\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Requires all types to be valid JSDoc or Closure compiler types without syntax errors.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-valid-types',\n    },\n    schema: [\n      {\n        additionalProperies: false,\n        properties: {\n          allowEmptyNamepaths: {\n            default: false,\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"validTypes.js"}