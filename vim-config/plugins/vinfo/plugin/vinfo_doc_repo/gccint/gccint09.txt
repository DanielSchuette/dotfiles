
                if (condition)
                  free (ptr);

                ...etc

     then we end up with an exploded graph that looks like this:


                             if (condition)
                               / T      \ F
                      ---------          ----------
                     /                             \
                ptr = malloc (size)             ptr = local_buf
                    |                               |
                copy of                         copy of
                  "do things with 'ptr'"          "do things with 'ptr'"
                with ptr: heap-allocated        with ptr: stack-allocated
                    |                               |
                if (condition)                  if (condition)
                    | known to be T                 | known to be F
                free (ptr);                         |
                     \                             /
                      -----------------------------
                                   | ('ptr' is pruned, so states can be merged)
                                  etc


     where some duplication has occurred, but only for the places where
     the the different paths are worth exploringly separately.

     Merging can be disabled via '-fno-analyzer-state-merge'.

27.1.4 Region Model
-------------------

Part of the state stored at a 'exploded_node' is a 'region_model'.  This
is an implementation of the region-based ternary model described in "A
Memory Model for Static Analysis of C Programs"
(http://lcs.ios.ac.cn/~xuzb/canalyze/memmodel.pdf) (Zhongxing Xu, Ted
Kremenek, and Jian Zhang).

 A 'region_model' encapsulates a representation of the state of memory,
with a tree of 'region' instances, along with their associated values.
The representation is graph-like because values can be pointers to
regions.  It also stores a constraint_manager, capturing relationships
between the values.

 Because each node in the 'exploded_graph' has a 'region_model', and
each of the latter is graph-like, the 'exploded_graph' is in some ways a
graph of graphs.

 Here's an example of printing a 'region_model', showing the ASCII-art
used to visualize the region hierarchy (colorized when printing to
stderr):

     (gdb) call debug (*this)
     r0: {kind: 'root', parent: null, sval: null}
     |-stack: r1: {kind: 'stack', parent: r0, sval: sv1}
     |  |: sval: sv1: {poisoned: uninit}
     |  |-frame for 'test': r2: {kind: 'frame', parent: r1, sval: null, map: {'ptr_3': r3}, function: 'test', depth: 0}
     |  |  `-'ptr_3': r3: {kind: 'map', parent: r2, sval: sv3, type: 'void *', map: {}}
     |  |    |: sval: sv3: {type: 'void *', unknown}
     |  |    |: type: 'void *'
     |  `-frame for 'calls_malloc': r4: {kind: 'frame', parent: r1, sval: null, map: {'result_3': r7, '_4': r8, '<anonymous>': r5}, function: 'calls_malloc', depth: 1}
     |    |-'<anonymous>': r5: {kind: 'map', parent: r4, sval: sv4, type: 'void *', map: {}}
     |    |  |: sval: sv4: {type: 'void *', &r6}
     |    |  |: type: 'void *'
     |    |-'result_3': r7: {kind: 'map', parent: r4, sval: sv4, type: 'void *', map: {}}
     |    |  |: sval: sv4: {type: 'void *', &r6}
     |    |  |: type: 'void *'
     |    `-'_4': r8: {kind: 'map', parent: r4, sval: sv4, type: 'void *', map: {}}
     |      |: sval: sv4: {type: 'void *', &r6}
     |      |: type: 'void *'
     `-heap: r9: {kind: 'heap', parent: r0, sval: sv2}
       |: sval: sv2: {poisoned: uninit}
       `-r6: {kind: 'symbolic', parent: r9, sval: null, map: {}}
     svalues:
       sv0: {type: 'size_t', '1024'}
       sv1: {poisoned: uninit}
       sv2: {poisoned: uninit}
       sv3: {type: 'void *', unknown}
       sv4: {type: 'void *', &r6}
     constraint manager:
       equiv classes:
         ec0: {sv0 == '1024'}
         ec1: {sv4}
       constraints:

 This is the state at the point of returning from 'calls_malloc' back to
'test' in the following:

     void *
     calls_malloc (void)
     {
       void *result = malloc (1024);
       return result;
     }

     void test (void)
     {
       void *ptr = calls_malloc ();
       /* etc.  */
     }

 The "root" region ("r0") has a "stack" child ("r1"), with two children:
a frame for 'test' ("r2"), and a frame for 'calls_malloc' ("r4").  These
frame regions have child regions for storing their local variables.  For
example, the return region and that of various other regions within the
"calls_malloc" frame all have value "sv4", a pointer to a heap-allocated
region "r6".  Within the parent frame, 'ptr_3' has value "sv3", an
unknown 'void *'.

27.1.5 Analyzer Paths
---------------------

We need to explain to the user what the problem is, and to persuade them
that there really is a problem.  Hence having a 'diagnostic_path' isn't
just an incidental detail of the analyzer; it's required.

 Paths ought to be:
   * interprocedurally-valid
   * feasible

 Without state-merging, all paths in the exploded graph are feasible (in
terms of constraints being satisified).  With state-merging, paths in
the exploded graph can be infeasible.

 We collate warnings and only emit them for the simplest path e.g.  for
a bug in a utility function, with lots of routes to calling it, we only
emit the simplest path (which could be intraprocedural, if it can be
reproduced without a caller).  We apply a check that each duplicate
warning's shortest path is feasible, rejecting any warnings for which
the shortest path is infeasible (which could lead to false negatives).

 We use the shortest feasible 'exploded_path' through the
'exploded_graph' (a list of 'exploded_edge *') to build a
'diagnostic_path' (a list of events for the diagnostic subsystem) -
specifically a 'checker_path'.

 Having built the 'checker_path', we prune it to try to eliminate events
that aren't relevant, to minimize how much the user has to read.

 After pruning, we notify each event in the path of its ID and record
the IDs of interesting events, allowing for events to refer to other
events in their descriptions.  The 'pending_diagnostic' class has
various vfuncs to support emitting more precise descriptions, so that
e.g.

   * a deref-of-unchecked-malloc diagnostic might use:
            returning possibly-NULL pointer to 'make_obj' from 'allocator'
     for a 'return_event' to make it clearer how the unchecked value
     moves from callee back to caller
   * a double-free diagnostic might use:
            second 'free' here; first 'free' was at (3)
     and a use-after-free might use
            use after 'free' here; memory was freed at (2)

 At this point we can emit the diagnostic.

27.1.6 Limitations
------------------

   * Only for C so far
   * The implementation of call summaries is currently very simplistic.
   * Lack of function pointer analysis
   * The constraint-handling code assumes reflexivity in some places
     (that values are equal to themselves), which is not the case for
     NaN. As a simple workaround, constraints on floating-point values
     are currently ignored.
   * The region model code creates lots of little mutable objects at
     each 'region_model' (and thus per 'exploded_node') rather than
     sharing immutable objects and having the mutable state in the
     'program_state' or 'region_model'.  The latter approach might be
     more efficient, and might avoid dealing with IDs rather than
     pointers (which requires us to impose an ordering to get meaningful
     equality).
   * The region model code doesn't yet support 'memcpy'.  At the
     gimple-ssa level these have been optimized to statements like this:
          _10 = MEM <long unsigned int> [(char * {ref-all})&c]
          MEM <long unsigned int> [(char * {ref-all})&d] = _10;
     Perhaps they could be supported via a new 'compound_svalue' type.
   * There are various other limitations in the region model (grep for
     TODO/xfail in the testsuite).
   * The constraint_manager's implementation of transitivity is
     currently too expensive to enable by default and so must be
     manually enabled via '-fanalyzer-transitivity').
   * The checkers are currently hardcoded and don't allow for user
     extensibility (e.g.  adding allocate/release pairs).
   * Although the analyzer's test suite has a proof-of-concept test case
     for LTO, LTO support hasn't had extensive testing.  There are
     various lang-specific things in the analyzer that assume C rather
     than LTO. For example, SSA names are printed to the user in "raw"
     form, rather than printing the underlying variable name.

 Some ideas for other checkers
   * File-descriptor-based APIs
   * Linux kernel internal APIs
   * Signal handling

==============================================================================
File: gccint.info,  Node: |Debugging_the_Analyzer|,  Prev: |Analyzer_Internals|,  Up: |Static_Analyzer|
==============================================================================

                                                        *Debugging_the_Analyzer*

27.2 Debugging the Analyzer
---------------------------

27.2.1 Special Functions for Debugging the Analyzer
---------------------------------------------------

The analyzer recognizes various special functions by name, for use in
debugging the analyzer.  Declarations can be seen in the testsuite in
'analyzer-decls.h'.  None of these functions are actually implemented.

 Add:
       __analyzer_break ();
 to the source being analyzed to trigger a breakpoint in the analyzer
when that source is reached.  By putting a series of these in the
source, it's much easier to effectively step through the program state
as it's analyzed.

     __analyzer_dump ();

 will dump the copious information about the analyzer's state each time
it reaches the call in its traversal of the source.

     __analyzer_dump_path ();

 will emit a placeholder "note" diagnostic with a path to that call
site, if the analyzer finds a feasible path to it.

 The builtin '__analyzer_dump_exploded_nodes' will emit a warning after
analysis containing information on all of the exploded nodes at that
program point:

       __analyzer_dump_exploded_nodes (0);

 will output the number of "processed" nodes, and the IDs of both
"processed" and "merger" nodes, such as:

     warning: 2 processed enodes: [EN: 56, EN: 58] merger(s): [EN: 54-55, EN: 57, EN: 59]

 With a non-zero argument

       __analyzer_dump_exploded_nodes (1);

 it will also dump all of the states within the "processed" nodes.

        __analyzer_dump_region_model ();
 will dump the region_model's state to stderr.

     __analyzer_eval (expr);
 will emit a warning with text "TRUE", FALSE" or "UNKNOWN" based on the
truthfulness of the argument.  This is useful for writing DejaGnu tests.

27.2.2 Other Debugging Techniques
---------------------------------

One approach when tracking down where a particular bogus state is
introduced into the 'exploded_graph' is to add custom code to
'region_model::validate'.

 For example, this custom code (added to 'region_model::validate')
breaks with an assertion failure when a variable called 'ptr' acquires a
value that's unknown, using 'region_model::get_value_by_name' to locate
the variable

         /* Find a variable matching "ptr".  */
         svalue_id sid = get_value_by_name ("ptr");
         if (!sid.null_p ())
           {
     	svalue *sval = get_svalue (sid);
     	gcc_assert (sval->get_kind () != SK_UNKNOWN);
           }

 making it easier to investigate further in a debugger when this occurs.

==============================================================================
File: gccint.info,  Node: |User_Experience_Guidelines|,  Next: |Funding|,  Prev: |Static_Analyzer|,  Up: |Top|
==============================================================================

                                                    *User_Experience_Guidelines*

28 User Experience Guidelines
=============================

To borrow a slogan from Elm
(https://elm-lang.org/news/compilers-as-assistants),

     *Compilers should be assistants, not adversaries.*  A compiler
     should not just detect bugs, it should then help you understand why
     there is a bug.  It should not berate you in a robot voice, it
     should give you specific hints that help you write better code.
     Ultimately, a compiler should make programming faster and more fun!
                          -- _Evan Czaplicki_

 This chapter provides guidelines on how to implement diagnostics and
command-line options in ways that we hope achieve the above ideal.

MENU

* |Guidelines_for_Diagnostics|::       How to implement diagnostics.
* |Guidelines_for_Options|::           Guidelines for command-line options.

==============================================================================
File: gccint.info,  Node: |Guidelines_for_Diagnostics|,  Next: |Guidelines_for_Options|,  Up: |User_Experience_Guidelines|
==============================================================================

                                                    *Guidelines_for_Diagnostics*

28.1 Guidelines for Diagnostics
-------------------------------

28.1.1 Talk in terms of the user's code
---------------------------------------

Diagnostics should be worded in terms of the user's source code, and the
source language, rather than GCC's own implementation details.

28.1.2 Diagnostics are actionable
---------------------------------

A good diagnostic is "actionable": it should assist the user in taking
action.

 Consider what an end user will want to do when encountering a
diagnostic.

 Given an error, an end user will think: "How do I fix this?"

 Given a warning, an end user will think:

   * "Is this a real problem?"
   * "Do I care?"
   * if they decide it's genuine: "How do I fix this?"

 A good diagnostic provides pertinent information to allow the user to
easily answer the above questions.

28.1.3 The user's attention is important
----------------------------------------

A perfect compiler would issue a warning on every aspect of the user's
source code that ought to be fixed, and issue no other warnings.
Naturally, this ideal is impossible to achieve.

 Warnings should have a good "signal-to-noise ratio": we should have few
"false positives" (falsely issuing a warning when no warning is
warranted) and few "false negatives" (failing to issue a warning when
one _is_ justified).

 Note that a false positive can mean, in practice, a warning that the
user doesn't agree with.  Ideally a diagnostic should contain enough
information to allow the user to make an informed choice about whether
they should care (and how to fix it), but a balance must be drawn
against overloading the user with irrelevant data.

28.1.4 Precision of Wording
---------------------------

Provide the user with details that allow them to identify what the
problem is.  For example, the vaguely-worded message:

     demo.c:1:1: warning: 'noinline' attribute ignored [-Wattributes]
         1 | int foo __attribute__((noinline));
           | ^~~

doesn't tell the user why the attribute was ignored, or what kind of
entity the compiler thought the attribute was being applied to (the
source location for the diagnostic is also poor; *note discussion of
'input_location': input_location_example.).  A better message would be:

     demo.c:1:24: warning: attribute 'noinline' on variable 'foo' was
        ignored [-Wattributes]
         1 | int foo __attribute__((noinline));
           |     ~~~ ~~~~~~~~~~~~~~~^~~~~~~~~
     demo.c:1:24: note: attribute 'noinline' is only applicable to functions

which spells out the missing information (and fixes the location
information, as discussed below).

 The above example uses a note to avoid a combinatorial explosion of
possible messages.

28.1.5 Try the diagnostic on real-world code
--------------------------------------------

It's worth testing a new warning on many instances of real-world code,
written by different people, and seeing what it complains about, and
what it doesn't complain about.

 This may suggest heuristics that silence common false positives.

 It may also suggest ways to improve the precision of the message.

28.1.6 Make mismatches clear
----------------------------

Many diagnostics relate to a mismatch between two different places in
the user's source code.  Examples include:
   * a type mismatch, where the type at a usage site does not match the
     type at a declaration

   * the argument count at a call site does not match the parameter
     count at the declaration

   * something is erroneously duplicated (e.g. an error, due to breaking
     a uniqueness requirement, or a warning, if it's suggestive of a
     bug)

   * an "opened" syntactic construct (such as an open-parenthesis) is
     not closed

 In each case, the diagnostic should indicate both pertinent locations
(so that the user can easily see the problem and how to fix it).

 The standard way to do this is with a note (via 'inform').  For
example:

       auto_diagnostic_group d;
       if (warning_at (loc, OPT_Wduplicated_cond,
                       "duplicated %<if%> condition"))
         inform (EXPR_LOCATION (t), "previously used here");

which leads to:

     demo.c: In function 'test':
     demo.c:5:17: warning: duplicated 'if' condition [-Wduplicated-cond]
         5 |   else if (flag > 3)
           |            ~~~~~^~~
     demo.c:3:12: note: previously used here
         3 |   if (flag > 3)
           |       ~~~~~^~~

The 'inform' call should be guarded by the return value from the
'warning_at' call so that the note isn't emitted when the warning is
suppressed.

 For cases involving punctuation where the locations might be near each
other, they can be conditionally consolidated via
'gcc_rich_location::add_location_if_nearby':

         auto_diagnostic_group d;
         gcc_rich_location richloc (primary_loc);
         bool added secondary = richloc.add_location_if_nearby (secondary_loc);
         error_at (&richloc, "main message");
         if (!added secondary)
           inform (secondary_loc, "message for secondary");

This will emit either one diagnostic with two locations:
       demo.c:42:10: error: main message
         (foo)
         ~   ^

or two diagnostics:

       demo.c:42:4: error: main message
         foo)
            ^
       demo.c:40:2: note: message for secondary
         (
         ^

28.1.7 Location Information
---------------------------

GCC's 'location_t' type can support both ordinary locations, and
locations relating to a macro expansion.

 As of GCC 6, ordinary locations changed from supporting just a point in
the user's source code to supporting three points: the "caret" location,
plus a start and a finish:

           a = foo && bar;
               ~~~~^~~~~~
               |   |    |
               |   |    finish
               |   caret
               start

 Tokens coming out of libcpp have locations of the form 'caret ==
start', such as for 'foo' here:

           a = foo && bar;
               ^~~
               | |
               | finish
               caret == start

 Compound expressions should be reported using the location of the
expression as a whole, rather than just of one token within it.

 For example, in '-Wformat', rather than underlining just the first
token of a bad argument:

        printf("hello %i %s", (long)0, "world");
                      ~^      ~
                      %li

the whole of the expression should be underlined, so that the user can
easily identify what is being referred to:

        printf("hello %i %s", (long)0, "world");
                      ~^      ~~~~~~~
                      %li

 Avoid using the 'input_location' global, and the diagnostic functions
that implicitly use it--use 'error_at' and 'warning_at' rather than
'error' and 'warning', and provide the most appropriate 'location_t'
value available at that phase of the compilation.  It's possible to
supply secondary 'location_t' values via 'rich_location'.

For example, in the example of imprecise wording above, generating the
diagnostic using 'warning':

       // BAD: implicitly uses input_location
       warning (OPT_Wattributes, "%qE attribute ignored", name);

leads to:

     // BAD: uses input_location
     demo.c:1:1: warning: 'noinline' attribute ignored [-Wattributes]
         1 | int foo __attribute__((noinline));
           | ^~~

which thus happened to use the location of the 'int' token, rather than
that of the attribute.  Using 'warning_at' with the location of the
attribute, providing the location of the declaration in question as a
secondary location, and adding a note:

       auto_diagnostic_group d;
       gcc_rich_location richloc (attrib_loc);
       richloc.add_range (decl_loc);
       if (warning_at (OPT_Wattributes, &richloc,
                       "attribute %qE on variable %qE was ignored", name))
         inform (attrib_loc, "attribute %qE is only applicable to functions");

would lead to:

     // OK: use location of attribute, with a secondary location
     demo.c:1:24: warning: attribute 'noinline' on variable 'foo' was
        ignored [-Wattributes]
         1 | int foo __attribute__((noinline));
           |     ~~~ ~~~~~~~~~~~~~~~^~~~~~~~~
     demo.c:1:24: note: attribute 'noinline' is only applicable to functions

28.1.8 Coding Conventions
-------------------------

See the diagnostics section
(https://gcc.gnu.org/codingconventions.html#Diagnostics) of the GCC
coding conventions.

 In the C++ front end, when comparing two types in a message, use '%H'
and '%I' rather than '%T', as this allows the diagnostics subsystem to
highlight differences between template-based types.  For example, rather
than using '%qT':

       // BAD: a pair of %qT used in C++ front end for type comparison
       error_at (loc, "could not convert %qE from %qT to %qT", expr,
                 TREE_TYPE (expr), type);

which could lead to:

     error: could not convert 'map<int, double>()' from 'map<int,double>'
        to 'map<int,int>'

using '%H' and '%I' (via '%qH' and '%qI'):

       // OK: compare types in C++ front end via %qH and %qI
       error_at (loc, "could not convert %qE from %qH to %qI", expr,
                 TREE_TYPE (expr), type);

allows the above output to be simplified to:

     error: could not convert 'map<int, double>()' from 'map<[...],double>'
        to 'map<[...],int>'

where the 'double' and 'int' are colorized to highlight them.

28.1.9 Group logically-related diagnostics
------------------------------------------

Use 'auto_diagnostic_group' when issuing multiple related diagnostics
(seen in various examples on this page).  This informs the diagnostic
subsystem that all diagnostics issued within the lifetime of the
'auto_diagnostic_group' are related.  For example,
'-fdiagnostics-format=json' will treat the first diagnostic emitted
within the group as a top-level diagnostic, and all subsequent
diagnostics within the group as its children.

28.1.10 Quoting
---------------

Text should be quoted by either using the 'q' modifier in a directive
such as '%qE', or by enclosing the quoted text in a pair of '%<' and
'%>' directives, and never by using explicit quote characters.  The
directives handle the appropriate quote characters for each language and
apply the correct color or highlighting.

 The following elements should be quoted in GCC diagnostics:

   * Language keywords.
   * Tokens.
   * Boolean, numerical, character, and string constants that appear in
     the source code.
   * Identifiers, including function, macro, type, and variable names.

 Other elements such as numbers that do not refer to numeric constants
that appear in the source code should not be quoted.  For example, in
the message:

     argument %d of %qE must be a pointer type

since the argument number does not refer to a numerical constant in the
source code it should not be quoted.

28.1.11 Spelling and Terminology
--------------------------------

See the terminology and markup
(https://gcc.gnu.org/codingconventions.html#Spelling Spelling) section
of the GCC coding conventions.

28.1.12 Fix-it hints
--------------------

GCC's diagnostic subsystem can emit "fix-it hints": small suggested
edits to the user's source code.

 They are printed by default underneath the code in question.  They can
also be viewed via '-fdiagnostics-generate-patch' and
'-fdiagnostics-parseable-fixits'.  With the latter, an IDE ought to be
able to offer to automatically apply the suggested fix.

 Fix-it hints contain code fragments, and thus they should not be marked
for translation.

 Fix-it hints can be added to a diagnostic by using a 'rich_location'
rather than a 'location_t' - the fix-it hints are added to the
'rich_location' using one of the various 'add_fixit' member functions of
'rich_location'.  They are documented with 'rich_location' in
'libcpp/line-map.h'.  It's easiest to use the 'gcc_rich_location'
subclass of 'rich_location' found in 'gcc-rich-location.h', as this
implicitly supplies the 'line_table' variable.

 For example:

        if (const char *suggestion = hint.suggestion ())
          {
            gcc_rich_location richloc (location);
            richloc.add_fixit_replace (suggestion);
            error_at (&richloc,
                      "%qE does not name a type; did you mean %qs?",
                      id, suggestion);
          }

which can lead to:

     spellcheck-typenames.C:73:1: error: 'singed' does not name a type; did
        you mean 'signed'?
        73 | singed char ch;
           | ^~~~~~
           | signed

 Non-trivial edits can be built up by adding multiple fix-it hints to
one 'rich_location'.  It's best to express the edits in terms of the
locations of individual tokens.  Various handy functions for adding
fix-it hints for idiomatic C and C++ can be seen in
'gcc-rich-location.h'.

28.1.12.1 Fix-it hints should work
----------------------------------

When implementing a fix-it hint, please verify that the suggested edit
leads to fixed, compilable code.  (Unfortunately, this currently must be
done by hand using '-fdiagnostics-generate-patch'.  It would be good to
have an automated way of verifying that fix-it hints actually fix the
code).

 For example, a "gotcha" here is to forget to add a space when adding a
missing reserved word.  Consider a C++ fix-it hint that adds 'typename'
in front of a template declaration.  A naive way to implement this might
be:

     gcc_rich_location richloc (loc);
     // BAD: insertion is missing a trailing space
     richloc.add_fixit_insert_before ("typename");
     error_at (&richloc, "need %<typename%> before %<%T::%E%> because "
                          "%qT is a dependent scope",
                          parser->scope, id, parser->scope);

When applied to the code, this might lead to:

     T::type x;

being "corrected" to:

     typenameT::type x;

In this case, the correct thing to do is to add a trailing space after
'typename':

     gcc_rich_location richloc (loc);
     // OK: note that here we have a trailing space
     richloc.add_fixit_insert_before ("typename ");
     error_at (&richloc, "need %<typename%> before %<%T::%E%> because "
                          "%qT is a dependent scope",
                          parser->scope, id, parser->scope);

leading to this corrected code:

     typename T::type x;

28.1.12.2 Express deletion in terms of deletion, not replacement
----------------------------------------------------------------

It's best to express deletion suggestions in terms of deletion fix-it
hints, rather than replacement fix-it hints.  For example, consider
this:

         auto_diagnostic_group d;
         gcc_rich_location richloc (location_of (retval));
         tree name = DECL_NAME (arg);
         richloc.add_fixit_replace (IDENTIFIER_POINTER (name));
         warning_at (&richloc, OPT_Wredundant_move,
                     "redundant move in return statement");

which is intended to e.g. replace a 'std::move' with the underlying
value:

        return std::move (retval);
               ~~~~~~~~~~^~~~~~~~
               retval

where the change has been expressed as replacement, replacing with the
name of the declaration.  This works for simple cases, but consider this
case:

     #ifdef SOME_CONFIG_FLAG
     # define CONFIGURY_GLOBAL global_a
     #else
     # define CONFIGURY_GLOBAL global_b
     #endif

     int fn ()
     {
       return std::move (CONFIGURY_GLOBAL /* some comment */);
     }

The above implementation erroneously strips out the macro and the
comment in the fix-it hint:

        return std::move (CONFIGURY_GLOBAL /* some comment */);
               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
               global_a

and thus this resulting code:

        return global_a;

It's better to do deletions in terms of deletions; deleting the
'std::move (' and the trailing close-paren, leading to this:

        return std::move (CONFIGURY_GLOBAL /* some comment */);
               ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
               CONFIGURY_GLOBAL /* some comment */

and thus this result:

        return CONFIGURY_GLOBAL /* some comment */;

Unfortunately, the pertinent 'location_t' values are not always
available.

28.1.12.3 Multiple suggestions
------------------------------

In the rare cases where you need to suggest more than one mutually
exclusive solution to a problem, this can be done by emitting multiple
notes and calling 'rich_location::fixits_cannot_be_auto_applied' on each
note's 'rich_location'.  If this is called, then the fix-it hints in the
'rich_location' will be printed, but will not be added to generated
patches.

==============================================================================
File: gccint.info,  Node: |Guidelines_for_Options|,  Prev: |Guidelines_for_Diagnostics|,  Up: |User_Experience_Guidelines|
==============================================================================

                                                        *Guidelines_for_Options*

28.2 Guidelines for Options
---------------------------

==============================================================================
File: gccint.info,  Node: |Funding|,  Next: |GNU_Project|,  Prev: |User_Experience_Guidelines|,  Up: |Top|
==============================================================================

                                                                       *Funding*

Funding Free Software
=====================

If you want to have more free software a few years from now, it makes
sense for you to help encourage people to contribute funds for its
development.  The most effective approach known is to encourage
commercial redistributors to donate.

 Users of free software systems can boost the pace of development by
encouraging for-a-fee distributors to donate part of their selling price
to free software developers--the Free Software Foundation, and others.

 The way to convince distributors to do this is to demand it and expect
it from them.  So when you compare distributors, judge them partly by
how much they give to free software development.  Show distributors they
must compete to be the one who gives the most.

 To make this approach work, you must insist on numbers that you can
compare, such as, "We will donate ten dollars to the Frobnitz project
for each disk sold."  Don't be satisfied with a vague promise, such as
"A portion of the profits are donated," since it doesn't give a basis
for comparison.

 Even a precise fraction "of the profits from this disk" is not very
meaningful, since creative accounting and unrelated business decisions
can greatly alter what fraction of the sales price counts as profit.  If
the price you pay is $50, ten percent of the profit is probably less
than a dollar; it might be a few cents, or nothing at all.

 Some redistributors do development work themselves.  This is useful
too; but to keep everyone honest, you need to inquire how much they do,
and what kind.  Some kinds of development make much more long-term
difference than others.  For example, maintaining a separate version of
a program contributes very little; maintaining the standard version of a
program for the whole community contributes much.  Easy new ports
contribute little, since someone else would surely do them; difficult
ports such as adding a new CPU to the GNU Compiler Collection contribute
more; major new features or packages contribute the most.

 By establishing the idea that supporting further development is "the
proper thing to do" when distributing free software for a fee, we can
assure a steady flow of resources into making more free software.

     Copyright (C) 1994 Free Software Foundation, Inc.
     Verbatim copying and redistribution of this section is permitted
     without royalty; alteration is not permitted.

==============================================================================
File: gccint.info,  Node: |GNU_Project|,  Next: |Copying|,  Prev: |Funding|,  Up: |Top|
==============================================================================

                                                                   *GNU_Project*

The GNU Project and GNU/Linux
=============================

The GNU Project was launched in 1984 to develop a complete Unix-like
operating system which is free software: the GNU system.  (GNU is a
recursive acronym for "GNU's Not Unix"; it is pronounced "guh-NEW".)
Variants of the GNU operating system, which use the kernel Linux, are
now widely used; though these systems are often referred to as "Linux",
they are more accurately called GNU/Linux systems.

 For more information, see:
     <http://www.gnu.org/>
     <http://www.gnu.org/gnu/linux-and-gnu.html>

==============================================================================
File: gccint.info,  Node: |Copying|,  Next: |GNU_Free_Documentation_License|,  Prev: |GNU_Project|,  Up: |Top|
==============================================================================

                                                                       *Copying*

GNU General Public License
==========================

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
--------

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

 The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program-to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

 When we speak of free software, we are referring to freedom, not price.
Our General Public Licenses are designed to make sure that you have the
freedom to distribute copies of free software (and charge for them if
you wish), that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs, and that you know you can do these things.

 To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

 For example, if you distribute copies of such a program, whether gratis
or for a fee, you must pass on to the recipients the same freedoms that
you received.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

 Developers that use the GNU GPL protect your rights with two steps: (1)
assert copyright on the software, and (2) offer you this License giving
you legal permission to copy, distribute and/or modify it.

 For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

 Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

 Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

 The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
--------------------

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
---------------------------

How to Apply These Terms to Your New Programs
---------------------------------------------

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

 To do so, attach the following notices to the program.  It is safest to
attach them to the start of each source file to most effectively state
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Also add information on how to contact you by electronic and paper
mail.

 If the program does terminal interaction, make it output a short notice
like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

 The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

 You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

 The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/licenses/why-not-lgpl.html>.

==============================================================================
File: gccint.info,  Node: |GNU_Free_Documentation_License|,  Next: |Contributors|,  Prev: |Copying|,  Up: |Top|
==============================================================================

                                                *GNU_Free_Documentation_License*

GNU Free Documentation License
==============================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

 If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

 If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

 If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

==============================================================================
File: gccint.info,  Node: |Contributors|,  Next: |Option_Index|,  Prev: |GNU_Free_Documentation_License|,  Up: |Top|
==============================================================================

                                                                  *Contributors*

Contributors to GCC
===================

The GCC project would like to thank its many contributors.  Without them
the project would not have been nearly as successful as it has been.
Any omissions in this list are accidental.  Feel free to contact
<law@redhat.com> or <gerald@pfeifer.com> if you have been left out or
some of your contributions are not listed.  Please keep this list in
alphabetical order.

   * Analog Devices helped implement the support for complex data types
     and iterators.

   * John David Anglin for threading-related fixes and improvements to
     libstdc++-v3, and the HP-UX port.

   * James van Artsdalen wrote the code that makes efficient use of the
     Intel 80387 register stack.

   * Abramo and Roberto Bagnara for the SysV68 Motorola 3300 Delta
     Series port.

   * Alasdair Baird for various bug fixes.

   * Giovanni Bajo for analyzing lots of complicated C++ problem
     reports.

   * Peter Barada for his work to improve code generation for new
     ColdFire cores.

   * Gerald Baumgartner added the signature extension to the C++ front
     end.

   * Godmar Back for his Java improvements and encouragement.

   * Scott Bambrough for help porting the Java compiler.

   * Wolfgang Bangerth for processing tons of bug reports.

   * Jon Beniston for his Microsoft Windows port of Java and port to
     Lattice Mico32.

   * Daniel Berlin for better DWARF 2 support, faster/better
     optimizations, improved alias analysis, plus migrating GCC to
     Bugzilla.

   * Geoff Berry for his Java object serialization work and various
     patches.

   * David Binderman tests weekly snapshots of GCC trunk against Fedora
     Rawhide for several architectures.

   * Laurynas Biveinis for memory management work and DJGPP port fixes.

   * Uros Bizjak for the implementation of x87 math built-in functions
     and for various middle end and i386 back end improvements and bug
     fixes.

   * Eric Blake for helping to make GCJ and libgcj conform to the
     specifications.

   * Janne Blomqvist for contributions to GNU Fortran.

   * Hans-J. Boehm for his garbage collector, IA-64 libffi port, and
     other Java work.

   * Segher Boessenkool for helping maintain the PowerPC port and the
     instruction combiner plus various contributions to the middle end.

   * Neil Booth for work on cpplib, lang hooks, debug hooks and other
     miscellaneous clean-ups.

   * Steven Bosscher for integrating the GNU Fortran front end into GCC
     and for contributing to the tree-ssa branch.

   * Eric Botcazou for fixing middle- and backend bugs left and right.

   * Per Bothner for his direction via the steering committee and
     various improvements to the infrastructure for supporting new
     languages.  Chill front end implementation.  Initial
     implementations of cpplib, fix-header, config.guess, libio, and
     past C++ library (libg++) maintainer.  Dreaming up, designing and
     implementing much of GCJ.

   * Devon Bowen helped port GCC to the Tahoe.

   * Don Bowman for mips-vxworks contributions.

   * James Bowman for the FT32 port.

   * Dave Brolley for work on cpplib and Chill.

   * Paul Brook for work on the ARM architecture and maintaining GNU
     Fortran.

   * Robert Brown implemented the support for Encore 32000 systems.

   * Christian Bruel for improvements to local store elimination.

   * Herman A.J. ten Brugge for various fixes.

   * Joerg Brunsmann for Java compiler hacking and help with the GCJ
     FAQ.

   * Joe Buck for his direction via the steering committee from its
     creation to 2013.

   * Iain Buclaw for the D frontend.

   * Craig Burley for leadership of the G77 Fortran effort.

   * Tobias Burnus for contributions to GNU Fortran.

   * Stephan Buys for contributing Doxygen notes for libstdc++.

   * Paolo Carlini for libstdc++ work: lots of efficiency improvements
     to the C++ strings, streambufs and formatted I/O, hard detective
     work on the frustrating localization issues, and keeping up with
     the problem reports.

   * John Carr for his alias work, SPARC hacking, infrastructure
     improvements, previous contributions to the steering committee,
     loop optimizations, etc.

   * Stephane Carrez for 68HC11 and 68HC12 ports.

   * Steve Chamberlain for support for the Renesas SH and H8 processors
     and the PicoJava processor, and for GCJ config fixes.

   * Glenn Chambers for help with the GCJ FAQ.

   * John-Marc Chandonia for various libgcj patches.

   * Denis Chertykov for contributing and maintaining the AVR port, the
     first GCC port for an 8-bit architecture.

   * Kito Cheng for his work on the RISC-V port, including bringing up
     the test suite and maintenance.

   * Scott Christley for his Objective-C contributions.

   * Eric Christopher for his Java porting help and clean-ups.

   * Branko Cibej for more warning contributions.

   * The GNU Classpath project for all of their merged runtime code.

   * Nick Clifton for arm, mcore, fr30, v850, m32r, msp430 rx work,
     '--help', and other random hacking.

   * Michael Cook for libstdc++ cleanup patches to reduce warnings.

   * R. Kelley Cook for making GCC buildable from a read-only directory
     as well as other miscellaneous build process and documentation
     clean-ups.

   * Ralf Corsepius for SH testing and minor bug fixing.

   * Franc,ois-Xavier Coudert for contributions to GNU Fortran.

   * Stan Cox for care and feeding of the x86 port and lots of behind
     the scenes hacking.

   * Alex Crain provided changes for the 3b1.

   * Ian Dall for major improvements to the NS32k port.

   * Paul Dale for his work to add uClinux platform support to the m68k
     backend.

   * Palmer Dabbelt for his work maintaining the RISC-V port.

   * Dario Dariol contributed the four varieties of sample programs that
     print a copy of their source.

   * Russell Davidson for fstream and stringstream fixes in libstdc++.

   * Bud Davis for work on the G77 and GNU Fortran compilers.

   * Mo DeJong for GCJ and libgcj bug fixes.

   * Jerry DeLisle for contributions to GNU Fortran.

   * DJ Delorie for the DJGPP port, build and libiberty maintenance,
     various bug fixes, and the M32C, MeP, MSP430, and RL78 ports.

   * Arnaud Desitter for helping to debug GNU Fortran.

   * Gabriel Dos Reis for contributions to G++, contributions and
     maintenance of GCC diagnostics infrastructure, libstdc++-v3,
     including 'valarray<>', 'complex<>', maintaining the numerics
     library (including that pesky '<limits>' :-) and keeping up-to-date
     anything to do with numbers.

   * Ulrich Drepper for his work on glibc, testing of GCC using glibc,
     ISO C99 support, CFG dumping support, etc., plus support of the C++
     runtime libraries including for all kinds of C interface issues,
     contributing and maintaining 'complex<>', sanity checking and
     disbursement, configuration architecture, libio maintenance, and
     early math work.

   * Franc,ois Dumont for his work on libstdc++-v3, especially
     maintaining and improving 'debug-mode' and associative and
     unordered containers.

   * Zdenek Dvorak for a new loop unroller and various fixes.

   * Michael Eager for his work on the Xilinx MicroBlaze port.

   * Richard Earnshaw for his ongoing work with the ARM.

   * David Edelsohn for his direction via the steering committee,
     ongoing work with the RS6000/PowerPC port, help cleaning up Haifa
     loop changes, doing the entire AIX port of libstdc++ with his bare
     hands, and for ensuring GCC properly keeps working on AIX.

   * Kevin Ediger for the floating point formatting of num_put::do_put
     in libstdc++.

   * Phil Edwards for libstdc++ work including configuration hackery,
     documentation maintainer, chief breaker of the web pages, the
     occasional iostream bug fix, and work on shared library symbol
     versioning.

   * Paul Eggert for random hacking all over GCC.

   * Mark Elbrecht for various DJGPP improvements, and for libstdc++
     configuration support for locales and fstream-related fixes.

   * Vadim Egorov for libstdc++ fixes in strings, streambufs, and
     iostreams.

   * Christian Ehrhardt for dealing with bug reports.

   * Ben Elliston for his work to move the Objective-C runtime into its
     own subdirectory and for his work on autoconf.

   * Revital Eres for work on the PowerPC 750CL port.

   * Marc Espie for OpenBSD support.

   * Doug Evans for much of the global optimization framework, arc,
     m32r, and SPARC work.

   * Christopher Faylor for his work on the Cygwin port and for caring
     and feeding the gcc.gnu.org box and saving its users tons of spam.

   * Fred Fish for BeOS support and Ada fixes.

   * Ivan Fontes Garcia for the Portuguese translation of the GCJ FAQ.

   * Peter Gerwinski for various bug fixes and the Pascal front end.

   * Kaveh R. Ghazi for his direction via the steering committee,
     amazing work to make '-W -Wall -W* -Werror' useful, and testing GCC
     on a plethora of platforms.  Kaveh extends his gratitude to the
     CAIP Center at Rutgers University for providing him with computing
     resources to work on Free Software from the late 1980s to 2010.

   * John Gilmore for a donation to the FSF earmarked improving GNU
     Java.

   * Judy Goldberg for c++ contributions.

   * Torbjorn Granlund for various fixes and the c-torture testsuite,
     multiply- and divide-by-constant optimization, improved long long
     support, improved leaf function register allocation, and his
     direction via the steering committee.

   * Jonny Grant for improvements to 'collect2's' '--help'
     documentation.

   * Anthony Green for his '-Os' contributions, the moxie port, and Java
     front end work.

   * Stu Grossman for gdb hacking, allowing GCJ developers to debug Java
     code.

   * Michael K. Gschwind contributed the port to the PDP-11.

   * Richard Biener for his ongoing middle-end contributions and bug
     fixes and for release management.

   * Ron Guilmette implemented the 'protoize' and 'unprotoize' tools,
     the support for DWARF 1 symbolic debugging information, and much of
     the support for System V Release 4.  He has also worked heavily on
     the Intel 386 and 860 support.

   * Sumanth Gundapaneni for contributing the CR16 port.

   * Mostafa Hagog for Swing Modulo Scheduling (SMS) and post reload
     GCSE.

   * Bruno Haible for improvements in the runtime overhead for EH, new
     warnings and assorted bug fixes.

   * Andrew Haley for his amazing Java compiler and library efforts.

   * Chris Hanson assisted in making GCC work on HP-UX for the 9000
     series 300.

   * Michael Hayes for various thankless work he's done trying to get
     the c30/c40 ports functional.  Lots of loop and unroll improvements
     and fixes.

   * Dara Hazeghi for wading through myriads of target-specific bug
     reports.

   * Kate Hedstrom for staking the G77 folks with an initial testsuite.

   * Richard Henderson for his ongoing SPARC, alpha, ia32, and ia64
     work, loop opts, and generally fixing lots of old problems we've
     ignored for years, flow rewrite and lots of further stuff,
     including reviewing tons of patches.

   * Aldy Hernandez for working on the PowerPC port, SIMD support, and
     various fixes.

   * Nobuyuki Hikichi of Software Research Associates, Tokyo,
     contributed the support for the Sony NEWS machine.

   * Kazu Hirata for caring and feeding the Renesas H8/300 port and
     various fixes.

   * Katherine Holcomb for work on GNU Fortran.

   * Manfred Hollstein for his ongoing work to keep the m88k alive, lots
     of testing and bug fixing, particularly of GCC configury code.

   * Steve Holmgren for MachTen patches.

   * Mat Hostetter for work on the TILE-Gx and TILEPro ports.

   * Jan Hubicka for his x86 port improvements.

   * Falk Hueffner for working on C and optimization bug reports.

   * Bernardo Innocenti for his m68k work, including merging of ColdFire
     improvements and uClinux support.

   * Christian Iseli for various bug fixes.

   * Kamil Iskra for general m68k hacking.

   * Lee Iverson for random fixes and MIPS testing.

   * Balaji V. Iyer for Cilk+ development and merging.

   * Andreas Jaeger for testing and benchmarking of GCC and various bug
     fixes.

   * Martin Jambor for his work on inter-procedural optimizations, the
     switch conversion pass, and scalar replacement of aggregates.

   * Jakub Jelinek for his SPARC work and sibling call optimizations as
     well as lots of bug fixes and test cases, and for improving the
     Java build system.

   * Janis Johnson for ia64 testing and fixes, her quality improvement
     sidetracks, and web page maintenance.

   * Kean Johnston for SCO OpenServer support and various fixes.

   * Tim Josling for the sample language treelang based originally on
     Richard Kenner's "toy" language.

   * Nicolai Josuttis for additional libstdc++ documentation.

   * Klaus Kaempf for his ongoing work to make alpha-vms a viable
     target.

   * Steven G. Kargl for work on GNU Fortran.

   * David Kashtan of SRI adapted GCC to VMS.

   * Ryszard Kabatek for many, many libstdc++ bug fixes and
     optimizations of strings, especially member functions, and for
     auto_ptr fixes.

   * Geoffrey Keating for his ongoing work to make the PPC work for
     GNU/Linux and his automatic regression tester.

   * Brendan Kehoe for his ongoing work with G++ and for a lot of early
     work in just about every part of libstdc++.

   * Oliver M. Kellogg of Deutsche Aerospace contributed the port to the
     MIL-STD-1750A.

   * Richard Kenner of the New York University Ultracomputer Research
     Laboratory wrote the machine descriptions for the AMD 29000, the
     DEC Alpha, the IBM RT PC, and the IBM RS/6000 as well as the
     support for instruction attributes.  He also made changes to better
     support RISC processors including changes to common subexpression
     elimination, strength reduction, function calling sequence
     handling, and condition code support, in addition to generalizing
     the code for frame pointer elimination and delay slot scheduling.
     Richard Kenner was also the head maintainer of GCC for several
     years.

   * Mumit Khan for various contributions to the Cygwin and Mingw32
     ports and maintaining binary releases for Microsoft Windows hosts,
     and for massive libstdc++ porting work to Cygwin/Mingw32.

   * Robin Kirkham for cpu32 support.

   * Mark Klein for PA improvements.

   * Thomas Koenig for various bug fixes.

   * Bruce Korb for the new and improved fixincludes code.

   * Benjamin Kosnik for his G++ work and for leading the libstdc++-v3
     effort.

   * Maxim Kuvyrkov for contributions to the instruction scheduler, the
     Android and m68k/Coldfire ports, and optimizations.

   * Charles LaBrec contributed the support for the Integrated Solutions
     68020 system.

   * Asher Langton and Mike Kumbera for contributing Cray pointer
     support to GNU Fortran, and for other GNU Fortran improvements.

   * Jeff Law for his direction via the steering committee, coordinating
     the entire egcs project and GCC 2.95, rolling out snapshots and
     releases, handling merges from GCC2, reviewing tons of patches that
     might have fallen through the cracks else, and random but extensive
     hacking.

   * Walter Lee for work on the TILE-Gx and TILEPro ports.

   * Marc Lehmann for his direction via the steering committee and
     helping with analysis and improvements of x86 performance.

   * Victor Leikehman for work on GNU Fortran.

   * Ted Lemon wrote parts of the RTL reader and printer.

   * Kriang Lerdsuwanakij for C++ improvements including template as
     template parameter support, and many C++ fixes.

   * Warren Levy for tremendous work on libgcj (Java Runtime Library)
     and random work on the Java front end.

   * Alain Lichnewsky ported GCC to the MIPS CPU.

   * Oskar Liljeblad for hacking on AWT and his many Java bug reports
     and patches.

   * Robert Lipe for OpenServer support, new testsuites, testing, etc.

   * Chen Liqin for various S+core related fixes/improvement, and for
     maintaining the S+core port.

   * Martin Liska for his work on identical code folding, the
     sanitizers, HSA, general bug fixing and for running automated
     regression testing of GCC and reporting numerous bugs.

   * Weiwen Liu for testing and various bug fixes.

   * Manuel L??pez-Ib??n~ez for improving '-Wconversion' and many other
     diagnostics fixes and improvements.

   * Dave Love for his ongoing work with the Fortran front end and
     runtime libraries.

   * Martin von Lo"wis for internal consistency checking infrastructure,
     various C++ improvements including namespace support, and tons of
     assistance with libstdc++/compiler merges.

   * H.J. Lu for his previous contributions to the steering committee,
     many x86 bug reports, prototype patches, and keeping the GNU/Linux
     ports working.

   * Greg McGary for random fixes and (someday) bounded pointers.

   * Andrew MacLeod for his ongoing work in building a real EH system,
     various code generation improvements, work on the global optimizer,
     etc.

   * Vladimir Makarov for hacking some ugly i960 problems, PowerPC
     hacking improvements to compile-time performance, overall knowledge
     and direction in the area of instruction scheduling, design and
     implementation of the automaton based instruction scheduler and
     design and implementation of the integrated and local register
     allocators.

   * David Malcolm for his work on improving GCC diagnostics, JIT,
     self-tests and unit testing.

   * Bob Manson for his behind the scenes work on dejagnu.

   * John Marino for contributing the DragonFly BSD port.

   * Philip Martin for lots of libstdc++ string and vector iterator
     fixes and improvements, and string clean up and testsuites.

   * Michael Matz for his work on dominance tree discovery, the x86-64
     port, link-time optimization framework and general optimization
     improvements.

   * All of the Mauve project contributors for Java test code.

   * Bryce McKinlay for numerous GCJ and libgcj fixes and improvements.

   * Adam Megacz for his work on the Microsoft Windows port of GCJ.

   * Michael Meissner for LRS framework, ia32, m32r, v850, m88k, MIPS,
     powerpc, haifa, ECOFF debug support, and other assorted hacking.

   * Jason Merrill for his direction via the steering committee and
     leading the G++ effort.

   * Martin Michlmayr for testing GCC on several architectures using the
     entire Debian archive.

   * David Miller for his direction via the steering committee, lots of
     SPARC work, improvements in jump.c and interfacing with the Linux
     kernel developers.

   * Gary Miller ported GCC to Charles River Data Systems machines.

   * Alfred Minarik for libstdc++ string and ios bug fixes, and turning
     the entire libstdc++ testsuite namespace-compatible.

   * Mark Mitchell for his direction via the steering committee,
     mountains of C++ work, load/store hoisting out of loops, alias
     analysis improvements, ISO C 'restrict' support, and serving as
     release manager from 2000 to 2011.

   * Alan Modra for various GNU/Linux bits and testing.

   * Toon Moene for his direction via the steering committee, Fortran
     maintenance, and his ongoing work to make us make Fortran run fast.

   * Jason Molenda for major help in the care and feeding of all the
     services on the gcc.gnu.org (formerly egcs.cygnus.com)
     machine--mail, web services, ftp services, etc etc.  Doing all this
     work on scrap paper and the backs of envelopes would have been...
     difficult.

   * Catherine Moore for fixing various ugly problems we have sent her
     way, including the haifa bug which was killing the Alpha & PowerPC
     Linux kernels.

   * Mike Moreton for his various Java patches.

   * David Mosberger-Tang for various Alpha improvements, and for the
     initial IA-64 port.

   * Stephen Moshier contributed the floating point emulator that
     assists in cross-compilation and permits support for floating point
     numbers wider than 64 bits and for ISO C99 support.

   * Bill Moyer for his behind the scenes work on various issues.

   * Philippe De Muyter for his work on the m68k port.

   * Joseph S. Myers for his work on the PDP-11 port, format checking
     and ISO C99 support, and continuous emphasis on (and contributions
     to) documentation.

   * Nathan Myers for his work on libstdc++-v3: architecture and
     authorship through the first three snapshots, including
     implementation of locale infrastructure, string, shadow C headers,
     and the initial project documentation (DESIGN, CHECKLIST, and so
     forth).  Later, more work on MT-safe string and shadow headers.

   * Felix Natter for documentation on porting libstdc++.

   * Nathanael Nerode for cleaning up the configuration/build process.

   * NeXT, Inc. donated the front end that supports the Objective-C
     language.

   * Hans-Peter Nilsson for the CRIS and MMIX ports, improvements to the
     search engine setup, various documentation fixes and other small
     fixes.

   * Geoff Noer for his work on getting cygwin native builds working.

   * Vegard Nossum for running automated regression testing of GCC and
     reporting numerous bugs.

   * Diego Novillo for his work on Tree SSA, OpenMP, SPEC performance
     tracking web pages, GIMPLE tuples, and assorted fixes.

   * David O'Brien for the FreeBSD/alpha, FreeBSD/AMD x86-64,
     FreeBSD/ARM, FreeBSD/PowerPC, and FreeBSD/SPARC64 ports and related
     infrastructure improvements.

   * Alexandre Oliva for various build infrastructure improvements,
     scripts and amazing testing work, including keeping libtool issues
     sane and happy.

   * Stefan Olsson for work on mt_alloc.

   * Melissa O'Neill for various NeXT fixes.

   * Rainer Orth for random MIPS work, including improvements to GCC's
     o32 ABI support, improvements to dejagnu's MIPS support, Java
     configuration clean-ups and porting work, and maintaining the IRIX,
     Solaris 2, and Tru64 UNIX ports.

   * Steven Pemberton for his contribution of 'enquire' which allowed
     GCC to determine various properties of the floating point unit and
     generate 'float.h' in older versions of GCC.

   * Hartmut Penner for work on the s390 port.

   * Paul Petersen wrote the machine description for the Alliant FX/8.

   * Alexandre Petit-Bianco for implementing much of the Java compiler
     and continued Java maintainership.

   * Matthias Pfaller for major improvements to the NS32k port.

   * Gerald Pfeifer for his direction via the steering committee,
     pointing out lots of problems we need to solve, maintenance of the
     web pages, and taking care of documentation maintenance in general.

   * Marek Polacek for his work on the C front end, the sanitizers and
     general bug fixing.

   * Andrew Pinski for processing bug reports by the dozen.

   * Ovidiu Predescu for his work on the Objective-C front end and
     runtime libraries.

   * Jerry Quinn for major performance improvements in C++ formatted
     I/O.

   * Ken Raeburn for various improvements to checker, MIPS ports and
     various cleanups in the compiler.

   * Rolf W. Rasmussen for hacking on AWT.

   * David Reese of Sun Microsystems contributed to the Solaris on
     PowerPC port.

   * John Regehr for running automated regression testing of GCC and
     reporting numerous bugs.

   * Volker Reichelt for running automated regression testing of GCC and
     reporting numerous bugs and for keeping up with the problem
     reports.

   * Joern Rennecke for maintaining the sh port, loop, regmove & reload
     hacking and developing and maintaining the Epiphany port.

   * Loren J. Rittle for improvements to libstdc++-v3 including the
     FreeBSD port, threading fixes, thread-related configury changes,
     critical threading documentation, and solutions to really tricky
     I/O problems, as well as keeping GCC properly working on FreeBSD
     and continuous testing.

   * Craig Rodrigues for processing tons of bug reports.

   * Ola Ro"nnerup for work on mt_alloc.

   * Gavin Romig-Koch for lots of behind the scenes MIPS work.

   * David Ronis inspired and encouraged Craig to rewrite the G77
     documentation in texinfo format by contributing a first pass at a
     translation of the old 'g77-0.5.16/f/DOC' file.

   * Ken Rose for fixes to GCC's delay slot filling code.

   * Ira Rosen for her contributions to the auto-vectorizer.

   * Paul Rubin wrote most of the preprocessor.

   * Pe'tur Run??lfsson for major performance improvements in C++
     formatted I/O and large file support in C++ filebuf.

   * Chip Salzenberg for libstdc++ patches and improvements to locales,
     traits, Makefiles, libio, libtool hackery, and "long long" support.

   * Juha Sarlin for improvements to the H8 code generator.

   * Greg Satz assisted in making GCC work on HP-UX for the 9000 series
     300.

   * Roger Sayle for improvements to constant folding and GCC's RTL
     optimizers as well as for fixing numerous bugs.

   * Bradley Schatz for his work on the GCJ FAQ.

   * Peter Schauer wrote the code to allow debugging to work on the
     Alpha.

   * William Schelter did most of the work on the Intel 80386 support.

   * Tobias Schlu"ter for work on GNU Fortran.

   * Bernd Schmidt for various code generation improvements and major
     work in the reload pass, serving as release manager for GCC 2.95.3,
     and work on the Blackfin and C6X ports.

   * Peter Schmid for constant testing of libstdc++--especially
     application testing, going above and beyond what was requested for
     the release criteria--and libstdc++ header file tweaks.

   * Jason Schroeder for jcf-dump patches.

   * Andreas Schwab for his work on the m68k port.

   * Lars Segerlund for work on GNU Fortran.

   * Dodji Seketeli for numerous C++ bug fixes and debug info
     improvements.

   * Tim Shen for major work on '<regex>'.

   * Joel Sherrill for his direction via the steering committee, RTEMS
     contributions and RTEMS testing.

   * Nathan Sidwell for many C++ fixes/improvements.

   * Jeffrey Siegal for helping RMS with the original design of GCC,
     some code which handles the parse tree and RTL data structures,
     constant folding and help with the original VAX & m68k ports.

   * Kenny Simpson for prompting libstdc++ fixes due to defect reports
     from the LWG (thereby keeping GCC in line with updates from the
     ISO).

   * Franz Sirl for his ongoing work with making the PPC port stable for
     GNU/Linux.

   * Andrey Slepuhin for assorted AIX hacking.

   * Trevor Smigiel for contributing the SPU port.

   * Christopher Smith did the port for Convex machines.

   * Danny Smith for his major efforts on the Mingw (and Cygwin) ports.
     Retired from GCC maintainership August 2010, having mentored two
     new maintainers into the role.

   * Randy Smith finished the Sun FPA support.

   * Ed Smith-Rowland for his continuous work on libstdc++-v3, special
     functions, '<random>', and various improvements to C++11 features.

   * Scott Snyder for queue, iterator, istream, and string fixes and
     libstdc++ testsuite entries.  Also for providing the patch to G77
     to add rudimentary support for 'INTEGER*1', 'INTEGER*2', and
     'LOGICAL*1'.

   * Zdenek Sojka for running automated regression testing of GCC and
     reporting numerous bugs.

   * Arseny Solokha for running automated regression testing of GCC and
     reporting numerous bugs.

   * Jayant Sonar for contributing the CR16 port.

   * Brad Spencer for contributions to the GLIBCPP_FORCE_NEW technique.

   * Richard Stallman, for writing the original GCC and launching the
     GNU project.

   * Jan Stein of the Chalmers Computer Society provided support for
     Genix, as well as part of the 32000 machine description.

   * Gerhard Steinmetz for running automated regression testing of GCC
     and reporting numerous bugs.

   * Nigel Stephens for various mips16 related fixes/improvements.

   * Jonathan Stone wrote the machine description for the Pyramid
     computer.

   * Graham Stott for various infrastructure improvements.

   * John Stracke for his Java HTTP protocol fixes.

   * Mike Stump for his Elxsi port, G++ contributions over the years and
     more recently his vxworks contributions

   * Jeff Sturm for Java porting help, bug fixes, and encouragement.

   * Zhendong Su for running automated regression testing of GCC and
     reporting numerous bugs.

   * Chengnian Sun for running automated regression testing of GCC and
     reporting numerous bugs.

   * Shigeya Suzuki for this fixes for the bsdi platforms.

   * Ian Lance Taylor for the Go frontend, the initial mips16 and mips64
     support, general configury hacking, fixincludes, etc.

   * Holger Teutsch provided the support for the Clipper CPU.

   * Gary Thomas for his ongoing work to make the PPC work for
     GNU/Linux.

   * Paul Thomas for contributions to GNU Fortran.

   * Philipp Thomas for random bug fixes throughout the compiler

   * Jason Thorpe for thread support in libstdc++ on NetBSD.

   * Kresten Krab Thorup wrote the run time support for the Objective-C
     language and the fantastic Java bytecode interpreter.

   * Michael Tiemann for random bug fixes, the first instruction
     scheduler, initial C++ support, function integration, NS32k, SPARC
     and M88k machine description work, delay slot scheduling.

   * Andreas Tobler for his work porting libgcj to Darwin.

   * Teemu Torma for thread safe exception handling support.

   * Leonard Tower wrote parts of the parser, RTL generator, and RTL
     definitions, and of the VAX machine description.

   * Daniel Towner and Hariharan Sandanagobalane contributed and
     maintain the picoChip port.

   * Tom Tromey for internationalization support and for his many Java
     contributions and libgcj maintainership.

   * Lassi Tuura for improvements to config.guess to determine HP
     processor types.

   * Petter Urkedal for libstdc++ CXXFLAGS, math, and algorithms fixes.

   * Andy Vaught for the design and initial implementation of the GNU
     Fortran front end.

   * Brent Verner for work with the libstdc++ cshadow files and their
     associated configure steps.

   * Todd Vierling for contributions for NetBSD ports.

   * Andrew Waterman for contributing the RISC-V port, as well as
     maintaining it.

   * Jonathan Wakely for contributing libstdc++ Doxygen notes and XHTML
     guidance and maintaining libstdc++.

   * Dean Wakerley for converting the install documentation from HTML to
     texinfo in time for GCC 3.0.

   * Krister Walfridsson for random bug fixes.

   * Feng Wang for contributions to GNU Fortran.

   * Stephen M. Webb for time and effort on making libstdc++ shadow
     files work with the tricky Solaris 8+ headers, and for pushing the
     build-time header tree.  Also, for starting and driving the
     '<regex>' effort.

   * John Wehle for various improvements for the x86 code generator,
     related infrastructure improvements to help x86 code generation,
     value range propagation and other work, WE32k port.

   * Ulrich Weigand for work on the s390 port.

   * Janus Weil for contributions to GNU Fortran.

   * Zack Weinberg for major work on cpplib and various other bug fixes.

   * Matt Welsh for help with Linux Threads support in GCJ.

   * Urban Widmark for help fixing java.io.

   * Mark Wielaard for new Java library code and his work integrating
     with Classpath.

   * Dale Wiles helped port GCC to the Tahoe.

   * Bob Wilson from Tensilica, Inc. for the Xtensa port.

   * Jim Wilson for his direction via the steering committee, tackling
     hard problems in various places that nobody else wanted to work on,
     strength reduction and other loop optimizations.

   * Paul Woegerer and Tal Agmon for the CRX port.

   * Carlo Wood for various fixes.

   * Tom Wood for work on the m88k port.

   * Chung-Ju Wu for his work on the Andes NDS32 port.

   * Canqun Yang for work on GNU Fortran.

   * Masanobu Yuhara of Fujitsu Laboratories implemented the machine
     description for the Tron architecture (specifically, the Gmicro).

   * Kevin Zachmann helped port GCC to the Tahoe.

   * Ayal Zaks for Swing Modulo Scheduling (SMS).

   * Qirun Zhang for running automated regression testing of GCC and
     reporting numerous bugs.

   * Xiaoqiang Zhang for work on GNU Fortran.

   * Gilles Zunino for help porting Java to Irix.

 The following people are recognized for their contributions to GNAT,
the Ada front end of GCC:
   * Bernard Banner

   * Romain Berrendonner

   * Geert Bosch

   * Emmanuel Briot

   * Joel Brobecker

   * Ben Brosgol

   * Vincent Celier

   * Arnaud Charlet

   * Chien Chieng

   * Cyrille Comar

   * Cyrille Crozes

   * Robert Dewar

   * Gary Dismukes

   * Robert Duff

   * Ed Falis

   * Ramon Fernandez

   * Sam Figueroa

   * Vasiliy Fofanov

   * Michael Friess

   * Franco Gasperoni

   * Ted Giering

   * Matthew Gingell

   * Laurent Guerby

   * Jerome Guitton

   * Olivier Hainque

   * Jerome Hugues

   * Hristian Kirtchev

   * Jerome Lambourg

   * Bruno Leclerc

   * Albert Lee

   * Sean McNeil

   * Javier Miranda

   * Laurent Nana

   * Pascal Obry

   * Dong-Ik Oh

   * Laurent Pautet

   * Brett Porter

   * Thomas Quinot

   * Nicolas Roche

   * Pat Rogers

   * Jose Ruiz

   * Douglas Rupp

   * Sergey Rybin

   * Gail Schenker

   * Ed Schonberg

   * Nicolas Setton

   * Samuel Tardieu

 The following people are recognized for their contributions of new
features, bug reports, testing and integration of classpath/libgcj for
GCC version 4.1:
   * Lillian Angel for 'JTree' implementation and lots Free Swing
     additions and bug fixes.

   * Wolfgang Baer for 'GapContent' bug fixes.

   * Anthony Balkissoon for 'JList', Free Swing 1.5 updates and mouse
     event fixes, lots of Free Swing work including 'JTable' editing.

   * Stuart Ballard for RMI constant fixes.

   * Goffredo Baroncelli for 'HTTPURLConnection' fixes.

   * Gary Benson for 'MessageFormat' fixes.

   * Daniel Bonniot for 'Serialization' fixes.

   * Chris Burdess for lots of gnu.xml and http protocol fixes, 'StAX'
     and 'DOM xml:id' support.

   * Ka-Hing Cheung for 'TreePath' and 'TreeSelection' fixes.

   * Archie Cobbs for build fixes, VM interface updates,
     'URLClassLoader' updates.

   * Kelley Cook for build fixes.

   * Martin Cordova for Suggestions for better 'SocketTimeoutException'.

   * David Daney for 'BitSet' bug fixes, 'HttpURLConnection' rewrite and
     improvements.

   * Thomas Fitzsimmons for lots of upgrades to the gtk+ AWT and Cairo
     2D support.  Lots of imageio framework additions, lots of AWT and
     Free Swing bug fixes.

   * Jeroen Frijters for 'ClassLoader' and nio cleanups, serialization
     fixes, better 'Proxy' support, bug fixes and IKVM integration.

   * Santiago Gala for 'AccessControlContext' fixes.

   * Nicolas Geoffray for 'VMClassLoader' and 'AccessController'
     improvements.

   * David Gilbert for 'basic' and 'metal' icon and plaf support and
     lots of documenting, Lots of Free Swing and metal theme additions.
     'MetalIconFactory' implementation.

   * Anthony Green for 'MIDI' framework, 'ALSA' and 'DSSI' providers.

   * Andrew Haley for 'Serialization' and 'URLClassLoader' fixes, gcj
     build speedups.

   * Kim Ho for 'JFileChooser' implementation.

   * Andrew John Hughes for 'Locale' and net fixes, URI RFC2986 updates,
     'Serialization' fixes, 'Properties' XML support and generic branch
     work, VMIntegration guide update.

   * Bastiaan Huisman for 'TimeZone' bug fixing.

   * Andreas Jaeger for mprec updates.

   * Paul Jenner for better '-Werror' support.

   * Ito Kazumitsu for 'NetworkInterface' implementation and updates.

   * Roman Kennke for 'BoxLayout', 'GrayFilter' and 'SplitPane', plus
     bug fixes all over.  Lots of Free Swing work including styled text.

   * Simon Kitching for 'String' cleanups and optimization suggestions.

   * Michael Koch for configuration fixes, 'Locale' updates, bug and
     build fixes.

   * Guilhem Lavaux for configuration, thread and channel fixes and
     Kaffe integration.  JCL native 'Pointer' updates.  Logger bug
     fixes.

   * David Lichteblau for JCL support library global/local reference
     cleanups.

   * Aaron Luchko for JDWP updates and documentation fixes.

   * Ziga Mahkovec for 'Graphics2D' upgraded to Cairo 0.5 and new regex
     features.

   * Sven de Marothy for BMP imageio support, CSS and 'TextLayout'
     fixes.  'GtkImage' rewrite, 2D, awt, free swing and date/time fixes
     and implementing the Qt4 peers.

   * Casey Marshall for crypto algorithm fixes, 'FileChannel' lock,
     'SystemLogger' and 'FileHandler' rotate implementations, NIO
     'FileChannel.map' support, security and policy updates.

   * Bryce McKinlay for RMI work.

   * Audrius Meskauskas for lots of Free Corba, RMI and HTML work plus
     testing and documenting.

   * Kalle Olavi Niemitalo for build fixes.

   * Rainer Orth for build fixes.

   * Andrew Overholt for 'File' locking fixes.

   * Ingo Proetel for 'Image', 'Logger' and 'URLClassLoader' updates.

   * Olga Rodimina for 'MenuSelectionManager' implementation.

   * Jan Roehrich for 'BasicTreeUI' and 'JTree' fixes.

   * Julian Scheid for documentation updates and gjdoc support.

   * Christian Schlichtherle for zip fixes and cleanups.

   * Robert Schuster for documentation updates and beans fixes,
     'TreeNode' enumerations and 'ActionCommand' and various fixes, XML
     and URL, AWT and Free Swing bug fixes.

   * Keith Seitz for lots of JDWP work.

   * Christian Thalinger for 64-bit cleanups, Configuration and VM
     interface fixes and 'CACAO' integration, 'fdlibm' updates.

   * Gael Thomas for 'VMClassLoader' boot packages support suggestions.

   * Andreas Tobler for Darwin and Solaris testing and fixing, 'Qt4'
     support for Darwin/OS X, 'Graphics2D' support, 'gtk+' updates.

   * Dalibor Topic for better 'DEBUG' support, build cleanups and Kaffe
     integration.  'Qt4' build infrastructure, 'SHA1PRNG' and
     'GdkPixbugDecoder' updates.

   * Tom Tromey for Eclipse integration, generics work, lots of bug
     fixes and gcj integration including coordinating The Big Merge.

   * Mark Wielaard for bug fixes, packaging and release management,
     'Clipboard' implementation, system call interrupts and network
     timeouts and 'GdkPixpufDecoder' fixes.

 In addition to the above, all of which also contributed time and energy
in testing GCC, we would like to thank the following for their
contributions to testing:

   * Michael Abd-El-Malek

   * Thomas Arend

   * Bonzo Armstrong

   * Steven Ashe

   * Chris Baldwin

   * David Billinghurst

   * Jim Blandy

   * Stephane Bortzmeyer

   * Horst von Brand

   * Frank Braun

   * Rodney Brown

   * Sidney Cadot

   * Bradford Castalia

   * Robert Clark

   * Jonathan Corbet

   * Ralph Doncaster

   * Richard Emberson

   * Levente Farkas

   * Graham Fawcett

   * Mark Fernyhough

   * Robert A. French

   * Jo"rgen Freyh

   * Mark K. Gardner

   * Charles-Antoine Gauthier

   * Yung Shing Gene

   * David Gilbert

   * Simon Gornall

   * Fred Gray

   * John Griffin

   * Patrik Hagglund

   * Phil Hargett

   * Amancio Hasty

   * Takafumi Hayashi

   * Bryan W. Headley

   * Kevin B. Hendricks

   * Joep Jansen

   * Christian Joensson

   * Michel Kern

   * David Kidd

   * Tobias Kuipers

   * Anand Krishnaswamy

   * A. O. V. Le Blanc

   * llewelly

   * Damon Love

   * Brad Lucier

   * Matthias Klose

   * Martin Knoblauch

   * Rick Lutowski

   * Jesse Macnish

   * Stefan Morrell

   * Anon A. Mous

   * Matthias Mueller

   * Pekka Nikander

   * Rick Niles

   * Jon Olson

   * Magnus Persson

   * Chris Pollard

   * Richard Polton

   * Derk Reefman

   * David Rees

   * Paul Reilly

   * Tom Reilly

   * Torsten Rueger

   * Danny Sadinoff

   * Marc Schifer

   * Erik Schnetter

   * Wayne K. Schroll

   * David Schuler

   * Vin Shelton

   * Tim Souder

   * Adam Sulmicki

   * Bill Thorson

   * George Talbot

   * Pedro A. M. Vazquez

   * Gregory Warnes

   * Ian Watson

   * David E. Young

   * And many others

 And finally we'd like to thank everyone who uses the compiler, provides
feedback and generally reminds us why we're doing this work in the first
place.

==============================================================================
File: gccint.info,  Node: |Option_Index|,  Next: |Concept_Index|,  Prev: |Contributors|,  Up: |Top|
==============================================================================

                                                                  *Option_Index*

Option Index
============

GCC's command line options are indexed here without any initial '-' or
'--'.  Where an option has both positive and negative forms (such as
'-fOPTION' and '-fno-OPTION'), relevant entries in the manual are
indexed under the most appropriate form; it may sometimes be useful to
look up both forms.


MENU

* fltrans:                               Internal flags.       (line 18)
* fltrans-output-list:                   Internal flags.       (line 23)
* fresolution:                           Internal flags.       (line 27)
* fwpa:                                  Internal flags.       (line  9)
* msoft-float:                           Soft float library routines.
                                                               (line  6)

==============================================================================
File: gccint.info,  Node: |Concept_Index|,  Prev: Option Index,  Up: Top
==============================================================================

                                                                 *Concept_Index*

Concept Index
=============


MENU

* ! in constraint:                       Multi-Alternative.  (line   48)
* # in constraint:                       Modifiers.          (line   78)
* # in template:                         Output Template.    (line   66)
* #pragma:                               Misc.               (line  420)
* $ in constraint:                       Multi-Alternative.  (line   57)
* % in constraint:                       Modifiers.          (line   52)
* % in GTY option:                       GTY Options.        (line   18)
* % in template:                         Output Template.    (line    6)
* & in constraint:                       Modifiers.          (line   25)
* (gimple:                               Logical Operators.  (line  169)
* (gimple <1>:                           Logical Operators.  (line  173)
* (gimple <2>:                           Logical Operators.  (line  177)
* (gimple_stmt_iterator:                 GIMPLE API.         (line   30)
* (nil):                                 RTL Objects.        (line   73)
* * in constraint:                       Modifiers.          (line   83)
* * in template:                         Output Statement.   (line   29)
* *gimple_build_asm_vec:                 GIMPLE_ASM.         (line    6)
* *gimple_build_assign:                  GIMPLE_ASSIGN.      (line    6)
* *gimple_build_assign <1>:              GIMPLE_ASSIGN.      (line   18)
* *gimple_build_assign <2>:              GIMPLE_ASSIGN.      (line   29)
* *gimple_build_assign <3>:              GIMPLE_ASSIGN.      (line   35)
* *gimple_build_bind:                    GIMPLE_BIND.        (line    6)
* *gimple_build_call:                    GIMPLE_CALL.        (line    6)
* *gimple_build_call_from_tree:          GIMPLE_CALL.        (line   15)
* *gimple_build_call_vec:                GIMPLE_CALL.        (line   25)
* *gimple_build_catch:                   GIMPLE_CATCH.       (line    6)
* *gimple_build_cond:                    GIMPLE_COND.        (line    6)
* *gimple_build_cond_from_tree:          GIMPLE_COND.        (line   14)
* *gimple_build_debug_bind:              GIMPLE_DEBUG.       (line    6)
* *gimple_build_eh_filter:               GIMPLE_EH_FILTER.   (line    6)
* *gimple_build_goto:                    GIMPLE_GOTO.        (line    6)
* *gimple_build_label:                   GIMPLE_LABEL.       (line    6)
* *gimple_build_omp_atomic_load:         GIMPLE_OMP_ATOMIC_LOAD.
                                                             (line    6)
* *gimple_build_omp_atomic_store:        GIMPLE_OMP_ATOMIC_STORE.
                                                             (line    6)
* *gimple_build_omp_continue:            GIMPLE_OMP_CONTINUE.
                                                             (line    6)
* *gimple_build_omp_critical:            GIMPLE_OMP_CRITICAL.
                                                             (line    6)
* *gimple_build_omp_for:                 GIMPLE_OMP_FOR.     (line    6)
* *gimple_build_omp_parallel:            GIMPLE_OMP_PARALLEL.
                                                             (line    6)
* *gimple_build_omp_sections:            GIMPLE_OMP_SECTIONS.
                                                             (line    6)
* *gimple_build_omp_single:              GIMPLE_OMP_SINGLE.  (line    6)
* *gimple_build_resx:                    GIMPLE_RESX.        (line    6)
* *gimple_build_return:                  GIMPLE_RETURN.      (line    6)
* *gimple_build_switch:                  GIMPLE_SWITCH.      (line    6)
* *gimple_build_try:                     GIMPLE_TRY.         (line    6)
* + in constraint:                       Modifiers.          (line   12)
* -fsection-anchors:                     Special Accessors.  (line  117)
* -fsection-anchors <1>:                 Anchored Addresses. (line    6)
* /c in RTL dump:                        Flags.              (line  230)
* /f in RTL dump:                        Flags.              (line  238)
* /i in RTL dump:                        Flags.              (line  283)
* /j in RTL dump:                        Flags.              (line  295)
* /s in RTL dump:                        Flags.              (line  254)
* /u in RTL dump:                        Flags.              (line  307)
* /v in RTL dump:                        Flags.              (line  339)
* 0 in constraint:                       Simple Constraints. (line  128)
* < in constraint:                       Simple Constraints. (line   47)
* = in constraint:                       Modifiers.          (line    8)
* > in constraint:                       Simple Constraints. (line   59)
* ? in constraint:                       Multi-Alternative.  (line   42)
* @ in instruction pattern names:        Parameterized Names.
                                                             (line    6)
* \:                                     Output Template.    (line   46)
* ^ in constraint:                       Multi-Alternative.  (line   53)
* __absvdi2:                             Integer library routines.
                                                             (line  106)
* __absvsi2:                             Integer library routines.
                                                             (line  105)
* __addda3:                              Fixed-point fractional library routines.
                                                             (line   52)
* __adddf3:                              Soft float library routines.
                                                             (line   22)
* __adddq3:                              Fixed-point fractional library routines.
                                                             (line   39)
* __addha3:                              Fixed-point fractional library routines.
                                                             (line   49)
* __addhq3:                              Fixed-point fractional library routines.
                                                             (line   37)
* __addqq3:                              Fixed-point fractional library routines.
                                                             (line   35)
* __addsa3:                              Fixed-point fractional library routines.
                                                             (line   51)
* __addsf3:                              Soft float library routines.
                                                             (line   21)
* __addsq3:                              Fixed-point fractional library routines.
                                                             (line   38)
* __addta3:                              Fixed-point fractional library routines.
                                                             (line   53)
* __addtf3:                              Soft float library routines.
                                                             (line   23)
* __adduda3:                             Fixed-point fractional library routines.
                                                             (line   59)
* __addudq3:                             Fixed-point fractional library routines.
                                                             (line   47)
* __adduha3:                             Fixed-point fractional library routines.
                                                             (line   55)
* __adduhq3:                             Fixed-point fractional library routines.
                                                             (line   43)
* __adduqq3:                             Fixed-point fractional library routines.
                                                             (line   41)
* __addusa3:                             Fixed-point fractional library routines.
                                                             (line   57)
* __addusq3:                             Fixed-point fractional library routines.
                                                             (line   45)
* __adduta3:                             Fixed-point fractional library routines.
                                                             (line   61)
* __addvdi3:                             Integer library routines.
                                                             (line  110)
* __addvsi3:                             Integer library routines.
                                                             (line  109)
* __addxf3:                              Soft float library routines.
                                                             (line   25)
* __ashlda3:                             Fixed-point fractional library routines.
                                                             (line  358)
* __ashldi3:                             Integer library routines.
                                                             (line   13)
* __ashldq3:                             Fixed-point fractional library routines.
                                                             (line  346)
* __ashlha3:                             Fixed-point fractional library routines.
                                                             (line  356)
* __ashlhq3:                             Fixed-point fractional library routines.
                                                             (line  344)
* __ashlqq3:                             Fixed-point fractional library routines.
                                                             (line  343)
* __ashlsa3:                             Fixed-point fractional library routines.
                                                             (line  357)
* __ashlsi3:                             Integer library routines.
                                                             (line   12)
* __ashlsq3:                             Fixed-point fractional library routines.
                                                             (line  345)
* __ashlta3:                             Fixed-point fractional library routines.
                                                             (line  359)
* __ashlti3:                             Integer library routines.
                                                             (line   14)
* __ashluda3:                            Fixed-point fractional library routines.
                                                             (line  365)
* __ashludq3:                            Fixed-point fractional library routines.
                                                             (line  354)
* __ashluha3:                            Fixed-point fractional library routines.
                                                             (line  361)
* __ashluhq3:                            Fixed-point fractional library routines.
                                                             (line  350)
* __ashluqq3:                            Fixed-point fractional library routines.
                                                             (line  348)
* __ashlusa3:                            Fixed-point fractional library routines.
                                                             (line  363)
* __ashlusq3:                            Fixed-point fractional library routines.
                                                             (line  352)
* __ashluta3:                            Fixed-point fractional library routines.
                                                             (line  367)
* __ashrda3:                             Fixed-point fractional library routines.
                                                             (line  378)
* __ashrdi3:                             Integer library routines.
                                                             (line   18)
* __ashrdq3:                             Fixed-point fractional library routines.
                                                             (line  374)
* __ashrha3:                             Fixed-point fractional library routines.
                                                             (line  376)
* __ashrhq3:                             Fixed-point fractional library routines.
                                                             (line  372)
* __ashrqq3:                             Fixed-point fractional library routines.
                                                             (line  371)
* __ashrsa3:                             Fixed-point fractional library routines.
                                                             (line  377)
* __ashrsi3:                             Integer library routines.
                                                             (line   17)
* __ashrsq3:                             Fixed-point fractional library routines.
                                                             (line  373)
* __ashrta3:                             Fixed-point fractional library routines.
                                                             (line  379)
* __ashrti3:                             Integer library routines.
                                                             (line   19)
* __bid_adddd3:                          Decimal float library routines.
                                                             (line   23)
* __bid_addsd3:                          Decimal float library routines.
                                                             (line   19)
* __bid_addtd3:                          Decimal float library routines.
                                                             (line   27)
* __bid_divdd3:                          Decimal float library routines.
                                                             (line   66)
* __bid_divsd3:                          Decimal float library routines.
                                                             (line   62)
* __bid_divtd3:                          Decimal float library routines.
                                                             (line   70)
* __bid_eqdd2:                           Decimal float library routines.
                                                             (line  258)
* __bid_eqsd2:                           Decimal float library routines.
                                                             (line  256)
* __bid_eqtd2:                           Decimal float library routines.
                                                             (line  260)
* __bid_extendddtd2:                     Decimal float library routines.
                                                             (line   91)
* __bid_extendddtf:                      Decimal float library routines.
                                                             (line  139)
* __bid_extendddxf:                      Decimal float library routines.
                                                             (line  133)
* __bid_extenddfdd:                      Decimal float library routines.
                                                             (line  146)
* __bid_extenddftd:                      Decimal float library routines.
                                                             (line  106)
* __bid_extendsddd2:                     Decimal float library routines.
                                                             (line   87)
* __bid_extendsddf:                      Decimal float library routines.
                                                             (line  127)
* __bid_extendsdtd2:                     Decimal float library routines.
                                                             (line   89)
* __bid_extendsdtf:                      Decimal float library routines.
                                                             (line  137)
* __bid_extendsdxf:                      Decimal float library routines.
                                                             (line  131)
* __bid_extendsfdd:                      Decimal float library routines.
                                                             (line  102)
* __bid_extendsfsd:                      Decimal float library routines.
                                                             (line  144)
* __bid_extendsftd:                      Decimal float library routines.
                                                             (line  104)
* __bid_extendtftd:                      Decimal float library routines.
                                                             (line  148)
* __bid_extendxftd:                      Decimal float library routines.
                                                             (line  108)
* __bid_fixdddi:                         Decimal float library routines.
                                                             (line  169)
* __bid_fixddsi:                         Decimal float library routines.
                                                             (line  161)
* __bid_fixsddi:                         Decimal float library routines.
                                                             (line  167)
* __bid_fixsdsi:                         Decimal float library routines.
                                                             (line  159)
* __bid_fixtddi:                         Decimal float library routines.
                                                             (line  171)
* __bid_fixtdsi:                         Decimal float library routines.
                                                             (line  163)
* __bid_fixunsdddi:                      Decimal float library routines.
                                                             (line  186)
* __bid_fixunsddsi:                      Decimal float library routines.
                                                             (line  177)
* __bid_fixunssddi:                      Decimal float library routines.
                                                             (line  184)
* __bid_fixunssdsi:                      Decimal float library routines.
                                                             (line  175)
* __bid_fixunstddi:                      Decimal float library routines.
                                                             (line  188)
* __bid_fixunstdsi:                      Decimal float library routines.
                                                             (line  179)
* __bid_floatdidd:                       Decimal float library routines.
                                                             (line  204)
* __bid_floatdisd:                       Decimal float library routines.
                                                             (line  202)
* __bid_floatditd:                       Decimal float library routines.
                                                             (line  206)
* __bid_floatsidd:                       Decimal float library routines.
                                                             (line  195)
* __bid_floatsisd:                       Decimal float library routines.
                                                             (line  193)
* __bid_floatsitd:                       Decimal float library routines.
                                                             (line  197)
* __bid_floatunsdidd:                    Decimal float library routines.
                                                             (line  222)
* __bid_floatunsdisd:                    Decimal float library routines.
                                                             (line  220)
* __bid_floatunsditd:                    Decimal float library routines.
                                                             (line  224)
* __bid_floatunssidd:                    Decimal float library routines.
                                                             (line  213)
* __bid_floatunssisd:                    Decimal float library routines.
                                                             (line  211)
* __bid_floatunssitd:                    Decimal float library routines.
                                                             (line  215)
* __bid_gedd2:                           Decimal float library routines.
                                                             (line  276)
* __bid_gesd2:                           Decimal float library routines.
                                                             (line  274)
* __bid_getd2:                           Decimal float library routines.
                                                             (line  278)
* __bid_gtdd2:                           Decimal float library routines.
                                                             (line  303)
* __bid_gtsd2:                           Decimal float library routines.
                                                             (line  301)
* __bid_gttd2:                           Decimal float library routines.
                                                             (line  305)
* __bid_ledd2:                           Decimal float library routines.
                                                             (line  294)
* __bid_lesd2:                           Decimal float library routines.
                                                             (line  292)
* __bid_letd2:                           Decimal float library routines.
                                                             (line  296)
* __bid_ltdd2:                           Decimal float library routines.
                                                             (line  285)
* __bid_ltsd2:                           Decimal float library routines.
                                                             (line  283)
* __bid_lttd2:                           Decimal float library routines.
                                                             (line  287)
* __bid_muldd3:                          Decimal float library routines.
                                                             (line   52)
* __bid_mulsd3:                          Decimal float library routines.
                                                             (line   48)
* __bid_multd3:                          Decimal float library routines.
                                                             (line   56)
* __bid_nedd2:                           Decimal float library routines.
                                                             (line  267)
* __bid_negdd2:                          Decimal float library routines.
                                                             (line   77)
* __bid_negsd2:                          Decimal float library routines.
                                                             (line   75)
* __bid_negtd2:                          Decimal float library routines.
                                                             (line   79)
* __bid_nesd2:                           Decimal float library routines.
                                                             (line  265)
* __bid_netd2:                           Decimal float library routines.
                                                             (line  269)
* __bid_subdd3:                          Decimal float library routines.
                                                             (line   37)
* __bid_subsd3:                          Decimal float library routines.
                                                             (line   33)
* __bid_subtd3:                          Decimal float library routines.
                                                             (line   41)
* __bid_truncdddf:                       Decimal float library routines.
                                                             (line  152)
* __bid_truncddsd2:                      Decimal float library routines.
                                                             (line   93)
* __bid_truncddsf:                       Decimal float library routines.
                                                             (line  123)
* __bid_truncdfsd:                       Decimal float library routines.
                                                             (line  110)
* __bid_truncsdsf:                       Decimal float library routines.
                                                             (line  150)
* __bid_trunctddd2:                      Decimal float library routines.
                                                             (line   97)
* __bid_trunctddf:                       Decimal float library routines.
                                                             (line  129)
* __bid_trunctdsd2:                      Decimal float library routines.
                                                             (line   95)
* __bid_trunctdsf:                       Decimal float library routines.
                                                             (line  125)
* __bid_trunctdtf:                       Decimal float library routines.
                                                             (line  154)
* __bid_trunctdxf:                       Decimal float library routines.
                                                             (line  135)
* __bid_trunctfdd:                       Decimal float library routines.
                                                             (line  118)
* __bid_trunctfsd:                       Decimal float library routines.
                                                             (line  114)
* __bid_truncxfdd:                       Decimal float library routines.
                                                             (line  116)
* __bid_truncxfsd:                       Decimal float library routines.
                                                             (line  112)
* __bid_unorddd2:                        Decimal float library routines.
                                                             (line  234)
* __bid_unordsd2:                        Decimal float library routines.
                                                             (line  232)
* __bid_unordtd2:                        Decimal float library routines.
                                                             (line  236)
* __bswapdi2:                            Integer library routines.
                                                             (line  161)
* __bswapsi2:                            Integer library routines.
                                                             (line  160)
* __builtin_classify_type:               Varargs.            (line   48)
* __builtin_next_arg:                    Varargs.            (line   39)
* __builtin_saveregs:                    Varargs.            (line   22)
* __clear_cache:                         Miscellaneous routines.
                                                             (line    9)
* __clzdi2:                              Integer library routines.
                                                             (line  130)
* __clzsi2:                              Integer library routines.
                                                             (line  129)
* __clzti2:                              Integer library routines.
                                                             (line  131)
* __cmpda2:                              Fixed-point fractional library routines.
                                                             (line  458)
* __cmpdf2:                              Soft float library routines.
                                                             (line  163)
* __cmpdi2:                              Integer library routines.
                                                             (line   86)
* __cmpdq2:                              Fixed-point fractional library routines.
                                                             (line  447)
* __cmpha2:                              Fixed-point fractional library routines.
                                                             (line  456)
* __cmphq2:                              Fixed-point fractional library routines.
                                                             (line  445)
* __cmpqq2:                              Fixed-point fractional library routines.
                                                             (line  444)
* __cmpsa2:                              Fixed-point fractional library routines.
                                                             (line  457)
* __cmpsf2:                              Soft float library routines.
                                                             (line  162)
* __cmpsq2:                              Fixed-point fractional library routines.
                                                             (line  446)
* __cmpta2:                              Fixed-point fractional library routines.
                                                             (line  459)
* __cmptf2:                              Soft float library routines.
                                                             (line  164)
* __cmpti2:                              Integer library routines.
                                                             (line   87)
* __cmpuda2:                             Fixed-point fractional library routines.
                                                             (line  464)
* __cmpudq2:                             Fixed-point fractional library routines.
                                                             (line  454)
* __cmpuha2:                             Fixed-point fractional library routines.
                                                             (line  461)
* __cmpuhq2:                             Fixed-point fractional library routines.
                                                             (line  451)
* __cmpuqq2:                             Fixed-point fractional library routines.
                                                             (line  449)
* __cmpusa2:                             Fixed-point fractional library routines.
                                                             (line  463)
* __cmpusq2:                             Fixed-point fractional library routines.
                                                             (line  452)
* __cmputa2:                             Fixed-point fractional library routines.
                                                             (line  466)
* __CTOR_LIST__:                         Initialization.     (line   25)
* __ctzdi2:                              Integer library routines.
                                                             (line  137)
* __ctzsi2:                              Integer library routines.
                                                             (line  136)
* __ctzti2:                              Integer library routines.
                                                             (line  138)
* __divda3:                              Fixed-point fractional library routines.
                                                             (line  234)
* __divdc3:                              Soft float library routines.
                                                             (line  250)
* __divdf3:                              Soft float library routines.
                                                             (line   47)
* __divdi3:                              Integer library routines.
                                                             (line   24)
* __divdq3:                              Fixed-point fractional library routines.
                                                             (line  229)
* __divha3:                              Fixed-point fractional library routines.
                                                             (line  231)
* __divhq3:                              Fixed-point fractional library routines.
                                                             (line  227)
* __divqq3:                              Fixed-point fractional library routines.
                                                             (line  225)
* __divsa3:                              Fixed-point fractional library routines.
                                                             (line  233)
* __divsc3:                              Soft float library routines.
                                                             (line  248)
* __divsf3:                              Soft float library routines.
                                                             (line   46)
* __divsi3:                              Integer library routines.
                                                             (line   23)
* __divsq3:                              Fixed-point fractional library routines.
                                                             (line  228)
* __divta3:                              Fixed-point fractional library routines.
                                                             (line  235)
* __divtc3:                              Soft float library routines.
                                                             (line  252)
* __divtf3:                              Soft float library routines.
                                                             (line   48)
* __divti3:                              Integer library routines.
                                                             (line   25)
* __divxc3:                              Soft float library routines.
                                                             (line  254)
* __divxf3:                              Soft float library routines.
                                                             (line   50)
* __dpd_adddd3:                          Decimal float library routines.
                                                             (line   21)
* __dpd_addsd3:                          Decimal float library routines.
                                                             (line   17)
* __dpd_addtd3:                          Decimal float library routines.
                                                             (line   25)
* __dpd_divdd3:                          Decimal float library routines.
                                                             (line   64)
* __dpd_divsd3:                          Decimal float library routines.
                                                             (line   60)
* __dpd_divtd3:                          Decimal float library routines.
                                                             (line   68)
* __dpd_eqdd2:                           Decimal float library routines.
                                                             (line  257)
* __dpd_eqsd2:                           Decimal float library routines.
                                                             (line  255)
* __dpd_eqtd2:                           Decimal float library routines.
                                                             (line  259)
* __dpd_extendddtd2:                     Decimal float library routines.
                                                             (line   90)
* __dpd_extendddtf:                      Decimal float library routines.
                                                             (line  138)
* __dpd_extendddxf:                      Decimal float library routines.
                                                             (line  132)
* __dpd_extenddfdd:                      Decimal float library routines.
                                                             (line  145)
* __dpd_extenddftd:                      Decimal float library routines.
                                                             (line  105)
* __dpd_extendsddd2:                     Decimal float library routines.
                                                             (line   86)
* __dpd_extendsddf:                      Decimal float library routines.
                                                             (line  126)
* __dpd_extendsdtd2:                     Decimal float library routines.
                                                             (line   88)
* __dpd_extendsdtf:                      Decimal float library routines.
                                                             (line  136)
* __dpd_extendsdxf:                      Decimal float library routines.
                                                             (line  130)
* __dpd_extendsfdd:                      Decimal float library routines.
                                                             (line  101)
* __dpd_extendsfsd:                      Decimal float library routines.
                                                             (line  143)
* __dpd_extendsftd:                      Decimal float library routines.
                                                             (line  103)
* __dpd_extendtftd:                      Decimal float library routines.
                                                             (line  147)
* __dpd_extendxftd:                      Decimal float library routines.
                                                             (line  107)
* __dpd_fixdddi:                         Decimal float library routines.
                                                             (line  168)
* __dpd_fixddsi:                         Decimal float library routines.
                                                             (line  160)
* __dpd_fixsddi:                         Decimal float library routines.
                                                             (line  166)
* __dpd_fixsdsi:                         Decimal float library routines.
                                                             (line  158)
* __dpd_fixtddi:                         Decimal float library routines.
                                                             (line  170)
* __dpd_fixtdsi:                         Decimal float library routines.
                                                             (line  162)
* __dpd_fixunsdddi:                      Decimal float library routines.
                                                             (line  185)
* __dpd_fixunsddsi:                      Decimal float library routines.
                                                             (line  176)
* __dpd_fixunssddi:                      Decimal float library routines.
                                                             (line  183)
* __dpd_fixunssdsi:                      Decimal float library routines.
                                                             (line  174)
* __dpd_fixunstddi:                      Decimal float library routines.
                                                             (line  187)
* __dpd_fixunstdsi:                      Decimal float library routines.
                                                             (line  178)
* __dpd_floatdidd:                       Decimal float library routines.
                                                             (line  203)
* __dpd_floatdisd:                       Decimal float library routines.
                                                             (line  201)
* __dpd_floatditd:                       Decimal float library routines.
                                                             (line  205)
* __dpd_floatsidd:                       Decimal float library routines.
                                                             (line  194)
* __dpd_floatsisd:                       Decimal float library routines.
                                                             (line  192)
* __dpd_floatsitd:                       Decimal float library routines.
                                                             (line  196)
* __dpd_floatunsdidd:                    Decimal float library routines.
                                                             (line  221)
* __dpd_floatunsdisd:                    Decimal float library routines.
                                                             (line  219)
* __dpd_floatunsditd:                    Decimal float library routines.
                                                             (line  223)
* __dpd_floatunssidd:                    Decimal float library routines.
                                                             (line  212)
* __dpd_floatunssisd:                    Decimal float library routines.
                                                             (line  210)
* __dpd_floatunssitd:                    Decimal float library routines.
                                                             (line  214)
* __dpd_gedd2:                           Decimal float library routines.
                                                             (line  275)
* __dpd_gesd2:                           Decimal float library routines.
                                                             (line  273)
* __dpd_getd2:                           Decimal float library routines.
                                                             (line  277)
* __dpd_gtdd2:                           Decimal float library routines.
                                                             (line  302)
* __dpd_gtsd2:                           Decimal float library routines.
                                                             (line  300)
* __dpd_gttd2:                           Decimal float library routines.
                                                             (line  304)
* __dpd_ledd2:                           Decimal float library routines.
                                                             (line  293)
* __dpd_lesd2:                           Decimal float library routines.
                                                             (line  291)
* __dpd_letd2:                           Decimal float library routines.
                                                             (line  295)
* __dpd_ltdd2:                           Decimal float library routines.
                                                             (line  284)
* __dpd_ltsd2:                           Decimal float library routines.
                                                             (line  282)
* __dpd_lttd2:                           Decimal float library routines.
                                                             (line  286)
* __dpd_muldd3:                          Decimal float library routines.
                                                             (line   50)
* __dpd_mulsd3:                          Decimal float library routines.
                                                             (line   46)
* __dpd_multd3:                          Decimal float library routines.
                                                             (line   54)
* __dpd_nedd2:                           Decimal float library routines.
                                                             (line  266)
* __dpd_negdd2:                          Decimal float library routines.
                                                             (line   76)
* __dpd_negsd2:                          Decimal float library routines.
                                                             (line   74)
* __dpd_negtd2:                          Decimal float library routines.
                                                             (line   78)
* __dpd_nesd2:                           Decimal float library routines.
                                                             (line  264)
* __dpd_netd2:                           Decimal float library routines.
                                                             (line  268)
* __dpd_subdd3:                          Decimal float library routines.
                                                             (line   35)
* __dpd_subsd3:                          Decimal float library routines.
                                                             (line   31)
* __dpd_subtd3:                          Decimal float library routines.
                                                             (line   39)
* __dpd_truncdddf:                       Decimal float library routines.
                                                             (line  151)
* __dpd_truncddsd2:                      Decimal float library routines.
                                                             (line   92)
* __dpd_truncddsf:                       Decimal float library routines.
                                                             (line  122)
* __dpd_truncdfsd:                       Decimal float library routines.
                                                             (line  109)
* __dpd_truncsdsf:                       Decimal float library routines.
                                                             (line  149)
* __dpd_trunctddd2:                      Decimal float library routines.
                                                             (line   96)
* __dpd_trunctddf:                       Decimal float library routines.
                                                             (line  128)
* __dpd_trunctdsd2:                      Decimal float library routines.
                                                             (line   94)
* __dpd_trunctdsf:                       Decimal float library routines.
                                                             (line  124)
* __dpd_trunctdtf:                       Decimal float library routines.
                                                             (line  153)
* __dpd_trunctdxf:                       Decimal float library routines.
                                                             (line  134)
* __dpd_trunctfdd:                       Decimal float library routines.
                                                             (line  117)
* __dpd_trunctfsd:                       Decimal float library routines.
                                                             (line  113)
* __dpd_truncxfdd:                       Decimal float library routines.
                                                             (line  115)
* __dpd_truncxfsd:                       Decimal float library routines.
                                                             (line  111)
* __dpd_unorddd2:                        Decimal float library routines.
                                                             (line  233)
* __dpd_unordsd2:                        Decimal float library routines.
                                                             (line  231)
* __dpd_unordtd2:                        Decimal float library routines.
                                                             (line  235)
* __DTOR_LIST__:                         Initialization.     (line   25)
* __eqdf2:                               Soft float library routines.
                                                             (line  193)
* __eqsf2:                               Soft float library routines.
                                                             (line  192)
* __eqtf2:                               Soft float library routines.
                                                             (line  194)
* __extenddftf2:                         Soft float library routines.
                                                             (line   67)
* __extenddfxf2:                         Soft float library routines.
                                                             (line   68)
* __extendsfdf2:                         Soft float library routines.
                                                             (line   64)
* __extendsftf2:                         Soft float library routines.
                                                             (line   65)
* __extendsfxf2:                         Soft float library routines.
                                                             (line   66)
* __ffsdi2:                              Integer library routines.
                                                             (line  143)
* __ffsti2:                              Integer library routines.
                                                             (line  144)
* __fixdfdi:                             Soft float library routines.
                                                             (line   87)
* __fixdfsi:                             Soft float library routines.
                                                             (line   80)
* __fixdfti:                             Soft float library routines.
                                                             (line   93)
* __fixsfdi:                             Soft float library routines.
                                                             (line   86)
* __fixsfsi:                             Soft float library routines.
                                                             (line   79)
* __fixsfti:                             Soft float library routines.
                                                             (line   92)
* __fixtfdi:                             Soft float library routines.
                                                             (line   88)
* __fixtfsi:                             Soft float library routines.
                                                             (line   81)
* __fixtfti:                             Soft float library routines.
                                                             (line   94)
* __fixunsdfdi:                          Soft float library routines.
                                                             (line  107)
* __fixunsdfsi:                          Soft float library routines.
                                                             (line  100)
* __fixunsdfti:                          Soft float library routines.
                                                             (line  114)
* __fixunssfdi:                          Soft float library routines.
                                                             (line  106)
* __fixunssfsi:                          Soft float library routines.
                                                             (line   99)
* __fixunssfti:                          Soft float library routines.
                                                             (line  113)
* __fixunstfdi:                          Soft float library routines.
                                                             (line  108)
* __fixunstfsi:                          Soft float library routines.
                                                             (line  101)
* __fixunstfti:                          Soft float library routines.
                                                             (line  115)
* __fixunsxfdi:                          Soft float library routines.
                                                             (line  109)
* __fixunsxfsi:                          Soft float library routines.
                                                             (line  102)
* __fixunsxfti:                          Soft float library routines.
                                                             (line  116)
* __fixxfdi:                             Soft float library routines.
                                                             (line   89)
* __fixxfsi:                             Soft float library routines.
                                                             (line   82)
* __fixxfti:                             Soft float library routines.
                                                             (line   95)
* __floatdidf:                           Soft float library routines.
                                                             (line  127)
* __floatdisf:                           Soft float library routines.
                                                             (line  126)
* __floatditf:                           Soft float library routines.
                                                             (line  128)
* __floatdixf:                           Soft float library routines.
                                                             (line  129)
* __floatsidf:                           Soft float library routines.
                                                             (line  121)
* __floatsisf:                           Soft float library routines.
                                                             (line  120)
* __floatsitf:                           Soft float library routines.
                                                             (line  122)
* __floatsixf:                           Soft float library routines.
                                                             (line  123)
* __floattidf:                           Soft float library routines.
                                                             (line  133)
* __floattisf:                           Soft float library routines.
                                                             (line  132)
* __floattitf:                           Soft float library routines.
                                                             (line  134)
* __floattixf:                           Soft float library routines.
                                                             (line  135)
* __floatundidf:                         Soft float library routines.
                                                             (line  145)
* __floatundisf:                         Soft float library routines.
                                                             (line  144)
* __floatunditf:                         Soft float library routines.
                                                             (line  146)
* __floatundixf:                         Soft float library routines.
                                                             (line  147)
* __floatunsidf:                         Soft float library routines.
                                                             (line  139)
* __floatunsisf:                         Soft float library routines.
                                                             (line  138)
* __floatunsitf:                         Soft float library routines.
                                                             (line  140)
* __floatunsixf:                         Soft float library routines.
                                                             (line  141)
* __floatuntidf:                         Soft float library routines.
                                                             (line  151)
* __floatuntisf:                         Soft float library routines.
                                                             (line  150)
* __floatuntitf:                         Soft float library routines.
                                                             (line  152)
* __floatuntixf:                         Soft float library routines.
                                                             (line  153)
* __fractdadf:                           Fixed-point fractional library routines.
                                                             (line  643)
* __fractdadi:                           Fixed-point fractional library routines.
                                                             (line  640)
* __fractdadq:                           Fixed-point fractional library routines.
                                                             (line  623)
* __fractdaha2:                          Fixed-point fractional library routines.
                                                             (line  624)
* __fractdahi:                           Fixed-point fractional library routines.
                                                             (line  638)
* __fractdahq:                           Fixed-point fractional library routines.
                                                             (line  621)
* __fractdaqi:                           Fixed-point fractional library routines.
                                                             (line  637)
* __fractdaqq:                           Fixed-point fractional library routines.
                                                             (line  620)
* __fractdasa2:                          Fixed-point fractional library routines.
                                                             (line  625)
* __fractdasf:                           Fixed-point fractional library routines.
                                                             (line  642)
* __fractdasi:                           Fixed-point fractional library routines.
                                                             (line  639)
* __fractdasq:                           Fixed-point fractional library routines.
                                                             (line  622)
* __fractdata2:                          Fixed-point fractional library routines.
                                                             (line  626)
* __fractdati:                           Fixed-point fractional library routines.
                                                             (line  641)
* __fractdauda:                          Fixed-point fractional library routines.
                                                             (line  634)
* __fractdaudq:                          Fixed-point fractional library routines.
                                                             (line  630)
* __fractdauha:                          Fixed-point fractional library routines.
                                                             (line  632)
* __fractdauhq:                          Fixed-point fractional library routines.
                                                             (line  628)
* __fractdauqq:                          Fixed-point fractional library routines.
                                                             (line  627)
* __fractdausa:                          Fixed-point fractional library routines.
                                                             (line  633)
* __fractdausq:                          Fixed-point fractional library routines.
                                                             (line  629)
* __fractdauta:                          Fixed-point fractional library routines.
                                                             (line  635)
* __fractdfda:                           Fixed-point fractional library routines.
                                                             (line 1032)
* __fractdfdq:                           Fixed-point fractional library routines.
                                                             (line 1029)
* __fractdfha:                           Fixed-point fractional library routines.
                                                             (line 1030)
* __fractdfhq:                           Fixed-point fractional library routines.
                                                             (line 1027)
* __fractdfqq:                           Fixed-point fractional library routines.
                                                             (line 1026)
* __fractdfsa:                           Fixed-point fractional library routines.
                                                             (line 1031)
* __fractdfsq:                           Fixed-point fractional library routines.
                                                             (line 1028)
* __fractdfta:                           Fixed-point fractional library routines.
                                                             (line 1033)
* __fractdfuda:                          Fixed-point fractional library routines.
                                                             (line 1040)
* __fractdfudq:                          Fixed-point fractional library routines.
                                                             (line 1037)
* __fractdfuha:                          Fixed-point fractional library routines.
                                                             (line 1038)
* __fractdfuhq:                          Fixed-point fractional library routines.
                                                             (line 1035)
* __fractdfuqq:                          Fixed-point fractional library routines.
                                                             (line 1034)
* __fractdfusa:                          Fixed-point fractional library routines.
                                                             (line 1039)
* __fractdfusq:                          Fixed-point fractional library routines.
                                                             (line 1036)
* __fractdfuta:                          Fixed-point fractional library routines.
                                                             (line 1041)
* __fractdida:                           Fixed-point fractional library routines.
                                                             (line  982)
* __fractdidq:                           Fixed-point fractional library routines.
                                                             (line  979)
* __fractdiha:                           Fixed-point fractional library routines.
                                                             (line  980)
* __fractdihq:                           Fixed-point fractional library routines.
                                                             (line  977)
* __fractdiqq:                           Fixed-point fractional library routines.
                                                             (line  976)
* __fractdisa:                           Fixed-point fractional library routines.
                                                             (line  981)
* __fractdisq:                           Fixed-point fractional library routines.
                                                             (line  978)
* __fractdita:                           Fixed-point fractional library routines.
                                                             (line  983)
* __fractdiuda:                          Fixed-point fractional library routines.
                                                             (line  990)
* __fractdiudq:                          Fixed-point fractional library routines.
                                                             (line  987)
* __fractdiuha:                          Fixed-point fractional library routines.
                                                             (line  988)
* __fractdiuhq:                          Fixed-point fractional library routines.
                                                             (line  985)
* __fractdiuqq:                          Fixed-point fractional library routines.
                                                             (line  984)
* __fractdiusa:                          Fixed-point fractional library routines.
                                                             (line  989)
* __fractdiusq:                          Fixed-point fractional library routines.
                                                             (line  986)
* __fractdiuta:                          Fixed-point fractional library routines.
                                                             (line  991)
* __fractdqda:                           Fixed-point fractional library routines.
                                                             (line  551)
* __fractdqdf:                           Fixed-point fractional library routines.
                                                             (line  573)
* __fractdqdi:                           Fixed-point fractional library routines.
                                                             (line  570)
* __fractdqha:                           Fixed-point fractional library routines.
                                                             (line  549)
* __fractdqhi:                           Fixed-point fractional library routines.
                                                             (line  568)
* __fractdqhq2:                          Fixed-point fractional library routines.
                                                             (line  547)
* __fractdqqi:                           Fixed-point fractional library routines.
                                                             (line  567)
* __fractdqqq2:                          Fixed-point fractional library routines.
                                                             (line  546)
* __fractdqsa:                           Fixed-point fractional library routines.
                                                             (line  550)
* __fractdqsf:                           Fixed-point fractional library routines.
                                                             (line  572)
* __fractdqsi:                           Fixed-point fractional library routines.
                                                             (line  569)
* __fractdqsq2:                          Fixed-point fractional library routines.
                                                             (line  548)
* __fractdqta:                           Fixed-point fractional library routines.
                                                             (line  552)
* __fractdqti:                           Fixed-point fractional library routines.
                                                             (line  571)
* __fractdquda:                          Fixed-point fractional library routines.
                                                             (line  563)
* __fractdqudq:                          Fixed-point fractional library routines.
                                                             (line  558)
* __fractdquha:                          Fixed-point fractional library routines.
                                                             (line  560)
* __fractdquhq:                          Fixed-point fractional library routines.
                                                             (line  555)
* __fractdquqq:                          Fixed-point fractional library routines.
                                                             (line  553)
* __fractdqusa:                          Fixed-point fractional library routines.
                                                             (line  562)
* __fractdqusq:                          Fixed-point fractional library routines.
                                                             (line  556)
* __fractdquta:                          Fixed-point fractional library routines.
                                                             (line  565)
* __fracthada2:                          Fixed-point fractional library routines.
                                                             (line  579)
* __fracthadf:                           Fixed-point fractional library routines.
                                                             (line  597)
* __fracthadi:                           Fixed-point fractional library routines.
                                                             (line  594)
* __fracthadq:                           Fixed-point fractional library routines.
                                                             (line  577)
* __fracthahi:                           Fixed-point fractional library routines.
                                                             (line  592)
* __fracthahq:                           Fixed-point fractional library routines.
                                                             (line  575)
* __fracthaqi:                           Fixed-point fractional library routines.
                                                             (line  591)
* __fracthaqq:                           Fixed-point fractional library routines.
                                                             (line  574)
* __fracthasa2:                          Fixed-point fractional library routines.
                                                             (line  578)
* __fracthasf:                           Fixed-point fractional library routines.
                                                             (line  596)
* __fracthasi:                           Fixed-point fractional library routines.
                                                             (line  593)
* __fracthasq:                           Fixed-point fractional library routines.
                                                             (line  576)
* __fracthata2:                          Fixed-point fractional library routines.
                                                             (line  580)
* __fracthati:                           Fixed-point fractional library routines.
                                                             (line  595)
* __fracthauda:                          Fixed-point fractional library routines.
                                                             (line  588)
* __fracthaudq:                          Fixed-point fractional library routines.
                                                             (line  584)
* __fracthauha:                          Fixed-point fractional library routines.
                                                             (line  586)
* __fracthauhq:                          Fixed-point fractional library routines.
                                                             (line  582)
* __fracthauqq:                          Fixed-point fractional library routines.
                                                             (line  581)
* __fracthausa:                          Fixed-point fractional library routines.
                                                             (line  587)
* __fracthausq:                          Fixed-point fractional library routines.
                                                             (line  583)
* __fracthauta:                          Fixed-point fractional library routines.
                                                             (line  589)
* __fracthida:                           Fixed-point fractional library routines.
                                                             (line  950)
* __fracthidq:                           Fixed-point fractional library routines.
                                                             (line  947)
* __fracthiha:                           Fixed-point fractional library routines.
                                                             (line  948)
* __fracthihq:                           Fixed-point fractional library routines.
                                                             (line  945)
* __fracthiqq:                           Fixed-point fractional library routines.
                                                             (line  944)
* __fracthisa:                           Fixed-point fractional library routines.
                                                             (line  949)
* __fracthisq:                           Fixed-point fractional library routines.
                                                             (line  946)
* __fracthita:                           Fixed-point fractional library routines.
                                                             (line  951)
* __fracthiuda:                          Fixed-point fractional library routines.
                                                             (line  958)
* __fracthiudq:                          Fixed-point fractional library routines.
                                                             (line  955)
* __fracthiuha:                          Fixed-point fractional library routines.
                                                             (line  956)
* __fracthiuhq:                          Fixed-point fractional library routines.
                                                             (line  953)
* __fracthiuqq:                          Fixed-point fractional library routines.
                                                             (line  952)
* __fracthiusa:                          Fixed-point fractional library routines.
                                                             (line  957)
* __fracthiusq:                          Fixed-point fractional library routines.
                                                             (line  954)
* __fracthiuta:                          Fixed-point fractional library routines.
                                                             (line  959)
* __fracthqda:                           Fixed-point fractional library routines.
                                                             (line  505)
* __fracthqdf:                           Fixed-point fractional library routines.
                                                             (line  521)
* __fracthqdi:                           Fixed-point fractional library routines.
                                                             (line  518)
* __fracthqdq2:                          Fixed-point fractional library routines.
                                                             (line  502)
* __fracthqha:                           Fixed-point fractional library routines.
                                                             (line  503)
* __fracthqhi:                           Fixed-point fractional library routines.
                                                             (line  516)
* __fracthqqi:                           Fixed-point fractional library routines.
                                                             (line  515)
* __fracthqqq2:                          Fixed-point fractional library routines.
                                                             (line  500)
* __fracthqsa:                           Fixed-point fractional library routines.
                                                             (line  504)
* __fracthqsf:                           Fixed-point fractional library routines.
                                                             (line  520)
* __fracthqsi:                           Fixed-point fractional library routines.
                                                             (line  517)
* __fracthqsq2:                          Fixed-point fractional library routines.
                                                             (line  501)
* __fracthqta:                           Fixed-point fractional library routines.
                                                             (line  506)
* __fracthqti:                           Fixed-point fractional library routines.
                                                             (line  519)
* __fracthquda:                          Fixed-point fractional library routines.
                                                             (line  513)
* __fracthqudq:                          Fixed-point fractional library routines.
                                                             (line  510)
* __fracthquha:                          Fixed-point fractional library routines.
                                                             (line  511)
* __fracthquhq:                          Fixed-point fractional library routines.
                                                             (line  508)
* __fracthquqq:                          Fixed-point fractional library routines.
                                                             (line  507)
* __fracthqusa:                          Fixed-point fractional library routines.
                                                             (line  512)
* __fracthqusq:                          Fixed-point fractional library routines.
                                                             (line  509)
* __fracthquta:                          Fixed-point fractional library routines.
                                                             (line  514)
* __fractqida:                           Fixed-point fractional library routines.
                                                             (line  932)
* __fractqidq:                           Fixed-point fractional library routines.
                                                             (line  929)
* __fractqiha:                           Fixed-point fractional library routines.
                                                             (line  930)
* __fractqihq:                           Fixed-point fractional library routines.
                                                             (line  927)
* __fractqiqq:                           Fixed-point fractional library routines.
                                                             (line  926)
* __fractqisa:                           Fixed-point fractional library routines.
                                                             (line  931)
* __fractqisq:                           Fixed-point fractional library routines.
                                                             (line  928)
* __fractqita:                           Fixed-point fractional library routines.
                                                             (line  933)
* __fractqiuda:                          Fixed-point fractional library routines.
                                                             (line  941)
* __fractqiudq:                          Fixed-point fractional library routines.
                                                             (line  937)
* __fractqiuha:                          Fixed-point fractional library routines.
                                                             (line  939)
* __fractqiuhq:                          Fixed-point fractional library routines.
                                                             (line  935)
* __fractqiuqq:                          Fixed-point fractional library routines.
                                                             (line  934)
* __fractqiusa:                          Fixed-point fractional library routines.
                                                             (line  940)
* __fractqiusq:                          Fixed-point fractional library routines.
                                                             (line  936)
* __fractqiuta:                          Fixed-point fractional library routines.
                                                             (line  942)
* __fractqqda:                           Fixed-point fractional library routines.
                                                             (line  481)
* __fractqqdf:                           Fixed-point fractional library routines.
                                                             (line  499)
* __fractqqdi:                           Fixed-point fractional library routines.
                                                             (line  496)
* __fractqqdq2:                          Fixed-point fractional library routines.
                                                             (line  478)
* __fractqqha:                           Fixed-point fractional library routines.
                                                             (line  479)
* __fractqqhi:                           Fixed-point fractional library routines.
                                                             (line  494)
* __fractqqhq2:                          Fixed-point fractional library routines.
                                                             (line  476)
* __fractqqqi:                           Fixed-point fractional library routines.
                                                             (line  493)
* __fractqqsa:                           Fixed-point fractional library routines.
                                                             (line  480)
* __fractqqsf:                           Fixed-point fractional library routines.
                                                             (line  498)
* __fractqqsi:                           Fixed-point fractional library routines.
                                                             (line  495)
* __fractqqsq2:                          Fixed-point fractional library routines.
                                                             (line  477)
* __fractqqta:                           Fixed-point fractional library routines.
                                                             (line  482)
* __fractqqti:                           Fixed-point fractional library routines.
                                                             (line  497)
* __fractqquda:                          Fixed-point fractional library routines.
                                                             (line  490)
* __fractqqudq:                          Fixed-point fractional library routines.
                                                             (line  486)
* __fractqquha:                          Fixed-point fractional library routines.
                                                             (line  488)
* __fractqquhq:                          Fixed-point fractional library routines.
                                                             (line  484)
* __fractqquqq:                          Fixed-point fractional library routines.
                                                             (line  483)
* __fractqqusa:                          Fixed-point fractional library routines.
                                                             (line  489)
* __fractqqusq:                          Fixed-point fractional library routines.
                                                             (line  485)
* __fractqquta:                          Fixed-point fractional library routines.
                                                             (line  491)
* __fractsada2:                          Fixed-point fractional library routines.
                                                             (line  603)
* __fractsadf:                           Fixed-point fractional library routines.
                                                             (line  619)
* __fractsadi:                           Fixed-point fractional library routines.
                                                             (line  616)
* __fractsadq:                           Fixed-point fractional library routines.
                                                             (line  601)
* __fractsaha2:                          Fixed-point fractional library routines.
                                                             (line  602)
* __fractsahi:                           Fixed-point fractional library routines.
                                                             (line  614)
* __fractsahq:                           Fixed-point fractional library routines.
                                                             (line  599)
* __fractsaqi:                           Fixed-point fractional library routines.
                                                             (line  613)
* __fractsaqq:                           Fixed-point fractional library routines.
                                                             (line  598)
* __fractsasf:                           Fixed-point fractional library routines.
                                                             (line  618)
* __fractsasi:                           Fixed-point fractional library routines.
                                                             (line  615)
* __fractsasq:                           Fixed-point fractional library routines.
                                                             (line  600)
* __fractsata2:                          Fixed-point fractional library routines.
                                                             (line  604)
* __fractsati:                           Fixed-point fractional library routines.
                                                             (line  617)
* __fractsauda:                          Fixed-point fractional library routines.
                                                             (line  611)
* __fractsaudq:                          Fixed-point fractional library routines.
                                                             (line  608)
* __fractsauha:                          Fixed-point fractional library routines.
                                                             (line  609)
* __fractsauhq:                          Fixed-point fractional library routines.
                                                             (line  606)
* __fractsauqq:                          Fixed-point fractional library routines.
                                                             (line  605)
* __fractsausa:                          Fixed-point fractional library routines.
                                                             (line  610)
* __fractsausq:                          Fixed-point fractional library routines.
                                                             (line  607)
* __fractsauta:                          Fixed-point fractional library routines.
                                                             (line  612)
* __fractsfda:                           Fixed-point fractional library routines.
                                                             (line 1016)
* __fractsfdq:                           Fixed-point fractional library routines.
                                                             (line 1013)
* __fractsfha:                           Fixed-point fractional library routines.
                                                             (line 1014)
* __fractsfhq:                           Fixed-point fractional library routines.
                                                             (line 1011)
* __fractsfqq:                           Fixed-point fractional library routines.
                                                             (line 1010)
* __fractsfsa:                           Fixed-point fractional library routines.
                                                             (line 1015)
* __fractsfsq:                           Fixed-point fractional library routines.
                                                             (line 1012)
* __fractsfta:                           Fixed-point fractional library routines.
                                                             (line 1017)
* __fractsfuda:                          Fixed-point fractional library routines.
                                                             (line 1024)
* __fractsfudq:                          Fixed-point fractional library routines.
                                                             (line 1021)
* __fractsfuha:                          Fixed-point fractional library routines.
                                                             (line 1022)
* __fractsfuhq:                          Fixed-point fractional library routines.
                                                             (line 1019)
* __fractsfuqq:                          Fixed-point fractional library routines.
                                                             (line 1018)
* __fractsfusa:                          Fixed-point fractional library routines.
                                                             (line 1023)
* __fractsfusq:                          Fixed-point fractional library routines.
                                                             (line 1020)
* __fractsfuta:                          Fixed-point fractional library routines.
                                                             (line 1025)
* __fractsida:                           Fixed-point fractional library routines.
                                                             (line  966)
* __fractsidq:                           Fixed-point fractional library routines.
                                                             (line  963)
* __fractsiha:                           Fixed-point fractional library routines.
                                                             (line  964)
* __fractsihq:                           Fixed-point fractional library routines.
                                                             (line  961)
* __fractsiqq:                           Fixed-point fractional library routines.
                                                             (line  960)
* __fractsisa:                           Fixed-point fractional library routines.
                                                             (line  965)
* __fractsisq:                           Fixed-point fractional library routines.
                                                             (line  962)
* __fractsita:                           Fixed-point fractional library routines.
                                                             (line  967)
* __fractsiuda:                          Fixed-point fractional library routines.
                                                             (line  974)
* __fractsiudq:                          Fixed-point fractional library routines.
                                                             (line  971)
* __fractsiuha:                          Fixed-point fractional library routines.
                                                             (line  972)
* __fractsiuhq:                          Fixed-point fractional library routines.
                                                             (line  969)
* __fractsiuqq:                          Fixed-point fractional library routines.
                                                             (line  968)
* __fractsiusa:                          Fixed-point fractional library routines.
                                                             (line  973)
* __fractsiusq:                          Fixed-point fractional library routines.
                                                             (line  970)
* __fractsiuta:                          Fixed-point fractional library routines.
                                                             (line  975)
* __fractsqda:                           Fixed-point fractional library routines.
                                                             (line  527)
* __fractsqdf:                           Fixed-point fractional library routines.
                                                             (line  545)
* __fractsqdi:                           Fixed-point fractional library routines.
                                                             (line  542)
* __fractsqdq2:                          Fixed-point fractional library routines.
                                                             (line  524)
* __fractsqha:                           Fixed-point fractional library routines.
                                                             (line  525)
* __fractsqhi:                           Fixed-point fractional library routines.
                                                             (line  540)
* __fractsqhq2:                          Fixed-point fractional library routines.
                                                             (line  523)
* __fractsqqi:                           Fixed-point fractional library routines.
                                                             (line  539)
* __fractsqqq2:                          Fixed-point fractional library routines.
                                                             (line  522)
* __fractsqsa:                           Fixed-point fractional library routines.
                                                             (line  526)
* __fractsqsf:                           Fixed-point fractional library routines.
                                                             (line  544)
* __fractsqsi:                           Fixed-point fractional library routines.
                                                             (line  541)
* __fractsqta:                           Fixed-point fractional library routines.
                                                             (line  528)
* __fractsqti:                           Fixed-point fractional library routines.
                                                             (line  543)
* __fractsquda:                          Fixed-point fractional library routines.
                                                             (line  536)
* __fractsqudq:                          Fixed-point fractional library routines.
                                                             (line  532)
* __fractsquha:                          Fixed-point fractional library routines.
                                                             (line  534)
* __fractsquhq:                          Fixed-point fractional library routines.
                                                             (line  530)
* __fractsquqq:                          Fixed-point fractional library routines.
                                                             (line  529)
* __fractsqusa:                          Fixed-point fractional library routines.
                                                             (line  535)
* __fractsqusq:                          Fixed-point fractional library routines.
                                                             (line  531)
* __fractsquta:                          Fixed-point fractional library routines.
                                                             (line  537)
* __fracttada2:                          Fixed-point fractional library routines.
                                                             (line  650)
* __fracttadf:                           Fixed-point fractional library routines.
                                                             (line  671)
* __fracttadi:                           Fixed-point fractional library routines.
                                                             (line  668)
* __fracttadq:                           Fixed-point fractional library routines.
                                                             (line  647)
* __fracttaha2:                          Fixed-point fractional library routines.
                                                             (line  648)
* __fracttahi:                           Fixed-point fractional library routines.
                                                             (line  666)
* __fracttahq:                           Fixed-point fractional library routines.
                                                             (line  645)
* __fracttaqi:                           Fixed-point fractional library routines.
                                                             (line  665)
* __fracttaqq:                           Fixed-point fractional library routines.
                                                             (line  644)
* __fracttasa2:                          Fixed-point fractional library routines.
                                                             (line  649)
* __fracttasf:                           Fixed-point fractional library routines.
                                                             (line  670)
* __fracttasi:                           Fixed-point fractional library routines.
                                                             (line  667)
* __fracttasq:                           Fixed-point fractional library routines.
                                                             (line  646)
* __fracttati:                           Fixed-point fractional library routines.
                                                             (line  669)
* __fracttauda:                          Fixed-point fractional library routines.
                                                             (line  661)
* __fracttaudq:                          Fixed-point fractional library routines.
                                                             (line  656)
* __fracttauha:                          Fixed-point fractional library routines.
                                                             (line  658)
* __fracttauhq:                          Fixed-point fractional library routines.
                                                             (line  653)
* __fracttauqq:                          Fixed-point fractional library routines.
                                                             (line  651)
* __fracttausa:                          Fixed-point fractional library routines.
                                                             (line  660)
* __fracttausq:                          Fixed-point fractional library routines.
                                                             (line  654)
* __fracttauta:                          Fixed-point fractional library routines.
                                                             (line  663)
* __fracttida:                           Fixed-point fractional library routines.
                                                             (line  998)
* __fracttidq:                           Fixed-point fractional library routines.
                                                             (line  995)
* __fracttiha:                           Fixed-point fractional library routines.
                                                             (line  996)
* __fracttihq:                           Fixed-point fractional library routines.
                                                             (line  993)
* __fracttiqq:                           Fixed-point fractional library routines.
                                                             (line  992)
* __fracttisa:                           Fixed-point fractional library routines.
                                                             (line  997)
* __fracttisq:                           Fixed-point fractional library routines.
                                                             (line  994)
* __fracttita:                           Fixed-point fractional library routines.
                                                             (line  999)
* __fracttiuda:                          Fixed-point fractional library routines.
                                                             (line 1007)
* __fracttiudq:                          Fixed-point fractional library routines.
                                                             (line 1003)
* __fracttiuha:                          Fixed-point fractional library routines.
                                                             (line 1005)
* __fracttiuhq:                          Fixed-point fractional library routines.
                                                             (line 1001)
* __fracttiuqq:                          Fixed-point fractional library routines.
                                                             (line 1000)
* __fracttiusa:                          Fixed-point fractional library routines.
                                                             (line 1006)
* __fracttiusq:                          Fixed-point fractional library routines.
                                                             (line 1002)
* __fracttiuta:                          Fixed-point fractional library routines.
                                                             (line 1008)
* __fractudada:                          Fixed-point fractional library routines.
                                                             (line  865)
* __fractudadf:                          Fixed-point fractional library routines.
                                                             (line  888)
* __fractudadi:                          Fixed-point fractional library routines.
                                                             (line  885)
* __fractudadq:                          Fixed-point fractional library routines.
                                                             (line  861)
* __fractudaha:                          Fixed-point fractional library routines.
                                                             (line  863)
* __fractudahi:                          Fixed-point fractional library routines.
                                                             (line  883)
* __fractudahq:                          Fixed-point fractional library routines.
                                                             (line  859)
* __fractudaqi:                          Fixed-point fractional library routines.
                                                             (line  882)
* __fractudaqq:                          Fixed-point fractional library routines.
                                                             (line  858)
* __fractudasa:                          Fixed-point fractional library routines.
                                                             (line  864)
* __fractudasf:                          Fixed-point fractional library routines.
                                                             (line  887)
* __fractudasi:                          Fixed-point fractional library routines.
                                                             (line  884)
* __fractudasq:                          Fixed-point fractional library routines.
                                                             (line  860)
* __fractudata:                          Fixed-point fractional library routines.
                                                             (line  866)
* __fractudati:                          Fixed-point fractional library routines.
                                                             (line  886)
* __fractudaudq:                         Fixed-point fractional library routines.
                                                             (line  874)
* __fractudauha2:                        Fixed-point fractional library routines.
                                                             (line  876)
* __fractudauhq:                         Fixed-point fractional library routines.
                                                             (line  870)
* __fractudauqq:                         Fixed-point fractional library routines.
                                                             (line  868)
* __fractudausa2:                        Fixed-point fractional library routines.
                                                             (line  878)
* __fractudausq:                         Fixed-point fractional library routines.
                                                             (line  872)
* __fractudauta2:                        Fixed-point fractional library routines.
                                                             (line  880)
* __fractudqda:                          Fixed-point fractional library routines.
                                                             (line  772)
* __fractudqdf:                          Fixed-point fractional library routines.
                                                             (line  798)
* __fractudqdi:                          Fixed-point fractional library routines.
                                                             (line  794)
* __fractudqdq:                          Fixed-point fractional library routines.
                                                             (line  767)
* __fractudqha:                          Fixed-point fractional library routines.
                                                             (line  769)
* __fractudqhi:                          Fixed-point fractional library routines.
                                                             (line  792)
* __fractudqhq:                          Fixed-point fractional library routines.
                                                             (line  764)
* __fractudqqi:                          Fixed-point fractional library routines.
                                                             (line  790)
* __fractudqqq:                          Fixed-point fractional library routines.
                                                             (line  762)
* __fractudqsa:                          Fixed-point fractional library routines.
                                                             (line  771)
* __fractudqsf:                          Fixed-point fractional library routines.
                                                             (line  797)
* __fractudqsi:                          Fixed-point fractional library routines.
                                                             (line  793)
* __fractudqsq:                          Fixed-point fractional library routines.
                                                             (line  765)
* __fractudqta:                          Fixed-point fractional library routines.
                                                             (line  774)
* __fractudqti:                          Fixed-point fractional library routines.
                                                             (line  795)
* __fractudquda:                         Fixed-point fractional library routines.
                                                             (line  786)
* __fractudquha:                         Fixed-point fractional library routines.
                                                             (line  782)
* __fractudquhq2:                        Fixed-point fractional library routines.
                                                             (line  778)
* __fractudquqq2:                        Fixed-point fractional library routines.
                                                             (line  776)
* __fractudqusa:                         Fixed-point fractional library routines.
                                                             (line  784)
* __fractudqusq2:                        Fixed-point fractional library routines.
                                                             (line  780)
* __fractudquta:                         Fixed-point fractional library routines.
                                                             (line  788)
* __fractuhada:                          Fixed-point fractional library routines.
                                                             (line  806)
* __fractuhadf:                          Fixed-point fractional library routines.
                                                             (line  829)
* __fractuhadi:                          Fixed-point fractional library routines.
                                                             (line  826)
* __fractuhadq:                          Fixed-point fractional library routines.
                                                             (line  802)
* __fractuhaha:                          Fixed-point fractional library routines.
                                                             (line  804)
* __fractuhahi:                          Fixed-point fractional library routines.
                                                             (line  824)
* __fractuhahq:                          Fixed-point fractional library routines.
                                                             (line  800)
* __fractuhaqi:                          Fixed-point fractional library routines.
                                                             (line  823)
* __fractuhaqq:                          Fixed-point fractional library routines.
                                                             (line  799)
* __fractuhasa:                          Fixed-point fractional library routines.
                                                             (line  805)
* __fractuhasf:                          Fixed-point fractional library routines.
                                                             (line  828)
* __fractuhasi:                          Fixed-point fractional library routines.
                                                             (line  825)
* __fractuhasq:                          Fixed-point fractional library routines.
                                                             (line  801)
* __fractuhata:                          Fixed-point fractional library routines.
                                                             (line  807)
* __fractuhati:                          Fixed-point fractional library routines.
                                                             (line  827)
* __fractuhauda2:                        Fixed-point fractional library routines.
                                                             (line  819)
* __fractuhaudq:                         Fixed-point fractional library routines.
                                                             (line  815)
* __fractuhauhq:                         Fixed-point fractional library routines.
                                                             (line  811)
* __fractuhauqq:                         Fixed-point fractional library routines.
                                                             (line  809)
* __fractuhausa2:                        Fixed-point fractional library routines.
                                                             (line  817)
* __fractuhausq:                         Fixed-point fractional library routines.
                                                             (line  813)
* __fractuhauta2:                        Fixed-point fractional library routines.
                                                             (line  821)
* __fractuhqda:                          Fixed-point fractional library routines.
                                                             (line  709)
* __fractuhqdf:                          Fixed-point fractional library routines.
                                                             (line  730)
* __fractuhqdi:                          Fixed-point fractional library routines.
                                                             (line  727)
* __fractuhqdq:                          Fixed-point fractional library routines.
                                                             (line  706)
* __fractuhqha:                          Fixed-point fractional library routines.
                                                             (line  707)
* __fractuhqhi:                          Fixed-point fractional library routines.
                                                             (line  725)
* __fractuhqhq:                          Fixed-point fractional library routines.
                                                             (line  704)
* __fractuhqqi:                          Fixed-point fractional library routines.
                                                             (line  724)
* __fractuhqqq:                          Fixed-point fractional library routines.
                                                             (line  703)
* __fractuhqsa:                          Fixed-point fractional library routines.
                                                             (line  708)
* __fractuhqsf:                          Fixed-point fractional library routines.
                                                             (line  729)
* __fractuhqsi:                          Fixed-point fractional library routines.
                                                             (line  726)
* __fractuhqsq:                          Fixed-point fractional library routines.
                                                             (line  705)
* __fractuhqta:                          Fixed-point fractional library routines.
                                                             (line  710)
* __fractuhqti:                          Fixed-point fractional library routines.
                                                             (line  728)
* __fractuhquda:                         Fixed-point fractional library routines.
                                                             (line  720)
* __fractuhqudq2:                        Fixed-point fractional library routines.
                                                             (line  715)
* __fractuhquha:                         Fixed-point fractional library routines.
                                                             (line  717)
* __fractuhquqq2:                        Fixed-point fractional library routines.
                                                             (line  711)
* __fractuhqusa:                         Fixed-point fractional library routines.
                                                             (line  719)
* __fractuhqusq2:                        Fixed-point fractional library routines.
                                                             (line  713)
* __fractuhquta:                         Fixed-point fractional library routines.
                                                             (line  722)
* __fractunsdadi:                        Fixed-point fractional library routines.
                                                             (line 1562)
* __fractunsdahi:                        Fixed-point fractional library routines.
                                                             (line 1560)
* __fractunsdaqi:                        Fixed-point fractional library routines.
                                                             (line 1559)
* __fractunsdasi:                        Fixed-point fractional library routines.
                                                             (line 1561)
* __fractunsdati:                        Fixed-point fractional library routines.
                                                             (line 1563)
* __fractunsdida:                        Fixed-point fractional library routines.
                                                             (line 1714)
* __fractunsdidq:                        Fixed-point fractional library routines.
                                                             (line 1711)
* __fractunsdiha:                        Fixed-point fractional library routines.
                                                             (line 1712)
* __fractunsdihq:                        Fixed-point fractional library routines.
                                                             (line 1709)
* __fractunsdiqq:                        Fixed-point fractional library routines.
                                                             (line 1708)
* __fractunsdisa:                        Fixed-point fractional library routines.
                                                             (line 1713)
* __fractunsdisq:                        Fixed-point fractional library routines.
                                                             (line 1710)
* __fractunsdita:                        Fixed-point fractional library routines.
                                                             (line 1715)
* __fractunsdiuda:                       Fixed-point fractional library routines.
                                                             (line 1726)
* __fractunsdiudq:                       Fixed-point fractional library routines.
                                                             (line 1721)
* __fractunsdiuha:                       Fixed-point fractional library routines.
                                                             (line 1723)
* __fractunsdiuhq:                       Fixed-point fractional library routines.
                                                             (line 1718)
* __fractunsdiuqq:                       Fixed-point fractional library routines.
                                                             (line 1716)
* __fractunsdiusa:                       Fixed-point fractional library routines.
                                                             (line 1725)
* __fractunsdiusq:                       Fixed-point fractional library routines.
                                                             (line 1719)
* __fractunsdiuta:                       Fixed-point fractional library routines.
                                                             (line 1728)
* __fractunsdqdi:                        Fixed-point fractional library routines.
                                                             (line 1546)
* __fractunsdqhi:                        Fixed-point fractional library routines.
                                                             (line 1544)
* __fractunsdqqi:                        Fixed-point fractional library routines.
                                                             (line 1543)
* __fractunsdqsi:                        Fixed-point fractional library routines.
                                                             (line 1545)
* __fractunsdqti:                        Fixed-point fractional library routines.
                                                             (line 1547)
* __fractunshadi:                        Fixed-point fractional library routines.
                                                             (line 1552)
* __fractunshahi:                        Fixed-point fractional library routines.
                                                             (line 1550)
* __fractunshaqi:                        Fixed-point fractional library routines.
                                                             (line 1549)
* __fractunshasi:                        Fixed-point fractional library routines.
                                                             (line 1551)
* __fractunshati:                        Fixed-point fractional library routines.
                                                             (line 1553)
* __fractunshida:                        Fixed-point fractional library routines.
                                                             (line 1670)
* __fractunshidq:                        Fixed-point fractional library routines.
                                                             (line 1667)
* __fractunshiha:                        Fixed-point fractional library routines.
                                                             (line 1668)
* __fractunshihq:                        Fixed-point fractional library routines.
                                                             (line 1665)
* __fractunshiqq:                        Fixed-point fractional library routines.
                                                             (line 1664)
* __fractunshisa:                        Fixed-point fractional library routines.
                                                             (line 1669)
* __fractunshisq:                        Fixed-point fractional library routines.
                                                             (line 1666)
* __fractunshita:                        Fixed-point fractional library routines.
                                                             (line 1671)
* __fractunshiuda:                       Fixed-point fractional library routines.
                                                             (line 1682)
* __fractunshiudq:                       Fixed-point fractional library routines.
                                                             (line 1677)
* __fractunshiuha:                       Fixed-point fractional library routines.
                                                             (line 1679)
* __fractunshiuhq:                       Fixed-point fractional library routines.
                                                             (line 1674)
* __fractunshiuqq:                       Fixed-point fractional library routines.
                                                             (line 1672)
* __fractunshiusa:                       Fixed-point fractional library routines.
                                                             (line 1681)
* __fractunshiusq:                       Fixed-point fractional library routines.
                                                             (line 1675)
* __fractunshiuta:                       Fixed-point fractional library routines.
                                                             (line 1684)
* __fractunshqdi:                        Fixed-point fractional library routines.
                                                             (line 1536)
* __fractunshqhi:                        Fixed-point fractional library routines.
                                                             (line 1534)
* __fractunshqqi:                        Fixed-point fractional library routines.
                                                             (line 1533)
* __fractunshqsi:                        Fixed-point fractional library routines.
                                                             (line 1535)
* __fractunshqti:                        Fixed-point fractional library routines.
                                                             (line 1537)
* __fractunsqida:                        Fixed-point fractional library routines.
                                                             (line 1648)
* __fractunsqidq:                        Fixed-point fractional library routines.
                                                             (line 1645)
* __fractunsqiha:                        Fixed-point fractional library routines.
                                                             (line 1646)
* __fractunsqihq:                        Fixed-point fractional library routines.
                                                             (line 1643)
                                                             vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
