* TARGET_CHECK_PCH_TARGET_FLAGS:         PCH Target.         (line   26)
* TARGET_CHECK_STRING_OBJECT_FORMAT_ARG: Run-time Target.    (line  119)
* TARGET_CLASS_LIKELY_SPILLED_P:         Register Classes.   (line  499)
* TARGET_CLASS_MAX_NREGS:                Register Classes.   (line  515)
* TARGET_COMMUTATIVE_P:                  Misc.               (line  800)
* TARGET_COMPARE_BY_PIECES_BRANCH_RATIO: Costs.              (line  200)
* TARGET_COMPARE_VERSION_PRIORITY:       Misc.               (line  701)
* TARGET_COMPATIBLE_VECTOR_TYPES_P:      Register Arguments. (line  350)
* TARGET_COMPUTE_FRAME_LAYOUT:           Elimination.        (line   74)
* TARGET_COMPUTE_PRESSURE_CLASSES:       Register Classes.   (line  655)
* TARGET_COMP_TYPE_ATTRIBUTES:           Target Attributes.  (line   25)
* TARGET_CONDITIONAL_REGISTER_USAGE:     Register Basics.    (line  102)
* TARGET_CONSTANT_ALIGNMENT:             Storage Layout.     (line  271)
* TARGET_CONST_ANCHOR:                   Misc.               (line 1075)
* TARGET_CONST_NOT_OK_FOR_DEBUG_P:       Addressing Modes.   (line  230)
* TARGET_CONVERT_TO_TYPE:                Misc.               (line 1022)
* TARGET_CPU_CPP_BUILTINS:               Run-time Target.    (line    8)
* TARGET_CSTORE_MODE:                    Register Classes.   (line  647)
* TARGET_CUSTOM_FUNCTION_DESCRIPTORS:    Trampolines.        (line   39)
* TARGET_CXX_ADJUST_CLASS_AT_DEFINITION: C++ ABI.            (line   86)
* TARGET_CXX_CDTOR_RETURNS_THIS:         C++ ABI.            (line   37)
* TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT:   C++ ABI.            (line   61)
* TARGET_CXX_COOKIE_HAS_SIZE:            C++ ABI.            (line   24)
* TARGET_CXX_DECL_MANGLING_CONTEXT:      C++ ABI.            (line   92)
* TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY: C++ ABI.       (line   52)
* TARGET_CXX_GET_COOKIE_SIZE:            C++ ABI.            (line   17)
* TARGET_CXX_GUARD_MASK_BIT:             C++ ABI.            (line   11)
* TARGET_CXX_GUARD_TYPE:                 C++ ABI.            (line    6)
* TARGET_CXX_IMPLICIT_EXTERN_C:          Misc.               (line  407)
* TARGET_CXX_IMPORT_EXPORT_CLASS:        C++ ABI.            (line   28)
* TARGET_CXX_KEY_METHOD_MAY_BE_INLINE:   C++ ABI.            (line   42)
* TARGET_CXX_LIBRARY_RTTI_COMDAT:        C++ ABI.            (line   68)
* TARGET_CXX_USE_AEABI_ATEXIT:           C++ ABI.            (line   73)
* TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT:  C++ ABI.            (line   79)
* TARGET_C_EXCESS_PRECISION:             Storage Layout.     (line  109)
* TARGET_C_PREINCLUDE:                   Misc.               (line  395)
* TARGET_DEBUG_UNWIND_INFO:              DWARF.              (line   32)
* TARGET_DECIMAL_FLOAT_SUPPORTED_P:      Storage Layout.     (line  537)
* TARGET_DECLSPEC:                       Target Attributes.  (line   72)
* TARGET_DEFAULT_PACK_STRUCT:            Misc.               (line  479)
* TARGET_DEFAULT_SHORT_ENUMS:            Type Layout.        (line  123)
* TARGET_DEFAULT_TARGET_FLAGS:           Run-time Target.    (line   55)
* TARGET_DEFERRED_OUTPUT_DEFS:           Label Output.       (line  465)
* TARGET_DELAY_SCHED2:                   DWARF.              (line   77)
* TARGET_DELAY_VARTRACK:                 DWARF.              (line   81)
* TARGET_DELEGITIMIZE_ADDRESS:           Addressing Modes.   (line  221)
* TARGET_DIFFERENT_ADDR_DISPLACEMENT_P:  Register Classes.   (line  603)
* TARGET_DLLIMPORT_DECL_ATTRIBUTES:      Target Attributes.  (line   55)
* TARGET_DOLOOP_COST_FOR_ADDRESS:        Misc.               (line  746)
* TARGET_DOLOOP_COST_FOR_GENERIC:        Misc.               (line  735)
* TARGET_DWARF_CALLING_CONVENTION:       DWARF.              (line   12)
* TARGET_DWARF_FRAME_REG_MODE:           Exception Region Output.
                                                             (line  113)
* TARGET_DWARF_HANDLE_FRAME_UNSPEC:      Frame Layout.       (line  165)
* TARGET_DWARF_POLY_INDETERMINATE_VALUE: Frame Layout.       (line  177)
* TARGET_DWARF_REGISTER_SPAN:            Exception Region Output.
                                                             (line  104)
* TARGET_D_CPU_VERSIONS:                 D Language and ABI. (line    6)
* TARGET_D_CRITSEC_SIZE:                 D Language and ABI. (line   17)
* TARGET_D_OS_VERSIONS:                  D Language and ABI. (line   13)
* TARGET_EDOM:                           Library Calls.      (line   59)
* TARGET_EMPTY_RECORD_P:                 Aggregate Return.   (line   86)
* TARGET_EMUTLS_DEBUG_FORM_TLS_ADDRESS:  Emulated TLS.       (line   67)
* TARGET_EMUTLS_GET_ADDRESS:             Emulated TLS.       (line   18)
* TARGET_EMUTLS_REGISTER_COMMON:         Emulated TLS.       (line   23)
* TARGET_EMUTLS_TMPL_PREFIX:             Emulated TLS.       (line   44)
* TARGET_EMUTLS_TMPL_SECTION:            Emulated TLS.       (line   35)
* TARGET_EMUTLS_VAR_ALIGN_FIXED:         Emulated TLS.       (line   62)
* TARGET_EMUTLS_VAR_FIELDS:              Emulated TLS.       (line   48)
* TARGET_EMUTLS_VAR_INIT:                Emulated TLS.       (line   55)
* TARGET_EMUTLS_VAR_PREFIX:              Emulated TLS.       (line   40)
* TARGET_EMUTLS_VAR_SECTION:             Emulated TLS.       (line   30)
* TARGET_ENCODE_SECTION_INFO:            Sections.           (line  263)
* TARGET_ENCODE_SECTION_INFO and address validation: Addressing Modes.
                                                             (line   82)
* TARGET_ENCODE_SECTION_INFO usage:      Instruction Output. (line  127)
* TARGET_END_CALL_ARGS:                  Varargs.            (line  137)
* TARGET_ENUM_VA_LIST_P:                 Register Arguments. (line  285)
* TARGET_ESTIMATED_POLY_VALUE:           Costs.              (line  425)
* TARGET_EXCEPT_UNWIND_INFO:             Exception Region Output.
                                                             (line   46)
* TARGET_EXECUTABLE_SUFFIX:              Misc.               (line  858)
* TARGET_EXPAND_BUILTIN:                 Misc.               (line  647)
* TARGET_EXPAND_BUILTIN_SAVEREGS:        Varargs.            (line   64)
* TARGET_EXPAND_DIVMOD_LIBFUNC:          Scheduling.         (line  461)
* TARGET_EXPAND_TO_RTL_HOOK:             Storage Layout.     (line  543)
* TARGET_EXPR:                           Unary and Binary Expressions.
                                                             (line    6)
* TARGET_EXTRA_INCLUDES:                 Misc.               (line  937)
* TARGET_EXTRA_LIVE_ON_ENTRY:            Tail Calls.         (line   20)
* TARGET_EXTRA_PRE_INCLUDES:             Misc.               (line  944)
* TARGET_FIXED_CONDITION_CODE_REGS:      MODE_CC Condition Codes.
                                                             (line  105)
* TARGET_FIXED_POINT_SUPPORTED_P:        Storage Layout.     (line  540)
* target_flags:                          Run-time Target.    (line   51)
* TARGET_FLAGS_REGNUM:                   MODE_CC Condition Codes.
                                                             (line  133)
* TARGET_FLOATN_BUILTIN_P:               Register Arguments. (line  438)
* TARGET_FLOATN_MODE:                    Register Arguments. (line  420)
* TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P: Run-time Target.
                                                             (line  179)
* TARGET_FNTYPE_ABI:                     Register Basics.    (line   58)
* TARGET_FN_ABI_VA_LIST:                 Register Arguments. (line  297)
* TARGET_FOLD_BUILTIN:                   Misc.               (line  684)
* TARGET_FORMAT_TYPES:                   Misc.               (line  965)
* TARGET_FRAME_POINTER_REQUIRED:         Elimination.        (line    8)
* TARGET_FUNCTION_ARG:                   Register Arguments. (line   10)
* TARGET_FUNCTION_ARG_ADVANCE:           Register Arguments. (line  195)
* TARGET_FUNCTION_ARG_BOUNDARY:          Register Arguments. (line  248)
* TARGET_FUNCTION_ARG_OFFSET:            Register Arguments. (line  206)
* TARGET_FUNCTION_ARG_PADDING:           Register Arguments. (line  214)
* TARGET_FUNCTION_ARG_ROUND_BOUNDARY:    Register Arguments. (line  254)
* TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P: Target Attributes.  (line  101)
* TARGET_FUNCTION_INCOMING_ARG:          Register Arguments. (line   64)
* TARGET_FUNCTION_OK_FOR_SIBCALL:        Tail Calls.         (line    6)
* TARGET_FUNCTION_VALUE:                 Scalar Return.      (line    9)
* TARGET_FUNCTION_VALUE_REGNO_P:         Scalar Return.      (line   96)
* TARGET_GENERATE_VERSION_DISPATCHER_BODY: Misc.             (line  717)
* TARGET_GEN_CCMP_FIRST:                 Misc.               (line  890)
* TARGET_GEN_CCMP_NEXT:                  Misc.               (line  901)
* TARGET_GET_DRAP_RTX:                   Misc.               (line 1058)
* TARGET_GET_FUNCTION_VERSIONS_DISPATCHER: Misc.             (line  710)
* TARGET_GET_MULTILIB_ABI_NAME:          Register Basics.    (line   99)
* TARGET_GET_PCH_VALIDITY:               PCH Target.         (line    6)
* TARGET_GET_RAW_ARG_MODE:               Aggregate Return.   (line   81)
* TARGET_GET_RAW_RESULT_MODE:            Aggregate Return.   (line   76)
* TARGET_GET_VALID_OPTION_VALUES:        Stack Smashing Protection.
                                                             (line   39)
* TARGET_GIMPLE_FOLD_BUILTIN:            Misc.               (line  694)
* TARGET_GIMPLIFY_VA_ARG_EXPR:           Register Arguments. (line  307)
* TARGET_GOACC_DIM_LIMIT:                Addressing Modes.   (line  540)
* TARGET_GOACC_FORK_JOIN:                Addressing Modes.   (line  544)
* TARGET_GOACC_REDUCTION:                Addressing Modes.   (line  555)
* TARGET_GOACC_VALIDATE_DIMS:            Addressing Modes.   (line  527)
* TARGET_HANDLE_C_OPTION:                Run-time Target.    (line   73)
* TARGET_HANDLE_GENERIC_ATTRIBUTE:       Target Attributes.  (line   93)
* TARGET_HANDLE_OPTION:                  Run-time Target.    (line   59)
* TARGET_HARD_REGNO_CALL_PART_CLOBBERED: Register Basics.    (line   76)
* TARGET_HARD_REGNO_MODE_OK:             Values in Registers.
                                                             (line   54)
* TARGET_HARD_REGNO_NREGS:               Values in Registers.
                                                             (line   10)
* TARGET_HARD_REGNO_SCRATCH_OK:          Values in Registers.
                                                             (line  139)
* TARGET_HAS_IFUNC_P:                    Misc.               (line 1106)
* TARGET_HAS_NO_HW_DIVIDE:               Library Calls.      (line   52)
* TARGET_HAVE_CONDITIONAL_EXECUTION:     Misc.               (line  884)
* TARGET_HAVE_COUNT_REG_DECR_P:          Misc.               (line  731)
* TARGET_HAVE_CTORS_DTORS:               Macros for Initialization.
                                                             (line   63)
* TARGET_HAVE_NAMED_SECTIONS:            File Framework.     (line  150)
* TARGET_HAVE_SPECULATION_SAFE_VALUE:    Misc.               (line 1189)
* TARGET_HAVE_SRODATA_SECTION:           Sections.           (line  309)
* TARGET_HAVE_SWITCHABLE_BSS_SECTIONS:   File Framework.     (line  155)
* TARGET_HAVE_TLS:                       Sections.           (line  329)
* TARGET_INIT_BUILTINS:                  Misc.               (line  621)
* TARGET_INIT_DWARF_REG_SIZES_EXTRA:     Exception Region Output.
                                                             (line  119)
* TARGET_INIT_LIBFUNCS:                  Library Calls.      (line   15)
* TARGET_INIT_PIC_REG:                   Register Arguments. (line   88)
* TARGET_INSERT_ATTRIBUTES:              Target Attributes.  (line   80)
* TARGET_INSN_CALLEE_ABI:                Register Basics.    (line   65)
* TARGET_INSN_COST:                      Costs.              (line  380)
* TARGET_INSTANTIATE_DECLS:              Storage Layout.     (line  551)
* TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN: Misc.              (line  989)
* TARGET_INVALID_BINARY_OP:              Misc.               (line 1008)
* TARGET_INVALID_CONVERSION:             Misc.               (line  995)
* TARGET_INVALID_UNARY_OP:               Misc.               (line 1001)
* TARGET_INVALID_WITHIN_DOLOOP:          Misc.               (line  774)
* TARGET_IN_SMALL_DATA_P:                Sections.           (line  305)
* TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS: Register Classes.  (line  570)
* TARGET_KEEP_LEAF_WHEN_PROFILED:        Profiling.          (line   39)
* TARGET_LEGITIMATE_ADDRESS_P:           Addressing Modes.   (line   48)
* TARGET_LEGITIMATE_COMBINED_INSN:       Misc.               (line  788)
* TARGET_LEGITIMATE_CONSTANT_P:          Addressing Modes.   (line  213)
* TARGET_LEGITIMIZE_ADDRESS:             Addressing Modes.   (line  129)
* TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT: Register Classes.  (line  618)
* TARGET_LIBCALL_VALUE:                  Scalar Return.      (line   65)
* TARGET_LIBC_HAS_FAST_FUNCTION:         Library Calls.      (line   82)
* TARGET_LIBC_HAS_FUNCTION:              Library Calls.      (line   77)
* TARGET_LIBFUNC_GNU_PREFIX:             Library Calls.      (line   24)
* TARGET_LIBGCC_CMP_RETURN_MODE:         Storage Layout.     (line  493)
* TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P: Register Arguments.
                                                             (line  412)
* TARGET_LIBGCC_SDATA_SECTION:           Sections.           (line  136)
* TARGET_LIBGCC_SHIFT_COUNT_MODE:        Storage Layout.     (line  499)
* TARGET_LIB_INT_CMP_BIASED:             Library Calls.      (line   42)
* TARGET_LOAD_BOUNDS_FOR_ARG:            Varargs.            (line  153)
* TARGET_LOAD_RETURNED_BOUNDS:           Varargs.            (line  172)
* TARGET_LOOP_UNROLL_ADJUST:             Misc.               (line  918)
* TARGET_LRA_P:                          Register Classes.   (line  577)
* TARGET_MACHINE_DEPENDENT_REORG:        Misc.               (line  606)
* TARGET_MANGLE_ASSEMBLER_NAME:          Label Output.       (line  356)
* TARGET_MANGLE_DECL_ASSEMBLER_NAME:     Sections.           (line  253)
* TARGET_MANGLE_TYPE:                    Storage Layout.     (line  555)
* TARGET_MAX_ANCHOR_OFFSET:              Anchored Addresses. (line   38)
* TARGET_MAX_NOCE_IFCVT_SEQ_COST:        Costs.              (line  390)
* TARGET_MD_ASM_ADJUST:                  Misc.               (line  524)
* TARGET_MEMBER_TYPE_FORCES_BLK:         Storage Layout.     (line  445)
* TARGET_MEMMODEL_CHECK:                 Misc.               (line 1097)
* TARGET_MEMORY_MOVE_COST:               Costs.              (line   79)
* TARGET_MEM_CONSTRAINT:                 Addressing Modes.   (line  107)
* TARGET_MEM_REF:                        Storage References. (line    6)
* TARGET_MERGE_DECL_ATTRIBUTES:          Target Attributes.  (line   45)
* TARGET_MERGE_TYPE_ATTRIBUTES:          Target Attributes.  (line   37)
* TARGET_MIN_ANCHOR_OFFSET:              Anchored Addresses. (line   32)
* TARGET_MIN_ARITHMETIC_PRECISION:       Misc.               (line   63)
* TARGET_MIN_DIVISIONS_FOR_RECIP_MUL:    Misc.               (line  112)
* TARGET_MODES_TIEABLE_P:                Values in Registers.
                                                             (line  123)
* TARGET_MODE_AFTER:                     Mode Switching.     (line   57)
* TARGET_MODE_DEPENDENT_ADDRESS_P:       Addressing Modes.   (line  196)
* TARGET_MODE_EMIT:                      Mode Switching.     (line   42)
* TARGET_MODE_ENTRY:                     Mode Switching.     (line   64)
* TARGET_MODE_EXIT:                      Mode Switching.     (line   71)
* TARGET_MODE_NEEDED:                    Mode Switching.     (line   50)
* TARGET_MODE_PRIORITY:                  Mode Switching.     (line   78)
* TARGET_MODE_REP_EXTENDED:              Misc.               (line  197)
* TARGET_MS_BITFIELD_LAYOUT_P:           Storage Layout.     (line  509)
* TARGET_MUST_PASS_IN_STACK:             Register Arguments. (line   57)
* TARGET_MUST_PASS_IN_STACK, and TARGET_FUNCTION_ARG: Register Arguments.
                                                             (line   49)
* TARGET_NARROW_VOLATILE_BITFIELD:       Storage Layout.     (line  438)
* TARGET_NOCE_CONVERSION_PROFITABLE_P:   Costs.              (line  409)
* TARGET_NO_REGISTER_ALLOCATION:         DWARF.              (line   85)
* TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P: Costs.             (line  415)
* TARGET_N_FORMAT_TYPES:                 Misc.               (line  970)
* TARGET_OBJC_CONSTRUCT_STRING_OBJECT:   Run-time Target.    (line   88)
* TARGET_OBJC_DECLARE_CLASS_DEFINITION:  Run-time Target.    (line  109)
* TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE: Run-time Target.
                                                             (line  104)
* TARGET_OBJECT_SUFFIX:                  Misc.               (line  853)
* TARGET_OBJFMT_CPP_BUILTINS:            Run-time Target.    (line   45)
* TARGET_OFFLOAD_OPTIONS:                Misc.               (line 1140)
* TARGET_OMIT_STRUCT_RETURN_REG:         Scalar Return.      (line  117)
* TARGET_OMP_DEVICE_KIND_ARCH_ISA:       Addressing Modes.   (line  519)
* TARGET_OPTAB_SUPPORTED_P:              Costs.              (line  299)
* TARGET_OPTF:                           Misc.               (line  952)
* TARGET_OPTION_FUNCTION_VERSIONS:       Target Attributes.  (line  165)
* TARGET_OPTION_INIT_STRUCT:             Run-time Target.    (line  156)
* TARGET_OPTION_OPTIMIZATION_TABLE:      Run-time Target.    (line  142)
* TARGET_OPTION_OVERRIDE:                Target Attributes.  (line  152)
* TARGET_OPTION_POST_STREAM_IN:          Target Attributes.  (line  133)
* TARGET_OPTION_PRAGMA_PARSE:            Target Attributes.  (line  145)
* TARGET_OPTION_PRINT:                   Target Attributes.  (line  139)
* TARGET_OPTION_RESTORE:                 Target Attributes.  (line  127)
* TARGET_OPTION_SAVE:                    Target Attributes.  (line  120)
* TARGET_OPTION_VALID_ATTRIBUTE_P:       Target Attributes.  (line  108)
* TARGET_OS_CPP_BUILTINS:                Run-time Target.    (line   41)
* TARGET_OVERRIDES_FORMAT_ATTRIBUTES:    Misc.               (line  974)
* TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT: Misc.            (line  980)
* TARGET_OVERRIDES_FORMAT_INIT:          Misc.               (line  984)
* TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE:  Run-time Target.    (line  126)
* TARGET_PASS_BY_REFERENCE:              Register Arguments. (line  112)
* TARGET_PCH_VALID_P:                    PCH Target.         (line   11)
* TARGET_POSIX_IO:                       Misc.               (line  550)
* TARGET_PREDICT_DOLOOP_P:               Misc.               (line  724)
* TARGET_PREFERRED_ELSE_VALUE:           Addressing Modes.   (line  563)
* TARGET_PREFERRED_OUTPUT_RELOAD_CLASS:  Register Classes.   (line  284)
* TARGET_PREFERRED_RELOAD_CLASS:         Register Classes.   (line  213)
* TARGET_PREFERRED_RENAME_CLASS:         Register Classes.   (line  201)
* TARGET_PREPARE_PCH_SAVE:               PCH Target.         (line   34)
* TARGET_PRETEND_OUTGOING_VARARGS_NAMED: Varargs.            (line  144)
* TARGET_PROFILE_BEFORE_PROLOGUE:        Sections.           (line  313)
* TARGET_PROMOTED_TYPE:                  Misc.               (line 1014)
* TARGET_PROMOTE_FUNCTION_MODE:          Storage Layout.     (line  126)
* TARGET_PROMOTE_PROTOTYPES:             Stack Arguments.    (line   10)
* TARGET_PTRMEMFUNC_VBIT_LOCATION:       Type Layout.        (line  250)
* TARGET_RECORD_OFFLOAD_SYMBOL:          Misc.               (line 1135)
* TARGET_REF_MAY_ALIAS_ERRNO:            Register Arguments. (line  318)
* TARGET_REGISTER_MOVE_COST:             Costs.              (line   31)
* TARGET_REGISTER_PRIORITY:              Register Classes.   (line  582)
* TARGET_REGISTER_USAGE_LEVELING_P:      Register Classes.   (line  593)
* TARGET_RELAYOUT_FUNCTION:              Target Attributes.  (line  180)
* TARGET_RESET_LOCATION_VIEW:            DWARF.              (line   57)
* TARGET_RESOLVE_OVERLOADED_BUILTIN:     Misc.               (line  658)
* TARGET_RETURN_IN_MEMORY:               Aggregate Return.   (line   15)
* TARGET_RETURN_IN_MSB:                  Scalar Return.      (line  124)
* TARGET_RETURN_POPS_ARGS:               Stack Arguments.    (line   98)
* TARGET_RTX_COSTS:                      Costs.              (line  313)
* TARGET_RUN_TARGET_SELFTESTS:           Misc.               (line 1226)
* TARGET_SCALAR_MODE_SUPPORTED_P:        Register Arguments. (line  334)
* TARGET_SCHED_ADJUST_COST:              Scheduling.         (line   35)
* TARGET_SCHED_ADJUST_PRIORITY:          Scheduling.         (line   50)
* TARGET_SCHED_ALLOC_SCHED_CONTEXT:      Scheduling.         (line  294)
* TARGET_SCHED_CAN_SPECULATE_INSN:       Scheduling.         (line  354)
* TARGET_SCHED_CLEAR_SCHED_CONTEXT:      Scheduling.         (line  309)
* TARGET_SCHED_DEPENDENCIES_EVALUATION_HOOK: Scheduling.     (line  101)
* TARGET_SCHED_DFA_NEW_CYCLE:            Scheduling.         (line  255)
* TARGET_SCHED_DFA_POST_ADVANCE_CYCLE:   Scheduling.         (line  172)
* TARGET_SCHED_DFA_POST_CYCLE_INSN:      Scheduling.         (line  156)
* TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE:    Scheduling.         (line  165)
* TARGET_SCHED_DFA_PRE_CYCLE_INSN:       Scheduling.         (line  144)
* TARGET_SCHED_DISPATCH:                 Scheduling.         (line  370)
* TARGET_SCHED_DISPATCH_DO:              Scheduling.         (line  375)
* TARGET_SCHED_EXPOSED_PIPELINE:         Scheduling.         (line  379)
* TARGET_SCHED_FINISH:                   Scheduling.         (line  122)
* TARGET_SCHED_FINISH_GLOBAL:            Scheduling.         (line  137)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_BACKTRACK: Scheduling.  (line  235)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_BEGIN: Scheduling.      (line  223)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD: Scheduling.
                                                             (line  179)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD: Scheduling.
                                                             (line  207)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_END: Scheduling.        (line  240)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_FINI: Scheduling.       (line  250)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_INIT: Scheduling.       (line  245)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_ISSUE: Scheduling.      (line  229)
* TARGET_SCHED_FREE_SCHED_CONTEXT:       Scheduling.         (line  313)
* TARGET_SCHED_FUSION_PRIORITY:          Scheduling.         (line  389)
* TARGET_SCHED_GEN_SPEC_CHECK:           Scheduling.         (line  335)
* TARGET_SCHED_H_I_D_EXTENDED:           Scheduling.         (line  289)
* TARGET_SCHED_INIT:                     Scheduling.         (line  111)
* TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN: Scheduling.         (line  161)
* TARGET_SCHED_INIT_DFA_PRE_CYCLE_INSN:  Scheduling.         (line  153)
* TARGET_SCHED_INIT_GLOBAL:              Scheduling.         (line  129)
* TARGET_SCHED_INIT_SCHED_CONTEXT:       Scheduling.         (line  298)
* TARGET_SCHED_ISSUE_RATE:               Scheduling.         (line   11)
* TARGET_SCHED_IS_COSTLY_DEPENDENCE:     Scheduling.         (line  267)
* TARGET_SCHED_MACRO_FUSION_P:           Scheduling.         (line   87)
* TARGET_SCHED_MACRO_FUSION_PAIR_P:      Scheduling.         (line   91)
* TARGET_SCHED_NEEDS_BLOCK_P:            Scheduling.         (line  328)
* TARGET_SCHED_REASSOCIATION_WIDTH:      Scheduling.         (line  384)
* TARGET_SCHED_REORDER:                  Scheduling.         (line   58)
* TARGET_SCHED_REORDER2:                 Scheduling.         (line   75)
* TARGET_SCHED_SET_SCHED_CONTEXT:        Scheduling.         (line  305)
* TARGET_SCHED_SET_SCHED_FLAGS:          Scheduling.         (line  347)
* TARGET_SCHED_SMS_RES_MII:              Scheduling.         (line  361)
* TARGET_SCHED_SPECULATE_INSN:           Scheduling.         (line  316)
* TARGET_SCHED_VARIABLE_ISSUE:           Scheduling.         (line   22)
* TARGET_SECONDARY_MEMORY_NEEDED:        Register Classes.   (line  447)
* TARGET_SECONDARY_MEMORY_NEEDED_MODE:   Register Classes.   (line  466)
* TARGET_SECONDARY_RELOAD:               Register Classes.   (line  312)
* TARGET_SECTION_TYPE_FLAGS:             File Framework.     (line  160)
* TARGET_SELECT_EARLY_REMAT_MODES:       Register Classes.   (line  488)
* TARGET_SETJMP_PRESERVES_NONVOLATILE_REGS_P: Misc.          (line  223)
* TARGET_SETUP_INCOMING_VARARGS:         Varargs.            (line   71)
* TARGET_SET_CURRENT_FUNCTION:           Misc.               (line  835)
* TARGET_SET_DEFAULT_TYPE_ATTRIBUTES:    Target Attributes.  (line   33)
* TARGET_SET_UP_BY_PROLOGUE:             Tail Calls.         (line   29)
* TARGET_SHIFT_TRUNCATION_MASK:          Misc.               (line  160)
* TARGET_SHRINK_WRAP_COMPONENTS_FOR_BB:  Shrink-wrapping separate components.
                                                             (line   36)
* TARGET_SHRINK_WRAP_DISQUALIFY_COMPONENTS: Shrink-wrapping separate components.
                                                             (line   43)
* TARGET_SHRINK_WRAP_EMIT_EPILOGUE_COMPONENTS: Shrink-wrapping separate components.
                                                             (line   54)
* TARGET_SHRINK_WRAP_EMIT_PROLOGUE_COMPONENTS: Shrink-wrapping separate components.
                                                             (line   50)
* TARGET_SHRINK_WRAP_GET_SEPARATE_COMPONENTS: Shrink-wrapping separate components.
                                                             (line   27)
* TARGET_SHRINK_WRAP_SET_HANDLED_COMPONENTS: Shrink-wrapping separate components.
                                                             (line   58)
* TARGET_SIMD_CLONE_ADJUST:              Addressing Modes.   (line  506)
* TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN: Addressing Modes.
                                                             (line  498)
* TARGET_SIMD_CLONE_USABLE:              Addressing Modes.   (line  510)
* TARGET_SIMT_VF:                        Addressing Modes.   (line  516)
* TARGET_SLOW_UNALIGNED_ACCESS:          Costs.              (line  132)
* TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P: Register Arguments.
                                                             (line  448)
* TARGET_SPECULATION_SAFE_VALUE:         Misc.               (line 1208)
* TARGET_SPILL_CLASS:                    Register Classes.   (line  632)
* TARGET_SPLIT_COMPLEX_ARG:              Register Arguments. (line  269)
* TARGET_STACK_CLASH_PROTECTION_ALLOCA_PROBE_RANGE: Stack Checking.
                                                             (line   97)
* TARGET_STACK_PROTECT_FAIL:             Stack Smashing Protection.
                                                             (line   16)
* TARGET_STACK_PROTECT_GUARD:            Stack Smashing Protection.
                                                             (line    6)
* TARGET_STACK_PROTECT_RUNTIME_ENABLED_P: Stack Smashing Protection.
                                                             (line   25)
* TARGET_STARTING_FRAME_OFFSET:          Frame Layout.       (line   34)
* TARGET_STARTING_FRAME_OFFSET and virtual registers: Regs and Memory.
                                                             (line   74)
* TARGET_STATIC_CHAIN:                   Frame Registers.    (line   90)
* TARGET_STATIC_RTX_ALIGNMENT:           Storage Layout.     (line  243)
* TARGET_STORE_BOUNDS_FOR_ARG:           Varargs.            (line  163)
* TARGET_STORE_RETURNED_BOUNDS:          Varargs.            (line  177)
* TARGET_STRICT_ARGUMENT_NAMING:         Varargs.            (line  107)
* TARGET_STRING_OBJECT_REF_TYPE_P:       Run-time Target.    (line  114)
* TARGET_STRIP_NAME_ENCODING:            Sections.           (line  300)
* TARGET_STRUCT_VALUE_RTX:               Aggregate Return.   (line   44)
* TARGET_SUPPORTS_SPLIT_STACK:           Stack Smashing Protection.
                                                             (line   30)
* TARGET_SUPPORTS_WEAK:                  Label Output.       (line  272)
* TARGET_SUPPORTS_WIDE_INT:              Misc.               (line 1148)
* TARGET_TERMINATE_DW2_EH_FRAME_INFO:    Exception Region Output.
                                                             (line   98)
* TARGET_TRAMPOLINE_ADJUST_ADDRESS:      Trampolines.        (line  127)
* TARGET_TRAMPOLINE_INIT:                Trampolines.        (line  107)
* TARGET_TRANSLATE_MODE_ATTRIBUTE:       Register Arguments. (line  325)
* TARGET_TRULY_NOOP_TRUNCATION:          Misc.               (line  184)
* TARGET_UNSPEC_MAY_TRAP_P:              Misc.               (line  826)
* TARGET_UNWIND_TABLES_DEFAULT:          Exception Region Output.
                                                             (line   73)
* TARGET_UNWIND_WORD_MODE:               Storage Layout.     (line  505)
* TARGET_UPDATE_STACK_BOUNDARY:          Misc.               (line 1054)
* TARGET_USES_WEAK_UNWIND_INFO:          Exception Handling. (line  123)
* TARGET_USE_ANCHORS_FOR_SYMBOL_P:       Anchored Addresses. (line   53)
* TARGET_USE_BLOCKS_FOR_CONSTANT_P:      Addressing Modes.   (line  248)
* TARGET_USE_BLOCKS_FOR_DECL_P:          Addressing Modes.   (line  255)
* TARGET_USE_BY_PIECES_INFRASTRUCTURE_P: Costs.              (line  165)
* TARGET_USE_PSEUDO_PIC_REG:             Register Arguments. (line   84)
* TARGET_VALID_DLLIMPORT_ATTRIBUTE_P:    Target Attributes.  (line   66)
* TARGET_VALID_POINTER_MODE:             Register Arguments. (line  313)
* TARGET_VECTORIZE_ADD_STMT_COST:        Addressing Modes.   (line  461)
* TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_MODES: Addressing Modes.
                                                             (line  376)
* TARGET_VECTORIZE_BUILTIN_GATHER:       Addressing Modes.   (line  484)
* TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD: Addressing Modes.  (line  266)
* TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION: Addressing Modes.
                                                             (line  344)
* TARGET_VECTORIZE_BUILTIN_SCATTER:      Addressing Modes.   (line  491)
* TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST: Addressing Modes.
                                                             (line  292)
* TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION: Addressing Modes.
                                                             (line  336)
* TARGET_VECTORIZE_DESTROY_COST_DATA:    Addressing Modes.   (line  479)
* TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE: Addressing Modes.
                                                             (line  445)
* TARGET_VECTORIZE_FINISH_COST:          Addressing Modes.   (line  472)
* TARGET_VECTORIZE_GET_MASK_MODE:        Addressing Modes.   (line  433)
* TARGET_VECTORIZE_INIT_COST:            Addressing Modes.   (line  452)
* TARGET_VECTORIZE_PREFERRED_SIMD_MODE:  Addressing Modes.   (line  361)
* TARGET_VECTORIZE_PREFERRED_VECTOR_ALIGNMENT: Addressing Modes.
                                                             (line  298)
* TARGET_VECTORIZE_RELATED_MODE:         Addressing Modes.   (line  407)
* TARGET_VECTORIZE_SPLIT_REDUCTION:      Addressing Modes.   (line  368)
* TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT: Addressing Modes.
                                                             (line  351)
* TARGET_VECTORIZE_VECTOR_ALIGNMENT_REACHABLE: Addressing Modes.
                                                             (line  310)
* TARGET_VECTORIZE_VEC_PERM_CONST:       Addressing Modes.   (line  316)
* TARGET_VECTOR_ALIGNMENT:               Storage Layout.     (line  298)
* TARGET_VECTOR_MODE_SUPPORTED_P:        Register Arguments. (line  345)
* TARGET_VERIFY_TYPE_CONTEXT:            Misc.               (line 1029)
* TARGET_VTABLE_DATA_ENTRY_DISTANCE:     Type Layout.        (line  303)
* TARGET_VTABLE_ENTRY_ALIGN:             Type Layout.        (line  297)
* TARGET_VTABLE_USES_DESCRIPTORS:        Type Layout.        (line  286)
* TARGET_WANT_DEBUG_PUB_SECTIONS:        DWARF.              (line   72)
* TARGET_WARN_FUNC_RETURN:               Tail Calls.         (line   35)
* TARGET_WARN_PARAMETER_PASSING_ABI:     Aggregate Return.   (line   90)
* TARGET_WEAK_NOT_IN_ARCHIVE_TOC:        Label Output.       (line  308)
* TCmode:                                Machine Modes.      (line  199)
* TDmode:                                Machine Modes.      (line   97)
* TEMPLATE_DECL:                         Declarations.       (line    6)
* Temporaries:                           Temporaries.        (line    6)
* termination routines:                  Initialization.     (line    6)
* testing constraints:                   C Constraint Interface.
                                                             (line    6)
* TEXT_SECTION_ASM_OP:                   Sections.           (line   37)
* TFmode:                                Machine Modes.      (line  101)
* The Language:                          The Language.       (line    6)
* THEN_CLAUSE:                           Statements for C++. (line    6)
* THREAD_MODEL_SPEC:                     Driver.             (line  162)
* THROW_EXPR:                            Unary and Binary Expressions.
                                                             (line    6)
* THUNK_DECL:                            Declarations.       (line    6)
* THUNK_DELTA:                           Declarations.       (line    6)
* TImode:                                Machine Modes.      (line   48)
* TImode, in insn:                       Insns.              (line  291)
* TLS_COMMON_ASM_OP:                     Sections.           (line   80)
* TLS_SECTION_ASM_FLAG:                  Sections.           (line   85)
* tm.h macros:                           Target Macros.      (line    6)
* TQFmode:                               Machine Modes.      (line   65)
* TQmode:                                Machine Modes.      (line  122)
* trampolines for nested functions:      Trampolines.        (line    6)
* TRAMPOLINE_ALIGNMENT:                  Trampolines.        (line  101)
* TRAMPOLINE_SECTION:                    Trampolines.        (line   92)
* TRAMPOLINE_SIZE:                       Trampolines.        (line   97)
* TRANSFER_FROM_TRAMPOLINE:              Trampolines.        (line  163)
* trap instruction pattern:              Standard Names.     (line 2121)
* tree:                                  Tree overview.      (line    6)
* tree <1>:                              Macros and Functions.
                                                             (line    6)
* Tree SSA:                              Tree SSA.           (line    6)
* TREE_CHAIN:                            Macros and Functions.
                                                             (line    6)
* TREE_CODE:                             Tree overview.      (line    6)
* tree_fits_shwi_p:                      Constant expressions.
                                                             (line    6)
* tree_fits_uhwi_p:                      Constant expressions.
                                                             (line    6)
* TREE_INT_CST_ELT:                      Constant expressions.
                                                             (line    6)
* tree_int_cst_equal:                    Constant expressions.
                                                             (line    6)
* TREE_INT_CST_LOW:                      Constant expressions.
                                                             (line    6)
* tree_int_cst_lt:                       Constant expressions.
                                                             (line    6)
* TREE_INT_CST_NUNITS:                   Constant expressions.
                                                             (line    6)
* TREE_LIST:                             Containers.         (line    6)
* TREE_OPERAND:                          Expression trees.   (line    6)
* TREE_PUBLIC:                           Function Basics.    (line    6)
* TREE_PUBLIC <1>:                       Function Properties.
                                                             (line   28)
* TREE_PURPOSE:                          Containers.         (line    6)
* TREE_READONLY:                         Function Properties.
                                                             (line   37)
* tree_size:                             Macros and Functions.
                                                             (line   13)
* TREE_STATIC:                           Function Properties.
                                                             (line   31)
* TREE_STRING_LENGTH:                    Constant expressions.
                                                             (line    6)
* TREE_STRING_POINTER:                   Constant expressions.
                                                             (line    6)
* TREE_THIS_VOLATILE:                    Function Properties.
                                                             (line   34)
* tree_to_shwi:                          Constant expressions.
                                                             (line    6)
* tree_to_uhwi:                          Constant expressions.
                                                             (line    6)
* TREE_TYPE:                             Macros and Functions.
                                                             (line    6)
* TREE_TYPE <1>:                         Types.              (line    6)
* TREE_TYPE <2>:                         Working with declarations.
                                                             (line   11)
* TREE_TYPE <3>:                         Expression trees.   (line    6)
* TREE_TYPE <4>:                         Expression trees.   (line   17)
* TREE_TYPE <5>:                         Function Basics.    (line   47)
* TREE_TYPE <6>:                         Types for C++.      (line    6)
* TREE_VALUE:                            Containers.         (line    6)
* TREE_VEC:                              Containers.         (line    6)
* TREE_VEC_ELT:                          Containers.         (line    6)
* TREE_VEC_LENGTH:                       Containers.         (line    6)
* true positive:                         Guidelines for Diagnostics.
                                                             (line   39)
* truncate:                              Conversions.        (line   38)
* truncMN2 instruction pattern:          Standard Names.     (line 1442)
* TRUNC_DIV_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* TRUNC_MOD_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* TRUTH_ANDIF_EXPR:                      Unary and Binary Expressions.
                                                             (line    6)
* TRUTH_AND_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* TRUTH_NOT_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* TRUTH_ORIF_EXPR:                       Unary and Binary Expressions.
                                                             (line    6)
* TRUTH_OR_EXPR:                         Unary and Binary Expressions.
                                                             (line    6)
* TRUTH_XOR_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* TRY_BLOCK:                             Statements for C++. (line    6)
* TRY_HANDLERS:                          Statements for C++. (line    6)
* TRY_STMTS:                             Statements for C++. (line    6)
* Tuple specific accessors:              Tuple specific accessors.
                                                             (line    6)
* tuples:                                Tuple representation.
                                                             (line    6)
* type:                                  Types.              (line    6)
* type declaration:                      Declarations.       (line    6)
* TYPENAME_TYPE:                         Types for C++.      (line    6)
* TYPENAME_TYPE_FULLNAME:                Types.              (line    6)
* TYPENAME_TYPE_FULLNAME <1>:            Types for C++.      (line    6)
* TYPEOF_TYPE:                           Types for C++.      (line    6)
* TYPE_ALIGN:                            Types.              (line    6)
* TYPE_ALIGN <1>:                        Types.              (line   30)
* TYPE_ALIGN <2>:                        Types for C++.      (line    6)
* TYPE_ALIGN <3>:                        Types for C++.      (line   44)
* TYPE_ARG_TYPES:                        Types.              (line    6)
* TYPE_ARG_TYPES <1>:                    Types for C++.      (line    6)
* TYPE_ASM_OP:                           Label Output.       (line   76)
* TYPE_ATTRIBUTES:                       Attributes.         (line   24)
* TYPE_BINFO:                            Classes.            (line    6)
* TYPE_BUILT_IN:                         Types for C++.      (line   66)
* TYPE_CANONICAL:                        Types.              (line    6)
* TYPE_CANONICAL <1>:                    Types.              (line   41)
* TYPE_CONTEXT:                          Types.              (line    6)
* TYPE_CONTEXT <1>:                      Types for C++.      (line    6)
* TYPE_DECL:                             Declarations.       (line    6)
* TYPE_FIELDS:                           Types.              (line    6)
* TYPE_FIELDS <1>:                       Types for C++.      (line    6)
* TYPE_FIELDS <2>:                       Classes.            (line    6)
* TYPE_HAS_ARRAY_NEW_OPERATOR:           Classes.            (line   93)
* TYPE_HAS_DEFAULT_CONSTRUCTOR:          Classes.            (line   78)
* TYPE_HAS_MUTABLE_P:                    Classes.            (line   83)
* TYPE_HAS_NEW_OPERATOR:                 Classes.            (line   90)
* TYPE_MAIN_VARIANT:                     Types.              (line    6)
* TYPE_MAIN_VARIANT <1>:                 Types.              (line   19)
* TYPE_MAIN_VARIANT <2>:                 Types for C++.      (line    6)
* TYPE_MAX_VALUE:                        Types.              (line    6)
* TYPE_METHOD_BASETYPE:                  Types.              (line    6)
* TYPE_METHOD_BASETYPE <1>:              Types for C++.      (line    6)
* TYPE_MIN_VALUE:                        Types.              (line    6)
* TYPE_NAME:                             Types.              (line    6)
* TYPE_NAME <1>:                         Types.              (line   33)
* TYPE_NAME <2>:                         Types for C++.      (line    6)
* TYPE_NAME <3>:                         Types for C++.      (line   47)
* TYPE_NOTHROW_P:                        Functions for C++.  (line  154)
* TYPE_OFFSET_BASETYPE:                  Types.              (line    6)
* TYPE_OFFSET_BASETYPE <1>:              Types for C++.      (line    6)
* TYPE_OPERAND_FMT:                      Label Output.       (line   87)
* TYPE_OVERLOADS_ARRAY_REF:              Classes.            (line  101)
* TYPE_OVERLOADS_ARROW:                  Classes.            (line  104)
* TYPE_OVERLOADS_CALL_EXPR:              Classes.            (line   97)
* TYPE_POLYMORPHIC_P:                    Classes.            (line   74)
* TYPE_PRECISION:                        Types.              (line    6)
* TYPE_PRECISION <1>:                    Types for C++.      (line    6)
* TYPE_PTRDATAMEM_P:                     Types for C++.      (line    6)
* TYPE_PTRDATAMEM_P <1>:                 Types for C++.      (line   69)
* TYPE_PTRFN_P:                          Types for C++.      (line   76)
* TYPE_PTROBV_P:                         Types for C++.      (line    6)
* TYPE_PTROB_P:                          Types for C++.      (line   79)
* TYPE_PTR_P:                            Types for C++.      (line   72)
* TYPE_QUAL_CONST:                       Types.              (line    6)
* TYPE_QUAL_CONST <1>:                   Types for C++.      (line    6)
* TYPE_QUAL_RESTRICT:                    Types.              (line    6)
* TYPE_QUAL_RESTRICT <1>:                Types for C++.      (line    6)
* TYPE_QUAL_VOLATILE:                    Types.              (line    6)
* TYPE_QUAL_VOLATILE <1>:                Types for C++.      (line    6)
* TYPE_RAISES_EXCEPTIONS:                Functions for C++.  (line  149)
* TYPE_SIZE:                             Types.              (line    6)
* TYPE_SIZE <1>:                         Types.              (line   25)
* TYPE_SIZE <2>:                         Types for C++.      (line    6)
* TYPE_SIZE <3>:                         Types for C++.      (line   39)
* TYPE_STRUCTURAL_EQUALITY_P:            Types.              (line    6)
* TYPE_STRUCTURAL_EQUALITY_P <1>:        Types.              (line   77)
* TYPE_UNQUALIFIED:                      Types.              (line    6)
* TYPE_UNQUALIFIED <1>:                  Types for C++.      (line    6)
* TYPE_VFIELD:                           Classes.            (line    6)
* uaddvM4 instruction pattern:           Standard Names.     (line  461)
* uavgM3_ceil instruction pattern:       Standard Names.     (line  860)
* uavgM3_floor instruction pattern:      Standard Names.     (line  848)
* UDAmode:                               Machine Modes.      (line  170)
* udiv:                                  Arithmetic.         (line  130)
* udivM3 instruction pattern:            Standard Names.     (line  442)
* udivmodM4 instruction pattern:         Standard Names.     (line  825)
* udot_prodM instruction pattern:        Standard Names.     (line  570)
* UDQmode:                               Machine Modes.      (line  138)
* UHAmode:                               Machine Modes.      (line  162)
* UHQmode:                               Machine Modes.      (line  130)
* UINT16_TYPE:                           Type Layout.        (line  214)
* UINT32_TYPE:                           Type Layout.        (line  215)
* UINT64_TYPE:                           Type Layout.        (line  216)
* UINT8_TYPE:                            Type Layout.        (line  213)
* UINTMAX_TYPE:                          Type Layout.        (line  197)
* UINTPTR_TYPE:                          Type Layout.        (line  234)
* UINT_FAST16_TYPE:                      Type Layout.        (line  230)
* UINT_FAST32_TYPE:                      Type Layout.        (line  231)
* UINT_FAST64_TYPE:                      Type Layout.        (line  232)
* UINT_FAST8_TYPE:                       Type Layout.        (line  229)
* UINT_LEAST16_TYPE:                     Type Layout.        (line  222)
* UINT_LEAST32_TYPE:                     Type Layout.        (line  223)
* UINT_LEAST64_TYPE:                     Type Layout.        (line  224)
* UINT_LEAST8_TYPE:                      Type Layout.        (line  221)
* umaddMN4 instruction pattern:          Standard Names.     (line  772)
* umax:                                  Arithmetic.         (line  149)
* umaxM3 instruction pattern:            Standard Names.     (line  442)
* umin:                                  Arithmetic.         (line  149)
* uminM3 instruction pattern:            Standard Names.     (line  442)
* umod:                                  Arithmetic.         (line  136)
* umodM3 instruction pattern:            Standard Names.     (line  442)
* umsubMN4 instruction pattern:          Standard Names.     (line  796)
* umulhisi3 instruction pattern:         Standard Names.     (line  744)
* umulhrsM3 instruction pattern:         Standard Names.     (line  605)
* umulhsM3 instruction pattern:          Standard Names.     (line  595)
* umulM3_highpart instruction pattern:   Standard Names.     (line  758)
* umulqihi3 instruction pattern:         Standard Names.     (line  744)
* umulsidi3 instruction pattern:         Standard Names.     (line  744)
* umulvM4 instruction pattern:           Standard Names.     (line  466)
* unchanging:                            Flags.              (line  307)
* unchanging, in call_insn:              Flags.              (line  115)
* unchanging, in jump_insn, call_insn and insn: Flags.       (line   28)
* unchanging, in mem:                    Flags.              (line   78)
* unchanging, in subreg:                 Flags.              (line  184)
* unchanging, in subreg <1>:             Flags.              (line  194)
* unchanging, in symbol_ref:             Flags.              (line   19)
* UNEQ_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* UNGE_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* UNGT_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* unions, returning:                     Interface.          (line   10)
* UNION_TYPE:                            Types.              (line    6)
* UNION_TYPE <1>:                        Classes.            (line    6)
* UNITS_PER_WORD:                        Storage Layout.     (line   60)
* UNKNOWN_TYPE:                          Types.              (line    6)
* UNKNOWN_TYPE <1>:                      Types for C++.      (line    6)
* UNLE_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* UNLIKELY_EXECUTED_TEXT_SECTION_NAME:   Sections.           (line   48)
* UNLT_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* UNORDERED_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* unshare_all_rtl:                       Sharing.            (line   61)
* unsigned division:                     Arithmetic.         (line  130)
* unsigned division with unsigned saturation: Arithmetic.    (line  130)
* unsigned greater than:                 Comparisons.        (line   64)
* unsigned greater than <1>:             Comparisons.        (line   72)
* unsigned less than:                    Comparisons.        (line   68)
* unsigned less than <1>:                Comparisons.        (line   76)
* unsigned minimum and maximum:          Arithmetic.         (line  149)
* unsigned_fix:                          Conversions.        (line   77)
* unsigned_float:                        Conversions.        (line   62)
* unsigned_fract_convert:                Conversions.        (line   97)
* unsigned_sat_fract:                    Conversions.        (line  103)
* unspec:                                Side Effects.       (line  299)
* unspec <1>:                            Constant Definitions.
                                                             (line  111)
* unspec_volatile:                       Side Effects.       (line  299)
* unspec_volatile <1>:                   Constant Definitions.
                                                             (line   99)
* untyped_call instruction pattern:      Standard Names.     (line 1747)
* untyped_return instruction pattern:    Standard Names.     (line 1810)
* UPDATE_PATH_HOST_CANONICALIZE (PATH):  Filesystem.         (line   59)
* update_ssa:                            SSA.                (line   74)
* update_stmt:                           Manipulating GIMPLE statements.
                                                             (line  140)
* update_stmt <1>:                       SSA Operands.       (line    6)
* update_stmt_if_modified:               Manipulating GIMPLE statements.
                                                             (line  143)
* UQQmode:                               Machine Modes.      (line  126)
* usaddM3 instruction pattern:           Standard Names.     (line  442)
* usadM instruction pattern:             Standard Names.     (line  579)
* USAmode:                               Machine Modes.      (line  166)
* usashlM3 instruction pattern:          Standard Names.     (line  828)
* usdivM3 instruction pattern:           Standard Names.     (line  442)
* use:                                   Side Effects.       (line  168)
* used:                                  Flags.              (line  325)
* used, in symbol_ref:                   Flags.              (line  211)
* user:                                  GTY Options.        (line  245)
* user experience guidelines:            User Experience Guidelines.
                                                             (line    6)
* user gc:                               User GC.            (line    6)
* USER_LABEL_PREFIX:                     Instruction Output. (line  152)
* USE_C_ALLOCA:                          Host Misc.          (line   19)
* USE_LD_AS_NEEDED:                      Driver.             (line  135)
* USE_LOAD_POST_DECREMENT:               Costs.              (line  254)
* USE_LOAD_POST_INCREMENT:               Costs.              (line  249)
* USE_LOAD_PRE_DECREMENT:                Costs.              (line  264)
* USE_LOAD_PRE_INCREMENT:                Costs.              (line  259)
* USE_SELECT_SECTION_FOR_FUNCTIONS:      Sections.           (line  205)
* USE_STORE_POST_DECREMENT:              Costs.              (line  274)
* USE_STORE_POST_INCREMENT:              Costs.              (line  269)
* USE_STORE_PRE_DECREMENT:               Costs.              (line  284)
* USE_STORE_PRE_INCREMENT:               Costs.              (line  279)
* USING_STMT:                            Statements for C++. (line    6)
* usmaddMN4 instruction pattern:         Standard Names.     (line  780)
* usmsubMN4 instruction pattern:         Standard Names.     (line  804)
* usmulhisi3 instruction pattern:        Standard Names.     (line  748)
* usmulM3 instruction pattern:           Standard Names.     (line  442)
* usmulqihi3 instruction pattern:        Standard Names.     (line  748)
* usmulsidi3 instruction pattern:        Standard Names.     (line  748)
* usnegM2 instruction pattern:           Standard Names.     (line  872)
* USQmode:                               Machine Modes.      (line  134)
* ussubM3 instruction pattern:           Standard Names.     (line  442)
* usubvM4 instruction pattern:           Standard Names.     (line  466)
* us_ashift:                             Arithmetic.         (line  173)
* us_minus:                              Arithmetic.         (line   38)
* us_mult:                               Arithmetic.         (line   93)
* us_neg:                                Arithmetic.         (line   82)
* us_plus:                               Arithmetic.         (line   14)
* us_truncate:                           Conversions.        (line   48)
* UTAmode:                               Machine Modes.      (line  174)
* UTQmode:                               Machine Modes.      (line  142)
* V in constraint:                       Simple Constraints. (line   43)
* values, returned by functions:         Scalar Return.      (line    6)
* varargs implementation:                Varargs.            (line    6)
* variable:                              Declarations.       (line    6)
* Variable Location Debug Information in RTL: Debug Information.
                                                             (line    6)
* VAR_DECL:                              Declarations.       (line    6)
* var_location:                          Debug Information.  (line   14)
* vashlM3 instruction pattern:           Standard Names.     (line  844)
* vashrM3 instruction pattern:           Standard Names.     (line  844)
* VA_ARG_EXPR:                           Unary and Binary Expressions.
                                                             (line    6)
* vcondeqMN instruction pattern:         Standard Names.     (line  385)
* vcondMN instruction pattern:           Standard Names.     (line  372)
* vconduMN instruction pattern:          Standard Names.     (line  382)
* vcond_mask_MN instruction pattern:     Standard Names.     (line  392)
* vector:                                Containers.         (line    6)
* vector operations:                     Vector Operations.  (line    6)
* VECTOR_CST:                            Constant expressions.
                                                             (line    6)
* VECTOR_STORE_FLAG_VALUE:               Misc.               (line  327)
* vec_cmpeqMN instruction pattern:       Standard Names.     (line  365)
* vec_cmpMN instruction pattern:         Standard Names.     (line  355)
* vec_cmpuMN instruction pattern:        Standard Names.     (line  362)
* vec_concat:                            Vector Operations.  (line   29)
* VEC_COND_EXPR:                         Vectors.            (line    6)
* vec_duplicate:                         Vector Operations.  (line   34)
* vec_duplicateM instruction pattern:    Standard Names.     (line  298)
* VEC_DUPLICATE_EXPR:                    Vectors.            (line    6)
* vec_extractMN instruction pattern:     Standard Names.     (line  282)
* vec_initMN instruction pattern:        Standard Names.     (line  291)
* vec_load_lanesMN instruction pattern:  Standard Names.     (line  165)
* VEC_LSHIFT_EXPR:                       Vectors.            (line    6)
* vec_mask_load_lanesMN instruction pattern: Standard Names. (line  189)
* vec_mask_store_lanesMN instruction pattern: Standard Names.
                                                             (line  219)
* vec_merge:                             Vector Operations.  (line   11)
* vec_packs_float_M instruction pattern: Standard Names.     (line  670)
* vec_packu_float_M instruction pattern: Standard Names.     (line  670)
* VEC_PACK_FIX_TRUNC_EXPR:               Vectors.            (line    6)
* VEC_PACK_FLOAT_EXPR:                   Vectors.            (line    6)
* VEC_PACK_SAT_EXPR:                     Vectors.            (line    6)
* vec_pack_sbool_trunc_M instruction pattern: Standard Names.
                                                             (line  647)
* vec_pack_sfix_trunc_M instruction pattern: Standard Names. (line  663)
* vec_pack_ssat_M instruction pattern:   Standard Names.     (line  656)
* VEC_PACK_TRUNC_EXPR:                   Vectors.            (line    6)
* vec_pack_trunc_M instruction pattern:  Standard Names.     (line  640)
* vec_pack_ufix_trunc_M instruction pattern: Standard Names. (line  663)
* vec_pack_usat_M instruction pattern:   Standard Names.     (line  656)
* vec_permM instruction pattern:         Standard Names.     (line  410)
* vec_permM instruction pattern <1>:     Addressing Modes.   (line  330)
* VEC_RSHIFT_EXPR:                       Vectors.            (line    6)
* vec_select:                            Vector Operations.  (line   19)
* vec_series:                            Vector Operations.  (line   41)
* vec_seriesM instruction pattern:       Standard Names.     (line  308)
* VEC_SERIES_EXPR:                       Vectors.            (line    6)
* vec_setM instruction pattern:          Standard Names.     (line  277)
* vec_shl_insert_M instruction pattern:  Standard Names.     (line  621)
* vec_shl_M instruction pattern:         Standard Names.     (line  628)
* vec_shr_M instruction pattern:         Standard Names.     (line  634)
* vec_store_lanesMN instruction pattern: Standard Names.     (line  206)
* vec_unpacks_float_hi_M instruction pattern: Standard Names.
                                                             (line  700)
* vec_unpacks_float_lo_M instruction pattern: Standard Names.
                                                             (line  700)
* vec_unpacks_hi_M instruction pattern:  Standard Names.     (line  677)
* vec_unpacks_lo_M instruction pattern:  Standard Names.     (line  677)
* vec_unpacks_sbool_hi_M instruction pattern: Standard Names.
                                                             (line  691)
* vec_unpacks_sbool_lo_M instruction pattern: Standard Names.
                                                             (line  691)
* vec_unpacku_float_hi_M instruction pattern: Standard Names.
                                                             (line  700)
* vec_unpacku_float_lo_M instruction pattern: Standard Names.
                                                             (line  700)
* vec_unpacku_hi_M instruction pattern:  Standard Names.     (line  684)
* vec_unpacku_lo_M instruction pattern:  Standard Names.     (line  684)
* VEC_UNPACK_FIX_TRUNC_HI_EXPR:          Vectors.            (line    6)
* VEC_UNPACK_FIX_TRUNC_LO_EXPR:          Vectors.            (line    6)
* VEC_UNPACK_FLOAT_HI_EXPR:              Vectors.            (line    6)
* VEC_UNPACK_FLOAT_LO_EXPR:              Vectors.            (line    6)
* VEC_UNPACK_HI_EXPR:                    Vectors.            (line    6)
* VEC_UNPACK_LO_EXPR:                    Vectors.            (line    6)
* vec_unpack_sfix_trunc_hi_M instruction pattern: Standard Names.
                                                             (line  709)
* vec_unpack_sfix_trunc_lo_M instruction pattern: Standard Names.
                                                             (line  709)
* vec_unpack_ufix_trunc_hi_M instruction pattern: Standard Names.
                                                             (line  709)
* vec_unpack_ufix_trunc_lo_M instruction pattern: Standard Names.
                                                             (line  709)
* VEC_WIDEN_MULT_HI_EXPR:                Vectors.            (line    6)
* VEC_WIDEN_MULT_LO_EXPR:                Vectors.            (line    6)
* vec_widen_smult_even_M instruction pattern: Standard Names.
                                                             (line  719)
* vec_widen_smult_hi_M instruction pattern: Standard Names.  (line  719)
* vec_widen_smult_lo_M instruction pattern: Standard Names.  (line  719)
* vec_widen_smult_odd_M instruction pattern: Standard Names. (line  719)
* vec_widen_sshiftl_hi_M instruction pattern: Standard Names.
                                                             (line  730)
* vec_widen_sshiftl_lo_M instruction pattern: Standard Names.
                                                             (line  730)
* vec_widen_umult_even_M instruction pattern: Standard Names.
                                                             (line  719)
* vec_widen_umult_hi_M instruction pattern: Standard Names.  (line  719)
* vec_widen_umult_lo_M instruction pattern: Standard Names.  (line  719)
* vec_widen_umult_odd_M instruction pattern: Standard Names. (line  719)
* vec_widen_ushiftl_hi_M instruction pattern: Standard Names.
                                                             (line  730)
* vec_widen_ushiftl_lo_M instruction pattern: Standard Names.
                                                             (line  730)
* verify_flow_info:                      Maintaining the CFG.
                                                             (line  116)
* virtual operands:                      SSA Operands.       (line    6)
* VIRTUAL_INCOMING_ARGS_REGNUM:          Regs and Memory.    (line   59)
* VIRTUAL_OUTGOING_ARGS_REGNUM:          Regs and Memory.    (line   87)
* VIRTUAL_STACK_DYNAMIC_REGNUM:          Regs and Memory.    (line   78)
* VIRTUAL_STACK_VARS_REGNUM:             Regs and Memory.    (line   69)
* VLIW:                                  Processor pipeline description.
                                                             (line    6)
* VLIW <1>:                              Processor pipeline description.
                                                             (line  223)
* vlshrM3 instruction pattern:           Standard Names.     (line  844)
* VMS:                                   Filesystem.         (line   37)
* VMS_DEBUGGING_INFO:                    VMS Debug.          (line    8)
* VOIDmode:                              Machine Modes.      (line  192)
* VOID_TYPE:                             Types.              (line    6)
* volatil:                               Flags.              (line  339)
* volatil, in insn, call_insn, jump_insn, code_label, jump_table_data, barrier, and note: Flags.
                                                             (line   33)
* volatil, in label_ref and reg_label:   Flags.              (line   54)
* volatil, in mem, asm_operands, and asm_input: Flags.       (line   65)
* volatil, in reg:                       Flags.              (line  106)
* volatil, in subreg:                    Flags.              (line  184)
* volatil, in subreg <1>:                Flags.              (line  194)
* volatil, in symbol_ref:                Flags.              (line  220)
* volatile memory references:            Flags.              (line  340)
* volatile, in prefetch:                 Flags.              (line   92)
* voting between constraint alternatives: Class Preferences. (line    6)
* vrotlM3 instruction pattern:           Standard Names.     (line  844)
* vrotrM3 instruction pattern:           Standard Names.     (line  844)
* walk_dominator_tree:                   SSA.                (line  195)
* walk_gimple_op:                        Statement and operand traversals.
                                                             (line   30)
* walk_gimple_seq:                       Statement and operand traversals.
                                                             (line   47)
* walk_gimple_stmt:                      Statement and operand traversals.
                                                             (line   10)
* WCHAR_TYPE:                            Type Layout.        (line  165)
* WCHAR_TYPE_SIZE:                       Type Layout.        (line  173)
* which_alternative:                     Output Statement.   (line   58)
* WHILE_BODY:                            Statements for C++. (line    6)
* WHILE_COND:                            Statements for C++. (line    6)
* WHILE_STMT:                            Statements for C++. (line    6)
* while_ultMN instruction pattern:       Standard Names.     (line  320)
* whopr:                                 LTO.                (line    6)
* widen_ssumM3 instruction pattern:      Standard Names.     (line  587)
* widen_usumM3 instruction pattern:      Standard Names.     (line  588)
* WIDEST_HARDWARE_FP_SIZE:               Type Layout.        (line  110)
* window_save instruction pattern:       Standard Names.     (line 2092)
* WINT_TYPE:                             Type Layout.        (line  178)
* WORDS_BIG_ENDIAN:                      Storage Layout.     (line   28)
* WORDS_BIG_ENDIAN, effect on subreg:    Regs and Memory.    (line  225)
* word_mode:                             Machine Modes.      (line  458)
* WORD_REGISTER_OPERATIONS:              Misc.               (line   53)
* wpa:                                   LTO.                (line    6)
* X in constraint:                       Simple Constraints. (line  122)
* x-HOST:                                Host Fragment.      (line    6)
* XCmode:                                Machine Modes.      (line  199)
* XCOFF_DEBUGGING_INFO:                  DBX Options.        (line   12)
* XEXP:                                  Accessors.          (line    6)
* XFmode:                                Machine Modes.      (line   82)
* XImode:                                Machine Modes.      (line   54)
* XINT:                                  Accessors.          (line    6)
* xm-MACHINE.h:                          Filesystem.         (line    6)
* xm-MACHINE.h <1>:                      Host Misc.          (line    6)
* xor:                                   Arithmetic.         (line  168)
* xor, canonicalization of:              Insn Canonicalizations.
                                                             (line   94)
* xorM3 instruction pattern:             Standard Names.     (line  442)
* xorsignM3 instruction pattern:         Standard Names.     (line 1149)
* XSTR:                                  Accessors.          (line    6)
* XVEC:                                  Accessors.          (line   38)
* XVECEXP:                               Accessors.          (line   45)
* XVECLEN:                               Accessors.          (line   41)
* XWINT:                                 Accessors.          (line    6)
* zero_extend:                           Conversions.        (line   28)
* zero_extendMN2 instruction pattern:    Standard Names.     (line 1452)
* zero_extract:                          Bit-Fields.         (line   30)
* zero_extract, canonicalization of:     Insn Canonicalizations.
                                                             (line  103)


vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
