
As an alternative to the string-based syntax, Emacs provides the
structured 'rx' notation based on Lisp S-expressions.  This notation is
usually easier to read, write and maintain than regexp strings, and can
be indented and commented freely.  It requires a conversion into string
form since that is what regexp functions expect, but that conversion
typically takes place during byte-compilation rather than when the Lisp
code using the regexp is run.

   Here is an 'rx' regexp(1) that matches a block comment in the C
programming language:

     (rx "/*"                          ; Initial /*
         (zero-or-more
          (or (not (any "*"))          ;  Either non-*,
              (seq "*"                 ;  or * followed by
                   (not (any "/")))))  ;  non-/
         (one-or-more "*")             ; At least one star,
         "/")                          ; and the final /

or, using shorter synonyms and written more compactly,

     (rx "/*"
         (* (| (not "*")
               (: "*" (not "/"))))
         (+ "*") "/")

In conventional string syntax, it would be written

     "/\\*\\(?:[^*]\\|\\*[^/]\\)*\\*+/"

   The 'rx' notation is mainly useful in Lisp code; it cannot be used in
most interactive situations where a regexp is requested, such as when
running 'query-replace-regexp' or in variable customization.

MENU

* |Rx_Constructs|::       Constructs valid in rx forms.
* |Rx_Functions|::        Functions and macros that use rx forms.
* |Extending_Rx|::        How to define your own rx forms.

   ---------- Footnotes ----------

   (1) It could be written much simpler with non-greedy operators
(how?), but that would make the example less interesting.

==============================================================================
File: elisp.info,  Node: |Rx_Constructs|,  Next: |Rx_Functions|,  Up: |Rx_Notation|
==============================================================================

                                                                 *Rx_Constructs*

34.3.3.1 Constructs in 'rx' regexps
-----------------------------------

The various forms in 'rx' regexps are described below.  The shorthand RX
represents any 'rx' form, and RX... means zero or more 'rx' forms.
Where the corresponding string regexp syntax is given, A, B, ... are
string regexp subexpressions.

Literals
--------

'"some-string"'
     Match the string 'some-string' literally.  There are no characters
     with special meaning, unlike in string regexps.

'?C'
     Match the character 'C' literally.

Sequence and alternative
------------------------

'(seq RX...)'
'(sequence RX...)'
'(: RX...)'
'(and RX...)'
     Match the RXs in sequence.  Without arguments, the expression
     matches the empty string.
     Corresponding string regexp: 'AB...' (subexpressions in sequence).

'(or RX...)'
'(| RX...)'
     Match exactly one of the RXs.  If all arguments are strings,
     characters, or 'or' forms so constrained, the longest possible
     match will always be used.  Otherwise, either the longest match or
     the first (in left-to-right order) will be used.  Without
     arguments, the expression will not match anything at all.
     Corresponding string regexp: 'A\|B\|...'.

'unmatchable'
     Refuse any match.  Equivalent to '(or)'.  *Note
     regexp-unmatchable::.

Repetition
----------

Normally, repetition forms are greedy, in that they attempt to match as
many times as possible.  Some forms are non-greedy; they try to match as
few times as possible (*note Non-greedy repetition::).

'(zero-or-more RX...)'
'(0+ RX...)'
     Match the RXs zero or more times.  Greedy by default.
     Corresponding string regexp: 'A*' (greedy), 'A*?' (non-greedy)

'(one-or-more RX...)'
'(1+ RX...)'
     Match the RXs one or more times.  Greedy by default.
     Corresponding string regexp: 'A+' (greedy), 'A+?' (non-greedy)

'(zero-or-one RX...)'
'(optional RX...)'
'(opt RX...)'
     Match the RXs once or an empty string.  Greedy by default.
     Corresponding string regexp: 'A?' (greedy), 'A??' (non-greedy).

'(* RX...)'
     Match the RXs zero or more times.  Greedy.
     Corresponding string regexp: 'A*'

'(+ RX...)'
     Match the RXs one or more times.  Greedy.
     Corresponding string regexp: 'A+'

'(? RX...)'
     Match the RXs once or an empty string.  Greedy.
     Corresponding string regexp: 'A?'

'(*? RX...)'
     Match the RXs zero or more times.  Non-greedy.
     Corresponding string regexp: 'A*?'

'(+? RX...)'
     Match the RXs one or more times.  Non-greedy.
     Corresponding string regexp: 'A+?'

'(?? RX...)'
     Match the RXs or an empty string.  Non-greedy.
     Corresponding string regexp: 'A??'

'(= N RX...)'
'(repeat N RX)'
     Match the RXs exactly N times.
     Corresponding string regexp: 'A\{N\}'

'(>= N RX...)'
     Match the RXs N or more times.  Greedy.
     Corresponding string regexp: 'A\{N,\}'

'(** N M RX...)'
'(repeat N M RX...)'
     Match the RXs at least N but no more than M times.  Greedy.
     Corresponding string regexp: 'A\{N,M\}'

   The greediness of some repetition forms can be controlled using the
following constructs.  However, it is usually better to use the explicit
non-greedy forms above when such matching is required.

'(minimal-match RX)'
     Match RX, with 'zero-or-more', '0+', 'one-or-more', '1+',
     'zero-or-one', 'opt' and 'optional' using non-greedy matching.

'(maximal-match RX)'
     Match RX, with 'zero-or-more', '0+', 'one-or-more', '1+',
     'zero-or-one', 'opt' and 'optional' using greedy matching.  This is
     the default.

Matching single characters
--------------------------

'(any SET...)'
'(char SET...)'
'(in SET...)'
     Match a single character from one of the SETs.  Each SET is a
     character, a string representing the set of its characters, a range
     or a character class (see below).  A range is either a
     hyphen-separated string like '"A-Z"', or a cons of characters like
     '(?A . ?Z)'.

     Note that hyphen ('-') is special in strings in this construct,
     since it acts as a range separator.  To include a hyphen, add it as
     a separate character or single-character string.
     Corresponding string regexp: '[...]'

'(not CHARSPEC)'
     Match a character not included in CHARSPEC.  CHARSPEC can be a
     character, a single-character string, an 'any', 'not', 'or',
     'intersection', 'syntax' or 'category' form, or a character class.
     If CHARSPEC is an 'or' form, its arguments have the same
     restrictions as those of 'intersection'; see below.
     Corresponding string regexp: '[^...]', '\SCODE', '\CCODE'

'(intersection CHARSET...)'
     Match a character included in all of the CHARSETs.  Each CHARSET
     can be a character, a single-character string, an 'any' form
     without character classes, or an 'intersection', 'or' or 'not' form
     whose arguments are also CHARSETs.

'not-newline', 'nonl'
     Match any character except a newline.
     Corresponding string regexp: '.' (dot)

'anychar', 'anything'
     Match any character.
     Corresponding string regexp: '.\|\n' (for example)

character class
     Match a character from a named character class:

     'alpha', 'alphabetic', 'letter'
          Match alphabetic characters.  More precisely, match characters
          whose Unicode 'general-category' property indicates that they
          are alphabetic.

     'alnum', 'alphanumeric'
          Match alphabetic characters and digits.  More precisely, match
          characters whose Unicode 'general-category' property indicates
          that they are alphabetic or decimal digits.

     'digit', 'numeric', 'num'
          Match the digits '0'-'9'.

     'xdigit', 'hex-digit', 'hex'
          Match the hexadecimal digits '0'-'9', 'A'-'F' and 'a'-'f'.

     'cntrl', 'control'
          Match any character whose code is in the range 0-31.

     'blank'
          Match horizontal whitespace.  More precisely, match characters
          whose Unicode 'general-category' property indicates that they
          are spacing separators.

     'space', 'whitespace', 'white'
          Match any character that has whitespace syntax (*note Syntax
          Class Table::).

     'lower', 'lower-case'
          Match anything lower-case, as determined by the current case
          table.  If 'case-fold-search' is non-nil, this also matches
          any upper-case letter.

     'upper', 'upper-case'
          Match anything upper-case, as determined by the current case
          table.  If 'case-fold-search' is non-nil, this also matches
          any lower-case letter.

     'graph', 'graphic'
          Match any character except whitespace, ASCII and non-ASCII
          control characters, surrogates, and codepoints unassigned by
          Unicode, as indicated by the Unicode 'general-category'
          property.

     'print', 'printing'
          Match whitespace or a character matched by 'graph'.

     'punct', 'punctuation'
          Match any punctuation character.  (At present, for multibyte
          characters, anything that has non-word syntax.)

     'word', 'wordchar'
          Match any character that has word syntax (*note Syntax Class
          Table::).

     'ascii'
          Match any ASCII character (codes 0-127).

     'nonascii'
          Match any non-ASCII character (but not raw bytes).

     Corresponding string regexp: '[[:CLASS:]]'

'(syntax SYNTAX)'
     Match a character with syntax SYNTAX, being one of the following
     names:

     Syntax name           Syntax character
     -----------------------------------------
     'whitespace'          '-'
     'punctuation'         '.'
     'word'                'w'
     'symbol'              '_'
     'open-parenthesis'    '('
     'close-parenthesis'   ')'
     'expression-prefix'   '''
     'string-quote'        '"'
     'paired-delimiter'    '$'
     'escape'              '\'
     'character-quote'     '/'
     'comment-start'       '<'
     'comment-end'         '>'
     'string-delimiter'    '|'
     'comment-delimiter'   '!'

     For details, *note Syntax Class Table::.  Please note that '(syntax
     punctuation)' is _not_ equivalent to the character class
     'punctuation'.
     Corresponding string regexp: '\sCODE'

'(category CATEGORY)'
     Match a character in category CATEGORY, which is either one of the
     names below or its category character.

     Category name                        Category character
     ----------------------------------------------------------
     'space-for-indent'                   space
     'base'                               '.'
     'consonant'                          '0'
     'base-vowel'                         '1'
     'upper-diacritical-mark'             '2'
     'lower-diacritical-mark'             '3'
     'tone-mark'                          '4'
     'symbol'                             '5'
     'digit'                              '6'
     'vowel-modifying-diacritical-mark'   '7'
     'vowel-sign'                         '8'
     'semivowel-lower'                    '9'
     'not-at-end-of-line'                 '<'
     'not-at-beginning-of-line'           '>'
     'alpha-numeric-two-byte'             'A'
     'chinese-two-byte'                   'C'
     'greek-two-byte'                     'G'
     'japanese-hiragana-two-byte'         'H'
     'indian-two-byte'                    'I'
     'japanese-katakana-two-byte'         'K'
     'strong-left-to-right'               'L'
     'korean-hangul-two-byte'             'N'
     'strong-right-to-left'               'R'
     'cyrillic-two-byte'                  'Y'
     'combining-diacritic'                '^'
     'ascii'                              'a'
     'arabic'                             'b'
     'chinese'                            'c'
     'ethiopic'                           'e'
     'greek'                              'g'
     'korean'                             'h'
     'indian'                             'i'
     'japanese'                           'j'
     'japanese-katakana'                  'k'
     'latin'                              'l'
     'lao'                                'o'
     'tibetan'                            'q'
     'japanese-roman'                     'r'
     'thai'                               't'
     'vietnamese'                         'v'
     'hebrew'                             'w'
     'cyrillic'                           'y'
     'can-break'                          '|'

     For more information about currently defined categories, run the
     command 'M-x describe-categories <RET>'.  For how to define new
     categories, *note Categories::.
     Corresponding string regexp: '\cCODE'

Zero-width assertions
---------------------

These all match the empty string, but only in specific places.

'line-start', 'bol'
     Match at the beginning of a line.
     Corresponding string regexp: '^'

'line-end', 'eol'
     Match at the end of a line.
     Corresponding string regexp: '$'

'string-start', 'bos', 'buffer-start', 'bot'
     Match at the start of the string or buffer being matched against.
     Corresponding string regexp: '\`'

'string-end', 'eos', 'buffer-end', 'eot'
     Match at the end of the string or buffer being matched against.
     Corresponding string regexp: '\''

'point'
     Match at point.
     Corresponding string regexp: '\='

'word-start', 'bow'
     Match at the beginning of a word.
     Corresponding string regexp: '\<'

'word-end', 'eow'
     Match at the end of a word.
     Corresponding string regexp: '\>'

'word-boundary'
     Match at the beginning or end of a word.
     Corresponding string regexp: '\b'

'not-word-boundary'
     Match anywhere but at the beginning or end of a word.
     Corresponding string regexp: '\B'

'symbol-start'
     Match at the beginning of a symbol.
     Corresponding string regexp: '\_<'

'symbol-end'
     Match at the end of a symbol.
     Corresponding string regexp: '\_>'

Capture groups
--------------

'(group RX...)'
'(submatch RX...)'
     Match the RXs, making the matched text and position accessible in
     the match data.  The first group in a regexp is numbered 1;
     subsequent groups will be numbered one higher than the previous
     group.
     Corresponding string regexp: '\(...\)'

'(group-n N RX...)'
'(submatch-n N RX...)'
     Like 'group', but explicitly assign the group number N.  N must be
     positive.
     Corresponding string regexp: '\(?N:...\)'

'(backref N)'
     Match the text previously matched by group number N.  N must be in
     the range 1-9.
     Corresponding string regexp: '\N'

Dynamic inclusion
-----------------

'(literal EXPR)'
     Match the literal string that is the result from evaluating the
     Lisp expression EXPR.  The evaluation takes place at call time, in
     the current lexical environment.

'(regexp EXPR)'
'(regex EXPR)'
     Match the string regexp that is the result from evaluating the Lisp
     expression EXPR.  The evaluation takes place at call time, in the
     current lexical environment.

'(eval EXPR)'
     Match the rx form that is the result from evaluating the Lisp
     expression EXPR.  The evaluation takes place at macro-expansion
     time for 'rx', at call time for 'rx-to-string', in the current
     global environment.

==============================================================================
File: elisp.info,  Node: |Rx_Functions|,  Next: |Extending_Rx|,  Prev: |Rx_Constructs|,  Up: |Rx_Notation|
==============================================================================

                                                                  *Rx_Functions*

34.3.3.2 Functions and macros using 'rx' regexps
------------------------------------------------

 -- Macro: rx rx-expr...
     Translate the RX-EXPRs to a string regexp, as if they were the body
     of a '(seq ...)' form.  The 'rx' macro expands to a string
     constant, or, if 'literal' or 'regexp' forms are used, a Lisp
     expression that evaluates to a string.

 -- Function: rx-to-string rx-expr &optional no-group
     Translate RX-EXPR to a string regexp which is returned.  If
     NO-GROUP is absent or nil, bracket the result in a non-capturing
     group, '\(?:...\)', if necessary to ensure that a postfix operator
     appended to it will apply to the whole expression.

     Arguments to 'literal' and 'regexp' forms in RX-EXPR must be string
     literals.

   The 'pcase' macro can use 'rx' expressions as patterns directly;
*note rx in pcase::.

   For mechanisms to add user-defined extensions to the 'rx' notation,
*note Extending Rx::.

==============================================================================
File: elisp.info,  Node: |Extending_Rx|,  Prev: |Rx_Functions|,  Up: |Rx_Notation|
==============================================================================

                                                                  *Extending_Rx*

34.3.3.3 Defining new 'rx' forms
--------------------------------

The 'rx' notation can be extended by defining new symbols and
parameterized forms in terms of other 'rx' expressions.  This is handy
for sharing parts between several regexps, and for making complex ones
easier to build and understand by putting them together from smaller
pieces.

   For example, you could define 'name' to mean '(one-or-more letter)',
and '(quoted X)' to mean '(seq ?' X ?')' for any X.  These forms could
then be used in 'rx' expressions like any other: '(rx (quoted name))'
would match a nonempty sequence of letters inside single quotes.

   The Lisp macros below provide different ways of binding names to
definitions.  Common to all of them are the following rules:

   * Built-in 'rx' forms, like 'digit' and 'group', cannot be redefined.

   * The definitions live in a name space of their own, separate from
     that of Lisp variables.  There is thus no need to attach a suffix
     like '-regexp' to names; they cannot collide with anything else.

   * Definitions cannot refer to themselves recursively, directly or
     indirectly.  If you find yourself needing this, you want a parser,
     not a regular expression.

   * Definitions are only ever expanded in calls to 'rx' or
     'rx-to-string', not merely by their presence in definition macros.
     This means that the order of definitions doesn't matter, even when
     they refer to each other, and that syntax errors only show up when
     they are used, not when they are defined.

   * User-defined forms are allowed wherever arbitrary 'rx' expressions
     are expected; for example, in the body of a 'zero-or-one' form, but
     not inside 'any' or 'category' forms.  They are also allowed inside
     'not' and 'intersection' forms.

 -- Macro: rx-define name [arglist] rx-form
     Define NAME globally in all subsequent calls to 'rx' and
     'rx-to-string'.  If ARGLIST is absent, then NAME is defined as a
     plain symbol to be replaced with RX-FORM.  Example:

          (rx-define haskell-comment (seq "--" (zero-or-more nonl)))
          (rx haskell-comment)
               => "--.*"

     If ARGLIST is present, it must be a list of zero or more argument
     names, and NAME is then defined as a parameterized form.  When used
     in an 'rx' expression as '(NAME ARG...)', each ARG will replace the
     corresponding argument name inside RX-FORM.

     ARGLIST may end in '&rest' and one final argument name, denoting a
     rest parameter.  The rest parameter will expand to all extra actual
     argument values not matched by any other parameter in ARGLIST,
     spliced into RX-FORM where it occurs.  Example:

          (rx-define moan (x y &rest r) (seq x (one-or-more y) r "!"))
          (rx (moan "MOO" "A" "MEE" "OW"))
               => "MOOA+MEEOW!"

     Since the definition is global, it is recommended to give NAME a
     package prefix to avoid name clashes with definitions elsewhere, as
     is usual when naming non-local variables and functions.

 -- Macro: rx-let (bindings...) body...
     Make the 'rx' definitions in BINDINGS available locally for 'rx'
     macro invocations in BODY, which is then evaluated.

     Each element of BINDINGS is on the form '(NAME [ARGLIST] RX-FORM)',
     where the parts have the same meaning as in 'rx-define' above.
     Example:

          (rx-let ((comma-separated (item) (seq item (0+ "," item)))
                   (number (1+ digit))
                   (numbers (comma-separated number)))
            (re-search-forward (rx "(" numbers ")")))

     The definitions are only available during the macro-expansion of
     BODY, and are thus not present during execution of compiled code.

     'rx-let' can be used not only inside a function, but also at top
     level to include global variable and function definitions that need
     to share a common set of 'rx' forms.  Since the names are local
     inside BODY, there is no need for any package prefixes.  Example:

          (rx-let ((phone-number (seq (opt ?+) (1+ (any digit ?-)))))
            (defun find-next-phone-number ()
              (re-search-forward (rx phone-number)))
            (defun phone-number-p (string)
              (string-match-p (rx bos phone-number eos) string)))

     The scope of the 'rx-let' bindings is lexical, which means that
     they are not visible outside BODY itself, even in functions called
     from BODY.

 -- Macro: rx-let-eval bindings body...
     Evaluate BINDINGS to a list of bindings as in 'rx-let', and
     evaluate BODY with those bindings in effect for calls to
     'rx-to-string'.

     This macro is similar to 'rx-let', except that the BINDINGS
     argument is evaluated (and thus needs to be quoted if it is a list
     literal), and the definitions are substituted at run time, which is
     required for 'rx-to-string' to work.  Example:

          (rx-let-eval
              '((ponder (x) (seq "Where have all the " x " gone?")))
            (looking-at (rx-to-string
                         '(ponder (or "flowers" "young girls"
                                      "left socks")))))

     Another difference from 'rx-let' is that the BINDINGS are
     dynamically scoped, and thus also available in functions called
     from BODY.  However, they are not visible inside functions defined
     in BODY.

==============================================================================
File: elisp.info,  Node: |Regexp_Functions|,  Prev: Rx Notation,  Up: |Regular_Expressions|
==============================================================================

                                                              *Regexp_Functions*

34.3.4 Regular Expression Functions
-----------------------------------

These functions operate on regular expressions.

 -- Function: regexp-quote string
     This function returns a regular expression whose only exact match
     is STRING.  Using this regular expression in 'looking-at' will
     succeed only if the next characters in the buffer are STRING; using
     it in a search function will succeed if the text being searched
     contains STRING.  *Note Regexp Search::.

     This allows you to request an exact string match or search when
     calling a function that wants a regular expression.

          (regexp-quote "^The cat$")
               => "\\^The cat\\$"

     One use of 'regexp-quote' is to combine an exact string match with
     context described as a regular expression.  For example, this
     searches for the string that is the value of STRING, surrounded by
     whitespace:

          (re-search-forward
           (concat "\\s-" (regexp-quote string) "\\s-"))

     The returned string may be STRING itself if it does not contain any
     special characters.

 -- Function: regexp-opt strings &optional paren
     This function returns an efficient regular expression that will
     match any of the strings in the list STRINGS.  This is useful when
     you need to make matching or searching as fast as possible--for
     example, for Font Lock mode(1).

     If STRINGS is the empty list, the return value is a regexp that
     never matches anything.

     The optional argument PAREN can be any of the following:

     a string
          The resulting regexp is preceded by PAREN and followed by
          '\)', e.g.  use '"\\(?1:"' to produce an explicitly numbered
          group.

     'words'
          The resulting regexp is surrounded by '\<\(' and '\)\>'.

     'symbols'
          The resulting regexp is surrounded by '\_<\(' and '\)\_>'
          (this is often appropriate when matching programming-language
          keywords and the like).

     non-'nil'
          The resulting regexp is surrounded by '\(' and '\)'.

     'nil'
          The resulting regexp is surrounded by '\(?:' and '\)', if it
          is necessary to ensure that a postfix operator appended to it
          will apply to the whole expression.

     The returned regexp is ordered in such a way that it will always
     match the longest string possible.

     Up to reordering, the resulting regexp of 'regexp-opt' is
     equivalent to but usually more efficient than that of a simplified
     version:

          (defun simplified-regexp-opt (strings &optional paren)
           (let ((parens
                  (cond
                   ((stringp paren)       (cons paren "\\)"))
                   ((eq paren 'words)    '("\\<\\(" . "\\)\\>"))
                   ((eq paren 'symbols) '("\\_<\\(" . "\\)\\_>"))
                   ((null paren)          '("\\(?:" . "\\)"))
                   (t                       '("\\(" . "\\)")))))
             (concat (car parens)
                     (mapconcat 'regexp-quote strings "\\|")
                     (cdr parens))))

 -- Function: regexp-opt-depth regexp
     This function returns the total number of grouping constructs
     (parenthesized expressions) in REGEXP.  This does not include shy
     groups (*note Regexp Backslash::).

 -- Function: regexp-opt-charset chars
     This function returns a regular expression matching a character in
     the list of characters CHARS.

          (regexp-opt-charset '(?a ?b ?c ?d ?e))
               => "[a-e]"

 -- Variable: regexp-unmatchable
     This variable contains a regexp that is guaranteed not to match any
     string at all.  It is particularly useful as default value for
     variables that may be set to a pattern that actually matches
     something.

   ---------- Footnotes ----------

   (1) Note that 'regexp-opt' does not guarantee that its result is
absolutely the most efficient form possible.  A hand-tuned regular
expression can sometimes be slightly more efficient, but is almost never
worth the effort.

==============================================================================
File: elisp.info,  Node: |Regexp_Search|,  Next: |POSIX_Regexps|,  Prev: |Regular_Expressions|,  Up: |Searching_and_Matching|
==============================================================================

                                                                 *Regexp_Search*

34.4 Regular Expression Searching
---------------------------------

In GNU Emacs, you can search for the next match for a regular expression
(*note Syntax of Regexps::) either incrementally or not.  For
incremental search commands, see *note Regular Expression Search:
(emacs)Regexp Search.  Here we describe only the search functions useful
in programs.  The principal one is 're-search-forward'.

   These search functions convert the regular expression to multibyte if
the buffer is multibyte; they convert the regular expression to unibyte
if the buffer is unibyte.  *Note Text Representations::.

 -- Command: re-search-forward regexp &optional limit noerror count
     This function searches forward in the current buffer for a string
     of text that is matched by the regular expression REGEXP.  The
     function skips over any amount of text that is not matched by
     REGEXP, and leaves point at the end of the first match found.  It
     returns the new value of point.

     If LIMIT is non-'nil', it must be a position in the current buffer.
     It specifies the upper bound to the search.  No match extending
     after that position is accepted.  If LIMIT is omitted or 'nil', it
     defaults to the end of the accessible portion of the buffer.

     What 're-search-forward' does when the search fails depends on the
     value of NOERROR:

     'nil'
          Signal a 'search-failed' error.
     't'
          Do nothing and return 'nil'.
     anything else
          Move point to LIMIT (or the end of the accessible portion of
          the buffer) and return 'nil'.

     The argument NOERROR only affects valid searches which fail to find
     a match.  Invalid arguments cause errors regardless of NOERROR.

     If COUNT is a positive number N, the search is done N times; each
     successive search starts at the end of the previous match.  If all
     these successive searches succeed, the function call succeeds,
     moving point and returning its new value.  Otherwise the function
     call fails, with results depending on the value of NOERROR, as
     described above.  If COUNT is a negative number -N, the search is
     done N times in the opposite (backward) direction.

     In the following example, point is initially before the 'T'.
     Evaluating the search call moves point to the end of that line
     (between the 't' of 'hat' and the newline).

          ---------- Buffer: foo ----------
          I read "-!-The cat in the hat
          comes back" twice.
          ---------- Buffer: foo ----------

          (re-search-forward "[a-z]+" nil t 5)
               => 27

          ---------- Buffer: foo ----------
          I read "The cat in the hat-!-
          comes back" twice.
          ---------- Buffer: foo ----------

 -- Command: re-search-backward regexp &optional limit noerror count
     This function searches backward in the current buffer for a string
     of text that is matched by the regular expression REGEXP, leaving
     point at the beginning of the first text found.

     This function is analogous to 're-search-forward', but they are not
     simple mirror images.  're-search-forward' finds the match whose
     beginning is as close as possible to the starting point.  If
     're-search-backward' were a perfect mirror image, it would find the
     match whose end is as close as possible.  However, in fact it finds
     the match whose beginning is as close as possible (and yet ends
     before the starting point).  The reason for this is that matching a
     regular expression at a given spot always works from beginning to
     end, and starts at a specified beginning position.

     A true mirror-image of 're-search-forward' would require a special
     feature for matching regular expressions from end to beginning.
     It's not worth the trouble of implementing that.

 -- Function: string-match regexp string &optional start
     This function returns the index of the start of the first match for
     the regular expression REGEXP in STRING, or 'nil' if there is no
     match.  If START is non-'nil', the search starts at that index in
     STRING.

     For example,

          (string-match
           "quick" "The quick brown fox jumped quickly.")
               => 4
          (string-match
           "quick" "The quick brown fox jumped quickly." 8)
               => 27

     The index of the first character of the string is 0, the index of
     the second character is 1, and so on.

     If this function finds a match, the index of the first character
     beyond the match is available as '(match-end 0)'.  *Note Match
     Data::.

          (string-match
           "quick" "The quick brown fox jumped quickly." 8)
               => 27

          (match-end 0)
               => 32

 -- Function: string-match-p regexp string &optional start
     This predicate function does what 'string-match' does, but it
     avoids modifying the match data.

 -- Function: looking-at regexp
     This function determines whether the text in the current buffer
     directly following point matches the regular expression REGEXP.
     "Directly following" means precisely that: the search is "anchored"
     and it can succeed only starting with the first character following
     point.  The result is 't' if so, 'nil' otherwise.

     This function does not move point, but it does update the match
     data.  *Note Match Data::.  If you need to test for a match without
     modifying the match data, use 'looking-at-p', described below.

     In this example, point is located directly before the 'T'.  If it
     were anywhere else, the result would be 'nil'.

          ---------- Buffer: foo ----------
          I read "-!-The cat in the hat
          comes back" twice.
          ---------- Buffer: foo ----------

          (looking-at "The cat in the hat$")
               => t

 -- Function: looking-back regexp limit &optional greedy
     This function returns 't' if REGEXP matches the text immediately
     before point (i.e., ending at point), and 'nil' otherwise.

     Because regular expression matching works only going forward, this
     is implemented by searching backwards from point for a match that
     ends at point.  That can be quite slow if it has to search a long
     distance.  You can bound the time required by specifying a
     non-'nil' value for LIMIT, which says not to search before LIMIT.
     In this case, the match that is found must begin at or after LIMIT.
     Here's an example:

          ---------- Buffer: foo ----------
          I read "-!-The cat in the hat
          comes back" twice.
          ---------- Buffer: foo ----------

          (looking-back "read \"" 3)
               => t
          (looking-back "read \"" 4)
               => nil

     If GREEDY is non-'nil', this function extends the match backwards
     as far as possible, stopping when a single additional previous
     character cannot be part of a match for REGEXP.  When the match is
     extended, its starting position is allowed to occur before LIMIT.

     As a general recommendation, try to avoid using 'looking-back'
     wherever possible, since it is slow.  For this reason, there are no
     plans to add a 'looking-back-p' function.

 -- Function: looking-at-p regexp
     This predicate function works like 'looking-at', but without
     updating the match data.

 -- Variable: search-spaces-regexp
     If this variable is non-'nil', it should be a regular expression
     that says how to search for whitespace.  In that case, any group of
     spaces in a regular expression being searched for stands for use of
     this regular expression.  However, spaces inside of constructs such
     as '[...]' and '*', '+', '?' are not affected by
     'search-spaces-regexp'.

     Since this variable affects all regular expression search and match
     constructs, you should bind it temporarily for as small as possible
     a part of the code.

==============================================================================
File: elisp.info,  Node: |POSIX_Regexps|,  Next: |Match_Data|,  Prev: |Regexp_Search|,  Up: |Searching_and_Matching|
==============================================================================

                                                                 *POSIX_Regexps*

34.5 POSIX Regular Expression Searching
---------------------------------------

The usual regular expression functions do backtracking when necessary to
handle the '\|' and repetition constructs, but they continue this only
until they find _some_ match.  Then they succeed and report the first
match found.

   This section describes alternative search functions which perform the
full backtracking specified by the POSIX standard for regular expression
matching.  They continue backtracking until they have tried all
possibilities and found all matches, so they can report the longest
match, as required by POSIX.  This is much slower, so use these
functions only when you really need the longest match.

   The POSIX search and match functions do not properly support the
non-greedy repetition operators (*note non-greedy: Regexp Special.).
This is because POSIX backtracking conflicts with the semantics of
non-greedy repetition.

 -- Command: posix-search-forward regexp &optional limit noerror count
     This is like 're-search-forward' except that it performs the full
     backtracking specified by the POSIX standard for regular expression
     matching.

 -- Command: posix-search-backward regexp &optional limit noerror count
     This is like 're-search-backward' except that it performs the full
     backtracking specified by the POSIX standard for regular expression
     matching.

 -- Function: posix-looking-at regexp
     This is like 'looking-at' except that it performs the full
     backtracking specified by the POSIX standard for regular expression
     matching.

 -- Function: posix-string-match regexp string &optional start
     This is like 'string-match' except that it performs the full
     backtracking specified by the POSIX standard for regular expression
     matching.

==============================================================================
File: elisp.info,  Node: |Match_Data|,  Next: |Search_and_Replace|,  Prev: |POSIX_Regexps|,  Up: |Searching_and_Matching|
==============================================================================

                                                                    *Match_Data*

34.6 The Match Data
-------------------

Emacs keeps track of the start and end positions of the segments of text
found during a search; this is called the "match data".  Thanks to the
match data, you can search for a complex pattern, such as a date in a
mail message, and then extract parts of the match under control of the
pattern.

   Because the match data normally describe the most recent search only,
you must be careful not to do another search inadvertently between the
search you wish to refer back to and the use of the match data.  If you
can't avoid another intervening search, you must save and restore the
match data around it, to prevent it from being overwritten.

   Notice that all functions are allowed to overwrite the match data
unless they're explicitly documented not to do so.  A consequence is
that functions that are run implicitly in the background (*note
Timers::, and *note Idle Timers::) should likely save and restore the
match data explicitly.

MENU

* |Replacing_Match|::       Replacing a substring that was matched.
* |Simple_Match_Data|::     Accessing single items of match data,
                            such as where a particular subexpression started.
* |Entire_Match_Data|::     Accessing the entire match data at once, as a list.
* |Saving_Match_Data|::     Saving and restoring the match data.

==============================================================================
File: elisp.info,  Node: |Replacing_Match|,  Next: |Simple_Match_Data|,  Up: |Match_Data|
==============================================================================

                                                               *Replacing_Match*

34.6.1 Replacing the Text that Matched
--------------------------------------

This function replaces all or part of the text matched by the last
search.  It works by means of the match data.

 -- Function: replace-match replacement &optional fixedcase literal
          string subexp
     This function performs a replacement operation on a buffer or
     string.

     If you did the last search in a buffer, you should omit the STRING
     argument or specify 'nil' for it, and make sure that the current
     buffer is the one in which you performed the last search.  Then
     this function edits the buffer, replacing the matched text with
     REPLACEMENT.  It leaves point at the end of the replacement text.

     If you performed the last search on a string, pass the same string
     as STRING.  Then this function returns a new string, in which the
     matched text is replaced by REPLACEMENT.

     If FIXEDCASE is non-'nil', then 'replace-match' uses the
     replacement text without case conversion; otherwise, it converts
     the replacement text depending upon the capitalization of the text
     to be replaced.  If the original text is all upper case, this
     converts the replacement text to upper case.  If all words of the
     original text are capitalized, this capitalizes all the words of
     the replacement text.  If all the words are one-letter and they are
     all upper case, they are treated as capitalized words rather than
     all-upper-case words.

     If LITERAL is non-'nil', then REPLACEMENT is inserted exactly as it
     is, the only alterations being case changes as needed.  If it is
     'nil' (the default), then the character '\' is treated specially.
     If a '\' appears in REPLACEMENT, then it must be part of one of the
     following sequences:

     '\&'
          This stands for the entire text being replaced.

     '\N', where N is a digit
          This stands for the text that matched the Nth subexpression in
          the original regexp.  Subexpressions are those expressions
          grouped inside '\(...\)'.  If the Nth subexpression never
          matched, an empty string is substituted.

     '\\'
          This stands for a single '\' in the replacement text.

     '\?'
          This stands for itself (for compatibility with
          'replace-regexp' and related commands; *note (emacs)Regexp
          Replace::).

     Any other character following '\' signals an error.

     The substitutions performed by '\&' and '\N' occur after case
     conversion, if any.  Therefore, the strings they substitute are
     never case-converted.

     If SUBEXP is non-'nil', that says to replace just subexpression
     number SUBEXP of the regexp that was matched, not the entire match.
     For example, after matching 'foo \(ba*r\)', calling 'replace-match'
     with 1 as SUBEXP means to replace just the text that matched
     '\(ba*r\)'.

 -- Function: match-substitute-replacement replacement &optional
          fixedcase literal string subexp
     This function returns the text that would be inserted into the
     buffer by 'replace-match', but without modifying the buffer.  It is
     useful if you want to present the user with actual replacement
     result, with constructs like '\N' or '\&' substituted with matched
     groups.  Arguments REPLACEMENT and optional FIXEDCASE, LITERAL,
     STRING and SUBEXP have the same meaning as for 'replace-match'.

==============================================================================
File: elisp.info,  Node: |Simple_Match_Data|,  Next: |Entire_Match_Data|,  Prev: |Replacing_Match|,  Up: |Match_Data|
==============================================================================

                                                             *Simple_Match_Data*

34.6.2 Simple Match Data Access
-------------------------------

This section explains how to use the match data to find out what was
matched by the last search or match operation, if it succeeded.

   You can ask about the entire matching text, or about a particular
parenthetical subexpression of a regular expression.  The COUNT argument
in the functions below specifies which.  If COUNT is zero, you are
asking about the entire match.  If COUNT is positive, it specifies which
subexpression you want.

   Recall that the subexpressions of a regular expression are those
expressions grouped with escaped parentheses, '\(...\)'.  The COUNTth
subexpression is found by counting occurrences of '\(' from the
beginning of the whole regular expression.  The first subexpression is
numbered 1, the second 2, and so on.  Only regular expressions can have
subexpressions--after a simple string search, the only information
available is about the entire match.

   Every successful search sets the match data.  Therefore, you should
query the match data immediately after searching, before calling any
other function that might perform another search.  Alternatively, you
may save and restore the match data (*note Saving Match Data::) around
the call to functions that could perform another search.  Or use the
functions that explicitly do not modify the match data; e.g.,
'string-match-p'.

   A search which fails may or may not alter the match data.  In the
current implementation, it does not, but we may change it in the future.
Don't try to rely on the value of the match data after a failing search.

 -- Function: match-string count &optional in-string
     This function returns, as a string, the text matched in the last
     search or match operation.  It returns the entire text if COUNT is
     zero, or just the portion corresponding to the COUNTth
     parenthetical subexpression, if COUNT is positive.

     If the last such operation was done against a string with
     'string-match', then you should pass the same string as the
     argument IN-STRING.  After a buffer search or match, you should
     omit IN-STRING or pass 'nil' for it; but you should make sure that
     the current buffer when you call 'match-string' is the one in which
     you did the searching or matching.  Failure to follow this advice
     will lead to incorrect results.

     The value is 'nil' if COUNT is out of range, or for a subexpression
     inside a '\|' alternative that wasn't used or a repetition that
     repeated zero times.

 -- Function: match-string-no-properties count &optional in-string
     This function is like 'match-string' except that the result has no
     text properties.

 -- Function: match-beginning count
     If the last regular expression search found a match, this function
     returns the position of the start of the matching text or of a
     subexpression of it.

     If COUNT is zero, then the value is the position of the start of
     the entire match.  Otherwise, COUNT specifies a subexpression in
     the regular expression, and the value of the function is the
     starting position of the match for that subexpression.

     The value is 'nil' for a subexpression inside a '\|' alternative
     that wasn't used or a repetition that repeated zero times.

 -- Function: match-end count
     This function is like 'match-beginning' except that it returns the
     position of the end of the match, rather than the position of the
     beginning.

   Here is an example of using the match data, with a comment showing
the positions within the text:

     (string-match "\\(qu\\)\\(ick\\)"
                   "The quick fox jumped quickly.")
                   ;0123456789
          => 4

     (match-string 0 "The quick fox jumped quickly.")
          => "quick"
     (match-string 1 "The quick fox jumped quickly.")
          => "qu"
     (match-string 2 "The quick fox jumped quickly.")
          => "ick"

     (match-beginning 1)       ; The beginning of the match
          => 4                 ;   with 'qu' is at index 4.

     (match-beginning 2)       ; The beginning of the match
          => 6                 ;   with 'ick' is at index 6.

     (match-end 1)             ; The end of the match
          => 6                 ;   with 'qu' is at index 6.

     (match-end 2)             ; The end of the match
          => 9                 ;   with 'ick' is at index 9.

   Here is another example.  Point is initially located at the beginning
of the line.  Searching moves point to between the space and the word
'in'.  The beginning of the entire match is at the 9th character of the
buffer ('T'), and the beginning of the match for the first subexpression
is at the 13th character ('c').

     (list
       (re-search-forward "The \\(cat \\)")
       (match-beginning 0)
       (match-beginning 1))
         => (17 9 13)

     ---------- Buffer: foo ----------
     I read "The cat -!-in the hat comes back" twice.
             ^   ^
             9  13
     ---------- Buffer: foo ----------

(In this case, the index returned is a buffer position; the first
character of the buffer counts as 1.)

==============================================================================
File: elisp.info,  Node: |Entire_Match_Data|,  Next: |Saving_Match_Data|,  Prev: |Simple_Match_Data|,  Up: |Match_Data|
==============================================================================

                                                             *Entire_Match_Data*

34.6.3 Accessing the Entire Match Data
--------------------------------------

The functions 'match-data' and 'set-match-data' read or write the entire
match data, all at once.

 -- Function: match-data &optional integers reuse reseat
     This function returns a list of positions (markers or integers)
     that record all the information on the text that the last search
     matched.  Element zero is the position of the beginning of the
     match for the whole expression; element one is the position of the
     end of the match for the expression.  The next two elements are the
     positions of the beginning and end of the match for the first
     subexpression, and so on.  In general, element number 2N
     corresponds to '(match-beginning N)'; and element number 2N + 1
     corresponds to '(match-end N)'.

     Normally all the elements are markers or 'nil', but if INTEGERS is
     non-'nil', that means to use integers instead of markers.  (In that
     case, the buffer itself is appended as an additional element at the
     end of the list, to facilitate complete restoration of the match
     data.)  If the last match was done on a string with 'string-match',
     then integers are always used, since markers can't point into a
     string.

     If REUSE is non-'nil', it should be a list.  In that case,
     'match-data' stores the match data in REUSE.  That is, REUSE is
     destructively modified.  REUSE does not need to have the right
     length.  If it is not long enough to contain the match data, it is
     extended.  If it is too long, the length of REUSE stays the same,
     but the elements that were not used are set to 'nil'.  The purpose
     of this feature is to reduce the need for garbage collection.

     If RESEAT is non-'nil', all markers on the REUSE list are reseated
     to point to nowhere.

     As always, there must be no possibility of intervening searches
     between the call to a search function and the call to 'match-data'
     that is intended to access the match data for that search.

          (match-data)
               =>  (#<marker at 9 in foo>
                    #<marker at 17 in foo>
                    #<marker at 13 in foo>
                    #<marker at 17 in foo>)

 -- Function: set-match-data match-list &optional reseat
     This function sets the match data from the elements of MATCH-LIST,
     which should be a list that was the value of a previous call to
     'match-data'.  (More precisely, anything that has the same format
     will work.)

     If MATCH-LIST refers to a buffer that doesn't exist, you don't get
     an error; that sets the match data in a meaningless but harmless
     way.

     If RESEAT is non-'nil', all markers on the MATCH-LIST list are
     reseated to point to nowhere.

     'store-match-data' is a semi-obsolete alias for 'set-match-data'.

==============================================================================
File: elisp.info,  Node: |Saving_Match_Data|,  Prev: |Entire_Match_Data|,  Up: |Match_Data|
==============================================================================

                                                             *Saving_Match_Data*

34.6.4 Saving and Restoring the Match Data
------------------------------------------

When you call a function that may search, you may need to save and
restore the match data around that call, if you want to preserve the
match data from an earlier search for later use.  Here is an example
that shows the problem that arises if you fail to save the match data:

     (re-search-forward "The \\(cat \\)")
          => 48
     (foo)                   ; 'foo' does more searching.
     (match-end 0)
          => 61              ; Unexpected result--not 48!

   You can save and restore the match data with 'save-match-data':

 -- Macro: save-match-data body...
     This macro executes BODY, saving and restoring the match data
     around it.  The return value is the value of the last form in BODY.

   You could use 'set-match-data' together with 'match-data' to imitate
the effect of the special form 'save-match-data'.  Here is how:

     (let ((data (match-data)))
       (unwind-protect
           ...   ; Ok to change the original match data.
         (set-match-data data)))

   Emacs automatically saves and restores the match data when it runs
process filter functions (*note Filter Functions::) and process
sentinels (*note Sentinels::).

==============================================================================
File: elisp.info,  Node: |Search_and_Replace|,  Next: |Standard_Regexps|,  Prev: |Match_Data|,  Up: |Searching_and_Matching|
==============================================================================

                                                            *Search_and_Replace*

34.7 Search and Replace
-----------------------

If you want to find all matches for a regexp in part of the buffer, and
replace them, the best way is to write an explicit loop using
're-search-forward' and 'replace-match', like this:

     (while (re-search-forward "foo[ \t]+bar" nil t)
       (replace-match "foobar"))

*Note Replacing the Text that Matched: Replacing Match, for a
description of 'replace-match'.

   However, replacing matches in a string is more complex, especially if
you want to do it efficiently.  So Emacs provides a function to do this.

 -- Function: replace-regexp-in-string regexp rep string &optional
          fixedcase literal subexp start
     This function copies STRING and searches it for matches for REGEXP,
     and replaces them with REP.  It returns the modified copy.  If
     START is non-'nil', the search for matches starts at that index in
     STRING, and the returned value does not include the first START
     characters of STRING.  To get the whole transformed string,
     concatenate the first START characters of STRING with the return
     value.

     This function uses 'replace-match' to do the replacement, and it
     passes the optional arguments FIXEDCASE, LITERAL and SUBEXP along
     to 'replace-match'.

     Instead of a string, REP can be a function.  In that case,
     'replace-regexp-in-string' calls REP for each match, passing the
     text of the match as its sole argument.  It collects the value REP
     returns and passes that to 'replace-match' as the replacement
     string.  The match data at this point are the result of matching
     REGEXP against a substring of STRING.

   If you want to write a command along the lines of 'query-replace',
you can use 'perform-replace' to do the work.

 -- Function: perform-replace from-string replacements query-flag
          regexp-flag delimited-flag &optional repeat-count map start
          end backward region-noncontiguous-p
     This function is the guts of 'query-replace' and related commands.
     It searches for occurrences of FROM-STRING in the text between
     positions START and END and replaces some or all of them.  If START
     is 'nil' (or omitted), point is used instead, and the end of the
     buffer's accessible portion is used for END.  (If the optional
     argument BACKWARD is non-'nil', the search starts at END and goes
     backward.)

     If QUERY-FLAG is 'nil', it replaces all occurrences; otherwise, it
     asks the user what to do about each one.

     If REGEXP-FLAG is non-'nil', then FROM-STRING is considered a
     regular expression; otherwise, it must match literally.  If
     DELIMITED-FLAG is non-'nil', then only replacements surrounded by
     word boundaries are considered.

     The argument REPLACEMENTS specifies what to replace occurrences
     with.  If it is a string, that string is used.  It can also be a
     list of strings, to be used in cyclic order.

     If REPLACEMENTS is a cons cell, '(FUNCTION . DATA)', this means to
     call FUNCTION after each match to get the replacement text.  This
     function is called with two arguments: DATA, and the number of
     replacements already made.

     If REPEAT-COUNT is non-'nil', it should be an integer.  Then it
     specifies how many times to use each of the strings in the
     REPLACEMENTS list before advancing cyclically to the next one.

     If FROM-STRING contains upper-case letters, then 'perform-replace'
     binds 'case-fold-search' to 'nil', and it uses the REPLACEMENTS
     without altering their case.

     Normally, the keymap 'query-replace-map' defines the possible user
     responses for queries.  The argument MAP, if non-'nil', specifies a
     keymap to use instead of 'query-replace-map'.

     Non-'nil' REGION-NONCONTIGUOUS-P means that the region between
     START and END is composed of noncontiguous pieces.  The most common
     example of this is a rectangular region, where the pieces are
     separated by newline characters.

     This function uses one of two functions to search for the next
     occurrence of FROM-STRING.  These functions are specified by the
     values of two variables: 'replace-re-search-function' and
     'replace-search-function'.  The former is called when the argument
     REGEXP-FLAG is non-'nil', the latter when it is 'nil'.

 -- Variable: query-replace-map
     This variable holds a special keymap that defines the valid user
     responses for 'perform-replace' and the commands that use it, as
     well as 'y-or-n-p' and 'map-y-or-n-p'.  This map is unusual in two
     ways:

        * The key bindings are not commands, just symbols that are
          meaningful to the functions that use this map.

        * Prefix keys are not supported; each key binding must be for a
          single-event key sequence.  This is because the functions
          don't use 'read-key-sequence' to get the input; instead, they
          read a single event and look it up "by hand".

   Here are the meaningful bindings for 'query-replace-map'.  Several of
them are meaningful only for 'query-replace' and friends.

'act'
     Do take the action being considered--in other words, "yes".

'skip'
     Do not take action for this question--in other words, "no".

'exit'
     Answer this question "no", and give up on the entire series of
     questions, assuming that the answers will be "no".

'exit-prefix'
     Like 'exit', but add the key that was pressed to
     'unread-command-events' (*note Event Input Misc::).

'act-and-exit'
     Answer this question "yes", and give up on the entire series of
     questions, assuming that subsequent answers will be "no".

'act-and-show'
     Answer this question "yes", but show the results--don't advance yet
     to the next question.

'automatic'
     Answer this question and all subsequent questions in the series
     with "yes", without further user interaction.

'backup'
     Move back to the previous place that a question was asked about.

'undo'
     Undo last replacement and move back to the place where that
     replacement was performed.

'undo-all'
     Undo all replacements and move back to the place where the first
     replacement was performed.

'edit'
     Enter a recursive edit to deal with this question--instead of any
     other action that would normally be taken.

'edit-replacement'
     Edit the replacement for this question in the minibuffer.

'delete-and-edit'
     Delete the text being considered, then enter a recursive edit to
     replace it.

'recenter'
'scroll-up'
'scroll-down'
'scroll-other-window'
'scroll-other-window-down'
     Perform the specified window scroll operation, then ask the same
     question again.  Only 'y-or-n-p' and related functions use this
     answer.

'quit'
     Perform a quit right away.  Only 'y-or-n-p' and related functions
     use this answer.

'help'
     Display some help, then ask again.

 -- Variable: multi-query-replace-map
     This variable holds a keymap that extends 'query-replace-map' by
     providing additional keybindings that are useful in multi-buffer
     replacements.  The additional bindings are:

     'automatic-all'
          Answer this question and all subsequent questions in the
          series with "yes", without further user interaction, for all
          remaining buffers.

     'exit-current'
          Answer this question "no", and give up on the entire series of
          questions for the current buffer.  Continue to the next buffer
          in the sequence.

 -- Variable: replace-search-function
     This variable specifies a function that 'perform-replace' calls to
     search for the next string to replace.  Its default value is
     'search-forward'.  Any other value should name a function of 3
     arguments: the first 3 arguments of 'search-forward' (*note String
     Search::).

 -- Variable: replace-re-search-function
     This variable specifies a function that 'perform-replace' calls to
     search for the next regexp to replace.  Its default value is
     're-search-forward'.  Any other value should name a function of 3
     arguments: the first 3 arguments of 're-search-forward' (*note
     Regexp Search::).

==============================================================================
File: elisp.info,  Node: |Standard_Regexps|,  Prev: |Search_and_Replace|,  Up: |Searching_and_Matching|
==============================================================================

                                                              *Standard_Regexps*

34.8 Standard Regular Expressions Used in Editing
-------------------------------------------------

This section describes some variables that hold regular expressions used
for certain purposes in editing:

 -- User Option: page-delimiter
     This is the regular expression describing line-beginnings that
     separate pages.  The default value is '"^\014"' (i.e., '"^^L"' or
     '"^\C-l"'); this matches a line that starts with a formfeed
     character.

   The following two regular expressions should _not_ assume the match
always starts at the beginning of a line; they should not use '^' to
anchor the match.  Most often, the paragraph commands do check for a
match only at the beginning of a line, which means that '^' would be
superfluous.  When there is a nonzero left margin, they accept matches
that start after the left margin.  In that case, a '^' would be
incorrect.  However, a '^' is harmless in modes where a left margin is
never used.

 -- User Option: paragraph-separate
     This is the regular expression for recognizing the beginning of a
     line that separates paragraphs.  (If you change this, you may have
     to change 'paragraph-start' also.)  The default value is
     '"[ \t\f]*$"', which matches a line that consists entirely of
     spaces, tabs, and form feeds (after its left margin).

 -- User Option: paragraph-start
     This is the regular expression for recognizing the beginning of a
     line that starts _or_ separates paragraphs.  The default value is
     '"\f\\|[ \t]*$"', which matches a line containing only whitespace
     or starting with a form feed (after its left margin).

 -- User Option: sentence-end
     If non-'nil', the value should be a regular expression describing
     the end of a sentence, including the whitespace following the
     sentence.  (All paragraph boundaries also end sentences,
     regardless.)

     If the value is 'nil', as it is by default, then the function
     'sentence-end' constructs the regexp.  That is why you should
     always call the function 'sentence-end' to obtain the regexp to be
     used to recognize the end of a sentence.

 -- Function: sentence-end
     This function returns the value of the variable 'sentence-end', if
     non-'nil'.  Otherwise it returns a default value based on the
     values of the variables 'sentence-end-double-space' (*note
     Definition of sentence-end-double-space::),
     'sentence-end-without-period', and 'sentence-end-without-space'.

==============================================================================
File: elisp.info,  Node: |Syntax_Tables|,  Next: |Abbrevs|,  Prev: |Searching_and_Matching|,  Up: |Top|
==============================================================================

                                                                 *Syntax_Tables*

35 Syntax Tables
================

A "syntax table" specifies the syntactic role of each character in a
buffer.  It can be used to determine where words, symbols, and other
syntactic constructs begin and end.  This information is used by many
Emacs facilities, including Font Lock mode (*note Font Lock Mode::) and
the various complex movement commands (*note Motion::).

MENU

* Basics: Syntax Basics.     Basic concepts of syntax tables.
* |Syntax_Descriptors|::       How characters are classified.
* |Syntax_Table_Functions|::   How to create, examine and alter syntax tables.
* |Syntax_Properties|::        Overriding syntax with text properties.
* |Motion_and_Syntax|::        Moving over characters with certain syntaxes.
* |Parsing_Expressions|::      Parsing balanced expressions
                                using the syntax table.
* |Syntax_Table_Internals|::   How syntax table information is stored.
* |Categories|::               Another way of classifying character syntax.

==============================================================================
File: elisp.info,  Node: |Syntax_Basics|,  Next: |Syntax_Descriptors|,  Up: |Syntax_Tables|
==============================================================================

                                                                 *Syntax_Basics*

35.1 Syntax Table Concepts
--------------------------

A syntax table is a data structure which can be used to look up the
"syntax class" and other syntactic properties of each character.  Syntax
tables are used by Lisp programs for scanning and moving across text.

   Internally, a syntax table is a char-table (*note Char-Tables::).
The element at index C describes the character with code C; its value is
a cons cell which specifies the syntax of the character in question.
*Note Syntax Table Internals::, for details.  However, instead of using
'aset' and 'aref' to modify and inspect syntax table contents, you
should usually use the higher-level functions 'char-syntax' and
'modify-syntax-entry', which are described in *note Syntax Table
Functions::.

 -- Function: syntax-table-p object
     This function returns 't' if OBJECT is a syntax table.

   Each buffer has its own major mode, and each major mode has its own
idea of the syntax class of various characters.  For example, in Lisp
mode, the character ';' begins a comment, but in C mode, it terminates a
statement.  To support these variations, the syntax table is local to
each buffer.  Typically, each major mode has its own syntax table, which
it installs in all buffers that use that mode.  For example, the
variable 'emacs-lisp-mode-syntax-table' holds the syntax table used by
Emacs Lisp mode, and 'c-mode-syntax-table' holds the syntax table used
by C mode.  Changing a major mode's syntax table alters the syntax in
all of that mode's buffers, as well as in any buffers subsequently put
in that mode.  Occasionally, several similar modes share one syntax
table.  *Note Example Major Modes::, for an example of how to set up a
syntax table.

   A syntax table can "inherit" from another syntax table, which is
called its "parent syntax table".  A syntax table can leave the syntax
class of some characters unspecified, by giving them the "inherit"
syntax class; such a character then acquires the syntax class specified
by the parent syntax table (*note Syntax Class Table::).  Emacs defines
a "standard syntax table", which is the default parent syntax table, and
is also the syntax table used by Fundamental mode.

 -- Function: standard-syntax-table
     This function returns the standard syntax table, which is the
     syntax table used in Fundamental mode.

   Syntax tables are not used by the Emacs Lisp reader, which has its
own built-in syntactic rules which cannot be changed.  (Some Lisp
systems provide ways to redefine the read syntax, but we decided to
leave this feature out of Emacs Lisp for simplicity.)

==============================================================================
File: elisp.info,  Node: |Syntax_Descriptors|,  Next: |Syntax_Table_Functions|,  Prev: |Syntax_Basics|,  Up: |Syntax_Tables|
==============================================================================

                                                            *Syntax_Descriptors*

35.2 Syntax Descriptors
-----------------------

The "syntax class" of a character describes its syntactic role.  Each
syntax table specifies the syntax class of each character.  There is no
necessary relationship between the class of a character in one syntax
table and its class in any other table.

   Each syntax class is designated by a mnemonic character, which serves
as the name of the class when you need to specify a class.  Usually,
this designator character is one that is often assigned that class;
however, its meaning as a designator is unvarying and independent of
what syntax that character currently has.  Thus, '\' as a designator
character always stands for escape character syntax, regardless of
whether the '\' character actually has that syntax in the current syntax
table.  *Note Syntax Class Table::, for a list of syntax classes and
their designator characters.

   A "syntax descriptor" is a Lisp string that describes the syntax
class and other syntactic properties of a character.  When you want to
modify the syntax of a character, that is done by calling the function
'modify-syntax-entry' and passing a syntax descriptor as one of its
arguments (*note Syntax Table Functions::).

   The first character in a syntax descriptor must be a syntax class
designator character.  The second character, if present, specifies a
matching character (e.g., in Lisp, the matching character for '(' is
')'); a space specifies that there is no matching character.  Then come
characters specifying additional syntax properties (*note Syntax
Flags::).

   If no matching character or flags are needed, only one character
(specifying the syntax class) is sufficient.

   For example, the syntax descriptor for the character '*' in C mode is
'". 23"' (i.e., punctuation, matching character slot unused, second
character of a comment-starter, first character of a comment-ender), and
the entry for '/' is '. 14' (i.e., punctuation, matching character slot
unused, first character of a comment-starter, second character of a
comment-ender).

   Emacs also defines "raw syntax descriptors", which are used to
describe syntax classes at a lower level.  *Note Syntax Table
Internals::.

MENU

* |Syntax_Class_Table|::      Table of syntax classes.
* |Syntax_Flags|::            Additional flags each character can have.

==============================================================================
File: elisp.info,  Node: |Syntax_Class_Table|,  Next: |Syntax_Flags|,  Up: |Syntax_Descriptors|
==============================================================================

                                                            *Syntax_Class_Table*

35.2.1 Table of Syntax Classes
------------------------------

Here is a table of syntax classes, the characters that designate them,
their meanings, and examples of their use.

Whitespace characters: ' ' or '-'
     Characters that separate symbols and words from each other.
     Typically, whitespace characters have no other syntactic
     significance, and multiple whitespace characters are syntactically
     equivalent to a single one.  Space, tab, and formfeed are
     classified as whitespace in almost all major modes.

     This syntax class can be designated by either ' ' or '-'.  Both
     designators are equivalent.

Word constituents: 'w'
     Parts of words in human languages.  These are typically used in
     variable and command names in programs.  All upper- and lower-case
     letters, and the digits, are typically word constituents.

Symbol constituents: '_'
     Extra characters used in variable and command names along with word
     constituents.  Examples include the characters '$&*+-_<>' in Lisp
     mode, which may be part of a symbol name even though they are not
     part of English words.  In standard C, the only
     non-word-constituent character that is valid in symbols is
     underscore ('_').

Punctuation characters: '.'
     Characters used as punctuation in a human language, or used in a
     programming language to separate symbols from one another.  Some
     programming language modes, such as Emacs Lisp mode, have no
     characters in this class since the few characters that are not
     symbol or word constituents all have other uses.  Other programming
     language modes, such as C mode, use punctuation syntax for
     operators.

Open parenthesis characters: '('
Close parenthesis characters: ')'
     Characters used in dissimilar pairs to surround sentences or
     expressions.  Such a grouping is begun with an open parenthesis
     character and terminated with a close.  Each open parenthesis
     character matches a particular close parenthesis character, and
     vice versa.  Normally, Emacs indicates momentarily the matching
     open parenthesis when you insert a close parenthesis.  *Note
     Blinking::.

     In human languages, and in C code, the parenthesis pairs are '()',
     '[]', and '{}'.  In Emacs Lisp, the delimiters for lists and
     vectors ('()' and '[]') are classified as parenthesis characters.

String quotes: '"'
     Characters used to delimit string constants.  The same string quote
     character appears at the beginning and the end of a string.  Such
     quoted strings do not nest.

     The parsing facilities of Emacs consider a string as a single
     token.  The usual syntactic meanings of the characters in the
     string are suppressed.

     The Lisp modes have two string quote characters: double-quote ('"')
     and vertical bar ('|').  '|' is not used in Emacs Lisp, but it is
     used in Common Lisp.  C also has two string quote characters:
     double-quote for strings, and apostrophe (''') for character
     constants.

     Human text has no string quote characters.  We do not want
     quotation marks to turn off the usual syntactic properties of other
     characters in the quotation.

Escape-syntax characters: '\'
     Characters that start an escape sequence, such as is used in string
     and character constants.  The character '\' belongs to this class
     in both C and Lisp.  (In C, it is used thus only inside strings,
     but it turns out to cause no trouble to treat it this way
     throughout C code.)

     Characters in this class count as part of words if
     'words-include-escapes' is non-'nil'.  *Note Word Motion::.

Character quotes: '/'
     Characters used to quote the following character so that it loses
     its normal syntactic meaning.  This differs from an escape
     character in that only the character immediately following is ever
     affected.

     Characters in this class count as part of words if
     'words-include-escapes' is non-'nil'.  *Note Word Motion::.

     This class is used for backslash in TeX mode.

Paired delimiters: '$'
     Similar to string quote characters, except that the syntactic
     properties of the characters between the delimiters are not
     suppressed.  Only TeX mode uses a paired delimiter presently--the
     '$' that both enters and leaves math mode.

Expression prefixes: '''
     Characters used for syntactic operators that are considered as part
     of an expression if they appear next to one.  In Lisp modes, these
     characters include the apostrophe, ''' (used for quoting), the
     comma, ',' (used in macros), and '#' (used in the read syntax for
     certain data types).

Comment starters: '<'
Comment enders: '>'
     Characters used in various languages to delimit comments.  Human
     text has no comment characters.  In Lisp, the semicolon (';')
     starts a comment and a newline or formfeed ends one.

Inherit standard syntax: '@'
     This syntax class does not specify a particular syntax.  It says to
     look in the standard syntax table to find the syntax of this
     character.

Generic comment delimiters: '!'
     Characters that start or end a special kind of comment.  _Any_
     generic comment delimiter matches _any_ generic comment delimiter,
     but they cannot match a comment starter or comment ender; generic
     comment delimiters can only match each other.

     This syntax class is primarily meant for use with the
     'syntax-table' text property (*note Syntax Properties::).  You can
     mark any range of characters as forming a comment, by giving the
     first and last characters of the range 'syntax-table' properties
     identifying them as generic comment delimiters.

Generic string delimiters: '|'
     Characters that start or end a string.  This class differs from the
     string quote class in that _any_ generic string delimiter can match
     any other generic string delimiter; but they do not match ordinary
     string quote characters.

     This syntax class is primarily meant for use with the
     'syntax-table' text property (*note Syntax Properties::).  You can
     mark any range of characters as forming a string constant, by
     giving the first and last characters of the range 'syntax-table'
     properties identifying them as generic string delimiters.

==============================================================================
File: elisp.info,  Node: |Syntax_Flags|,  Prev: |Syntax_Class_Table|,  Up: |Syntax_Descriptors|
==============================================================================

                                                                  *Syntax_Flags*

35.2.2 Syntax Flags
-------------------

In addition to the classes, entries for characters in a syntax table can
specify flags.  There are eight possible flags, represented by the
characters '1', '2', '3', '4', 'b', 'c', 'n', and 'p'.

   All the flags except 'p' are used to describe comment delimiters.
The digit flags are used for comment delimiters made up of 2 characters.
They indicate that a character can _also_ be part of a comment sequence,
in addition to the syntactic properties associated with its character
class.  The flags are independent of the class and each other for the
sake of characters such as '*' in C mode, which is a punctuation
character, _and_ the second character of a start-of-comment sequence
('/*'), _and_ the first character of an end-of-comment sequence ('*/').
The flags 'b', 'c', and 'n' are used to qualify the corresponding
comment delimiter.

   Here is a table of the possible flags for a character C, and what
they mean:

   * '1' means C is the start of a two-character comment-start sequence.

   * '2' means C is the second character of such a sequence.

   * '3' means C is the start of a two-character comment-end sequence.

   * '4' means C is the second character of such a sequence.

   * 'b' means that C as a comment delimiter belongs to the alternative
     "b" comment style.  For a two-character comment starter, this flag
     is only significant on the second char, and for a 2-character
     comment ender it is only significant on the first char.

   * 'c' means that C as a comment delimiter belongs to the alternative
     "c" comment style.  For a two-character comment delimiter, 'c' on
     either character makes it of style "c".

   * 'n' on a comment delimiter character specifies that this kind of
     comment can be nested.  Inside such a comment, only comments of the
     same style will be recognized.  For a two-character comment
     delimiter, 'n' on either character makes it nestable.

     Emacs supports several comment styles simultaneously in any one
     syntax table.  A comment style is a set of flags 'b', 'c', and 'n',
     so there can be up to 8 different comment styles, each one named by
     the set of its flags.  Each comment delimiter has a style and only
     matches comment delimiters of the same style.  Thus if a comment
     starts with the comment-start sequence of style "bn", it will
     extend until the next matching comment-end sequence of style "bn".
     When the set of flags has neither flag 'b' nor flag 'c' set, the
     resulting style is called the "a" style.

     The appropriate comment syntax settings for C++ can be as follows:

     '/'
          '124'
     '*'
          '23b'
     newline
          '>'

     This defines four comment-delimiting sequences:

     '/*'
          This is a comment-start sequence for "b" style because the
          second character, '*', has the 'b' flag.

     '//'
          This is a comment-start sequence for "a" style because the
          second character, '/', does not have the 'b' flag.

     '*/'
          This is a comment-end sequence for "b" style because the first
          character, '*', has the 'b' flag.

     newline
          This is a comment-end sequence for "a" style, because the
          newline character does not have the 'b' flag.

   * 'p' identifies an additional prefix character for Lisp syntax.
     These characters are treated as whitespace when they appear between
     expressions.  When they appear within an expression, they are
     handled according to their usual syntax classes.

     The function 'backward-prefix-chars' moves back over these
     characters, as well as over characters whose primary syntax class
     is prefix (''').  *Note Motion and Syntax::.

==============================================================================
File: elisp.info,  Node: |Syntax_Table_Functions|,  Next: |Syntax_Properties|,  Prev: |Syntax_Descriptors|,  Up: |Syntax_Tables|
==============================================================================

                                                        *Syntax_Table_Functions*

35.3 Syntax Table Functions
---------------------------

In this section we describe functions for creating, accessing and
altering syntax tables.

 -- Function: make-syntax-table &optional table
     This function creates a new syntax table.  If TABLE is non-'nil',
     the parent of the new syntax table is TABLE; otherwise, the parent
     is the standard syntax table.

     In the new syntax table, all characters are initially given the
     "inherit" ('@') syntax class, i.e., their syntax is inherited from
     the parent table (*note Syntax Class Table::).

 -- Function: copy-syntax-table &optional table
     This function constructs a copy of TABLE and returns it.  If TABLE
     is omitted or 'nil', it returns a copy of the standard syntax
     table.  Otherwise, an error is signaled if TABLE is not a syntax
     table.

 -- Command: modify-syntax-entry char syntax-descriptor &optional table
     This function sets the syntax entry for CHAR according to
     SYNTAX-DESCRIPTOR.  CHAR must be a character, or a cons cell of the
     form '(MIN . MAX)'; in the latter case, the function sets the
     syntax entries for all characters in the range between MIN and MAX,
     inclusive.

     The syntax is changed only for TABLE, which defaults to the current
     buffer's syntax table, and not in any other syntax table.

     The argument SYNTAX-DESCRIPTOR is a syntax descriptor, i.e., a
     string whose first character is a syntax class designator and whose
     second and subsequent characters optionally specify a matching
     character and syntax flags.  *Note Syntax Descriptors::.  An error
     is signaled if SYNTAX-DESCRIPTOR is not a valid syntax descriptor.

     This function always returns 'nil'.  The old syntax information in
     the table for this character is discarded.

     Examples:

          ;; Put the space character in class whitespace.
          (modify-syntax-entry ?\s " ")
               => nil

          ;; Make '$' an open parenthesis character,
          ;;   with '^' as its matching close.
          (modify-syntax-entry ?$ "(^")
               => nil

          ;; Make '^' a close parenthesis character,
          ;;   with '$' as its matching open.
          (modify-syntax-entry ?^ ")$")
               => nil

          ;; Make '/' a punctuation character,
          ;;   the first character of a start-comment sequence,
          ;;   and the second character of an end-comment sequence.
          ;;   This is used in C mode.
          (modify-syntax-entry ?/ ". 14")
               => nil

 -- Function: char-syntax character
     This function returns the syntax class of CHARACTER, represented by
     its designator character (*note Syntax Class Table::).  This
     returns _only_ the class, not its matching character or syntax
     flags.

     The following examples apply to C mode.  (We use 'string' to make
     it easier to see the character returned by 'char-syntax'.)

          ;; Space characters have whitespace syntax class.
          (string (char-syntax ?\s))
               => " "

          ;; Forward slash characters have punctuation syntax.
          ;; Note that this char-syntax call does not reveal
          ;; that it is also part of comment-start and -end sequences.
          (string (char-syntax ?/))
               => "."

          ;; Open parenthesis characters have open parenthesis syntax.
          ;; Note that this char-syntax call does not reveal that
          ;; it has a matching character, ')'.
          (string (char-syntax ?\())
               => "("

 -- Function: set-syntax-table table
     This function makes TABLE the syntax table for the current buffer.
     It returns TABLE.

 -- Function: syntax-table
     This function returns the current syntax table, which is the table
     for the current buffer.

 -- Command: describe-syntax &optional buffer
     This command displays the contents of the syntax table of BUFFER
     (by default, the current buffer) in a help buffer.

 -- Macro: with-syntax-table table body...
     This macro executes BODY using TABLE as the current syntax table.
     It returns the value of the last form in BODY, after restoring the
     old current syntax table.

     Since each buffer has its own current syntax table, we should make
     that more precise: 'with-syntax-table' temporarily alters the
     current syntax table of whichever buffer is current at the time the
     macro execution starts.  Other buffers are not affected.

==============================================================================
File: elisp.info,  Node: |Syntax_Properties|,  Next: |Motion_and_Syntax|,  Prev: |Syntax_Table_Functions|,  Up: |Syntax_Tables|
==============================================================================

                                                             *Syntax_Properties*

35.4 Syntax Properties
----------------------

When the syntax table is not flexible enough to specify the syntax of a
language, you can override the syntax table for specific character
occurrences in the buffer, by applying a 'syntax-table' text property.
*Note Text Properties::, for how to apply text properties.

   The valid values of 'syntax-table' text property are:

SYNTAX-TABLE
     If the property value is a syntax table, that table is used instead
     of the current buffer's syntax table to determine the syntax for
     the underlying text character.

'(SYNTAX-CODE . MATCHING-CHAR)'
     A cons cell of this format is a raw syntax descriptor (*note Syntax
     Table Internals::), which directly specifies a syntax class for the
     underlying text character.

'nil'
     If the property is 'nil', the character's syntax is determined from
     the current syntax table in the usual way.

 -- Variable: parse-sexp-lookup-properties
     If this is non-'nil', the syntax scanning functions, like
     'forward-sexp', pay attention to 'syntax-table' text properties.
     Otherwise they use only the current syntax table.

 -- Variable: syntax-propertize-function
     This variable, if non-'nil', should store a function for applying
     'syntax-table' properties to a specified stretch of text.  It is
     intended to be used by major modes to install a function which
     applies 'syntax-table' properties in some mode-appropriate way.

     The function is called by 'syntax-ppss' (*note Position Parse::),
     and by Font Lock mode during syntactic fontification (*note
     Syntactic Font Lock::).  It is called with two arguments, START and
     END, which are the starting and ending positions of the text on
     which it should act.  It is allowed to call 'syntax-ppss' on any
     position before END.  However, it should not call
     'syntax-ppss-flush-cache'; so, it is not allowed to call
     'syntax-ppss' on some position and later modify the buffer at an
     earlier position.

 -- Variable: syntax-propertize-extend-region-functions
     This abnormal hook is run by the syntax parsing code prior to
     calling 'syntax-propertize-function'.  Its role is to help locate
     safe starting and ending buffer positions for passing to
     'syntax-propertize-function'.  For example, a major mode can add a
     function to this hook to identify multi-line syntactic constructs,
     and ensure that the boundaries do not fall in the middle of one.

     Each function in this hook should accept two arguments, START and
     END.  It should return either a cons cell of two adjusted buffer
     positions, '(NEW-START . NEW-END)', or 'nil' if no adjustment is
     necessary.  The hook functions are run in turn, repeatedly, until
     they all return 'nil'.

==============================================================================
File: elisp.info,  Node: |Motion_and_Syntax|,  Next: |Parsing_Expressions|,  Prev: |Syntax_Properties|,  Up: |Syntax_Tables|
==============================================================================

                                                             *Motion_and_Syntax*

35.5 Motion and Syntax
----------------------

This section describes functions for moving across characters that have
certain syntax classes.

 -- Function: skip-syntax-forward syntaxes &optional limit
     This function moves point forward across characters having syntax
     classes mentioned in SYNTAXES (a string of syntax class
     characters).  It stops when it encounters the end of the buffer, or
     position LIMIT (if specified), or a character it is not supposed to
     skip.

     If SYNTAXES starts with '^', then the function skips characters
     whose syntax is _not_ in SYNTAXES.

     The return value is the distance traveled, which is a nonnegative
     integer.

 -- Function: skip-syntax-backward syntaxes &optional limit
     This function moves point backward across characters whose syntax
     classes are mentioned in SYNTAXES.  It stops when it encounters the
     beginning of the buffer, or position LIMIT (if specified), or a
     character it is not supposed to skip.

     If SYNTAXES starts with '^', then the function skips characters
     whose syntax is _not_ in SYNTAXES.

     The return value indicates the distance traveled.  It is an integer
     that is zero or less.

 -- Function: backward-prefix-chars
     This function moves point backward over any number of characters
     with expression prefix syntax.  This includes both characters in
     the expression prefix syntax class, and characters with the 'p'
     flag.

==============================================================================
File: elisp.info,  Node: |Parsing_Expressions|,  Next: |Syntax_Table_Internals|,  Prev: |Motion_and_Syntax|,  Up: |Syntax_Tables|
==============================================================================

                                                           *Parsing_Expressions*

35.6 Parsing Expressions
------------------------

This section describes functions for parsing and scanning balanced
expressions.  We will refer to such expressions as "sexps", following
the terminology of Lisp, even though these functions can act on
languages other than Lisp.  Basically, a sexp is either a balanced
parenthetical grouping, a string, or a symbol (i.e., a sequence of
characters whose syntax is either word constituent or symbol
constituent).  However, characters in the expression prefix syntax class
(*note Syntax Class Table::) are treated as part of the sexp if they
appear next to it.

   The syntax table controls the interpretation of characters, so these
functions can be used for Lisp expressions when in Lisp mode and for C
expressions when in C mode.  *Note List Motion::, for convenient
higher-level functions for moving over balanced expressions.

   A character's syntax controls how it changes the state of the parser,
rather than describing the state itself.  For example, a string
delimiter character toggles the parser state between in-string and
in-code, but the syntax of characters does not directly say whether they
are inside a string.  For example (note that 15 is the syntax code for
generic string delimiters),

     (put-text-property 1 9 'syntax-table '(15 . nil))

does not tell Emacs that the first eight chars of the current buffer are
a string, but rather that they are all string delimiters.  As a result,
Emacs treats them as four consecutive empty string constants.

MENU

* |Motion_via_Parsing|::       Motion functions that work by parsing.
* |Position_Parse|::           Determining the syntactic state of a position.
* |Parser_State|::             How Emacs represents a syntactic state.
* |Low_Level_Parsing|::        Parsing across a specified region.
* |Control_Parsing|::          Parameters that affect parsing.

==============================================================================
File: elisp.info,  Node: |Motion_via_Parsing|,  Next: |Position_Parse|,  Up: |Parsing_Expressions|
==============================================================================

                                                            *Motion_via_Parsing*

35.6.1 Motion Commands Based on Parsing
---------------------------------------

This section describes simple point-motion functions that operate based
on parsing expressions.

 -- Function: scan-lists from count depth
     This function scans forward COUNT balanced parenthetical groupings
     from position FROM.  It returns the position where the scan stops.
     If COUNT is negative, the scan moves backwards.

     If DEPTH is nonzero, treat the starting position as being DEPTH
     parentheses deep.  The scanner moves forward or backward through
     the buffer until the depth changes to zero COUNT times.  Hence, a
     positive value for DEPTH has the effect of moving out DEPTH levels
     of parenthesis from the starting position, while a negative DEPTH
     has the effect of moving deeper by -DEPTH levels of parenthesis.

     Scanning ignores comments if 'parse-sexp-ignore-comments' is
     non-'nil'.

     If the scan reaches the beginning or end of the accessible part of
     the buffer before it has scanned over COUNT parenthetical
     groupings, the return value is 'nil' if the depth at that point is
     zero; if the depth is non-zero, a 'scan-error' error is signaled.

 -- Function: scan-sexps from count
     This function scans forward COUNT sexps from position FROM.  It
     returns the position where the scan stops.  If COUNT is negative,
     the scan moves backwards.

     Scanning ignores comments if 'parse-sexp-ignore-comments' is
     non-'nil'.

     If the scan reaches the beginning or end of (the accessible part
     of) the buffer while in the middle of a parenthetical grouping, an
     error is signaled.  If it reaches the beginning or end between
     groupings but before count is used up, 'nil' is returned.

 -- Function: forward-comment count
     This function moves point forward across COUNT complete comments
     (that is, including the starting delimiter and the terminating
     delimiter if any), plus any whitespace encountered on the way.  It
     moves backward if COUNT is negative.  If it encounters anything
     other than a comment or whitespace, it stops, leaving point at the
     place where it stopped.  This includes (for instance) finding the
     end of a comment when moving forward and expecting the beginning of
     one.  The function also stops immediately after moving over the
     specified number of complete comments.  If COUNT comments are found
     as expected, with nothing except whitespace between them, it
     returns 't'; otherwise it returns 'nil'.

     This function cannot tell whether the comments it traverses are
     embedded within a string.  If they look like comments, it treats
     them as comments.

     To move forward over all comments and whitespace following point,
     use '(forward-comment (buffer-size))'.  '(buffer-size)' is a good
     argument to use, because the number of comments in the buffer
     cannot exceed that many.

==============================================================================
File: elisp.info,  Node: |Position_Parse|,  Next: |Parser_State|,  Prev: |Motion_via_Parsing|,  Up: |Parsing_Expressions|
==============================================================================

                                                                *Position_Parse*

35.6.2 Finding the Parse State for a Position
---------------------------------------------

For syntactic analysis, such as in indentation, often the useful thing
is to compute the syntactic state corresponding to a given buffer
position.  This function does that conveniently.

 -- Function: syntax-ppss &optional pos
     This function returns the parser state that the parser would reach
     at position POS starting from the beginning of the visible portion
     of the buffer.  *Note Parser State::, for a description of the
     parser state.

     The return value is the same as if you call the low-level parsing
     function 'parse-partial-sexp' to parse from the beginning of the
     visible portion of the buffer to POS (*note Low-Level Parsing::).
     However, 'syntax-ppss' uses caches to speed up the computation.
     Due to this optimization, the second value (previous complete
     subexpression) and sixth value (minimum parenthesis depth) in the
     returned parser state are not meaningful.

     This function has a side effect: it adds a buffer-local entry to
     'before-change-functions' (*note Change Hooks::) for
     'syntax-ppss-flush-cache' (see below).  This entry keeps the cache
     consistent as the buffer is modified.  However, the cache might not
     be updated if 'syntax-ppss' is called while
     'before-change-functions' is temporarily let-bound, or if the
     buffer is modified without running the hook, such as when using
     'inhibit-modification-hooks'.  In those cases, it is necessary to
     call 'syntax-ppss-flush-cache' explicitly.

 -- Function: syntax-ppss-flush-cache beg &rest ignored-args
     This function flushes the cache used by 'syntax-ppss', starting at
     position BEG.  The remaining arguments, IGNORED-ARGS, are ignored;
     this function accepts them so that it can be directly used on hooks
     such as 'before-change-functions' (*note Change Hooks::).

==============================================================================
File: elisp.info,  Node: |Parser_State|,  Next: |Low_Level_Parsing|,  Prev: |Position_Parse|,  Up: |Parsing_Expressions|
==============================================================================

                                                                  *Parser_State*

35.6.3 Parser State
-------------------

A "parser state" is a list of (currently) eleven elements describing the
state of the syntactic parser, after it parses the text between a
specified starting point and a specified end point in the buffer using
'parse-partial-sexp' (*note Low-Level Parsing::).  Parsing functions
such as 'syntax-ppss' (*note Position Parse::) also return a parser
state as the value.  'parse-partial-sexp' can accept a parser state as
an argument, for resuming parsing.

   Here are the meanings of the elements of the parser state:

  0. The depth in parentheses, counting from 0.  Warning: this can be
     negative if there are more close parens than open parens between
     the parser's starting point and end point.

  1. The character position of the start of the innermost parenthetical
     grouping containing the stopping point; 'nil' if none.

  2. The character position of the start of the last complete
     subexpression terminated; 'nil' if none.

  3. Non-'nil' if inside a string.  More precisely, this is the
     character that will terminate the string, or 't' if a generic
     string delimiter character should terminate it.

  4. 't' if inside a non-nestable comment (of any comment style; *note
     Syntax Flags::); or the comment nesting level if inside a comment
     that can be nested.

  5. 't' if the end point is just after a quote character.

  6. The minimum parenthesis depth encountered during this scan.

  7. What kind of comment is active: 'nil' if not in a comment or in a
     comment of style 'a'; 1 for a comment of style 'b'; 2 for a comment
     of style 'c'; and 'syntax-table' for a comment that should be ended
     by a generic comment delimiter character.

  8. The string or comment start position.  While inside a comment, this
     is the position where the comment began; while inside a string,
     this is the position where the string began.  When outside of
     strings and comments, this element is 'nil'.

  9. The list of the positions of the currently open parentheses,
     starting with the outermost.

  10. When the last buffer position scanned was the (potential) first
     character of a two character construct (comment delimiter or
     escaped/char-quoted character pair), the SYNTAX-CODE (*note Syntax
     Table Internals::) of that position.  Otherwise 'nil'.

   Elements 1, 2, and 6 are ignored in a state which you pass as an
argument to 'parse-partial-sexp' to continue parsing.  Elements 9 and 10
are mainly used internally by the parser code.

   Some additional useful information is available from a parser state
using these functions:

 -- Function: syntax-ppss-toplevel-pos state
     This function extracts, from parser state STATE, the last position
     scanned in the parse which was at top level in grammatical
     structure.  "At top level" means outside of any parentheses,
     comments, or strings.

     The value is 'nil' if STATE represents a parse which has arrived at
     a top level position.

 -- Function: syntax-ppss-context state
     Return 'string' if the end position of the scan returning STATE is
     in a string, and 'comment' if it's in a comment.

==============================================================================
File: elisp.info,  Node: |Low_Level_Parsing|,  Next: |Control_Parsing|,  Prev: |Parser_State|,  Up: |Parsing_Expressions|
==============================================================================

                                                             *Low_Level_Parsing*

35.6.4 Low-Level Parsing
------------------------

The most basic way to use the expression parser is to tell it to start
at a given position with a certain state, and parse up to a specified
end position.

 -- Function: parse-partial-sexp start limit &optional target-depth
          stop-before state stop-comment
     This function parses a sexp in the current buffer starting at
     START, not scanning past LIMIT.  It stops at position LIMIT or when
     certain criteria described below are met, and sets point to the
     location where parsing stops.  It returns a parser state (*note
     Parser State::) describing the status of the parse at the point
     where it stops.

     If the third argument TARGET-DEPTH is non-'nil', parsing stops if
     the depth in parentheses becomes equal to TARGET-DEPTH.  The depth
     starts at 0, or at whatever is given in STATE.

     If the fourth argument STOP-BEFORE is non-'nil', parsing stops when
     it comes to any character that starts a sexp.  If STOP-COMMENT is
     non-'nil', parsing stops after the start of an unnested comment.
     If STOP-COMMENT is the symbol 'syntax-table', parsing stops after
     the start of an unnested comment or a string, or after the end of
     an unnested comment or a string, whichever comes first.

     If STATE is 'nil', START is assumed to be at the top level of
     parenthesis structure, such as the beginning of a function
     definition.  Alternatively, you might wish to resume parsing in the
     middle of the structure.  To do this, you must provide a STATE
     argument that describes the initial status of parsing.  The value
     returned by a previous call to 'parse-partial-sexp' will do nicely.

==============================================================================
File: elisp.info,  Node: |Control_Parsing|,  Prev: |Low_Level_Parsing|,  Up: |Parsing_Expressions|
==============================================================================

                                                               *Control_Parsing*

35.6.5 Parameters to Control Parsing
------------------------------------

 -- Variable: multibyte-syntax-as-symbol
     If this variable is non-'nil', 'scan-sexps' treats all non-ASCII
     characters as symbol constituents regardless of what the syntax
     table says about them.  (However, 'syntax-table 'text properties
     can still override the syntax.)

 -- User Option: parse-sexp-ignore-comments
     If the value is non-'nil', then comments are treated as whitespace
     by the functions in this section and by 'forward-sexp',
     'scan-lists' and 'scan-sexps'.

   The behavior of 'parse-partial-sexp' is also affected by
'parse-sexp-lookup-properties' (*note Syntax Properties::).

 -- Variable: comment-end-can-be-escaped
     If this buffer local variable is non-'nil', a single character
     which usually terminates a comment doesn't do so when that
     character is escaped.  This is used in C and C++ Modes, where line
     comments starting with '//' can be continued onto the next line by
     escaping the newline with '\'.

   You can use 'forward-comment' to move forward or backward over one
comment or several comments.

==============================================================================
File: elisp.info,  Node: |Syntax_Table_Internals|,  Next: |Categories|,  Prev: |Parsing_Expressions|,  Up: |Syntax_Tables|
==============================================================================

                                                        *Syntax_Table_Internals*

35.7 Syntax Table Internals
---------------------------

Syntax tables are implemented as char-tables (*note Char-Tables::), but
most Lisp programs don't work directly with their elements.  Syntax
tables do not store syntax data as syntax descriptors (*note Syntax
Descriptors::); they use an internal format, which is documented in this
section.  This internal format can also be assigned as syntax properties
(*note Syntax Properties::).

   Each entry in a syntax table is a "raw syntax descriptor": a cons
cell of the form '(SYNTAX-CODE . MATCHING-CHAR)'.  SYNTAX-CODE is an
integer which encodes the syntax class and syntax flags, according to
the table below.  MATCHING-CHAR, if non-'nil', specifies a matching
character (similar to the second character in a syntax descriptor).

   Use 'aref' (*note Array Functions::) to get the raw syntax descriptor
of a character, e.g. '(aref (syntax-table) ch)'.

   Here are the syntax codes corresponding to the various syntax
classes:

Code           Class                  Code           Class
0              whitespace             8              paired delimiter
1              punctuation            9              escape
2              word                   10             character quote
3              symbol                 11             comment-start
4              open parenthesis       12             comment-end
5              close parenthesis      13             inherit
6              expression prefix      14             generic comment
7              string quote           15             generic string

For example, in the standard syntax table, the entry for '(' is '(4 .
41)'.  41 is the character code for ')'.

   Syntax flags are encoded in higher order bits, starting 16 bits from
the least significant bit.  This table gives the power of two which
corresponds to each syntax flag.

Prefix      Flag                   Prefix      Flag
'1'         '(ash 1 16)'           'p'         '(ash 1 20)'
'2'         '(ash 1 17)'           'b'         '(ash 1 21)'
'3'         '(ash 1 18)'           'n'         '(ash 1 22)'
'4'         '(ash 1 19)'           'c'         '(ash 1 23)'

 -- Function: string-to-syntax desc
     Given a syntax descriptor DESC (a string), this function returns
     the corresponding raw syntax descriptor.

 -- Function: syntax-after pos
     This function returns the raw syntax descriptor for the character
     in the buffer after position POS, taking account of syntax
     properties as well as the syntax table.  If POS is outside the
     buffer's accessible portion (*note accessible portion: Narrowing.),
     the return value is 'nil'.

 -- Function: syntax-class syntax
     This function returns the syntax code for the raw syntax descriptor
     SYNTAX.  More precisely, it takes the raw syntax descriptor's
     SYNTAX-CODE component, masks off the high 16 bits which record the
     syntax flags, and returns the resulting integer.

     If SYNTAX is 'nil', the return value is 'nil'.  This is so that the
     expression

          (syntax-class (syntax-after pos))

     evaluates to 'nil' if 'pos' is outside the buffer's accessible
     portion, without throwing errors or returning an incorrect code.

==============================================================================
File: elisp.info,  Node: |Categories|,  Prev: |Syntax_Table_Internals|,  Up: |Syntax_Tables|
==============================================================================

                                                                    *Categories*

35.8 Categories
---------------

"Categories" provide an alternate way of classifying characters
syntactically.  You can define several categories as needed, then
independently assign each character to one or more categories.  Unlike
syntax classes, categories are not mutually exclusive; it is normal for
one character to belong to several categories.

   Each buffer has a "category table" which records which categories are
defined and also which characters belong to each category.  Each
category table defines its own categories, but normally these are
initialized by copying from the standard categories table, so that the
standard categories are available in all modes.

   Each category has a name, which is an ASCII printing character in the
range ' ' to '~'.  You specify the name of a category when you define it
with 'define-category'.

   The category table is actually a char-table (*note Char-Tables::).
The element of the category table at index C is a "category set"--a
bool-vector--that indicates which categories character C belongs to.  In
this category set, if the element at index CAT is 't', that means
category CAT is a member of the set, and that character C belongs to
category CAT.

   For the next three functions, the optional argument TABLE defaults to
the current buffer's category table.

 -- Function: define-category char docstring &optional table
     This function defines a new category, with name CHAR and
     documentation DOCSTRING, for the category table TABLE.

     Here's an example of defining a new category for characters that
     have strong right-to-left directionality (*note Bidirectional
     Display::) and using it in a special category table.  To obtain the
     information about the directionality of characters, the example
     code uses the 'bidi-class' Unicode property (*note bidi-class:
     Character Properties.).

          (defvar special-category-table-for-bidi
            ;;     Make an empty category-table.
            (let ((category-table (make-category-table))
                  ;; Create a char-table which gives the 'bidi-class' Unicode
                  ;; property for each character.
                  (uniprop-table
                   (unicode-property-table-internal 'bidi-class)))
              (define-category ?R "Characters of bidi-class R, AL, or RLO"
                               category-table)
              ;; Modify the category entry of each character whose
              ;; 'bidi-class' Unicode property is R, AL, or RLO --
              ;; these have a right-to-left directionality.
              (map-char-table
               (lambda (key val)
                 (if (memq val '(R AL RLO))
                     (modify-category-entry key ?R category-table)))
               uniprop-table)
              category-table))

 -- Function: category-docstring category &optional table
     This function returns the documentation string of category CATEGORY
     in category table TABLE.

          (category-docstring ?a)
               => "ASCII"
          (category-docstring ?l)
               => "Latin"

 -- Function: get-unused-category &optional table
     This function returns a category name (a character) which is not
     currently defined in TABLE.  If all possible categories are in use
     in TABLE, it returns 'nil'.

 -- Function: category-table
     This function returns the current buffer's category table.

 -- Function: category-table-p object
     This function returns 't' if OBJECT is a category table, otherwise
     'nil'.

 -- Function: standard-category-table
     This function returns the standard category table.

 -- Function: copy-category-table &optional table
     This function constructs a copy of TABLE and returns it.  If TABLE
     is not supplied (or is 'nil'), it returns a copy of the standard
     category table.  Otherwise, an error is signaled if TABLE is not a
     category table.

 -- Function: set-category-table table
     This function makes TABLE the category table for the current
     buffer.  It returns TABLE.

 -- Function: make-category-table
     This creates and returns an empty category table.  In an empty
     category table, no categories have been allocated, and no
     characters belong to any categories.

 -- Function: make-category-set categories
     This function returns a new category set--a bool-vector--whose
     initial contents are the categories listed in the string
     CATEGORIES.  The elements of CATEGORIES should be category names;
     the new category set has 't' for each of those categories, and
     'nil' for all other categories.

          (make-category-set "al")
               => #&128"\0\0\0\0\0\0\0\0\0\0\0\0\2\20\0\0"

 -- Function: char-category-set char
     This function returns the category set for character CHAR in the
     current buffer's category table.  This is the bool-vector which
     records which categories the character CHAR belongs to.  The
     function 'char-category-set' does not allocate storage, because it
     returns the same bool-vector that exists in the category table.

          (char-category-set ?a)
               => #&128"\0\0\0\0\0\0\0\0\0\0\0\0\2\20\0\0"

 -- Function: category-set-mnemonics category-set
     This function converts the category set CATEGORY-SET into a string
     containing the characters that designate the categories that are
     members of the set.

          (category-set-mnemonics (char-category-set ?a))
               => "al"

 -- Function: modify-category-entry char category &optional table reset
     This function modifies the category set of CHAR in category table
     TABLE (which defaults to the current buffer's category table).
     CHAR can be a character, or a cons cell of the form '(MIN . MAX)';
     in the latter case, the function modifies the category sets of all
     characters in the range between MIN and MAX, inclusive.

     Normally, it modifies a category set by adding CATEGORY to it.  But
     if RESET is non-'nil', then it deletes CATEGORY instead.

 -- Command: describe-categories &optional buffer-or-name
     This function describes the category specifications in the current
     category table.  It inserts the descriptions in a buffer, and then
     displays that buffer.  If BUFFER-OR-NAME is non-'nil', it describes
     the category table of that buffer instead.

==============================================================================
File: elisp.info,  Node: |Abbrevs|,  Next: |Threads|,  Prev: |Syntax_Tables|,  Up: |Top|
==============================================================================

                                                                       *Abbrevs*

36 Abbrevs and Abbrev Expansion
===============================

An abbreviation or "abbrev" is a string of characters that may be
expanded to a longer string.  The user can insert the abbrev string and
find it replaced automatically with the expansion of the abbrev.  This
saves typing.

   The set of abbrevs currently in effect is recorded in an "abbrev
table".  Each buffer has a local abbrev table, but normally all buffers
in the same major mode share one abbrev table.  There is also a global
abbrev table.  Normally both are used.

   An abbrev table is represented as an obarray.  *Note Creating
Symbols::, for information about obarrays.  Each abbreviation is
represented by a symbol in the obarray.  The symbol's name is the
abbreviation; its value is the expansion; its function definition is the
hook function for performing the expansion (*note Defining Abbrevs::);
and its property list cell contains various additional properties,
including the use count and the number of times the abbreviation has
been expanded (*note Abbrev Properties::).

   Certain abbrevs, called "system abbrevs", are defined by a major mode
instead of the user.  A system abbrev is identified by its non-'nil'
':system' property (*note Abbrev Properties::).  When abbrevs are saved
to an abbrev file, system abbrevs are omitted.  *Note Abbrev Files::.

   Because the symbols used for abbrevs are not interned in the usual
obarray, they will never appear as the result of reading a Lisp
expression; in fact, normally they are never used except by the code
that handles abbrevs.  Therefore, it is safe to use them in a
nonstandard way.

   If the minor mode Abbrev mode is enabled, the buffer-local variable
'abbrev-mode' is non-'nil', and abbrevs are automatically expanded in
the buffer.  For the user-level commands for abbrevs, see *note Abbrev
Mode: (emacs)Abbrevs.

MENU

* Tables: Abbrev Tables.        Creating and working with abbrev tables.
* |Defining_Abbrevs|::            Specifying abbreviations and their expansions.
* Files: Abbrev Files.          Saving abbrevs in files.
* Expansion: Abbrev Expansion.  Controlling expansion; expansion subroutines.
* |Standard_Abbrev_Tables|::      Abbrev tables used by various major modes.
* |Abbrev_Properties|::           How to read and set abbrev properties.
                                Which properties have which effect.
* |Abbrev_Table_Properties|::     How to read and set abbrev table properties.
                                Which properties have which effect.

==============================================================================
File: elisp.info,  Node: |Abbrev_Tables|,  Next: |Defining_Abbrevs|,  Up: |Abbrevs|
==============================================================================

                                                                 *Abbrev_Tables*

36.1 Abbrev Tables
------------------

This section describes how to create and manipulate abbrev tables.

 -- Function: make-abbrev-table &optional props
     This function creates and returns a new, empty abbrev table--an
     obarray containing no symbols.  It is a vector filled with zeros.
     PROPS is a property list that is applied to the new table (*note
     Abbrev Table Properties::).

 -- Function: abbrev-table-p object
     This function returns a non-'nil' value if OBJECT is an abbrev
     table.

 -- Function: clear-abbrev-table abbrev-table
     This function undefines all the abbrevs in ABBREV-TABLE, leaving it
     empty.

 -- Function: copy-abbrev-table abbrev-table
     This function returns a copy of ABBREV-TABLE--a new abbrev table
     containing the same abbrev definitions.  It does _not_ copy any
     property lists; only the names, values, and functions.

 -- Function: define-abbrev-table tabname definitions &optional
          docstring &rest props
     This function defines TABNAME (a symbol) as an abbrev table name,
     i.e., as a variable whose value is an abbrev table.  It defines
     abbrevs in the table according to DEFINITIONS, a list of elements
     of the form '(ABBREVNAME EXPANSION [HOOK] [PROPS...])'.  These
     elements are passed as arguments to 'define-abbrev'.

     The optional string DOCSTRING is the documentation string of the
     variable TABNAME.  The property list PROPS is applied to the abbrev
     table (*note Abbrev Table Properties::).

     If this function is called more than once for the same TABNAME,
     subsequent calls add the definitions in DEFINITIONS to TABNAME,
     rather than overwriting the entire original contents.  (A
     subsequent call only overrides abbrevs explicitly redefined or
     undefined in DEFINITIONS.)

 -- Variable: abbrev-table-name-list
     This is a list of symbols whose values are abbrev tables.
     'define-abbrev-table' adds the new abbrev table name to this list.

 -- Function: insert-abbrev-table-description name &optional human
     This function inserts before point a description of the abbrev
     table named NAME.  The argument NAME is a symbol whose value is an
     abbrev table.

     If HUMAN is non-'nil', the description is human-oriented.  System
     abbrevs are listed and identified as such.  Otherwise the
     description is a Lisp expression--a call to 'define-abbrev-table'
     that would define NAME as it is currently defined, but without the
     system abbrevs.  (The mode or package using NAME is supposed to add
     these to NAME separately.)

==============================================================================
File: elisp.info,  Node: |Defining_Abbrevs|,  Next: |Abbrev_Files|,  Prev: |Abbrev_Tables|,  Up: |Abbrevs|
==============================================================================

                                                              *Defining_Abbrevs*

36.2 Defining Abbrevs
---------------------

'define-abbrev' is the low-level basic function for defining an abbrev
in an abbrev table.

   When a major mode defines a system abbrev, it should call
'define-abbrev' and specify 't' for the ':system' property.  Be aware
that any saved non-system abbrevs are restored at startup, i.e., before
some major modes are loaded.  Therefore, major modes should not assume
that their abbrev tables are empty when they are first loaded.

 -- Function: define-abbrev abbrev-table name expansion &optional hook
          &rest props
     This function defines an abbrev named NAME, in ABBREV-TABLE, to
     expand to EXPANSION and call HOOK, with properties PROPS (*note
     Abbrev Properties::).  The return value is NAME.  The ':system'
     property in PROPS is treated specially here: if it has the value
     'force', then it will overwrite an existing definition even for a
     non-system abbrev of the same name.

     NAME should be a string.  The argument EXPANSION is normally the
     desired expansion (a string), or 'nil' to undefine the abbrev.  If
     it is anything but a string or 'nil', then the abbreviation expands
     solely by running HOOK.

     The argument HOOK is a function or 'nil'.  If HOOK is non-'nil',
     then it is called with no arguments after the abbrev is replaced
     with EXPANSION; point is located at the end of EXPANSION when HOOK
     is called.

     If HOOK is a non-'nil' symbol whose 'no-self-insert' property is
     non-'nil', HOOK can explicitly control whether to insert the
     self-inserting input character that triggered the expansion.  If
     HOOK returns non-'nil' in this case, that inhibits insertion of the
     character.  By contrast, if HOOK returns 'nil', 'expand-abbrev' (or
     'abbrev-insert') also returns 'nil', as if expansion had not really
     occurred.

     Normally, 'define-abbrev' sets the variable 'abbrevs-changed' to
     't', if it actually changes the abbrev.  This is so that some
     commands will offer to save the abbrevs.  It does not do this for a
     system abbrev, since those aren't saved anyway.

 -- User Option: only-global-abbrevs
     If this variable is non-'nil', it means that the user plans to use
     global abbrevs only.  This tells the commands that define
     mode-specific abbrevs to define global ones instead.  This variable
     does not alter the behavior of the functions in this section; it is
     examined by their callers.

==============================================================================
File: elisp.info,  Node: |Abbrev_Files|,  Next: |Abbrev_Expansion|,  Prev: |Defining_Abbrevs|,  Up: |Abbrevs|
==============================================================================

                                                                  *Abbrev_Files*

36.3 Saving Abbrevs in Files
----------------------------

A file of saved abbrev definitions is actually a file of Lisp code.  The
abbrevs are saved in the form of a Lisp program to define the same
abbrev tables with the same contents.  Therefore, you can load the file
with 'load' (*note How Programs Do Loading::).  However, the function
'quietly-read-abbrev-file' is provided as a more convenient interface.
Emacs automatically calls this function at startup.

   User-level facilities such as 'save-some-buffers' can save abbrevs in
a file automatically, under the control of variables described here.

 -- User Option: abbrev-file-name
     This is the default file name for reading and saving abbrevs.  By
     default, Emacs will look for '~/.emacs.d/abbrev_defs', and, if not
     found, for '~/.abbrev_defs'; if neither file exists, Emacs will
     create '~/.emacs.d/abbrev_defs'.

 -- Function: quietly-read-abbrev-file &optional filename
     This function reads abbrev definitions from a file named FILENAME,
     previously written with 'write-abbrev-file'.  If FILENAME is
     omitted or 'nil', the file specified in 'abbrev-file-name' is used.

     As the name implies, this function does not display any messages.

 -- User Option: save-abbrevs
     A non-'nil' value for 'save-abbrevs' means that Emacs should offer
     to save abbrevs (if any have changed) when files are saved.  If the
     value is 'silently', Emacs saves the abbrevs without asking the
     user.  'abbrev-file-name' specifies the file to save the abbrevs
     in.  The default value is 't'.

 -- Variable: abbrevs-changed
     This variable is set non-'nil' by defining or altering any abbrevs
     (except system abbrevs).  This serves as a flag for various Emacs
     commands to offer to save your abbrevs.

 -- Command: write-abbrev-file &optional filename
     Save all abbrev definitions (except system abbrevs), for all abbrev
     tables listed in 'abbrev-table-name-list', in the file FILENAME, in
     the form of a Lisp program that when loaded will define the same
     abbrevs.  Tables that do not have any abbrevs to save are omitted.
     If FILENAME is 'nil' or omitted, 'abbrev-file-name' is used.  This
     function returns 'nil'.

==============================================================================
File: elisp.info,  Node: |Abbrev_Expansion|,  Next: |Standard_Abbrev_Tables|,  Prev: |Abbrev_Files|,  Up: |Abbrevs|
==============================================================================

                                                              *Abbrev_Expansion*

36.4 Looking Up and Expanding Abbreviations
-------------------------------------------

Abbrevs are usually expanded by certain interactive commands, including
'self-insert-command'.  This section describes the subroutines used in
writing such commands, as well as the variables they use for
communication.

 -- Function: abbrev-symbol abbrev &optional table
     This function returns the symbol representing the abbrev named
     ABBREV.  It returns 'nil' if that abbrev is not defined.  The
     optional second argument TABLE is the abbrev table in which to look
     it up.  If TABLE is 'nil', this function tries first the current
     buffer's local abbrev table, and second the global abbrev table.

 -- Function: abbrev-expansion abbrev &optional table
     This function returns the string that ABBREV would expand into (as
     defined by the abbrev tables used for the current buffer).  It
     returns 'nil' if ABBREV is not a valid abbrev.  The optional
     argument TABLE specifies the abbrev table to use, as in
     'abbrev-symbol'.

 -- Command: expand-abbrev
     This command expands the abbrev before point, if any.  If point
     does not follow an abbrev, this command does nothing.  To do the
     expansion, it calls the function that is the value of the
     'abbrev-expand-function' variable, with no arguments, and returns
     whatever that function does.

     The default expansion function returns the abbrev symbol if it did
     expansion, and 'nil' otherwise.  If the abbrev symbol has a hook
     function that is a symbol whose 'no-self-insert' property is
     non-'nil', and if the hook function returns 'nil' as its value,
     then the default expansion function returns 'nil', even though
     expansion did occur.

 -- Function: abbrev-insert abbrev &optional name start end
     This function inserts the abbrev expansion of 'abbrev', replacing
     the text between 'start' and 'end'.  If 'start' is omitted, it
     defaults to point.  'name', if non-'nil', should be the name by
     which this abbrev was found (a string); it is used to figure out
     whether to adjust the capitalization of the expansion.  The
     function returns 'abbrev' if the abbrev was successfully inserted,
     otherwise it returns 'nil'.

 -- Command: abbrev-prefix-mark &optional arg
     This command marks the current location of point as the beginning
     of an abbrev.  The next call to 'expand-abbrev' will use the text
     from here to point (where it is then) as the abbrev to expand,
     rather than using the previous word as usual.

     First, this command expands any abbrev before point, unless ARG is
     non-'nil'.  (Interactively, ARG is the prefix argument.)  Then it
     inserts a hyphen before point, to indicate the start of the next
     abbrev to be expanded.  The actual expansion removes the hyphen.

 -- User Option: abbrev-all-caps
     When this is set non-'nil', an abbrev entered entirely in upper
     case is expanded using all upper case.  Otherwise, an abbrev
     entered entirely in upper case is expanded by capitalizing each
     word of the expansion.

 -- Variable: abbrev-start-location
     The value of this variable is a buffer position (an integer or a
     marker) for 'expand-abbrev' to use as the start of the next abbrev
     to be expanded.  The value can also be 'nil', which means to use
     the word before point instead.  'abbrev-start-location' is set to
     'nil' each time 'expand-abbrev' is called.  This variable is also
     set by 'abbrev-prefix-mark'.

 -- Variable: abbrev-start-location-buffer
     The value of this variable is the buffer for which
     'abbrev-start-location' has been set.  Trying to expand an abbrev
     in any other buffer clears 'abbrev-start-location'.  This variable
     is set by 'abbrev-prefix-mark'.

 -- Variable: last-abbrev
     This is the 'abbrev-symbol' of the most recent abbrev expanded.
     This information is left by 'expand-abbrev' for the sake of the
     'unexpand-abbrev' command (*note Expanding Abbrevs:
     (emacs)Expanding Abbrevs.).

 -- Variable: last-abbrev-location
     This is the location of the most recent abbrev expanded.  This
     contains information left by 'expand-abbrev' for the sake of the
     'unexpand-abbrev' command.

 -- Variable: last-abbrev-text
     This is the exact expansion text of the most recent abbrev
     expanded, after case conversion (if any).  Its value is 'nil' if
     the abbrev has already been unexpanded.  This contains information
     left by 'expand-abbrev' for the sake of the 'unexpand-abbrev'
     command.

 -- Variable: abbrev-expand-function
     The value of this variable is a function that 'expand-abbrev' will
     call with no arguments to do the expansion.  The function can do
     anything it wants before and after performing the expansion.  It
     should return the abbrev symbol if expansion took place.

   The following sample code shows a simple use of
'abbrev-expand-function'.  It assumes that 'foo-mode' is a mode for
editing certain files in which lines that start with '#' are comments.
You want to use Text mode abbrevs for those lines.  The regular local
abbrev table, 'foo-mode-abbrev-table' is appropriate for all other
lines.  *Note Standard Abbrev Tables::, for the definitions of
'local-abbrev-table' and 'text-mode-abbrev-table'.  *Note Advising
Functions::, for details of 'add-function'.

     (defun foo-mode-abbrev-expand-function (expand)
       (if (not (save-excursion (forward-line 0) (eq (char-after) ?#)))
           ;; Performs normal expansion.
           (funcall expand)
         ;; We're inside a comment: use the text-mode abbrevs.
         (let ((local-abbrev-table text-mode-abbrev-table))
           (funcall expand))))

     (add-hook 'foo-mode-hook
               (lambda ()
                 (add-function :around (local 'abbrev-expand-function)
                               #'foo-mode-abbrev-expand-function)))

==============================================================================
File: elisp.info,  Node: |Standard_Abbrev_Tables|,  Next: |Abbrev_Properties|,  Prev: |Abbrev_Expansion|,  Up: |Abbrevs|
==============================================================================

                                                        *Standard_Abbrev_Tables*

36.5 Standard Abbrev Tables
---------------------------

Here we list the variables that hold the abbrev tables for the preloaded
major modes of Emacs.

 -- Variable: global-abbrev-table
     This is the abbrev table for mode-independent abbrevs.  The abbrevs
     defined in it apply to all buffers.  Each buffer may also have a
     local abbrev table, whose abbrev definitions take precedence over
     those in the global table.

 -- Variable: local-abbrev-table
     The value of this buffer-local variable is the (mode-specific)
     abbreviation table of the current buffer.  It can also be a list of
     such tables.

 -- Variable: abbrev-minor-mode-table-alist
     The value of this variable is a list of elements of the form '(MODE
     . ABBREV-TABLE)' where MODE is the name of a variable: if the
     variable is bound to a non-'nil' value, then the ABBREV-TABLE is
     active, otherwise it is ignored.  ABBREV-TABLE can also be a list
     of abbrev tables.

 -- Variable: fundamental-mode-abbrev-table
     This is the local abbrev table used in Fundamental mode; in other
     words, it is the local abbrev table in all buffers in Fundamental
     mode.

 -- Variable: text-mode-abbrev-table
     This is the local abbrev table used in Text mode.

 -- Variable: lisp-mode-abbrev-table
     This is the local abbrev table used in Lisp mode.  It is the parent
     of the local abbrev table used in Emacs Lisp mode.  *Note Abbrev
     Table Properties::.

==============================================================================
File: elisp.info,  Node: |Abbrev_Properties|,  Next: |Abbrev_Table_Properties|,  Prev: |Standard_Abbrev_Tables|,  Up: |Abbrevs|
==============================================================================

                                                             *Abbrev_Properties*

36.6 Abbrev Properties
----------------------

Abbrevs have properties, some of which influence the way they work.  You
can provide them as arguments to 'define-abbrev', and manipulate them
with the following functions:

 -- Function: abbrev-put abbrev prop val
     Set the property PROP of ABBREV to value VAL.

 -- Function: abbrev-get abbrev prop
     Return the property PROP of ABBREV, or 'nil' if the abbrev has no
     such property.

   The following properties have special meanings:

':count'
     This property counts the number of times the abbrev has been
     expanded.  If not explicitly set, it is initialized to 0 by
     'define-abbrev'.

':system'
     If non-'nil', this property marks the abbrev as a system abbrev.
     Such abbrevs are not saved (*note Abbrev Files::).

':enable-function'
     If non-'nil', this property should be a function of no arguments
     which returns 'nil' if the abbrev should not be used and 't'
     otherwise.

':case-fixed'
     If non-'nil', this property indicates that the case of the abbrev's
     name is significant and should only match a text with the same
     pattern of capitalization.  It also disables the code that modifies
     the capitalization of the expansion.

==============================================================================
File: elisp.info,  Node: |Abbrev_Table_Properties|,  Prev: |Abbrev_Properties|,  Up: |Abbrevs|
==============================================================================

                                                       *Abbrev_Table_Properties*

36.7 Abbrev Table Properties
----------------------------

Like abbrevs, abbrev tables have properties, some of which influence the
way they work.  You can provide them as arguments to
'define-abbrev-table', and manipulate them with the functions:

 -- Function: abbrev-table-put table prop val
     Set the property PROP of abbrev table TABLE to value VAL.

 -- Function: abbrev-table-get table prop
     Return the property PROP of abbrev table TABLE, or 'nil' if TABLE
     has no such property.

   The following properties have special meaning:

':enable-function'
     This is like the ':enable-function' abbrev property except that it
     applies to all abbrevs in the table.  It is used before even trying
     to find the abbrev before point, so it can dynamically modify the
     abbrev table.

':case-fixed'
     This is like the ':case-fixed' abbrev property except that it
     applies to all abbrevs in the table.

':regexp'
     If non-'nil', this property is a regular expression that indicates
     how to extract the name of the abbrev before point, before looking
     it up in the table.  When the regular expression matches before
     point, the abbrev name is expected to be in submatch 1.  If this
     property is 'nil', the default is to use 'backward-word' and
     'forward-word' to find the name.  This property allows the use of
     abbrevs whose name contains characters of non-word syntax.

':parents'
     This property holds a list of tables from which to inherit other
     abbrevs.

':abbrev-table-modiff'
     This property holds a counter incremented each time a new abbrev is
     added to the table.

==============================================================================
File: elisp.info,  Node: |Threads|,  Next: |Processes|,  Prev: |Abbrevs|,  Up: |Top|
==============================================================================

                                                                       *Threads*

37 Threads
==========

Emacs Lisp provides a limited form of concurrency, called "threads".
All the threads in a given instance of Emacs share the same memory.
Concurrency in Emacs Lisp is "mostly cooperative", meaning that Emacs
will only switch execution between threads at well-defined times.
However, the Emacs thread support has been designed in a way to later
allow more fine-grained concurrency, and correct programs should not
rely on cooperative threading.

   Currently, thread switching will occur upon explicit request via
'thread-yield', when waiting for keyboard input or for process output
from asynchronous processes (e.g., during 'accept-process-output'), or
during blocking operations relating to threads, such as mutex locking or
'thread-join'.

   Emacs Lisp provides primitives to create and control threads, and
also to create and control mutexes and condition variables, useful for
thread synchronization.

   While global variables are shared among all Emacs Lisp threads, local
variables are not--a dynamic 'let' binding is local.  Each thread also
has its own current buffer (*note Current Buffer::) and its own match
data (*note Match Data::).

   Note that 'let' bindings are treated specially by the Emacs Lisp
implementation.  There is no way to duplicate this unwinding and
rewinding behavior other than by using 'let'.  For example, a manual
implementation of 'let' written using 'unwind-protect' cannot arrange
for variable values to be thread-specific.

   In the case of lexical bindings (*note Variable Scoping::), a closure
is an object like any other in Emacs Lisp, and bindings in a closure are
shared by any threads invoking the closure.

MENU

* |Basic_Thread_Functions|::      Basic thread functions.
* |Mutexes|::                     Mutexes allow exclusive access to data.
* |Condition_Variables|::         Inter-thread events.
* |The_Thread_List|::             Show the active threads.

==============================================================================
File: elisp.info,  Node: |Basic_Thread_Functions|,  Next: |Mutexes|,  Up: |Threads|
==============================================================================

                                                        *Basic_Thread_Functions*

37.1 Basic Thread Functions
---------------------------

Threads can be created and waited for.  A thread cannot be exited
directly, but the current thread can be exited implicitly, and other
threads can be signaled.

 -- Function: make-thread function &optional name
     Create a new thread of execution which invokes FUNCTION.  When
     FUNCTION returns, the thread exits.

     The new thread is created with no local variable bindings in
     effect.  The new thread's current buffer is inherited from the
     current thread.

     NAME can be supplied to give a name to the thread.  The name is
     used for debugging and informational purposes only; it has no
     meaning to Emacs.  If NAME is provided, it must be a string.

     This function returns the new thread.

 -- Function: threadp object
     This function returns 't' if OBJECT represents an Emacs thread,
     'nil' otherwise.

 -- Function: thread-join thread
     Block until THREAD exits, or until the current thread is signaled.
     It returns the result of the THREAD function.  If THREAD has
     already exited, this returns immediately.

 -- Function: thread-signal thread error-symbol data
     Like 'signal' (*note Signaling Errors::), but the signal is
     delivered in the thread THREAD.  If THREAD is the current thread,
     then this just calls 'signal' immediately.  Otherwise, THREAD will
     receive the signal as soon as it becomes current.  If THREAD was
     blocked by a call to 'mutex-lock', 'condition-wait', or
     'thread-join'; 'thread-signal' will unblock it.

     If THREAD is the main thread, the signal is not propagated there.
     Instead, it is shown as message in the main thread.

 -- Function: thread-yield
     Yield execution to the next runnable thread.

 -- Function: thread-name thread
     Return the name of THREAD, as specified to 'make-thread'.

 -- Function: thread-live-p thread
     Return 't' if THREAD is alive, or 'nil' if it is not.  A thread is
     alive as long as its function is still executing.

 -- Function: thread--blocker thread
     Return the object that THREAD is waiting on.  This function is
     primarily intended for debugging, and is given a "double hyphen"
     name to indicate that.

     If THREAD is blocked in 'thread-join', this returns the thread for
     which it is waiting.

     If THREAD is blocked in 'mutex-lock', this returns the mutex.

     If THREAD is blocked in 'condition-wait', this returns the
     condition variable.

     Otherwise, this returns 'nil'.

 -- Function: current-thread
     Return the current thread.

 -- Function: all-threads
     Return a list of all the live thread objects.  A new list is
     returned by each invocation.

 -- Variable: main-thread
     This variable keeps the main thread Emacs is running, or 'nil' if
     Emacs is compiled without thread support.

   When code run by a thread signals an error that is unhandled, the
thread exits.  Other threads can access the error form which caused the
thread to exit using the following function.

 -- Function: thread-last-error &optional cleanup
     This function returns the last error form recorded when a thread
     exited due to an error.  Each thread that exits abnormally
     overwrites the form stored by the previous thread's error with a
     new value, so only the last one can be accessed.  If CLEANUP is
     non-'nil', the stored form is reset to 'nil'.

==============================================================================
File: elisp.info,  Node: |Mutexes|,  Next: |Condition_Variables|,  Prev: |Basic_Thread_Functions|,  Up: |Threads|
==============================================================================

                                                                       *Mutexes*

37.2 Mutexes
------------

A "mutex" is an exclusive lock.  At any moment, zero or one threads may
own a mutex.  If a thread attempts to acquire a mutex, and the mutex is
already owned by some other thread, then the acquiring thread will block
until the mutex becomes available.

   Emacs Lisp mutexes are of a type called "recursive", which means that
a thread can re-acquire a mutex it owns any number of times.  A mutex
keeps a count of how many times it has been acquired, and each
acquisition of a mutex must be paired with a release.  The last release
by a thread of a mutex reverts it to the unowned state, potentially
allowing another thread to acquire the mutex.

 -- Function: mutexp object
     This function returns 't' if OBJECT represents an Emacs mutex,
     'nil' otherwise.

 -- Function: make-mutex &optional name
     Create a new mutex and return it.  If NAME is specified, it is a
     name given to the mutex.  It must be a string.  The name is for
     debugging purposes only; it has no meaning to Emacs.

 -- Function: mutex-name mutex
     Return the name of MUTEX, as specified to 'make-mutex'.

 -- Function: mutex-lock mutex
     This will block until this thread acquires MUTEX, or until this
     thread is signaled using 'thread-signal'.  If MUTEX is already
     owned by this thread, this simply returns.

 -- Function: mutex-unlock mutex
     Release MUTEX.  If MUTEX is not owned by this thread, this will
     signal an error.

 -- Macro: with-mutex mutex body...
     This macro is the simplest and safest way to evaluate forms while
     holding a mutex.  It acquires MUTEX, invokes BODY, and then
     releases MUTEX.  It returns the result of BODY.

==============================================================================
File: elisp.info,  Node: |Condition_Variables|,  Next: |The_Thread_List|,  Prev: |Mutexes|,  Up: |Threads|
==============================================================================

                                                           *Condition_Variables*

37.3 Condition Variables
------------------------

A "condition variable" is a way for a thread to block until some event
occurs.  A thread can wait on a condition variable, to be woken up when
some other thread notifies the condition.

   A condition variable is associated with a mutex and, conceptually,
with some condition.  For proper operation, the mutex must be acquired,
and then a waiting thread must loop, testing the condition and waiting
on the condition variable.  For example:

     (with-mutex mutex
       (while (not global-variable)
         (condition-wait cond-var)))

   The mutex ensures atomicity, and the loop is for robustness--there may
be spurious notifications.

   Similarly, the mutex must be held before notifying the condition.
The typical, and best, approach is to acquire the mutex, make the
changes associated with this condition, and then notify it:

     (with-mutex mutex
       (setq global-variable (some-computation))
       (condition-notify cond-var))

 -- Function: make-condition-variable mutex &optional name
     Make a new condition variable associated with MUTEX.  If NAME is
     specified, it is a name given to the condition variable.  It must
     be a string.  The name is for debugging purposes only; it has no
     meaning to Emacs.

 -- Function: condition-variable-p object
     This function returns 't' if OBJECT represents a condition
     variable, 'nil' otherwise.

 -- Function: condition-wait cond
     Wait for another thread to notify COND, a condition variable.  This
     function will block until the condition is notified, or until a
     signal is delivered to this thread using 'thread-signal'.

     It is an error to call 'condition-wait' without holding the
     condition's associated mutex.

     'condition-wait' releases the associated mutex while waiting.  This
     allows other threads to acquire the mutex in order to notify the
     condition.

 -- Function: condition-notify cond &optional all
     Notify COND.  The mutex with COND must be held before calling this.
     Ordinarily a single waiting thread is woken by 'condition-notify';
     but if ALL is not 'nil', then all threads waiting on COND are
     notified.

     'condition-notify' releases the associated mutex while waiting.
     This allows other threads to acquire the mutex in order to wait on
     the condition.

 -- Function: condition-name cond
     Return the name of COND, as passed to 'make-condition-variable'.

 -- Function: condition-mutex cond
     Return the mutex associated with COND.  Note that the associated
     mutex cannot be changed.

==============================================================================
File: elisp.info,  Node: |The_Thread_List|,  Prev: |Condition_Variables|,  Up: |Threads|
==============================================================================

                                                               *The_Thread_List*

37.4 The Thread List
--------------------

The 'list-threads' command lists all the currently alive threads.  In
the resulting buffer, each thread is identified either by the name
passed to 'make-thread' (*note Basic Thread Functions::), or by its
unique internal identifier if it was not created with a name.  The
status of each thread at the time of the creation or last update of the
buffer is shown, in addition to the object the thread was blocked on at
the time, if it was blocked.

 -- Variable: thread-list-refresh-seconds
     The 'Threads' buffer will automatically update twice per second.
     You can make the refresh rate faster or slower by customizing this
     variable.

   Here are the commands available in the thread list buffer:

'b'
     Show a backtrace of the thread at point.  This will show where in
     its code the thread had yielded or was blocked at the moment you
     pressed 'b'.  Be aware that the backtrace is a snapshot; the thread
     could have meanwhile resumed execution, and be in a different
     state, or could have exited.

     You may use 'g' in the thread's backtrace buffer to get an updated
     backtrace, as backtrace buffers do not automatically update.  *Note
     Backtraces::, for a description of backtraces and the other
     commands which work on them.

's'
     Signal the thread at point.  After 's', type 'q' to send a quit
     signal or 'e' to send an error signal.  Threads may implement
     handling of signals, but the default behavior is to exit on any
     signal.  Therefore you should only use this command if you
     understand how to restart the target thread, because your Emacs
     session may behave incorrectly if necessary threads are killed.

'g'
     Update the list of threads and their statuses.

==============================================================================
File: elisp.info,  Node: |Processes|,  Next: |Display|,  Prev: |Threads|,  Up: |Top|
==============================================================================

                                                                     *Processes*

38 Processes
============

In the terminology of operating systems, a "process" is a space in which
a program can execute.  Emacs runs in a process.  Emacs Lisp programs
can invoke other programs in processes of their own.  These are called
"subprocesses" or "child processes" of the Emacs process, which is their
"parent process".

   A subprocess of Emacs may be "synchronous" or "asynchronous",
depending on how it is created.  When you create a synchronous
subprocess, the Lisp program waits for the subprocess to terminate
before continuing execution.  When you create an asynchronous
subprocess, it can run in parallel with the Lisp program.  This kind of
subprocess is represented within Emacs by a Lisp object which is also
called a "process".  Lisp programs can use this object to communicate
with the subprocess or to control it.  For example, you can send
signals, obtain status information, receive output from the process, or
send input to it.

   In addition to processes that run programs, Lisp programs can open
connections of several types to devices or processes running on the same
machine or on other machines.  The supported connection types are: TCP
and UDP network connections, serial port connections, and pipe
connections.  Each such connection is also represented by a process
object.

 -- Function: processp object
     This function returns 't' if OBJECT represents an Emacs process
     object, 'nil' otherwise.  The process object can represent a
     subprocess running a program or a connection of any supported type.

   In addition to subprocesses of the current Emacs session, you can
also access other processes running on your machine.  *Note System
Processes::.

MENU

* |Subprocess_Creation|::      Functions that start subprocesses.
* |Shell_Arguments|::          Quoting an argument to pass it to a shell.
* |Synchronous_Processes|::    Details of using synchronous subprocesses.
* |Asynchronous_Processes|::   Starting up an asynchronous subprocess.
* |Deleting_Processes|::       Eliminating an asynchronous subprocess.
* |Process_Information|::      Accessing run-status and other attributes.
* |Input_to_Processes|::       Sending input to an asynchronous subprocess.
* |Signals_to_Processes|::     Stopping, continuing or interrupting
                               an asynchronous subprocess.
* |Output_from_Processes|::    Collecting output from an asynchronous subprocess.
* |Sentinels|::                Sentinels run when process run-status changes.
* |Query_Before_Exit|::        Whether to query if exiting will kill a process.
* |System_Processes|::         Accessing other processes running on your system.
* |Transaction_Queues|::       Transaction-based communication with subprocesses.
* |Network|::                  Opening network connections.
* |Network_Servers|::          Network servers let Emacs accept net connections.
* |Datagrams|::                UDP network connections.
* |Low_Level_Network|::        Lower-level but more general function
                               to create connections and servers.
* |Misc_Network|::             Additional relevant functions for net connections.
* |Serial_Ports|::             Communicating with serial ports.
* |Byte_Packing|::             Using bindat to pack and unpack binary data.

==============================================================================
File: elisp.info,  Node: |Subprocess_Creation|,  Next: |Shell_Arguments|,  Up: |Processes|
==============================================================================

                                                           *Subprocess_Creation*

38.1 Functions that Create Subprocesses
---------------------------------------

There are three primitives that create a new subprocess in which to run
a program.  One of them, 'make-process', creates an asynchronous process
and returns a process object (*note Asynchronous Processes::).  The
other two, 'call-process' and 'call-process-region', create a
synchronous process and do not return a process object (*note
Synchronous Processes::).  There are various higher-level functions that
make use of these primitives to run particular types of process.

   Synchronous and asynchronous processes are explained in the following
sections.  Since the three functions are all called in a similar
fashion, their common arguments are described here.

   In all cases, the functions specify the program to be run.  An error
is signaled if the file is not found or cannot be executed.  If the file
name is relative, the variable 'exec-path' contains a list of
directories to search.  Emacs initializes 'exec-path' when it starts up,
based on the value of the environment variable 'PATH'.  The standard
file name constructs, '~', '.', and '..', are interpreted as usual in
'exec-path', but environment variable substitutions ('$HOME', etc.) are
not recognized; use 'substitute-in-file-name' to perform them (*note
File Name Expansion::).  'nil' in this list refers to
'default-directory'.

   Executing a program can also try adding suffixes to the specified
name:

 -- User Option: exec-suffixes
     This variable is a list of suffixes (strings) to try adding to the
     specified program file name.  The list should include '""' if you
     want the name to be tried exactly as specified.  The default value
     is system-dependent.

   *Please note:* The argument PROGRAM contains only the name of the
program file; it may not contain any command-line arguments.  You must
use a separate argument, ARGS, to provide those, as described below.

   Each of the subprocess-creating functions has a BUFFER-OR-NAME
argument that specifies where the output from the program will go.  It
should be a buffer or a buffer name; if it is a buffer name, that will
create the buffer if it does not already exist.  It can also be 'nil',
which says to discard the output, unless a custom filter function
handles it.  (*Note Filter Functions::, and *note Read and Print::.)
Normally, you should avoid having multiple processes send output to the
same buffer because their output would be intermixed randomly.  For
synchronous processes, you can send the output to a file instead of a
buffer (and the corresponding argument is therefore more appropriately
called DESTINATION).  By default, both standard output and standard
error streams go to the same destination, but all the 3 primitives allow
optionally to direct the standard error stream to a different
destination.

   All three of the subprocess-creating functions allow to specify
command-line arguments for the process to run.  For 'call-process' and
'call-process-region', these come in the form of a '&rest' argument,
ARGS.  For 'make-process', both the program to run and its command-line
arguments are specified as a list of strings.  The command-line
arguments must all be strings, and they are supplied to the program as
separate argument strings.  Wildcard characters and other shell
constructs have no special meanings in these strings, since the strings
are passed directly to the specified program.

   The subprocess inherits its environment from Emacs, but you can
specify overrides for it with 'process-environment'.  *Note System
Environment::.  The subprocess gets its current directory from the value
of 'default-directory'.

 -- Variable: exec-directory
     The value of this variable is a string, the name of a directory
     that contains programs that come with GNU Emacs and are intended
     for Emacs to invoke.  The program 'movemail' is an example of such
     a program; Rmail uses it to fetch new mail from an inbox.

 -- User Option: exec-path
     The value of this variable is a list of directories to search for
     programs to run in subprocesses.  Each element is either the name
     of a directory (i.e., a string), or 'nil', which stands for the
     default directory (which is the value of 'default-directory').
     *Note executable-find: Locating Files, for the details of this
     search.

     The value of 'exec-path' is used by 'call-process' and
     'start-process' when the PROGRAM argument is not an absolute file
     name.

     Generally, you should not modify 'exec-path' directly.  Instead,
     ensure that your 'PATH' environment variable is set appropriately
     before starting Emacs.  Trying to modify 'exec-path' independently
     of 'PATH' can lead to confusing results.

 -- Function: exec-path
     This function is an extension of the variable 'exec-path'.  If
     'default-directory' indicates a remote directory, this function
     returns a list of directories used for searching programs on the
     respective remote host.  In case of a local 'default-directory',
     the function returns just the value of the variable 'exec-path'.

==============================================================================
File: elisp.info,  Node: |Shell_Arguments|,  Next: |Synchronous_Processes|,  Prev: |Subprocess_Creation|,  Up: |Processes|
==============================================================================

                                                               *Shell_Arguments*

38.2 Shell Arguments
--------------------

Lisp programs sometimes need to run a shell and give it a command that
contains file names that were specified by the user.  These programs
ought to be able to support any valid file name.  But the shell gives
special treatment to certain characters, and if these characters occur
in the file name, they will confuse the shell.  To handle these
characters, use the function 'shell-quote-argument':

 -- Function: shell-quote-argument argument
     This function returns a string that represents, in shell syntax, an
     argument whose actual contents are ARGUMENT.  It should work
     reliably to concatenate the return value into a shell command and
     then pass it to a shell for execution.

     Precisely what this function does depends on your operating system.
     The function is designed to work with the syntax of your system's
     standard shell; if you use an unusual shell, you will need to
     redefine this function.  *Note Security Considerations::.

          ;; This example shows the behavior on GNU and Unix systems.
          (shell-quote-argument "foo > bar")
               => "foo\\ \\>\\ bar"

          ;; This example shows the behavior on MS-DOS and MS-Windows.
          (shell-quote-argument "foo > bar")
               => "\"foo > bar\""

     Here's an example of using 'shell-quote-argument' to construct a
     shell command:

          (concat "diff -u "
                  (shell-quote-argument oldfile)
                  " "
                  (shell-quote-argument newfile))

   The following two functions are useful for combining a list of
individual command-line argument strings into a single string, and
taking a string apart into a list of individual command-line arguments.
These functions are mainly intended for converting user input in the
minibuffer, a Lisp string, into a list of string arguments to be passed
to 'make-process', 'call-process' or 'start-process', or for converting
such lists of arguments into a single Lisp string to be presented in the
minibuffer or echo area.  Note that if a shell is involved (e.g., if
using 'call-process-shell-command'), arguments should still be protected
by 'shell-quote-argument'; 'combine-and-quote-strings' is _not_ intended
to protect special characters from shell evaluation.

 -- Function: split-string-and-unquote string &optional separators
     This function splits STRING into substrings at matches for the
     regular expression SEPARATORS, like 'split-string' does (*note
     Creating Strings::); in addition, it removes quoting from the
     substrings.  It then makes a list of the substrings and returns it.

     If SEPARATORS is omitted or 'nil', it defaults to '"\\s-+"', which
     is a regular expression that matches one or more characters with
     whitespace syntax (*note Syntax Class Table::).

     This function supports two types of quoting: enclosing a whole
     string in double quotes '"..."', and quoting individual characters
     with a backslash escape '\'.  The latter is also used in Lisp
     strings, so this function can handle those as well.

 -- Function: combine-and-quote-strings list-of-strings &optional
          separator
     This function concatenates LIST-OF-STRINGS into a single string,
     quoting each string as necessary.  It also sticks the SEPARATOR
     string between each pair of strings; if SEPARATOR is omitted or
     'nil', it defaults to '" "'.  The return value is the resulting
     string.

     The strings in LIST-OF-STRINGS that need quoting are those that
     include SEPARATOR as their substring.  Quoting a string encloses it
     in double quotes '"..."'.  In the simplest case, if you are consing
     a command from the individual command-line arguments, every
     argument that includes embedded blanks will be quoted.

==============================================================================
File: elisp.info,  Node: |Synchronous_Processes|,  Next: |Asynchronous_Processes|,  Prev: |Shell_Arguments|,  Up: |Processes|
==============================================================================

                                                         *Synchronous_Processes*

38.3 Creating a Synchronous Process
-----------------------------------

After a "synchronous process" is created, Emacs waits for the process to
terminate before continuing.  Starting Dired on GNU or Unix(1) is an
example of this: it runs 'ls' in a synchronous process, then modifies
the output slightly.  Because the process is synchronous, the entire
directory listing arrives in the buffer before Emacs tries to do
anything with it.

   While Emacs waits for the synchronous subprocess to terminate, the
user can quit by typing 'C-g'.  The first 'C-g' tries to kill the
subprocess with a 'SIGINT' signal; but it waits until the subprocess
actually terminates before quitting.  If during that time the user types
another 'C-g', that kills the subprocess instantly with 'SIGKILL' and
quits immediately (except on MS-DOS, where killing other processes
doesn't work).  *Note Quitting::.

   The synchronous subprocess functions return an indication of how the
process terminated.

   The output from a synchronous subprocess is generally decoded using a
coding system, much like text read from a file.  The input sent to a
subprocess by 'call-process-region' is encoded using a coding system,
much like text written into a file.  *Note Coding Systems::.

 -- Function: call-process program &optional infile destination display
          &rest args
     This function calls PROGRAM and waits for it to finish.

     The current working directory of the subprocess is set to the
     current buffer's value of 'default-directory' if that is local (as
     determined by 'unhandled-file-name-directory'), or "~" otherwise.
     If you want to run a process in a remote directory use
     'process-file'.

     The standard input for the new process comes from file INFILE if
     INFILE is not 'nil', and from the null device otherwise.  The
     argument DESTINATION says where to put the process output.  Here
     are the possibilities:

     a buffer
          Insert the output in that buffer, before point.  This includes
          both the standard output stream and the standard error stream
          of the process.

     a buffer name (a string)
          Insert the output in a buffer with that name, before point.

     't'
          Insert the output in the current buffer, before point.

     'nil'
          Discard the output.

     0
          Discard the output, and return 'nil' immediately without
          waiting for the subprocess to finish.

          In this case, the process is not truly synchronous, since it
          can run in parallel with Emacs; but you can think of it as
          synchronous in that Emacs is essentially finished with the
          subprocess as soon as this function returns.

          MS-DOS doesn't support asynchronous subprocesses, so this
          option doesn't work there.

     '(:file FILE-NAME)'
          Send the output to the file name specified, overwriting it if
          it already exists.

     '(REAL-DESTINATION ERROR-DESTINATION)'
          Keep the standard output stream separate from the standard
          error stream; deal with the ordinary output as specified by
          REAL-DESTINATION, and dispose of the error output according to
          ERROR-DESTINATION.  If ERROR-DESTINATION is 'nil', that means
          to discard the error output, 't' means mix it with the
          ordinary output, and a string specifies a file name to
          redirect error output into.

          You can't directly specify a buffer to put the error output
          in; that is too difficult to implement.  But you can achieve
          this result by sending the error output to a temporary file
          and then inserting the file into a buffer when the subprocess
          finishes.

     If DISPLAY is non-'nil', then 'call-process' redisplays the buffer
     as output is inserted.  (However, if the coding system chosen for
     decoding output is 'undecided', meaning deduce the encoding from
     the actual data, then redisplay sometimes cannot continue once
     non-ASCII characters are encountered.  There are fundamental
     reasons why it is hard to fix this; see *note Output from
     Processes::.)

     Otherwise the function 'call-process' does no redisplay, and the
     results become visible on the screen only when Emacs redisplays
     that buffer in the normal course of events.

     The remaining arguments, ARGS, are strings that specify command
     line arguments for the program.  Each string is passed to PROGRAM
     as a separate argument.

     The value returned by 'call-process' (unless you told it not to
     wait) indicates the reason for process termination.  A number gives
     the exit status of the subprocess; 0 means success, and any other
     value means failure.  If the process terminated with a signal,
     'call-process' returns a string describing the signal.  If you told
     'call-process' not to wait, it returns 'nil'.

     In the examples below, the buffer 'foo' is current.

          (call-process "pwd" nil t)
               => 0

          ---------- Buffer: foo ----------
          /home/lewis/manual
          ---------- Buffer: foo ----------

          (call-process "grep" nil "bar" nil "lewis" "/etc/passwd")
               => 0

          ---------- Buffer: bar ----------
          lewis:x:1001:1001:Bil Lewis,,,,:/home/lewis:/bin/bash

          ---------- Buffer: bar ----------

     Here is an example of the use of 'call-process', as used to be
     found in the definition of the 'insert-directory' function:

          (call-process insert-directory-program nil t nil switches
                        (if full-directory-p
                            (concat (file-name-as-directory file) ".")
                          file))

 -- Function: process-file program &optional infile buffer display &rest
          args
     This function processes files synchronously in a separate process.
     It is similar to 'call-process', but may invoke a file name handler
     based on the value of the variable 'default-directory', which
     specifies the current working directory of the subprocess.

     The arguments are handled in almost the same way as for
     'call-process', with the following differences:

     Some file name handlers may not support all combinations and forms
     of the arguments INFILE, BUFFER, and DISPLAY.  For example, some
     file name handlers might behave as if DISPLAY were 'nil',
     regardless of the value actually passed.  As another example, some
     file name handlers might not support separating standard output and
     error output by way of the BUFFER argument.

     If a file name handler is invoked, it determines the program to run
     based on the first argument PROGRAM.  For instance, suppose that a
     handler for remote files is invoked.  Then the path that is used
     for searching for the program might be different from 'exec-path'.

     The second argument INFILE may invoke a file name handler.  The
     file name handler could be different from the handler chosen for
     the 'process-file' function itself.  (For example,
     'default-directory' could be on one remote host, and INFILE on a
     different remote host.  Or 'default-directory' could be
     non-special, whereas INFILE is on a remote host.)

     If BUFFER is a list of the form '(REAL-DESTINATION
     ERROR-DESTINATION)', and ERROR-DESTINATION names a file, then the
     same remarks as for INFILE apply.

     The remaining arguments (ARGS) will be passed to the process
     verbatim.  Emacs is not involved in processing file names that are
     present in ARGS.  To avoid confusion, it may be best to avoid
     absolute file names in ARGS, but rather to specify all file names
     as relative to 'default-directory'.  The function
     'file-relative-name' is useful for constructing such relative file
     names.  Alternatively, you can use 'file-local-name' (*note Magic
     File Names::) to obtain an absolute file name as seen from the
     remote host's perspective.

 -- Variable: process-file-side-effects
     This variable indicates whether a call of 'process-file' changes
     remote files.

     By default, this variable is always set to 't', meaning that a call
     of 'process-file' could potentially change any file on a remote
     host.  When set to 'nil', a file name handler could optimize its
     behavior with respect to remote file attribute caching.

     You should only ever change this variable with a let-binding; never
     with 'setq'.

 -- Function: call-process-region start end program &optional delete
          destination display &rest args
     This function sends the text from START to END as standard input to
     a process running PROGRAM.  It deletes the text sent if DELETE is
     non-'nil'; this is useful when DESTINATION is 't', to insert the
     output in the current buffer in place of the input.

     The arguments DESTINATION and DISPLAY control what to do with the
     output from the subprocess, and whether to update the display as it
     comes in.  For details, see the description of 'call-process',
     above.  If DESTINATION is the integer 0, 'call-process-region'
     discards the output and returns 'nil' immediately, without waiting
     for the subprocess to finish (this only works if asynchronous
     subprocesses are supported; i.e., not on MS-DOS).

     The remaining arguments, ARGS, are strings that specify command
     line arguments for the program.

     The return value of 'call-process-region' is just like that of
     'call-process': 'nil' if you told it to return without waiting;
     otherwise, a number or string which indicates how the subprocess
     terminated.

     In the following example, we use 'call-process-region' to run the
     'cat' utility, with standard input being the first five characters
     in buffer 'foo' (the word 'input').  'cat' copies its standard
     input into its standard output.  Since the argument DESTINATION is
     't', this output is inserted in the current buffer.

          ---------- Buffer: foo ----------
          input-!-
          ---------- Buffer: foo ----------

          (call-process-region 1 6 "cat" nil t)
               => 0

          ---------- Buffer: foo ----------
          inputinput-!-
          ---------- Buffer: foo ----------

     For example, the 'shell-command-on-region' command uses
     'call-shell-region' in a manner similar to this:

          (call-shell-region
           start end
           command              ; shell command
           nil                  ; do not delete region
           buffer)              ; send output to 'buffer'

 -- Function: call-process-shell-command command &optional infile
          destination display
     This function executes the shell command COMMAND synchronously.
     The other arguments are handled as in 'call-process'.  An old
     calling convention allowed passing any number of additional
     arguments after DISPLAY, which were concatenated to COMMAND; this
     is still supported, but strongly discouraged.

 -- Function: process-file-shell-command command &optional infile
          destination display
     This function is like 'call-process-shell-command', but uses
     'process-file' internally.  Depending on 'default-directory',
     COMMAND can be executed also on remote hosts.  An old calling
     convention allowed passing any number of additional arguments after
     DISPLAY, which were concatenated to COMMAND; this is still
     supported, but strongly discouraged.

 -- Function: call-shell-region start end command &optional delete
          destination
     This function sends the text from START to END as standard input to
     an inferior shell running COMMAND.  This function is similar than
     'call-process-region', with process being a shell.  The arguments
     'delete', 'destination' and the return value are like in
     'call-process-region'.  Note that this function doesn't accept
     additional arguments.

 -- Function: shell-command-to-string command
     This function executes COMMAND (a string) as a shell command, then
     returns the command's output as a string.

 -- Function: process-lines program &rest args
     This function runs PROGRAM, waits for it to finish, and returns its
     output as a list of strings.  Each string in the list holds a
     single line of text output by the program; the end-of-line
     characters are stripped from each line.  The arguments beyond
     PROGRAM, ARGS, are strings that specify command-line arguments with
     which to run the program.

     If PROGRAM exits with a non-zero exit status, this function signals
     an error.

     This function works by calling 'call-process', so program output is
     decoded in the same way as for 'call-process'.

   ---------- Footnotes ----------

   (1) On other systems, Emacs uses a Lisp emulation of 'ls'; see *note
Contents of Directories::.

==============================================================================
File: elisp.info,  Node: |Asynchronous_Processes|,  Next: |Deleting_Processes|,  Prev: |Synchronous_Processes|,  Up: |Processes|
==============================================================================

                                                        *Asynchronous_Processes*

38.4 Creating an Asynchronous Process
-------------------------------------

In this section, we describe how to create an "asynchronous process".
After an asynchronous process is created, it runs in parallel with
Emacs, and Emacs can communicate with it using the functions described
in the following sections (*note Input to Processes::, and *note Output
from Processes::).  Note that process communication is only partially
asynchronous: Emacs sends and receives data to and from a process only
when those functions are called.

   An asynchronous process is controlled either via a "pty"
(pseudo-terminal) or a "pipe".  The choice of pty or pipe is made when
creating the process, by default based on the value of the variable
'process-connection-type' (see below).  If available, ptys are usually
preferable for processes visible to the user, as in Shell mode, because
they allow for job control ('C-c', 'C-z', etc.) between the process and
its children, and because interactive programs treat ptys as terminal
devices, whereas pipes don't support these features.  However, for
subprocesses used by Lisp programs for internal purposes (i.e., no user
interaction with the subprocess is required), where significant amounts
of data need to be exchanged between the subprocess and the Lisp
program, it is often better to use a pipe, because pipes are more
efficient.  Also, the total number of ptys is limited on many systems,
and it is good not to waste them unnecessarily.

 -- Function: make-process &rest args
     This function is the basic low-level primitive for starting
     asynchronous subprocesses.  It returns a process object
     representing the subprocess.  Compared to the more high-level
     'start-process', described below, it takes keyword arguments, is
     more flexible, and allows to specify process filters and sentinels
     in a single call.

     The arguments ARGS are a list of keyword/argument pairs.  Omitting
     a keyword is always equivalent to specifying it with value 'nil'.
     Here are the meaningful keywords:

     :name NAME
          Use the string NAME as the process name; if a process with
          this name already exists, then NAME is modified (by appending
          '<1>', etc.) to be unique.

     :buffer BUFFER
          Use BUFFER as the process buffer.  If the value is 'nil', the
          subprocess is not associated with any buffer.

     :command COMMAND
          Use COMMAND as the command line of the process.  The value
          should be a list starting with the program's executable file
          name, followed by strings to give to the program as its
          arguments.  If the first element of the list is 'nil', Emacs
          opens a new pseudoterminal (pty) and associates its input and
          output with BUFFER, without actually running any program; the
          rest of the list elements are ignored in that case.

     :coding CODING
          If CODING is a symbol, it specifies the coding system to be
          used for both reading and writing of data from and to the
          connection.  If CODING is a cons cell '(DECODING . ENCODING)',
          then DECODING will be used for reading and ENCODING for
          writing.  The coding system used for encoding the data written
          to the program is also used for encoding the command-line
          arguments (but not the program itself, whose file name is
          encoded as any other file name; *note file-name-coding-system:
          Encoding and I/O.).

          If CODING is 'nil', the default rules for finding the coding
          system will apply.  *Note Default Coding Systems::.

     :connection-type TYPE
          Initialize the type of device used to communicate with the
          subprocess.  Possible values are 'pty' to use a pty, 'pipe' to
          use a pipe, or 'nil' to use the default derived from the value
          of the 'process-connection-type' variable.  This parameter and
          the value of 'process-connection-type' are ignored if a
          non-'nil' value is specified for the ':stderr' parameter; in
          that case, the type will always be 'pipe'.  On systems where
          ptys are not available (MS-Windows), this parameter is
          likewise ignored, and pipes are used unconditionally.

     :noquery QUERY-FLAG
          Initialize the process query flag to QUERY-FLAG.  *Note Query
          Before Exit::.

     :stop STOPPED
          If provided, STOPPED must be 'nil'; it is an error to use any
          non-'nil' value.  The ':stop' key is ignored otherwise and is
          retained for compatibility with other process types such as
          pipe processes.  Asynchronous subprocesses never start in the
          stopped state.

     :filter FILTER
          Initialize the process filter to FILTER.  If not specified, a
          default filter will be provided, which can be overridden
          later.  *Note Filter Functions::.

     :sentinel SENTINEL
          Initialize the process sentinel to SENTINEL.  If not
          specified, a default sentinel will be used, which can be
          overridden later.  *Note Sentinels::.

     :stderr STDERR
          Associate STDERR with the standard error of the process.  A
          non-'nil' value should be either a buffer or a pipe process
          created with 'make-pipe-process', described below.  If STDERR
          is 'nil', standard error is mixed with standard output, and
          both are sent to BUFFER or FILTER.

          If STDERR is a buffer, Emacs will create a pipe process, the
          "standard error process".  This process will have the default
          filter (*note Filter Functions::), sentinel (*note
          Sentinels::), and coding systems (*note Default Coding
          Systems::).  On the other hand, it will use QUERY-FLAG as its
          query-on-exit flag (*note Query Before Exit::).  It will be
          associated with the STDERR buffer (*note Process Buffers::)
          and send its output (which is the standard error of the main
          process) there.

          If STDERR is a pipe process, Emacs will use it as standard
          error process for the new process.

     :file-handler FILE-HANDLER
          If FILE-HANDLER is non-'nil', then look for a file name
          handler for the current buffer's 'default-directory', and
          invoke that file name handler to make the process.  If there
          is no such handler, proceed as if FILE-HANDLER were 'nil'.

     The original argument list, modified with the actual connection
     information, is available via the 'process-contact' function.

     The current working directory of the subprocess is set to the
     current buffer's value of 'default-directory' if that is local (as
     determined by 'unhandled-file-name-directory'), or '~' otherwise.
     If you want to run a process in a remote directory, pass
     ':file-handler t' to 'make-process'.  In that case, the current
     working directory is the local name component of
     'default-directory' (as determined by 'file-local-name').

     Depending on the implementation of the file name handler, it might
     not be possible to apply FILTER or SENTINEL to the resulting
     process object.  The ':stderr' argument cannot be a pipe process,
     file name handlers do not support pipe processes for this.  A
     buffer as ':stderr' argument is accepted, its contents is shown
     without the use of pipe processes.  *Note Filter Functions::, *note
     Sentinels::, and *note Accepting Output::.

     Some file name handlers may not support 'make-process'.  In such
     cases, this function does nothing and returns 'nil'.

 -- Function: make-pipe-process &rest args
     This function creates a bidirectional pipe which can be attached to
     a child process.  This is useful with the ':stderr' keyword of
     'make-process'.  The function returns a process object.

     The arguments ARGS are a list of keyword/argument pairs.  Omitting
     a keyword is always equivalent to specifying it with value 'nil'.

     Here are the meaningful keywords:

     :name NAME
          Use the string NAME as the process name.  As with
          'make-process', it is modified if necessary to make it unique.

     :buffer BUFFER
          Use BUFFER as the process buffer.

     :coding CODING
          If CODING is a symbol, it specifies the coding system to be
          used for both reading and writing of data from and to the
          connection.  If CODING is a cons cell '(DECODING . ENCODING)',
          then DECODING will be used for reading and ENCODING for
          writing.

          If CODING is 'nil', the default rules for finding the coding
          system will apply.  *Note Default Coding Systems::.

     :noquery QUERY-FLAG
          Initialize the process query flag to QUERY-FLAG.  *Note Query
          Before Exit::.

     :stop STOPPED
          If STOPPED is non-'nil', start the process in the stopped
          state.  In the stopped state, a pipe process does not accept
          incoming data, but you can send outgoing data.  The stopped
          state is set by 'stop-process' and cleared by
          'continue-process' (*note Signals to Processes::).

     :filter FILTER
          Initialize the process filter to FILTER.  If not specified, a
          default filter will be provided, which can be changed later.
          *Note Filter Functions::.

     :sentinel SENTINEL
          Initialize the process sentinel to SENTINEL.  If not
          specified, a default sentinel will be used, which can be
          changed later.  *Note Sentinels::.

     The original argument list, modified with the actual connection
     information, is available via the 'process-contact' function.

 -- Function: start-process name buffer-or-name program &rest args
     This function is a higher-level wrapper around 'make-process',
     exposing an interface that is similar to 'call-process'.  It
     creates a new asynchronous subprocess and starts the specified
     PROGRAM running in it.  It returns a process object that stands for
     the new subprocess in Lisp.  The argument NAME specifies the name
     for the process object; as with 'make-process', it is modified if
     necessary to make it unique.  The buffer BUFFER-OR-NAME is the
     buffer to associate with the process.

     If PROGRAM is 'nil', Emacs opens a new pseudoterminal (pty) and
     associates its input and output with BUFFER-OR-NAME, without
     creating a subprocess.  In that case, the remaining arguments ARGS
     are ignored.

     The rest of ARGS are strings that specify command line arguments
     for the subprocess.

     In the example below, the first process is started and runs
     (rather, sleeps) for 100 seconds (the output buffer 'foo' is
     created immediately).  Meanwhile, the second process is started,
     and given the name 'my-process<1>' for the sake of uniqueness.  It
     inserts the directory listing at the end of the buffer 'foo',
     before the first process finishes.  Then it finishes, and a message
     to that effect is inserted in the buffer.  Much later, the first
     process finishes, and another message is inserted in the buffer for
     it.

          (start-process "my-process" "foo" "sleep" "100")
               => #<process my-process>

          (start-process "my-process" "foo" "ls" "-l" "/bin")
               => #<process my-process<1>>

          ---------- Buffer: foo ----------
          total 8336
          -rwxr-xr-x 1 root root 971384 Mar 30 10:14 bash
          -rwxr-xr-x 1 root root 146920 Jul  5  2011 bsd-csh
          ...
          -rwxr-xr-x 1 root root 696880 Feb 28 15:55 zsh4

          Process my-process<1> finished

          Process my-process finished
          ---------- Buffer: foo ----------

 -- Function: start-file-process name buffer-or-name program &rest args
     Like 'start-process', this function starts a new asynchronous
     subprocess running PROGRAM in it, and returns its process object.

     The difference from 'start-process' is that this function may
     invoke a file name handler based on the value of
     'default-directory'.  This handler ought to run PROGRAM, perhaps on
     the local host, perhaps on a remote host that corresponds to
     'default-directory'.  In the latter case, the local part of
     'default-directory' becomes the working directory of the process.

     This function does not try to invoke file name handlers for PROGRAM
     or for the rest of ARGS.  For that reason, if PROGRAM or any of
     ARGS use the remote-file syntax (*note Magic File Names::), they
     must be converted either to file names relative to
     'default-directory', or to names that identify the files locally on
     the remote host, by running them through 'file-local-name'.

     Depending on the implementation of the file name handler, it might
     not be possible to apply 'process-filter' or 'process-sentinel' to
     the resulting process object.  *Note Filter Functions::, and *note
     Sentinels::.

     Some file name handlers may not support 'start-file-process' (for
     example the function 'ange-ftp-hook-function').  In such cases,
     this function does nothing and returns 'nil'.

 -- Function: start-process-shell-command name buffer-or-name command
     This function is like 'start-process', except that it uses a shell
     to execute the specified COMMAND.  The argument COMMAND is a shell
     command string.  The variable 'shell-file-name' specifies which
     shell to use.

     The point of running a program through the shell, rather than
     directly with 'make-process' or 'start-process', is so that you can
     employ shell features such as wildcards in the arguments.  It
     follows that if you include any arbitrary user-specified arguments
     in the command, you should quote them with 'shell-quote-argument'
     first, so that any special shell characters do _not_ have their
     special shell meanings.  *Note Shell Arguments::.  Of course, when
     executing commands based on user input you should also consider the
     security implications.

 -- Function: start-file-process-shell-command name buffer-or-name
          command
     This function is like 'start-process-shell-command', but uses
     'start-file-process' internally.  Because of this, COMMAND can also
     be executed on remote hosts, depending on 'default-directory'.

 -- Variable: process-connection-type
     This variable controls the type of device used to communicate with
     asynchronous subprocesses.  If it is non-'nil', then ptys are used,
     when available.  Otherwise, pipes are used.

     The value of 'process-connection-type' takes effect when
     'make-process' or 'start-process' is called.  So you can specify
     how to communicate with one subprocess by binding the variable
     around the call to these functions.

     Note that the value of this variable is ignored when 'make-process'
     is called with a non-'nil' value of the ':stderr' parameter; in
     that case, Emacs will communicate with the process using pipes.  It
     is also ignored if ptys are unavailable (MS-Windows).

          (let ((process-connection-type nil))  ; use a pipe
            (start-process ...))

     To determine whether a given subprocess actually got a pipe or a
     pty, use the function 'process-tty-name' (*note Process
     Information::).

==============================================================================
File: elisp.info,  Node: |Deleting_Processes|,  Next: |Process_Information|,  Prev: |Asynchronous_Processes|,  Up: |Processes|
==============================================================================

                                                            *Deleting_Processes*

38.5 Deleting Processes
-----------------------

"Deleting a process" disconnects Emacs immediately from the subprocess.
Processes are deleted automatically after they terminate, but not
necessarily right away.  You can delete a process explicitly at any
time.  If you explicitly delete a terminated process before it is
deleted automatically, no harm results.  Deleting a running process
sends a signal to terminate it (and its child processes, if any), and
calls the process sentinel.  *Note Sentinels::.

   When a process is deleted, the process object itself continues to
exist as long as other Lisp objects point to it.  All the Lisp
primitives that work on process objects accept deleted processes, but
those that do I/O or send signals will report an error.  The process
mark continues to point to the same place as before, usually into a
buffer where output from the process was being inserted.

 -- User Option: delete-exited-processes
     This variable controls automatic deletion of processes that have
     terminated (due to calling 'exit' or to a signal).  If it is 'nil',
     then they continue to exist until the user runs 'list-processes'.
     Otherwise, they are deleted immediately after they exit.

 -- Function: delete-process process
     This function deletes a process, killing it with a 'SIGKILL' signal
     if the process was running a program.  The argument may be a
     process, the name of a process, a buffer, or the name of a buffer.
     (A buffer or buffer-name stands for the process that
     'get-buffer-process' returns.)  Calling 'delete-process' on a
     running process terminates it, updates the process status, and runs
     the sentinel immediately.  If the process has already terminated,
     calling 'delete-process' has no effect on its status, or on the
     running of its sentinel (which will happen sooner or later).

     If the process object represents a network, serial, or pipe
     connection, its status changes to 'closed'; otherwise, it changes
     to 'signal', unless the process already exited.  *Note
     process-status: Process Information.

          (delete-process "shell")
               => nil

==============================================================================
File: elisp.info,  Node: |Process_Information|,  Next: |Input_to_Processes|,  Prev: |Deleting_Processes|,  Up: |Processes|
==============================================================================

                                                           *Process_Information*

38.6 Process Information
------------------------

Several functions return information about processes.

 -- Command: list-processes &optional query-only buffer
     This command displays a listing of all living processes.  In
     addition, it finally deletes any process whose status was 'Exited'
     or 'Signaled'.  It returns 'nil'.

     The processes are shown in a buffer named '*Process List*' (unless
     you specify otherwise using the optional argument BUFFER), whose
     major mode is Process Menu mode.

     If QUERY-ONLY is non-'nil', it only lists processes whose query
     flag is non-'nil'.  *Note Query Before Exit::.

 -- Function: process-list
     This function returns a list of all processes that have not been
     deleted.

          (process-list)
               => (#<process display-time> #<process shell>)

 -- Function: get-process name
     This function returns the process named NAME (a string), or 'nil'
     if there is none.  The argument NAME can also be a process object,
     in which case it is returned.

          (get-process "shell")
               => #<process shell>

 -- Function: process-command process
     This function returns the command that was executed to start
     PROCESS.  This is a list of strings, the first string being the
     program executed and the rest of the strings being the arguments
     that were given to the program.  For a network, serial, or pipe
     connection, this is either 'nil', which means the process is
     running or 't' (process is stopped).

          (process-command (get-process "shell"))
               => ("bash" "-i")

 -- Function: process-contact process &optional key no-block
     This function returns information about how a network, a serial, or
     a pipe connection was set up.  When KEY is 'nil', it returns
     '(HOSTNAME SERVICE)' for a network connection, '(PORT SPEED)' for a
     serial connection, and 't' for a pipe connection.  For an ordinary
     child process, this function always returns 't' when called with a
     'nil' KEY.

     If KEY is 't', the value is the complete status information for the
     connection, server, serial port, or pipe; that is, the list of
     keywords and values specified in 'make-network-process',
     'make-serial-process', or 'make-pipe-process', except that some of
     the values represent the current status instead of what you
     specified.

     For a network process, the values include (see
     'make-network-process' for a complete list):

     ':buffer'
          The associated value is the process buffer.
     ':filter'
          The associated value is the process filter function.  *Note
          Filter Functions::.
     ':sentinel'
          The associated value is the process sentinel function.  *Note
          Sentinels::.
     ':remote'
          In a connection, the address in internal format of the remote
          peer.
     ':local'
          The local address, in internal format.
     ':service'
          In a server, if you specified 't' for SERVICE, this value is
          the actual port number.

     ':local' and ':remote' are included even if they were not specified
     explicitly in 'make-network-process'.

     For a serial connection, see 'make-serial-process' and
     'serial-process-configure' for the list of keys.  For a pipe
     connection, see 'make-pipe-process' for the list of keys.

     If KEY is a keyword, the function returns the value corresponding
     to that keyword.

     If PROCESS is a non-blocking network stream that hasn't been fully
     set up yet, then this function will block until that has happened.
     If given the optional NO-BLOCK parameter, this function will return
     'nil' instead of blocking.

 -- Function: process-id process
     This function returns the PID of PROCESS.  This is an integral
     number that distinguishes the process PROCESS from all other
     processes running on the same computer at the current time.  The
     PID of a process is chosen by the operating system kernel when the
     process is started and remains constant as long as the process
     exists.  For network, serial, and pipe connections, this function
     returns 'nil'.

 -- Function: process-name process
     This function returns the name of PROCESS, as a string.

 -- Function: process-status process-name
     This function returns the status of PROCESS-NAME as a symbol.  The
     argument PROCESS-NAME must be a process, a buffer, or a process
     name (a string).

     The possible values for an actual subprocess are:

     'run'
          for a process that is running.
     'stop'
          for a process that is stopped but continuable.
     'exit'
          for a process that has exited.
     'signal'
          for a process that has received a fatal signal.
     'open'
          for a network, serial, or pipe connection that is open.
     'closed'
          for a network, serial, or pipe connection that is closed.
          Once a connection is closed, you cannot reopen it, though you
          might be able to open a new connection to the same place.
     'connect'
          for a non-blocking connection that is waiting to complete.
     'failed'
          for a non-blocking connection that has failed to complete.
     'listen'
          for a network server that is listening.
     'nil'
          if PROCESS-NAME is not the name of an existing process.

          (process-status (get-buffer "shell"))
               => run

     For a network, serial, or pipe connection, 'process-status' returns
     one of the symbols 'open', 'stop', or 'closed'.  The latter means
     that the other side closed the connection, or Emacs did
     'delete-process'.  The value 'stop' means that 'stop-process' was
     called on the connection.

 -- Function: process-live-p process
     This function returns non-'nil' if PROCESS is alive.  A process is
     considered alive if its status is 'run', 'open', 'listen',
     'connect' or 'stop'.

 -- Function: process-type process
     This function returns the symbol 'network' for a network connection
     or server, 'serial' for a serial port connection, 'pipe' for a pipe
     connection, or 'real' for a subprocess created for running a
     program.

 -- Function: process-exit-status process
     This function returns the exit status of PROCESS or the signal
     number that killed it.  (Use the result of 'process-status' to
     determine which of those it is.)  If PROCESS has not yet
     terminated, the value is 0.  For network, serial, and pipe
     connections that are already closed, the value is either 0 or 256,
     depending on whether the connection was closed normally or
     abnormally.

 -- Function: process-tty-name process
     This function returns the terminal name that PROCESS is using for
     its communication with Emacs--or 'nil' if it is using pipes instead
     of a pty (see 'process-connection-type' in *note Asynchronous
     Processes::).  If PROCESS represents a program running on a remote
     host, the terminal name used by that program on the remote host is
     provided as process property 'remote-tty'.  If PROCESS represents a
     network, serial, or pipe connection, the value is 'nil'.

 -- Function: process-coding-system process
     This function returns a cons cell '(DECODE . ENCODE)', describing
     the coding systems in use for decoding output from, and encoding
     input to, PROCESS (*note Coding Systems::).

 -- Function: set-process-coding-system process &optional
          decoding-system encoding-system
     This function specifies the coding systems to use for subsequent
     output from and input to PROCESS.  It will use DECODING-SYSTEM to
     decode subprocess output, and ENCODING-SYSTEM to encode subprocess
     input.

   Every process also has a property list that you can use to store
miscellaneous values associated with the process.

 -- Function: process-get process propname
     This function returns the value of the PROPNAME property of
     PROCESS.

 -- Function: process-put process propname value
     This function sets the value of the PROPNAME property of PROCESS to
     VALUE.

 -- Function: process-plist process
     This function returns the process plist of PROCESS.

 -- Function: set-process-plist process plist
     This function sets the process plist of PROCESS to PLIST.

==============================================================================
File: elisp.info,  Node: |Input_to_Processes|,  Next: |Signals_to_Processes|,  Prev: |Process_Information|,  Up: |Processes|
==============================================================================

                                                            *Input_to_Processes*

38.7 Sending Input to Processes
-------------------------------

Asynchronous subprocesses receive input when it is sent to them by
Emacs, which is done with the functions in this section.  You must
specify the process to send input to, and the input data to send.  If
the subprocess runs a program, the data appears on the standard input of
that program; for connections, the data is sent to the connected device
or program.

   Some operating systems have limited space for buffered input in a
pty.  On these systems, Emacs sends an EOF periodically amidst the other
characters, to force them through.  For most programs, these EOFs do no
harm.

   Subprocess input is normally encoded using a coding system before the
subprocess receives it, much like text written into a file.  You can use
'set-process-coding-system' to specify which coding system to use (*note
Process Information::).  Otherwise, the coding system comes from
'coding-system-for-write', if that is non-'nil'; or else from the
defaulting mechanism (*note Default Coding Systems::).

   Sometimes the system is unable to accept input for that process,
because the input buffer is full.  When this happens, the send functions
wait a short while, accepting output from subprocesses, and then try
again.  This gives the subprocess a chance to read more of its pending
input and make space in the buffer.  It also allows filters (including
the one currently running), sentinels and timers to run--so take account
of that in writing your code.

   In these functions, the PROCESS argument can be a process or the name
of a process, or a buffer or buffer name (which stands for a process via
'get-buffer-process').  'nil' means the current buffer's process.

 -- Function: process-send-string process string
     This function sends PROCESS the contents of STRING as standard
     input.  It returns 'nil'.  For example, to make a Shell buffer list
     files:

          (process-send-string "shell<1>" "ls\n")
               => nil

 -- Function: process-send-region process start end
     This function sends the text in the region defined by START and END
     as standard input to PROCESS.

     An error is signaled unless both START and END are integers or
     markers that indicate positions in the current buffer.  (It is
     unimportant which number is larger.)

 -- Function: process-send-eof &optional process
     This function makes PROCESS see an end-of-file in its input.  The
     EOF comes after any text already sent to it.  The function returns
     PROCESS.

          (process-send-eof "shell")
               => "shell"

 -- Function: process-running-child-p &optional process
     This function will tell you whether a PROCESS, which must not be a
     connection but a real subprocess, has given control of its terminal
     to a child process of its own.  If this is true, the function
     returns the numeric ID of the foreground process group of PROCESS;
     it returns 'nil' if Emacs can be certain that this is not so.  The
     value is 't' if Emacs cannot tell whether this is true.  This
     function signals an error if PROCESS is a network, serial, or pipe
     connection, or is the subprocess is not active.

==============================================================================
File: elisp.info,  Node: |Signals_to_Processes|,  Next: |Output_from_Processes|,  Prev: |Input_to_Processes|,  Up: |Processes|
==============================================================================

                                                          *Signals_to_Processes*

38.8 Sending Signals to Processes
---------------------------------

"Sending a signal" to a subprocess is a way of interrupting its
activities.  There are several different signals, each with its own
meaning.  The set of signals and their names is defined by the operating
system.  For example, the signal 'SIGINT' means that the user has typed
'C-c', or that some analogous thing has happened.

   Each signal has a standard effect on the subprocess.  Most signals
kill the subprocess, but some stop (or resume) execution instead.  Most
signals can optionally be handled by programs; if the program handles
the signal, then we can say nothing in general about its effects.

   You can send signals explicitly by calling the functions in this
section.  Emacs also sends signals automatically at certain times:
killing a buffer sends a 'SIGHUP' signal to all its associated
processes; killing Emacs sends a 'SIGHUP' signal to all remaining
processes.  ('SIGHUP' is a signal that usually indicates that the user
"hung up the phone", i.e., disconnected.)

   Each of the signal-sending functions takes two optional arguments:
PROCESS and CURRENT-GROUP.

   The argument PROCESS must be either a process, a process name, a
buffer, a buffer name, or 'nil'.  A buffer or buffer name stands for a
process through 'get-buffer-process'.  'nil' stands for the process
associated with the current buffer.  Except with 'stop-process' and
'continue-process', an error is signaled if PROCESS does not identify an
active process, or if it represents a network, serial, or pipe
connection.

   The argument CURRENT-GROUP is a flag that makes a difference when you
are running a job-control shell as an Emacs subprocess.  If it is
non-'nil', then the signal is sent to the current process-group of the
terminal that Emacs uses to communicate with the subprocess.  If the
process is a job-control shell, this means the shell's current subjob.
If CURRENT-GROUP is 'nil', the signal is sent to the process group of
the immediate subprocess of Emacs.  If the subprocess is a job-control
shell, this is the shell itself.  If CURRENT-GROUP is 'lambda', the
signal is sent to the process-group that owns the terminal, but only if
it is not the shell itself.

   The flag CURRENT-GROUP has no effect when a pipe is used to
communicate with the subprocess, because the operating system does not
support the distinction in the case of pipes.  For the same reason,
job-control shells won't work when a pipe is used.  See
'process-connection-type' in *note Asynchronous Processes::.

 -- Function: interrupt-process &optional process current-group
     This function interrupts the process PROCESS by sending the signal
     'SIGINT'.  Outside of Emacs, typing the interrupt character
     (normally 'C-c' on some systems, and <DEL> on others) sends this
     signal.  When the argument CURRENT-GROUP is non-'nil', you can
     think of this function as typing 'C-c' on the terminal by which
     Emacs talks to the subprocess.

 -- Function: kill-process &optional process current-group
     This function kills the process PROCESS by sending the signal
     'SIGKILL'.  This signal kills the subprocess immediately, and
     cannot be handled by the subprocess.

 -- Function: quit-process &optional process current-group
     This function sends the signal 'SIGQUIT' to the process PROCESS.
     This signal is the one sent by the quit character (usually 'C-\')
     when you are not inside Emacs.

 -- Function: stop-process &optional process current-group
     This function stops the specified PROCESS.  If it is a real
     subprocess running a program, it sends the signal 'SIGTSTP' to that
     subprocess.  If PROCESS represents a network, serial, or pipe
     connection, this function inhibits handling of the incoming data
     from the connection; for a network server, this means not accepting
     new connections.  Use 'continue-process' to resume normal
     execution.

     Outside of Emacs, on systems with job control, the stop character
     (usually 'C-z') normally sends the 'SIGTSTP' signal to a
     subprocess.  When CURRENT-GROUP is non-'nil', you can think of this
     function as typing 'C-z' on the terminal Emacs uses to communicate
     with the subprocess.

 -- Function: continue-process &optional process current-group
     This function resumes execution of the process PROCESS.  If it is a
     real subprocess running a program, it sends the signal 'SIGCONT' to
     that subprocess; this presumes that PROCESS was stopped previously.
     If PROCESS represents a network, serial, or pipe connection, this
     function resumes handling of the incoming data from the connection.
     For serial connections, data that arrived during the time the
     process was stopped might be lost.

 -- Command: signal-process process signal
     This function sends a signal to process PROCESS.  The argument
     SIGNAL specifies which signal to send; it should be an integer, or
     a symbol whose name is a signal.

     The PROCESS argument can be a system process ID (an integer); that
     allows you to send signals to processes that are not children of
     Emacs.  *Note System Processes::.

   Sometimes, it is necessary to send a signal to a non-local
asynchronous process.  This is possible by writing an own
'interrupt-process' implementation.  This function must be added then to
'interrupt-process-functions'.

 -- Variable: interrupt-process-functions
     This variable is a list of functions to be called for
     'interrupt-process'.  The arguments of the functions are the same
     as for 'interrupt-process'.  These functions are called in the
     order of the list, until one of them returns non-'nil'.  The
     default function, which shall always be the last in this list, is
     'internal-default-interrupt-process'.

     This is the mechanism, how Tramp implements 'interrupt-process'.

==============================================================================
File: elisp.info,  Node: |Output_from_Processes|,  Next: |Sentinels|,  Prev: |Signals_to_Processes|,  Up: |Processes|
==============================================================================

                                                         *Output_from_Processes*

38.9 Receiving Output from Processes
------------------------------------

The output that an asynchronous subprocess writes to its standard output
stream is passed to a function called the "filter function".  The
default filter function simply inserts the output into a buffer, which
is called the associated buffer of the process (*note Process
Buffers::).  If the process has no buffer then the default filter
discards the output.

   If the subprocess writes to its standard error stream, by default the
error output is also passed to the process filter function.  If Emacs
uses a pseudo-TTY (pty) for communication with the subprocess, then it
is impossible to separate the standard output and standard error streams
of the subprocess, because a pseudo-TTY has only one output channel.  In
that case, if you want to keep the output to those streams separate, you
should redirect one of them to a file--for example, by using an
appropriate shell command via 'start-process-shell-command' or a similar
function.

   Alternatively, you could use the ':stderr' parameter with a non-'nil'
value in a call to 'make-process' (*note make-process: Asynchronous
Processes.) to make the destination of the error output separate from
the standard output; in that case, Emacs will use pipes for
communicating with the subprocess.

   When a subprocess terminates, Emacs reads any pending output, then
stops reading output from that subprocess.  Therefore, if the subprocess
has children that are still live and still producing output, Emacs won't
receive that output.

   Output from a subprocess can arrive only while Emacs is waiting: when
reading terminal input (see the function 'waiting-for-user-input-p'), in
'sit-for' and 'sleep-for' (*note Waiting::), in 'accept-process-output'
(*note Accepting Output::), and in functions which send data to
processes (*note Input to Processes::).  This minimizes the problem of
timing errors that usually plague parallel programming.  For example,
you can safely create a process and only then specify its buffer or
filter function; no output can arrive before you finish, if the code in
between does not call any primitive that waits.

 -- Variable: process-adaptive-read-buffering
     On some systems, when Emacs reads the output from a subprocess, the
     output data is read in very small blocks, potentially resulting in
     very poor performance.  This behavior can be remedied to some
     extent by setting the variable 'process-adaptive-read-buffering' to
     a non-'nil' value (the default), as it will automatically delay
     reading from such processes, thus allowing them to produce more
     output before Emacs tries to read it.

MENU

* |Process_Buffers|::         By default, output is put in a buffer.
* |Filter_Functions|::        Filter functions accept output from the process.
* |Decoding_Output|::         Filters can get unibyte or multibyte strings.
* |Accepting_Output|::        How to wait until process output arrives.
* |Processes_and_Threads|::   How processes and threads interact.

==============================================================================
File: elisp.info,  Node: |Process_Buffers|,  Next: |Filter_Functions|,  Up: |Output_from_Processes|
==============================================================================

                                                               *Process_Buffers*

38.9.1 Process Buffers
----------------------

A process can (and usually does) have an "associated buffer", which is
an ordinary Emacs buffer that is used for two purposes: storing the
output from the process, and deciding when to kill the process.  You can
also use the buffer to identify a process to operate on, since in normal
practice only one process is associated with any given buffer.  Many
applications of processes also use the buffer for editing input to be
sent to the process, but this is not built into Emacs Lisp.

   By default, process output is inserted in the associated buffer.
(You can change this by defining a custom filter function, *note Filter
Functions::.)  The position to insert the output is determined by the
'process-mark', which is then updated to point to the end of the text
just inserted.  Usually, but not always, the 'process-mark' is at the
end of the buffer.

   Killing the associated buffer of a process also kills the process.
Emacs asks for confirmation first, if the process's
'process-query-on-exit-flag' is non-'nil' (*note Query Before Exit::).
This confirmation is done by the function
'process-kill-buffer-query-function', which is run from
'kill-buffer-query-functions' (*note Killing Buffers::).

 -- Function: process-buffer process
     This function returns the associated buffer of the specified
     PROCESS.

          (process-buffer (get-process "shell"))
               => #<buffer shell>

 -- Function: process-mark process
     This function returns the process marker for PROCESS, which is the
     marker that says where to insert output from the process.

     If PROCESS does not have a buffer, 'process-mark' returns a marker
     that points nowhere.

     The default filter function uses this marker to decide where to
     insert process output, and updates it to point after the inserted
     text.  That is why successive batches of output are inserted
     consecutively.

     Custom filter functions normally should use this marker in the same
     fashion.  For an example of a filter function that uses
     'process-mark', *note Process Filter Example::.

     When the user is expected to enter input in the process buffer for
     transmission to the process, the process marker separates the new
     input from previous output.

 -- Function: set-process-buffer process buffer
     This function sets the buffer associated with PROCESS to BUFFER.
     If BUFFER is 'nil', the process becomes associated with no buffer.

 -- Function: get-buffer-process buffer-or-name
     This function returns a nondeleted process associated with the
     buffer specified by BUFFER-OR-NAME.  If there are several processes
     associated with it, this function chooses one (currently, the one
     most recently created, but don't count on that).  Deletion of a
     process (see 'delete-process') makes it ineligible for this
     function to return.

     It is usually a bad idea to have more than one process associated
     with the same buffer.

          (get-buffer-process "shell")
               => #<process shell>

     Killing the process's buffer deletes the process, which kills the
     subprocess with a 'SIGHUP' signal (*note Signals to Processes::).

   If the process's buffer is displayed in a window, your Lisp program
may wish to tell the process the dimensions of that window, so that the
process could adapt its output to those dimensions, much as it adapts to
the screen dimensions.  The following functions allow communicating this
kind of information to processes; however, not all systems support the
underlying functionality, so it is best to provide fallbacks, e.g., via
command-line arguments or environment variables.

 -- Function: set-process-window-size process height width
     Tell PROCESS that its logical window size has dimensions WIDTH by
     HEIGHT, in character units.  If this function succeeds in
     communicating this information to the process, it returns 't';
     otherwise it returns 'nil'.

   When windows that display buffers associated with process change
their dimensions, the affected processes should be told about these
changes.  By default, when the window configuration changes, Emacs will
automatically call 'set-process-window-size' on behalf of every process
whose buffer is displayed in a window, passing it the smallest
dimensions of all the windows displaying the process's buffer.  This
works via 'window-configuration-change-hook' (*note Window Hooks::),
which is told to invoke the function that is the value of the variable
'window-adjust-process-window-size-function' for each process whose
buffer is displayed in at least one window.  You can customize this
behavior by setting the value of that variable.

 -- User Option: window-adjust-process-window-size-function
     The value of this variable should be a function of two arguments: a
     process and the list of windows displaying the process's buffer.
     When the function is called, the process's buffer is the current
     buffer.  The function should return a cons cell '(WIDTH . HEIGHT)'
     that describes the dimensions of the logical process window to be
     passed via a call to 'set-process-window-size'.  The function can
     also return 'nil', in which case Emacs will not call
     'set-process-window-size' for this process.

     Emacs supplies two predefined values for this variable:
     'window-adjust-process-window-size-smallest', which returns the
     smallest of all the dimensions of the windows that display a
     process's buffer; and 'window-adjust-process-window-size-largest',
     which returns the largest dimensions.  For more complex strategies,
     write your own function.

     This variable can be buffer-local.

   If the process has the 'adjust-window-size-function' property (*note
Process Information::), its value overrides the global and buffer-local
values of 'window-adjust-process-window-size-function'.

==============================================================================
File: elisp.info,  Node: |Filter_Functions|,  Next: |Decoding_Output|,  Prev: |Process_Buffers|,  Up: |Output_from_Processes|
==============================================================================

                                                              *Filter_Functions*

38.9.2 Process Filter Functions
-------------------------------

A process "filter function" is a function that receives the standard
output from the associated process.  _All_ output from that process is
passed to the filter.  The default filter simply outputs directly to the
process buffer.

   By default, the error output from the process, if any, is also passed
to the filter function, unless the destination for the standard error
stream of the process was separated from the standard output when the
process was created.  Emacs will only call the filter function during
certain function calls.  *Note Output from Processes::.  Note that if
any of those functions are called by the filter, the filter may be
called recursively.

   A filter function must accept two arguments: the associated process
and a string, which is output just received from it.  The function is
then free to do whatever it chooses with the output.

   Quitting is normally inhibited within a filter function--otherwise,
the effect of typing 'C-g' at command level or to quit a user command
would be unpredictable.  If you want to permit quitting inside a filter
function, bind 'inhibit-quit' to 'nil'.  In most cases, the right way to
do this is with the macro 'with-local-quit'.  *Note Quitting::.

   If an error happens during execution of a filter function, it is
caught automatically, so that it doesn't stop the execution of whatever
program was running when the filter function was started.  However, if
'debug-on-error' is non-'nil', errors are not caught.  This makes it
possible to use the Lisp debugger to debug filter functions.  *Note
Debugger::.

   Many filter functions sometimes (or always) insert the output in the
process's buffer, mimicking the actions of the default filter.  Such
filter functions need to make sure that they save the current buffer,
select the correct buffer (if different) before inserting output, and
then restore the original buffer.  They should also check whether the
buffer is still alive, update the process marker, and in some cases
update the value of point.  Here is how to do these things:

     (defun ordinary-insertion-filter (proc string)
       (when (buffer-live-p (process-buffer proc))
         (with-current-buffer (process-buffer proc)
           (let ((moving (= (point) (process-mark proc))))
             (save-excursion
               ;; Insert the text, advancing the process marker.
               (goto-char (process-mark proc))
               (insert string)
               (set-marker (process-mark proc) (point)))
             (if moving (goto-char (process-mark proc)))))))

   To make the filter force the process buffer to be visible whenever
new text arrives, you could insert a line like the following just before
the 'with-current-buffer' construct:

     (display-buffer (process-buffer proc))

   To force point to the end of the new output, no matter where it was
previously, eliminate the variable 'moving' from the example and call
'goto-char' unconditionally.  Note that this doesn't necessarily move
the window point.  The default filter actually uses
'insert-before-markers' which moves all markers, including the window
point.  This may move unrelated markers, so it's generally better to
move the window point explicitly, or set its insertion type to 't'
(*note Window Point::).

   Note that Emacs automatically saves and restores the match data while
executing filter functions.  *Note Match Data::.

   The output to the filter may come in chunks of any size.  A program
that produces the same output twice in a row may send it as one batch of
200 characters one time, and five batches of 40 characters the next.  If
the filter looks for certain text strings in the subprocess output, make
sure to handle the case where one of these strings is split across two
or more batches of output; one way to do this is to insert the received
text into a temporary buffer, which can then be searched.

 -- Function: set-process-filter process filter
     This function gives PROCESS the filter function FILTER.  If FILTER
     is 'nil', it gives the process the default filter, which inserts
     the process output into the process buffer.

 -- Function: process-filter process
     This function returns the filter function of PROCESS.

   In case the process's output needs to be passed to several filters,
you can use 'add-function' to combine an existing filter with a new one.
*Note Advising Functions::.

   Here is an example of the use of a filter function:

     (defun keep-output (process output)
        (setq kept (cons output kept)))
          => keep-output
     (setq kept nil)
          => nil
     (set-process-filter (get-process "shell") 'keep-output)
          => keep-output
     (process-send-string "shell" "ls ~/other\n")
          => nil
     kept
          => ("lewis@slug:$ "
     "FINAL-W87-SHORT.MSS    backup.otl              kolstad.mss~
     address.txt             backup.psf              kolstad.psf
     backup.bib~             david.mss               resume-Dec-86.mss~
     backup.err              david.psf               resume-Dec.psf
     backup.mss              dland                   syllabus.mss
     "
     "#backups.mss#          backup.mss~             kolstad.mss
     ")

==============================================================================
File: elisp.info,  Node: |Decoding_Output|,  Next: |Accepting_Output|,  Prev: |Filter_Functions|,  Up: |Output_from_Processes|
==============================================================================

                                                               *Decoding_Output*

38.9.3 Decoding Process Output
------------------------------

When Emacs writes process output directly into a multibyte buffer, it
decodes the output according to the process output coding system.  If
the coding system is 'raw-text' or 'no-conversion', Emacs converts the
unibyte output to multibyte using 'string-to-multibyte', and inserts the
resulting multibyte text.

   You can use 'set-process-coding-system' to specify which coding
system to use (*note Process Information::).  Otherwise, the coding
system comes from 'coding-system-for-read', if that is non-'nil'; or
else from the defaulting mechanism (*note Default Coding Systems::).  If
the text output by a process contains null bytes, Emacs by default uses
'no-conversion' for it; see *note inhibit-nul-byte-detection: Lisp and
Coding Systems, for how to control this behavior.

   Warning: Coding systems such as 'undecided', which determine the
coding system from the data, do not work entirely reliably with
asynchronous subprocess output.  This is because Emacs has to process
asynchronous subprocess output in batches, as it arrives.  Emacs must
try to detect the proper coding system from one batch at a time, and
this does not always work.  Therefore, if at all possible, specify a
coding system that determines both the character code conversion and the
end of line conversion--that is, one like 'latin-1-unix', rather than
'undecided' or 'latin-1'.

   When Emacs calls a process filter function, it provides the process
output as a multibyte string or as a unibyte string according to the
process's filter coding system.  Emacs decodes the output according to
the process output coding system, which usually produces a multibyte
string, except for coding systems such as 'binary' and 'raw-text'.

==============================================================================
File: elisp.info,  Node: |Accepting_Output|,  Next: |Processes_and_Threads|,  Prev: |Decoding_Output|,  Up: |Output_from_Processes|
==============================================================================

                                                              *Accepting_Output*

38.9.4 Accepting Output from Processes
--------------------------------------

Output from asynchronous subprocesses normally arrives only while Emacs
is waiting for some sort of external event, such as elapsed time or
terminal input.  Occasionally it is useful in a Lisp program to
explicitly permit output to arrive at a specific point, or even to wait
until output arrives from a process.

 -- Function: accept-process-output &optional process seconds millisec
          just-this-one
     This function allows Emacs to read pending output from processes.
     The output is given to their filter functions.  If PROCESS is
     non-'nil' then this function does not return until some output has
     been received from PROCESS or PROCESS has closed the connection.

     The arguments SECONDS and MILLISEC let you specify timeout periods.
     The former specifies a period measured in seconds and the latter
     specifies one measured in milliseconds.  The two time periods thus
     specified are added together, and 'accept-process-output' returns
     after that much time, even if there is no subprocess output.

     The argument MILLISEC is obsolete (and should not be used), because
     SECONDS can be floating point to specify waiting a fractional
     number of seconds.  If SECONDS is 0, the function accepts whatever
     output is pending but does not wait.

     If PROCESS is a process, and the argument JUST-THIS-ONE is
     non-'nil', only output from that process is handled, suspending
     output from other processes until some output has been received
     from that process or the timeout expires.  If JUST-THIS-ONE is an
     integer, also inhibit running timers.  This feature is generally
     not recommended, but may be necessary for specific applications,
     such as speech synthesis.

     The function 'accept-process-output' returns non-'nil' if it got
     output from PROCESS, or from any process if PROCESS is 'nil'; this
     can occur even after a process has exited if the corresponding
     connection contains buffered data.  The function returns 'nil' if
     the timeout expired or the connection was closed before output
     arrived.

   If a connection from a process contains buffered data,
'accept-process-output' can return non-'nil' even after the process has
exited.  Therefore, although the following loop:

     ;; This loop contains a bug.
     (while (process-live-p process)
       (accept-process-output process))

vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
