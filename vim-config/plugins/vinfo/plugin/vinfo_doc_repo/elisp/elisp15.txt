
     The optional FORM argument specifies the timestamp form to be
     returned.  If FORM is the symbol 'integer', this function returns
     an integer count of seconds.  If FORM is a positive integer, it
     specifies a clock frequency and this function returns an
     integer-pair timestamp '(TICKS . FORM)'.(1)  If FORM is 't', this
     function treats it as a positive integer suitable for representing
     the timestamp; for example, it is treated as 1000000000 if TIME is
     nil and the platform timestamp has nanosecond resolution.  If FORM
     is 'list', this function returns an integer list '(HIGH LOW MICRO
     PICO)'.  Although an omitted or 'nil' FORM currently acts like
     'list', this is planned to change in a future Emacs version, so
     callers requiring list timestamps should pass 'list' explicitly.

     If TIME is infinite or a NaN, this function signals an error.
     Otherwise, if TIME cannot be represented exactly, conversion
     truncates it toward minus infinity.  When FORM is 't', conversion
     is always exact so no truncation occurs, and the returned clock
     resolution is no less than that of TIME.  By way of contrast,
     'float-time' can convert any Lisp time value without signaling an
     error, although the result might not be exact.  *Note Time of
     Day::.

     For efficiency this function might return a value that is 'eq' to
     TIME, or that otherwise shares structure with TIME.

     Although '(time-convert nil nil)' is equivalent to
     '(current-time)', the latter may be a bit faster.

          (setq a (time-convert nil t))
          => (1564826753904873156 . 1000000000)
          (time-convert a 100000)
          => (156482675390487 . 100000)
          (time-convert a 'integer)
          => 1564826753
          (time-convert a 'list)
          => (23877 23681 904873 156000)

 -- Function: decode-time &optional time zone form
     This function converts a time value into calendrical information.
     If you don't specify TIME, it decodes the current time, and
     similarly ZONE defaults to the current time zone rule.  *Note Time
     Zone Rules::.  The operating system limits the range of time and
     zone values.

     The FORM argument controls the form of the returned SECONDS
     element, as described below.  The return value is a list of nine
     elements, as follows:

          (SECONDS MINUTES HOUR DAY MONTH YEAR DOW DST UTCOFF)

     Here is what the elements mean:

     SECONDS
          The number of seconds past the minute, with form described
          below.
     MINUTES
          The number of minutes past the hour, as an integer between 0
          and 59.
     HOUR
          The hour of the day, as an integer between 0 and 23.
     DAY
          The day of the month, as an integer between 1 and 31.
     MONTH
          The month of the year, as an integer between 1 and 12.
     YEAR
          The year, an integer typically greater than 1900.
     DOW
          The day of week, as an integer between 0 and 6, where 0 stands
          for Sunday.
     DST
          't' if daylight saving time is effect, 'nil' if it is not in
          effect, and -1 if this information is not available.
     UTCOFF
          An integer indicating the Universal Time offset in seconds,
          i.e., the number of seconds east of Greenwich.

     The SECONDS element is a Lisp timestamp that is nonnegative and
     less than 61; it is less than 60 except during positive leap
     seconds (assuming the operating system supports leap seconds).  If
     the optional FORM argument is 't', SECONDS uses the same precision
     as TIME; if FORM is 'integer', SECONDS is truncated to an integer.
     For example, if TIME is the timestamp '(1566009571321 . 1000)',
     which represents 2019-08-17 02:39:31.321 UTC on typical systems
     that lack leap seconds, then '(decode-time TIME t t)' returns
     '((31321 . 1000) 39 2 17 8 2019 6 nil 0)', whereas '(decode-time
     TIME t 'integer)' returns '(31 39 2 17 8 2019 6 nil 0)'.  If FORM
     is omitted or 'nil', it currently defaults to 'integer' but this
     default may change in future Emacs releases, so callers requiring a
     particular form should specify FORM.

     *Common Lisp Note:* Common Lisp has different meanings for DOW and
     UTCOFF, and its SECOND is an integer between 0 and 59 inclusive.

     To access (or alter) the elements in the time value, the
     'decoded-time-second', 'decoded-time-minute', 'decoded-time-hour',
     'decoded-time-day', 'decoded-time-month', 'decoded-time-year',
     'decoded-time-weekday', 'decoded-time-dst' and 'decoded-time-zone'
     accessors can be used.

     For instance, to increase the year in a decoded time, you could
     say:

          (setf (decoded-time-year decoded-time)
                (+ (decoded-time-year decoded-time) 4))

     Also see the following function.

 -- Function: decoded-time-add time delta
     This function takes a decoded time structure and adds DELTA (also a
     decoded time structure) to it.  Elements in DELTA that are 'nil'
     are ignored.

     For instance, if you want "same time next month", you could say:

          (let ((time (decode-time nil nil t))
                (delta (make-decoded-time :month 2)))
             (encode-time (decoded-time-add time delta)))

     If this date doesn't exist (if you're running this on January 31st,
     for instance), then the date will be shifted back until you get a
     valid date (which will be February 28th or 29th, depending).

     Fields are added in a most to least significant order, so if the
     adjustment described above happens, it happens before adding days,
     hours, minutes or seconds.

     The values in DELTA can be negative to subtract values instead.

     The return value is a decoded time structure.

 -- Function: make-decoded-time &key second minute hour day month year
          dst zone
     Return a decoded time structure with only the given keywords filled
     out, leaving the rest 'nil'.  For instance, to get a structure that
     represents "two months", you could say:

          (make-decoded-time :month 2)

 -- Function: encode-time time &rest obsolescent-arguments
     This function converts TIME to a Lisp timestamp.  It can act as the
     inverse of 'decode-time'.

     Ordinarily the first argument is a list '(SECOND MINUTE HOUR DAY
     MONTH YEAR IGNORED DST ZONE)' that specifies a decoded time in the
     style of 'decode-time', so that '(encode-time (decode-time ...))'
     works.  For the meanings of these list members, see the table under
     'decode-time'.

     As an obsolescent calling convention, this function can be given
     six or more arguments.  The first six arguments SECOND, MINUTE,
     HOUR, DAY, MONTH, and YEAR specify most of the components of a
     decoded time.  If there are more than six arguments the _last_
     argument is used as ZONE and any other extra arguments are ignored,
     so that '(apply #'encode-time (decode-time ...))' works.  In this
     obsolescent convention, ZONE defaults to the current time zone rule
     (*note Time Zone Rules::), and DST is treated as if it was -1.

     Year numbers less than 100 are not treated specially.  If you want
     them to stand for years above 1900, or years above 2000, you must
     alter them yourself before you call 'encode-time'.  The operating
     system limits the range of time and zone values.

     The 'encode-time' function acts as a rough inverse to
     'decode-time'.  For example, you can pass the output of the latter
     to the former as follows:

          (encode-time (decode-time ...))

     You can perform simple date arithmetic by using out-of-range values
     for SECONDS, MINUTES, HOUR, DAY, and MONTH; for example, day 0
     means the day preceding the given month.

   ---------- Footnotes ----------

   (1) Currently a positive integer FORM should be at least 65536 if the
returned value is intended to be given to standard functions expecting
Lisp timestamps.

==============================================================================
File: elisp.info,  Node: |Time_Parsing|,  Next: |Processor_Run_Time|,  Prev: |Time_Conversion|,  Up: |System_Interface|
==============================================================================

                                                                  *Time_Parsing*

40.8 Parsing and Formatting Times
---------------------------------

These functions convert time values to text in a string, and vice versa.
Time values include 'nil', numbers, and Lisp timestamps (*note Time of
Day::).

 -- Function: date-to-time string
     This function parses the time-string STRING and returns the
     corresponding Lisp timestamp.  The argument STRING should represent
     a date-time, and should be in one of the forms recognized by
     'parse-time-string' (see below).  This function assumes Universal
     Time if STRING lacks explicit time zone information.  The operating
     system limits the range of time and zone values.

 -- Function: parse-time-string string
     This function parses the time-string STRING into a list of the
     following form:

          (SEC MIN HOUR DAY MON YEAR DOW DST TZ)

     The format of this list is the same as what 'decode-time' accepts
     (*note Time Conversion::), and is described in more detail there.
     Any element that cannot be determined from the input will be set to
     'nil'.  The argument STRING should resemble an RFC 822 (or later)
     or ISO 8601 string, like "Fri, 25 Mar 2016 16:24:56 +0100" or
     "1998-09-12T12:21:54-0200", but this function will attempt to parse
     less well-formed time strings as well.

 -- Function: iso8601-parse string
     For a more strict function (that will error out upon invalid
     input), this function can be used instead.  It can parse all
     variants of the ISO 8601 standard, so in addition to the formats
     mentioned above, it also parses things like "1998W45-3" (week
     number) and "1998-245" (ordinal day number).  To parse durations,
     there's 'iso8601-parse-duration', and to parse intervals, there's
     'iso8601-parse-interval'.  All these functions return decoded time
     structures, except the final one, which returns three of them (the
     start, the end, and the duration).

 -- Function: format-time-string format-string &optional time zone

     This function converts TIME (or the current time, if TIME is
     omitted or 'nil') to a string according to FORMAT-STRING.  The
     conversion uses the time zone rule ZONE, which defaults to the
     current time zone rule.  *Note Time Zone Rules::.  The argument
     FORMAT-STRING may contain '%'-sequences which say to substitute
     parts of the time.  Here is a table of what the '%'-sequences mean:

     '%a'
          This stands for the abbreviated name of the day of week.
     '%A'
          This stands for the full name of the day of week.
     '%b'
          This stands for the abbreviated name of the month.
     '%B'
          This stands for the full name of the month.
     '%c'
          This is a synonym for '%x %X'.
     '%C'
          This stands for the century, that is, the year divided by 100,
          truncated toward zero.  The default field width is 2.
     '%d'
          This stands for the day of month, zero-padded.
     '%D'
          This is a synonym for '%m/%d/%y'.
     '%e'
          This stands for the day of month, blank-padded.
     '%F'
          This stands for the ISO 8601 date format, which is like
          '%+4Y-%m-%d' except that any flags or field width override the
          '+' and (after subtracting 6) the '4'.
     '%g'
          This stands for the year corresponding to the ISO week within
          the century.
     '%G'
          This stands for the year corresponding to the ISO week.
     '%h'
          This is a synonym for '%b'.
     '%H'
          This stands for the hour (00-23).
     '%I'
          This stands for the hour (01-12).
     '%j'
          This stands for the day of the year (001-366).
     '%k'
          This stands for the hour (0-23), blank padded.
     '%l'
          This stands for the hour (1-12), blank padded.
     '%m'
          This stands for the month (01-12).
     '%M'
          This stands for the minute (00-59).
     '%n'
          This stands for a newline.
     '%N'
          This stands for the nanoseconds (000000000-999999999).  To ask
          for fewer digits, use '%3N' for milliseconds, '%6N' for
          microseconds, etc.  Any excess digits are discarded, without
          rounding.
     '%p'
          This stands for 'AM' or 'PM', as appropriate.
     '%q'
          This stands for the calendar quarter (1-4).
     '%r'
          This is a synonym for '%I:%M:%S %p'.
     '%R'
          This is a synonym for '%H:%M'.
     '%s'
          This stands for the integer number of seconds since the epoch.
     '%S'
          This stands for the second (00-59, or 00-60 on platforms that
          support leap seconds).
     '%t'
          This stands for a tab character.
     '%T'
          This is a synonym for '%H:%M:%S'.
     '%u'
          This stands for the numeric day of week (1-7).  Monday is day
          1.
     '%U'
          This stands for the week of the year (01-52), assuming that
          weeks start on Sunday.
     '%V'
          This stands for the week of the year according to ISO 8601.
     '%w'
          This stands for the numeric day of week (0-6).  Sunday is day
          0.
     '%W'
          This stands for the week of the year (01-52), assuming that
          weeks start on Monday.
     '%x'
          This has a locale-specific meaning.  In the default locale
          (named 'C'), it is equivalent to '%D'.
     '%X'
          This has a locale-specific meaning.  In the default locale
          (named 'C'), it is equivalent to '%T'.
     '%y'
          This stands for the year without century (00-99).
     '%Y'
          This stands for the year with century.
     '%Z'
          This stands for the time zone abbreviation (e.g., 'EST').
     '%z'
          This stands for the time zone numerical offset.  The 'z' can
          be preceded by one, two, or three colons; if plain '%z' stands
          for '-0500', then '%:z' stands for '-05:00', '%::z' stands for
          '-05:00:00', and '%:::z' is like '%::z' except it suppresses
          trailing instances of ':00' so it stands for '-05' in the same
          example.
     '%%'
          This stands for a single '%'.

     One or more flag characters can appear immediately after the '%'.
     '0' pads with zeros, '+' pads with zeros and also puts '+' before
     nonnegative year numbers with more than four digits, '_' pads with
     blanks, '-' suppresses padding, '^' upper-cases letters, and '#'
     reverses the case of letters.

     You can also specify the field width and type of padding for any of
     these '%'-sequences.  This works as in 'printf': you write the
     field width as digits in a '%'-sequence, after any flags.  For
     example, '%S' specifies the number of seconds since the minute;
     '%03S' means to pad this with zeros to 3 positions, '%_3S' to pad
     with spaces to 3 positions.  Plain '%3S' pads with zeros, because
     that is how '%S' normally pads to two positions.

     The characters 'E' and 'O' act as modifiers when used after any
     flags and field widths in a '%'-sequence.  'E' specifies using the
     current locale's alternative version of the date and time.  In a
     Japanese locale, for example, '%Ex' might yield a date format based
     on the Japanese Emperors' reigns.  'E' is allowed in '%Ec', '%EC',
     '%Ex', '%EX', '%Ey', and '%EY'.

     'O' means to use the current locale's alternative representation of
     numbers, instead of the ordinary decimal digits.  This is allowed
     with most letters, all the ones that output numbers.

     To help debug programs, unrecognized '%'-sequences stand for
     themselves and are output as-is.  Programs should not rely on this
     behavior, as future versions of Emacs may recognize new
     '%'-sequences as extensions.

     This function uses the C library function 'strftime' (*note
     (libc)Formatting Calendar Time::) to do most of the work.  In order
     to communicate with that function, it first converts TIME and ZONE
     to internal form; the operating system limits the range of time and
     zone values.  This function also encodes FORMAT-STRING using the
     coding system specified by 'locale-coding-system' (*note
     Locales::); after 'strftime' returns the resulting string, this
     function decodes the string using that same coding system.

 -- Function: format-seconds format-string seconds
     This function converts its argument SECONDS into a string of years,
     days, hours, etc., according to FORMAT-STRING.  The argument
     FORMAT-STRING may contain '%'-sequences which control the
     conversion.  Here is a table of what the '%'-sequences mean:

     '%y'
     '%Y'
          The integer number of 365-day years.
     '%d'
     '%D'
          The integer number of days.
     '%h'
     '%H'
          The integer number of hours.
     '%m'
     '%M'
          The integer number of minutes.
     '%s'
     '%S'
          The integer number of seconds.
     '%z'
          Non-printing control flag.  When it is used, other specifiers
          must be given in the order of decreasing size, i.e., years
          before days, hours before minutes, etc.  Nothing will be
          produced in the result string to the left of '%z' until the
          first non-zero conversion is encountered.  For example, the
          default format used by 'emacs-uptime' (*note emacs-uptime:
          Processor Run Time.) '"%Y, %D, %H, %M, %z%S"' means that the
          number of seconds will always be produced, but years, days,
          hours, and minutes will only be shown if they are non-zero.
     '%%'
          Produces a literal '%'.

     Upper-case format sequences produce the units in addition to the
     numbers, lower-case formats produce only the numbers.

     You can also specify the field width by following the '%' with a
     number; shorter numbers will be padded with blanks.  An optional
     period before the width requests zero-padding instead.  For
     example, '"%.3Y"' might produce '"004 years"'.

==============================================================================
File: elisp.info,  Node: |Processor_Run_Time|,  Next: |Time_Calculations|,  Prev: |Time_Parsing|,  Up: |System_Interface|
==============================================================================

                                                            *Processor_Run_Time*

40.9 Processor Run time
-----------------------

Emacs provides several functions and primitives that return time, both
elapsed and processor time, used by the Emacs process.

 -- Command: emacs-uptime &optional format
     This function returns a string representing the Emacs "uptime"--the
     elapsed wall-clock time this instance of Emacs is running.  The
     string is formatted by 'format-seconds' according to the optional
     argument FORMAT.  For the available format descriptors, see *note
     format-seconds: Time Parsing.  If FORMAT is 'nil' or omitted, it
     defaults to '"%Y, %D, %H, %M, %z%S"'.

     When called interactively, it prints the uptime in the echo area.

 -- Function: get-internal-run-time
     This function returns the processor run time used by Emacs, as a
     Lisp timestamp (*note Time of Day::).

     Note that the time returned by this function excludes the time
     Emacs was not using the processor, and if the Emacs process has
     several threads, the returned value is the sum of the processor
     times used up by all Emacs threads.

     If the system doesn't provide a way to determine the processor run
     time, 'get-internal-run-time' returns the same time as
     'current-time'.

 -- Command: emacs-init-time
     This function returns the duration of the Emacs initialization
     (*note Startup Summary::) in seconds, as a string.  When called
     interactively, it prints the duration in the echo area.

==============================================================================
File: elisp.info,  Node: |Time_Calculations|,  Next: |Timers|,  Prev: |Processor_Run_Time|,  Up: |System_Interface|
==============================================================================

                                                             *Time_Calculations*

40.10 Time Calculations
-----------------------

These functions perform calendrical computations using time values
(*note Time of Day::).  As with any time value, a value of 'nil' for any
of their time-value arguments stands for the current system time, and a
single number stands for the number of seconds since the epoch.

 -- Function: time-less-p t1 t2
     This returns 't' if time value T1 is less than time value T2.  The
     result is 'nil' if either argument is a NaN.

 -- Function: time-equal-p t1 t2
     This returns 't' if T1 and T2 are equal time values.  The result is
     'nil' if either argument is a NaN.

 -- Function: time-subtract t1 t2
     This returns the time difference T1 - T2 between two time values,
     as a Lisp time value.  The result is exact and its clock resolution
     is no worse than the worse of its two arguments' resolutions.  The
     result is floating-point only if it is infinite or a NaN.  If you
     need the difference in units of elapsed seconds, you can convert it
     with 'time-convert' or 'float-time'.  *Note Time Conversion::.

 -- Function: time-add t1 t2
     This returns the sum of two time values, using the same conversion
     rules as 'time-subtract'.  One argument should represent a time
     difference rather than a point in time, as a time value that is
     often just a single number of elapsed seconds.  Here is how to add
     a number of seconds to a time value:

          (time-add TIME SECONDS)

 -- Function: time-to-days time-value
     This function returns the number of days between the beginning of
     year 1 and TIME-VALUE, assuming the default time zone.  The
     operating system limits the range of time and zone values.

 -- Function: time-to-day-in-year time-value
     This returns the day number within the year corresponding to
     TIME-VALUE, assuming the default time zone.  The operating system
     limits the range of time and zone values.

 -- Function: date-leap-year-p year
     This function returns 't' if YEAR is a leap year.

 -- Function: date-days-in-month year month
     Return the number of days in MONTH in YEAR.  For instance, February
     2020 has 29 days.

 -- Function: date-ordinal-to-time year ordinal
     Return the date of ORDINAL in YEAR as a decoded time structure.
     For instance, the 120th day in 2004 is April 29th.

==============================================================================
File: elisp.info,  Node: |Timers|,  Next: |Idle_Timers|,  Prev: |Time_Calculations|,  Up: |System_Interface|
==============================================================================

                                                                        *Timers*

40.11 Timers for Delayed Execution
----------------------------------

You can set up a "timer" to call a function at a specified future time
or after a certain length of idleness.  A timer is a special object that
stores the information about the next invocation times and the function
to invoke.

 -- Function: timerp object
     This predicate function returns non-'nil' if 'object' is a timer.

   Emacs cannot run timers at any arbitrary point in a Lisp program; it
can run them only when Emacs could accept output from a subprocess:
namely, while waiting or inside certain primitive functions such as
'sit-for' or 'read-event' which _can_ wait.  Therefore, a timer's
execution may be delayed if Emacs is busy.  However, the time of
execution is very precise if Emacs is idle.

   Emacs binds 'inhibit-quit' to 't' before calling the timer function,
because quitting out of many timer functions can leave things in an
inconsistent state.  This is normally unproblematical because most timer
functions don't do a lot of work.  Indeed, for a timer to call a
function that takes substantial time to run is likely to be annoying.
If a timer function needs to allow quitting, it should use
'with-local-quit' (*note Quitting::).  For example, if a timer function
calls 'accept-process-output' to receive output from an external
process, that call should be wrapped inside 'with-local-quit', to ensure
that 'C-g' works if the external process hangs.

   It is usually a bad idea for timer functions to alter buffer
contents.  When they do, they usually should call 'undo-boundary' both
before and after changing the buffer, to separate the timer's changes
from user commands' changes and prevent a single undo entry from growing
to be quite large.

   Timer functions should also avoid calling functions that cause Emacs
to wait, such as 'sit-for' (*note Waiting::).  This can lead to
unpredictable effects, since other timers (or even the same timer) can
run while waiting.  If a timer function needs to perform an action after
a certain time has elapsed, it can do this by scheduling a new timer.

   If a timer function calls functions that can change the match data,
it should save and restore the match data.  *Note Saving Match Data::.

 -- Command: run-at-time time repeat function &rest args
     This sets up a timer that calls the function FUNCTION with
     arguments ARGS at time TIME.  If REPEAT is a number (integer or
     floating point), the timer is scheduled to run again every REPEAT
     seconds after TIME.  If REPEAT is 'nil', the timer runs only once.

     TIME may specify an absolute or a relative time.

     Absolute times may be specified using a string with a limited
     variety of formats, and are taken to be times _today_, even if
     already in the past.  The recognized forms are 'XXXX', 'X:XX', or
     'XX:XX' (military time), and 'XXam', 'XXAM', 'XXpm', 'XXPM',
     'XX:XXam', 'XX:XXAM', 'XX:XXpm', or 'XX:XXPM'.  A period can be
     used instead of a colon to separate the hour and minute parts.

     To specify a relative time as a string, use numbers followed by
     units.  For example:

     '1 min'
          denotes 1 minute from now.
     '1 min 5 sec'
          denotes 65 seconds from now.
     '1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year'
          denotes exactly 103 months, 123 days, and 10862 seconds from
          now.

     For relative time values, Emacs considers a month to be exactly
     thirty days, and a year to be exactly 365.25 days.

     Not all convenient formats are strings.  If TIME is a number
     (integer or floating point), that specifies a relative time
     measured in seconds.  The result of 'encode-time' can also be used
     to specify an absolute value for TIME.

     In most cases, REPEAT has no effect on when _first_ call takes
     place--TIME alone specifies that.  There is one exception: if TIME
     is 't', then the timer runs whenever the time is a multiple of
     REPEAT seconds after the epoch.  This is useful for functions like
     'display-time'.

     The function 'run-at-time' returns a timer value that identifies
     the particular scheduled future action.  You can use this value to
     call 'cancel-timer' (see below).

 -- Command: run-with-timer secs repeat function &rest args
     This is exactly the same as 'run-at-time' (so see that definition
     for an explanation of the parameters; SECS is passed as TIME to
     that function), but is meant to be used when the delay is specified
     in seconds.

   A repeating timer nominally ought to run every REPEAT seconds, but
remember that any invocation of a timer can be late.  Lateness of one
repetition has no effect on the scheduled time of the next repetition.
For instance, if Emacs is busy computing for long enough to cover three
scheduled repetitions of the timer, and then starts to wait, it will
immediately call the timer function three times in immediate succession
(presuming no other timers trigger before or between them).  If you want
a timer to run again no less than N seconds after the last invocation,
don't use the REPEAT argument.  Instead, the timer function should
explicitly reschedule the timer.

 -- User Option: timer-max-repeats
     This variable's value specifies the maximum number of times to
     repeat calling a timer function in a row, when many previously
     scheduled calls were unavoidably delayed.

 -- Macro: with-timeout (seconds timeout-forms...) body...
     Execute BODY, but give up after SECONDS seconds.  If BODY finishes
     before the time is up, 'with-timeout' returns the value of the last
     form in BODY.  If, however, the execution of BODY is cut short by
     the timeout, then 'with-timeout' executes all the TIMEOUT-FORMS and
     returns the value of the last of them.

     This macro works by setting a timer to run after SECONDS seconds.
     If BODY finishes before that time, it cancels the timer.  If the
     timer actually runs, it terminates execution of BODY, then executes
     TIMEOUT-FORMS.

     Since timers can run within a Lisp program only when the program
     calls a primitive that can wait, 'with-timeout' cannot stop
     executing BODY while it is in the midst of a computation--only when
     it calls one of those primitives.  So use 'with-timeout' only with
     a BODY that waits for input, not one that does a long computation.

   The function 'y-or-n-p-with-timeout' provides a simple way to use a
timer to avoid waiting too long for an answer.  *Note Yes-or-No
Queries::.

 -- Function: cancel-timer timer
     This cancels the requested action for TIMER, which should be a
     timer--usually, one previously returned by 'run-at-time' or
     'run-with-idle-timer'.  This cancels the effect of that call to one
     of these functions; the arrival of the specified time will not
     cause anything special to happen.

   The 'list-timers' command lists all the currently active timers.
There's only one command available in the buffer displayed: 'c'
('timer-list-cancel') that will cancel the timer on the line under
point.

==============================================================================
File: elisp.info,  Node: |Idle_Timers|,  Next: |Terminal_Input|,  Prev: |Timers|,  Up: |System_Interface|
==============================================================================

                                                                   *Idle_Timers*

40.12 Idle Timers
-----------------

Here is how to set up a timer that runs when Emacs is idle for a certain
length of time.  Aside from how to set them up, idle timers work just
like ordinary timers.

 -- Command: run-with-idle-timer secs repeat function &rest args
     Set up a timer which runs the next time Emacs is idle for SECS
     seconds.  The value of SECS may be a number or a value of the type
     returned by 'current-idle-time'.

     If REPEAT is 'nil', the timer runs just once, the first time Emacs
     remains idle for a long enough time.  More often REPEAT is
     non-'nil', which means to run the timer _each time_ Emacs remains
     idle for SECS seconds.

     The function 'run-with-idle-timer' returns a timer value which you
     can use in calling 'cancel-timer' (*note Timers::).

   Emacs becomes "idle" when it starts waiting for user input, and it
remains idle until the user provides some input.  If a timer is set for
five seconds of idleness, it runs approximately five seconds after Emacs
first becomes idle.  Even if REPEAT is non-'nil', this timer will not
run again as long as Emacs remains idle, because the duration of
idleness will continue to increase and will not go down to five seconds
again.

   Emacs can do various things while idle: garbage collect, autosave or
handle data from a subprocess.  But these interludes during idleness do
not interfere with idle timers, because they do not reset the clock of
idleness to zero.  An idle timer set for 600 seconds will run when ten
minutes have elapsed since the last user command was finished, even if
subprocess output has been accepted thousands of times within those ten
minutes, and even if there have been garbage collections and autosaves.

   When the user supplies input, Emacs becomes non-idle while executing
the input.  Then it becomes idle again, and all the idle timers that are
set up to repeat will subsequently run another time, one by one.

   Do not write an idle timer function containing a loop which does a
certain amount of processing each time around, and exits when
'(input-pending-p)' is non-'nil'.  This approach seems very natural but
has two problems:

   * It blocks out all process output (since Emacs accepts process
     output only while waiting).

   * It blocks out any idle timers that ought to run during that time.

Similarly, do not write an idle timer function that sets up another idle
timer (including the same idle timer) with SECS argument less than or
equal to the current idleness time.  Such a timer will run almost
immediately, and continue running again and again, instead of waiting
for the next time Emacs becomes idle.  The correct approach is to
reschedule with an appropriate increment of the current value of the
idleness time, as described below.

 -- Function: current-idle-time
     If Emacs is idle, this function returns the length of time Emacs
     has been idle, using the same format as 'current-time' (*note Time
     of Day::).

     When Emacs is not idle, 'current-idle-time' returns 'nil'.  This is
     a convenient way to test whether Emacs is idle.

   The main use of 'current-idle-time' is when an idle timer function
wants to "take a break" for a while.  It can set up another idle timer
to call the same function again, after a few seconds more idleness.
Here's an example:

     (defvar my-resume-timer nil
       "Timer for `my-timer-function' to reschedule itself, or nil.")

     (defun my-timer-function ()
       ;; If the user types a command while 'my-resume-timer'
       ;; is active, the next time this function is called from
       ;; its main idle timer, deactivate 'my-resume-timer'.
       (when my-resume-timer
         (cancel-timer my-resume-timer))
       ...DO THE WORK FOR A WHILE...
       (when TAKING-A-BREAK
         (setq my-resume-timer
               (run-with-idle-timer
                 ;; Compute an idle time BREAK-LENGTH
                 ;; more than the current value.
                 (time-add (current-idle-time) BREAK-LENGTH)
                 nil
                 'my-timer-function))))

==============================================================================
File: elisp.info,  Node: |Terminal_Input|,  Next: |Terminal_Output|,  Prev: |Idle_Timers|,  Up: |System_Interface|
==============================================================================

                                                                *Terminal_Input*

40.13 Terminal Input
--------------------

This section describes functions and variables for recording or
manipulating terminal input.  See *note Display::, for related
functions.

MENU

* |Input_Modes|::         Options for how input is processed.
* |Recording_Input|::     Saving histories of recent or all input events.

==============================================================================
File: elisp.info,  Node: |Input_Modes|,  Next: |Recording_Input|,  Up: |Terminal_Input|
==============================================================================

                                                                   *Input_Modes*

40.13.1 Input Modes
-------------------

 -- Function: set-input-mode interrupt flow meta &optional quit-char
     This function sets the mode for reading keyboard input.  If
     INTERRUPT is non-'nil', then Emacs uses input interrupts.  If it is
     'nil', then it uses CBREAK mode.  The default setting is
     system-dependent.  Some systems always use CBREAK mode regardless
     of what is specified.

     When Emacs communicates directly with X, it ignores this argument
     and uses interrupts if that is the way it knows how to communicate.

     If FLOW is non-'nil', then Emacs uses XON/XOFF ('C-q', 'C-s') flow
     control for output to the terminal.  This has no effect except in
     CBREAK mode.

     The argument META controls support for input character codes above
     127.  If META is 't', Emacs converts characters with the 8th bit
     set into Meta characters.  If META is 'nil', Emacs disregards the
     8th bit; this is necessary when the terminal uses it as a parity
     bit.  If META is neither 't' nor 'nil', Emacs uses all 8 bits of
     input unchanged.  This is good for terminals that use 8-bit
     character sets.

     If QUIT-CHAR is non-'nil', it specifies the character to use for
     quitting.  Normally this character is 'C-g'.  *Note Quitting::.

   The 'current-input-mode' function returns the input mode settings
Emacs is currently using.

 -- Function: current-input-mode
     This function returns the current mode for reading keyboard input.
     It returns a list, corresponding to the arguments of
     'set-input-mode', of the form '(INTERRUPT FLOW META QUIT)' in
     which:
     INTERRUPT
          is non-'nil' when Emacs is using interrupt-driven input.  If
          'nil', Emacs is using CBREAK mode.
     FLOW
          is non-'nil' if Emacs uses XON/XOFF ('C-q', 'C-s') flow
          control for output to the terminal.  This value is meaningful
          only when INTERRUPT is 'nil'.
     META
          is 't' if Emacs treats the eighth bit of input characters as
          the meta bit; 'nil' means Emacs clears the eighth bit of every
          input character; any other value means Emacs uses all eight
          bits as the basic character code.
     QUIT
          is the character Emacs currently uses for quitting, usually
          'C-g'.

==============================================================================
File: elisp.info,  Node: |Recording_Input|,  Prev: |Input_Modes|,  Up: |Terminal_Input|
==============================================================================

                                                               *Recording_Input*

40.13.2 Recording Input
-----------------------

 -- Function: recent-keys &optional include-cmds
     This function returns a vector containing the last 300 input events
     from the keyboard or mouse.  All input events are included, whether
     or not they were used as parts of key sequences.  Thus, you always
     get the last 300 input events, not counting events generated by
     keyboard macros.  (These are excluded because they are less
     interesting for debugging; it should be enough to see the events
     that invoked the macros.)

     If INCLUDE-CMDS is non-'nil', complete key sequences in the result
     vector are interleaved with pseudo-events of the form '(nil .
     COMMAND)', where COMMAND is the binding of the key sequence (*note
     Command Overview::).

     A call to 'clear-this-command-keys' (*note Command Loop Info::)
     causes this function to return an empty vector immediately
     afterward.

 -- Command: open-dribble-file filename
     This function opens a "dribble file" named FILENAME.  When a
     dribble file is open, each input event from the keyboard or mouse
     (but not those from keyboard macros) is written in that file.  A
     non-character event is expressed using its printed representation
     surrounded by '<...>'.  Be aware that sensitive information (such
     as passwords) may end up recorded in the dribble file.

     You close the dribble file by calling this function with an
     argument of 'nil'.

   See also the 'open-termscript' function (*note Terminal Output::).

==============================================================================
File: elisp.info,  Node: |Terminal_Output|,  Next: |Sound_Output|,  Prev: |Terminal_Input|,  Up: |System_Interface|
==============================================================================

                                                               *Terminal_Output*

40.14 Terminal Output
---------------------

The terminal output functions send output to a text terminal, or keep
track of output sent to the terminal.  The variable 'baud-rate' tells
you what Emacs thinks is the output speed of the terminal.

 -- User Option: baud-rate
     This variable's value is the output speed of the terminal, as far
     as Emacs knows.  Setting this variable does not change the speed of
     actual data transmission, but the value is used for calculations
     such as padding.

     It also affects decisions about whether to scroll part of the
     screen or repaint on text terminals.  *Note Forcing Redisplay::,
     for the corresponding functionality on graphical terminals.

     The value is measured in baud.

   If you are running across a network, and different parts of the
network work at different baud rates, the value returned by Emacs may be
different from the value used by your local terminal.  Some network
protocols communicate the local terminal speed to the remote machine, so
that Emacs and other programs can get the proper value, but others do
not.  If Emacs has the wrong value, it makes decisions that are less
than optimal.  To fix the problem, set 'baud-rate'.

 -- Function: send-string-to-terminal string &optional terminal
     This function sends STRING to TERMINAL without alteration.  Control
     characters in STRING have terminal-dependent effects.  (If you need
     to display non-ASCII text on the terminal, encode it using one of
     the functions described in *note Explicit Encoding::.)  This
     function operates only on text terminals.  TERMINAL may be a
     terminal object, a frame, or 'nil' for the selected frame's
     terminal.  In batch mode, STRING is sent to 'stdout' when TERMINAL
     is 'nil'.

     One use of this function is to define function keys on terminals
     that have downloadable function key definitions.  For example, this
     is how (on certain terminals) to define function key 4 to move
     forward four characters (by transmitting the characters 'C-u C-f'
     to the computer):

          (send-string-to-terminal "\eF4\^U\^F")
               => nil

 -- Command: open-termscript filename
     This function is used to open a "termscript file" that will record
     all the characters sent by Emacs to the terminal.  It returns
     'nil'.  Termscript files are useful for investigating problems
     where Emacs garbles the screen, problems that are due to incorrect
     Termcap entries or to undesirable settings of terminal options more
     often than to actual Emacs bugs.  Once you are certain which
     characters were actually output, you can determine reliably whether
     they correspond to the Termcap specifications in use.

          (open-termscript "../junk/termscript")
               => nil

     You close the termscript file by calling this function with an
     argument of 'nil'.

     See also 'open-dribble-file' in *note Recording Input::.

==============================================================================
File: elisp.info,  Node: |Sound_Output|,  Next: |X11_Keysyms|,  Prev: |Terminal_Output|,  Up: |System_Interface|
==============================================================================

                                                                  *Sound_Output*

40.15 Sound Output
------------------

To play sound using Emacs, use the function 'play-sound'.  Only certain
systems are supported; if you call 'play-sound' on a system which cannot
really do the job, it gives an error.

   The sound must be stored as a file in RIFF-WAVE format ('.wav') or
Sun Audio format ('.au').

 -- Function: play-sound sound
     This function plays a specified sound.  The argument, SOUND, has
     the form '(sound PROPERTIES...)', where the PROPERTIES consist of
     alternating keywords (particular symbols recognized specially) and
     values corresponding to them.

     Here is a table of the keywords that are currently meaningful in
     SOUND, and their meanings:

     ':file FILE'
          This specifies the file containing the sound to play.  If the
          file name is not absolute, it is expanded against the
          directory 'data-directory'.

     ':data DATA'
          This specifies the sound to play without need to refer to a
          file.  The value, DATA, should be a string containing the same
          bytes as a sound file.  We recommend using a unibyte string.

     ':volume VOLUME'
          This specifies how loud to play the sound.  It should be a
          number in the range of 0 to 1.  The default is to use whatever
          volume has been specified before.

     ':device DEVICE'
          This specifies the system device on which to play the sound,
          as a string.  The default device is system-dependent.

     Before actually playing the sound, 'play-sound' calls the functions
     in the list 'play-sound-functions'.  Each function is called with
     one argument, SOUND.

 -- Command: play-sound-file file &optional volume device
     This function is an alternative interface to playing a sound FILE
     specifying an optional VOLUME and DEVICE.

 -- Variable: play-sound-functions
     A list of functions to be called before playing a sound.  Each
     function is called with one argument, a property list that
     describes the sound.

==============================================================================
File: elisp.info,  Node: |X11_Keysyms|,  Next: |Batch_Mode|,  Prev: |Sound_Output|,  Up: |System_Interface|
==============================================================================

                                                                   *X11_Keysyms*

40.16 Operating on X11 Keysyms
------------------------------

To define system-specific X11 keysyms, set the variable
'system-key-alist'.

 -- Variable: system-key-alist
     This variable's value should be an alist with one element for each
     system-specific keysym.  Each element has the form '(CODE .
     SYMBOL)', where CODE is the numeric keysym code (not including the
     vendor-specific bit, -2**28), and SYMBOL is the name for the
     function key.

     For example '(168 . mute-acute)' defines a system-specific key
     (used by HP X servers) whose numeric code is -2**28 + 168.

     It is not crucial to exclude from the alist the keysyms of other X
     servers; those do no harm, as long as they don't conflict with the
     ones used by the X server actually in use.

     The variable is always local to the current terminal, and cannot be
     buffer-local.  *Note Multiple Terminals::.

   You can specify which keysyms Emacs should use for the Control, Meta,
Alt, Hyper, and Super modifiers by setting these variables:

 -- Variable: x-ctrl-keysym
 -- Variable: x-alt-keysym
 -- Variable: x-meta-keysym
 -- Variable: x-hyper-keysym
 -- Variable: x-super-keysym
     The name of the keysym that should stand for the Control modifier
     (respectively, for Alt, Meta, Hyper, and Super).  For example, here
     is how to swap the Meta and Alt modifiers within Emacs:
          (setq x-alt-keysym 'meta)
          (setq x-meta-keysym 'alt)

==============================================================================
File: elisp.info,  Node: |Batch_Mode|,  Next: |Session_Management|,  Prev: |X11_Keysyms|,  Up: |System_Interface|
==============================================================================

                                                                    *Batch_Mode*

40.17 Batch Mode
----------------

The command-line option '-batch' causes Emacs to run noninteractively.
In this mode, Emacs does not read commands from the terminal, it does
not alter the terminal modes, and it does not expect to be outputting to
an erasable screen.  The idea is that you specify Lisp programs to run;
when they are finished, Emacs should exit.  The way to specify the
programs to run is with '-l FILE', which loads the library named FILE,
or '-f FUNCTION', which calls FUNCTION with no arguments, or
'--eval=FORM'.

   Any Lisp program output that would normally go to the echo area,
either using 'message', or using 'prin1', etc., with 't' as the stream,
goes instead to Emacs's standard descriptors when in batch mode:
'message' writes to the standard error descriptor, while 'prin1' and
other print functions write to the standard output.  Similarly, input
that would normally come from the minibuffer is read from the standard
input descriptor.  Thus, Emacs behaves much like a noninteractive
application program.  (The echo area output that Emacs itself normally
generates, such as command echoing, is suppressed entirely.)

   Non-ASCII text written to the standard output or error descriptors is
by default encoded using 'locale-coding-system' (*note Locales::) if it
is non-'nil'; this can be overridden by binding
'coding-system-for-write' to a coding system of you choice (*note
Explicit Encoding::).

 -- Variable: noninteractive
     This variable is non-'nil' when Emacs is running in batch mode.

   If Emacs exits due to signaling an error in batch mode, the exit
status of the Emacs command is non-zero:

     $ emacs -Q --batch --eval '(error "foo")'; echo $?
     foo
     255

==============================================================================
File: elisp.info,  Node: |Session_Management|,  Next: |Desktop_Notifications|,  Prev: |Batch_Mode|,  Up: |System_Interface|
==============================================================================

                                                            *Session_Management*

40.18 Session Management
------------------------

Emacs supports the X Session Management Protocol, which is used to
suspend and restart applications.  In the X Window System, a program
called the "session manager" is responsible for keeping track of the
applications that are running.  When the X server shuts down, the
session manager asks applications to save their state, and delays the
actual shutdown until they respond.  An application can also cancel the
shutdown.

   When the session manager restarts a suspended session, it directs
these applications to individually reload their saved state.  It does
this by specifying a special command-line argument that says what saved
session to restore.  For Emacs, this argument is '--smid SESSION'.

 -- Variable: emacs-save-session-functions
     Emacs supports saving state via a hook called
     'emacs-save-session-functions'.  Emacs runs this hook when the
     session manager tells it that the window system is shutting down.
     The functions are called with no arguments, and with the current
     buffer set to a temporary buffer.  Each function can use 'insert'
     to add Lisp code to this buffer.  At the end, Emacs saves the
     buffer in a file, called the "session file".

     Subsequently, when the session manager restarts Emacs, it loads the
     session file automatically (*note Loading::).  This is performed by
     a function named 'emacs-session-restore', which is called during
     startup.  *Note Startup Summary::.

     If a function in 'emacs-save-session-functions' returns non-'nil',
     Emacs tells the session manager to cancel the shutdown.

   Here is an example that just inserts some text into 'scratch' when
Emacs is restarted by the session manager.

     (add-hook 'emacs-save-session-functions 'save-yourself-test)

     (defun save-yourself-test ()
       (insert "(save-current-buffer
       (switch-to-buffer \"scratch\")
       (insert \"I am restored\"))")
       nil)

==============================================================================
File: elisp.info,  Node: |Desktop_Notifications|,  Next: |File_Notifications|,  Prev: |Session_Management|,  Up: |System_Interface|
==============================================================================

                                                         *Desktop_Notifications*

40.19 Desktop Notifications
---------------------------

Emacs is able to send "notifications" on systems that support the
freedesktop.org Desktop Notifications Specification and on MS-Windows.
In order to use this functionality on POSIX hosts, Emacs must have been
compiled with D-Bus support, and the 'notifications' library must be
loaded.  *Note D-Bus: (dbus)Top.  The following function is supported
when D-Bus support is available:

 -- Function: notifications-notify &rest params
     This function sends a notification to the desktop via D-Bus,
     consisting of the parameters specified by the PARAMS arguments.
     These arguments should consist of alternating keyword and value
     pairs.  The supported keywords and values are as follows:

     ':bus BUS'
          The D-Bus bus.  This argument is needed only if a bus other
          than ':session' shall be used.

     ':title TITLE'
          The notification title.

     ':body TEXT'
          The notification body text.  Depending on the implementation
          of the notification server, the text could contain HTML
          markups, like '"<b>bold text</b>"', hyperlinks, or images.
          Special HTML characters must be encoded, as '"Contact
          &lt;postmaster@localhost&gt;!"'.

     ':app-name NAME'
          The name of the application sending the notification.  The
          default is 'notifications-application-name'.

     ':replaces-id ID'
          The notification ID that this notification replaces.  ID must
          be the result of a previous 'notifications-notify' call.

     ':app-icon ICON-FILE'
          The file name of the notification icon.  If set to 'nil', no
          icon is displayed.  The default is
          'notifications-application-icon'.

     ':actions (KEY TITLE KEY TITLE ...)'
          A list of actions to be applied.  KEY and TITLE are both
          strings.  The default action (usually invoked by clicking the
          notification) should have a key named '"default"'.  The title
          can be anything, though implementations are free not to
          display it.

     ':timeout TIMEOUT'
          The timeout time in milliseconds since the display of the
          notification at which the notification should automatically
          close.  If -1, the notification's expiration time is dependent
          on the notification server's settings, and may vary for the
          type of notification.  If 0, the notification never expires.
          Default value is -1.

     ':urgency URGENCY'
          The urgency level.  It can be 'low', 'normal', or 'critical'.

     ':action-items'
          When this keyword is given, the TITLE string of the actions is
          interpreted as icon name.

     ':category CATEGORY'
          The type of notification this is, a string.  See the Desktop
          Notifications Specification
          (https://developer.gnome.org/notification-spec/#categories)
          for a list of standard categories.

     ':desktop-entry FILENAME'
          This specifies the name of the desktop filename representing
          the calling program, like '"emacs"'.

     ':image-data (WIDTH HEIGHT ROWSTRIDE HAS-ALPHA BITS CHANNELS DATA)'
          This is a raw data image format that describes the width,
          height, rowstride, whether there is an alpha channel, bits per
          sample, channels and image data, respectively.

     ':image-path PATH'
          This is represented either as a URI ('file://' is the only URI
          schema supported right now) or a name in a
          freedesktop.org-compliant icon theme from
          '$XDG_DATA_DIRS/icons'.

     ':sound-file FILENAME'
          The path to a sound file to play when the notification pops
          up.

     ':sound-name NAME'
          A themable named sound from the freedesktop.org sound naming
          specification from '$XDG_DATA_DIRS/sounds', to play when the
          notification pops up.  Similar to the icon name, only for
          sounds.  An example would be '"message-new-instant"'.

     ':suppress-sound'
          Causes the server to suppress playing any sounds, if it has
          that ability.

     ':resident'
          When set the server will not automatically remove the
          notification when an action has been invoked.  The
          notification will remain resident in the server until it is
          explicitly removed by the user or by the sender.  This hint is
          likely only useful when the server has the ':persistence'
          capability.

     ':transient'
          When set the server will treat the notification as transient
          and by-pass the server's persistence capability, if it should
          exist.

     ':x POSITION'
     ':y POSITION'
          Specifies the X, Y location on the screen that the
          notification should point to.  Both arguments must be used
          together.

     ':on-action FUNCTION'
          Function to call when an action is invoked.  The notification
          ID and the KEY of the action are passed as arguments to the
          function.

     ':on-close FUNCTION'
          Function to call when the notification has been closed by
          timeout or by the user.  The function receive the notification
          ID and the closing REASON as arguments:

             * 'expired' if the notification has expired
             * 'dismissed' if the notification was dismissed by the user
             * 'close-notification' if the notification was closed by a
               call to 'notifications-close-notification'
             * 'undefined' if the notification server hasn't provided a
               reason

     Which parameters are accepted by the notification server can be
     checked via 'notifications-get-capabilities'.

     This function returns a notification id, an integer, which can be
     used to manipulate the notification item with
     'notifications-close-notification' or the ':replaces-id' argument
     of another 'notifications-notify' call.  For example:

          (defun my-on-action-function (id key)
            (message "Message %d, key \"%s\" pressed" id key))
               => my-on-action-function

          (defun my-on-close-function (id reason)
            (message "Message %d, closed due to \"%s\"" id reason))
               => my-on-close-function

          (notifications-notify
           :title "Title"
           :body "This is <b>important</b>."
           :actions '("Confirm" "I agree" "Refuse" "I disagree")
           :on-action 'my-on-action-function
           :on-close 'my-on-close-function)
               => 22

          A message window opens on the desktop.  Press ``I agree''.
               => Message 22, key "Confirm" pressed
                  Message 22, closed due to "dismissed"

 -- Function: notifications-close-notification id &optional bus
     This function closes a notification with identifier ID.  BUS can be
     a string denoting a D-Bus connection, the default is ':session'.

 -- Function: notifications-get-capabilities &optional bus
     Returns the capabilities of the notification server, a list of
     symbols.  BUS can be a string denoting a D-Bus connection, the
     default is ':session'.  The following capabilities can be expected:

     ':actions'
          The server will provide the specified actions to the user.

     ':body'
          Supports body text.

     ':body-hyperlinks'
          The server supports hyperlinks in the notifications.

     ':body-images'
          The server supports images in the notifications.

     ':body-markup'
          Supports markup in the body text.

     ':icon-multi'
          The server will render an animation of all the frames in a
          given image array.

     ':icon-static'
          Supports display of exactly 1 frame of any given image array.
          This value is mutually exclusive with ':icon-multi'.

     ':persistence'
          The server supports persistence of notifications.

     ':sound'
          The server supports sounds on notifications.

     Further vendor-specific caps start with ':x-vendor', like
     ':x-gnome-foo-cap'.

 -- Function: notifications-get-server-information &optional bus
     Return information on the notification server, a list of strings.
     BUS can be a string denoting a D-Bus connection, the default is
     ':session'.  The returned list is '(NAME VENDOR VERSION
     SPEC-VERSION)'.

     NAME
          The product name of the server.

     VENDOR
          The vendor name.  For example, '"KDE"', '"GNOME"'.

     VERSION
          The server's version number.

     SPEC-VERSION
          The specification version the server is compliant with.

     If SPEC_VERSION is 'nil', the server supports a specification prior
     to '"1.0"'.

   When Emacs runs on MS-Windows as a GUI session, it supports a small
subset of the D-Bus notifications functionality via a native primitive:

 -- Function: w32-notification-notify &rest params
     This function displays an MS-Windows tray notification as specified
     by PARAMS.  MS-Windows tray notifications are displayed in a
     balloon from an icon in the notification area of the taskbar.

     Value is the integer unique ID of the notification that can be used
     to remove the notification using 'w32-notification-close',
     described below.  If the function fails, the return value is 'nil'.

     The arguments PARAMS are specified as keyword/value pairs.  All the
     parameters are optional, but if no parameters are specified, the
     function will do nothing and return 'nil'.

     The following parameters are supported:

     ':icon ICON'
          Display ICON in the system tray.  If ICON is a string, it
          should specify a file name from which to load the icon; the
          specified file should be a '.ico' Windows icon file.  If ICON
          is not a string, or if this parameter is not specified, the
          standard Emacs icon will be used.

     ':tip TIP'
          Use TIP as the tooltip for the notification.  If TIP is a
          string, this is the text of a tooltip that will be shown when
          the mouse pointer hovers over the tray icon added by the
          notification.  If TIP is not a string, or if this parameter is
          not specified, the default tooltip text is 'Emacs
          notification'.  The tooltip text can be up to 127 characters
          long (63 on Windows versions before W2K). Longer strings will
          be truncated.

     ':level LEVEL'
          Notification severity level, one of 'info', 'warning', or
          'error'.  If given, the value determines the icon displayed to
          the left of the notification title, but only if the ':title'
          parameter (see below) is also specified and is a string.

     ':title TITLE'
          The title of the notification.  If TITLE is a string, it is
          displayed in a larger font immediately above the body text.
          The title text can be up to 63 characters long; longer text
          will be truncated.

     ':body BODY'
          The body of the notification.  If BODY is a string, it
          specifies the text of the notification message.  Use embedded
          newlines to control how the text is broken into lines.  The
          body text can be up to 255 characters long, and will be
          truncated if it's longer.  Unlike with D-Bus, the body text
          should be plain text, with no markup.

     Note that versions of Windows before W2K support only ':icon' and
     ':tip'.  The other parameters can be passed, but they will be
     ignored on those old systems.

     There can be at most one active notification at any given time.  An
     active notification must be removed by calling
     'w32-notification-close' before a new one can be shown.

   To remove the notification and its icon from the taskbar, use the
following function:

 -- Function: w32-notification-close id
     This function removes the tray notification given by its unique ID.

==============================================================================
File: elisp.info,  Node: |File_Notifications|,  Next: |Dynamic_Libraries|,  Prev: |Desktop_Notifications|,  Up: |System_Interface|
==============================================================================

                                                            *File_Notifications*

40.20 Notifications on File Changes
-----------------------------------

Several operating systems support watching of filesystems for changes of
files.  If configured properly, Emacs links a respective library like
'inotify', 'kqueue', 'gfilenotify', or 'w32notify' statically.  These
libraries enable watching of filesystems on the local machine.

   It is also possible to watch filesystems on remote machines, *note
Remote Files: (emacs)Remote Files. This does not depend on one of the
libraries linked to Emacs.

   Since all these libraries emit different events on notified file
changes, there is the Emacs library 'filenotify' which provides a
unified interface.  Lisp programs that want to receive file
notifications should always use this library in preference to the native
ones.

 -- Function: file-notify-add-watch file flags callback
     Add a watch for filesystem events pertaining to FILE.  This
     arranges for filesystem events pertaining to FILE to be reported to
     Emacs.

     The returned value is a descriptor for the added watch.  Its type
     depends on the underlying library, it cannot be assumed to be an
     integer as in the example below.  It should be used for comparison
     by 'equal' only.

     If the FILE cannot be watched for some reason, this function
     signals a 'file-notify-error' error.

     Sometimes, mounted filesystems cannot be watched for file changes.
     This is not detected by this function, a non-'nil' return value
     does not guarantee that changes on FILE will be notified.

     FLAGS is a list of conditions to set what will be watched for.  It
     can include the following symbols:

     'change'
          watch for file changes
     'attribute-change'
          watch for file attribute changes, like permissions or
          modification time

     If FILE is a directory, changes for all files in that directory
     will be notified.  This does not work recursively.

     When any event happens, Emacs will call the CALLBACK function
     passing it a single argument EVENT, which is of the form

          (DESCRIPTOR ACTION FILE [FILE1])

     DESCRIPTOR is the same object as the one returned by this function.
     ACTION is the description of the event.  It could be any one of the
     following symbols:

     'created'
          FILE was created
     'deleted'
          FILE was deleted
     'changed'
          FILE's contents has changed; with 'w32notify' library, reports
          attribute changes as well
     'renamed'
          FILE has been renamed to FILE1
     'attribute-changed'
          a FILE attribute was changed
     'stopped'
          watching FILE has been stopped

     Note that the 'w32notify' library does not report
     'attribute-changed' events.  When some file's attribute, like
     permissions or modification time, has changed, this library reports
     a 'changed' event.  Likewise, the 'kqueue' library does not report
     reliably file attribute changes when watching a directory.

     The 'stopped' event reports, that watching the file has been
     stopped.  This could be because 'file-notify-rm-watch' was called
     (see below), or because the file being watched was deleted, or due
     to another error reported from the underlying library.

     FILE and FILE1 are the name of the file(s) whose event is being
     reported.  For example:

          (require 'filenotify)
               => filenotify

          (defun my-notify-callback (event)
            (message "Event %S" event))
               => my-notify-callback

          (file-notify-add-watch
            "/tmp" '(change attribute-change) 'my-notify-callback)
               => 35025468

          (write-region "foo" nil "/tmp/foo")
               => Event (35025468 created "/tmp/.#foo")
                  Event (35025468 created "/tmp/foo")
                  Event (35025468 changed "/tmp/foo")
                  Event (35025468 deleted "/tmp/.#foo")

          (write-region "bla" nil "/tmp/foo")
               => Event (35025468 created "/tmp/.#foo")
                  Event (35025468 changed "/tmp/foo")
                  Event (35025468 deleted "/tmp/.#foo")

          (set-file-modes "/tmp/foo" (default-file-modes))
               => Event (35025468 attribute-changed "/tmp/foo")

     Whether the action 'renamed' is returned, depends on the used watch
     library.  Otherwise, the actions 'deleted' and 'created' could be
     returned in a random order.

          (rename-file "/tmp/foo" "/tmp/bla")
               => Event (35025468 renamed "/tmp/foo" "/tmp/bla")

          (delete-file "/tmp/bla")
               => Event (35025468 deleted "/tmp/bla")

 -- Function: file-notify-rm-watch descriptor
     Removes an existing file watch specified by its DESCRIPTOR.
     DESCRIPTOR should be an object returned by 'file-notify-add-watch'.

 -- Function: file-notify-valid-p descriptor
     Checks a watch specified by its DESCRIPTOR for validity.
     DESCRIPTOR should be an object returned by 'file-notify-add-watch'.

     A watch can become invalid if the file or directory it watches is
     deleted, or if the watcher thread exits abnormally for any other
     reason.  Removing the watch by calling 'file-notify-rm-watch' also
     makes it invalid.

          (make-directory "/tmp/foo")
               => Event (35025468 created "/tmp/foo")

          (setq desc
                (file-notify-add-watch
                  "/tmp/foo" '(change) 'my-notify-callback))
               => 11359632

          (file-notify-valid-p desc)
               => t

          (write-region "bla" nil "/tmp/foo/bla")
               => Event (11359632 created "/tmp/foo/.#bla")
                  Event (11359632 created "/tmp/foo/bla")
                  Event (11359632 changed "/tmp/foo/bla")
                  Event (11359632 deleted "/tmp/foo/.#bla")

          ;; Deleting a file in the directory doesn't invalidate the watch.
          (delete-file "/tmp/foo/bla")
               => Event (11359632 deleted "/tmp/foo/bla")

          (write-region "bla" nil "/tmp/foo/bla")
               => Event (11359632 created "/tmp/foo/.#bla")
                  Event (11359632 created "/tmp/foo/bla")
                  Event (11359632 changed "/tmp/foo/bla")
                  Event (11359632 deleted "/tmp/foo/.#bla")

          ;; Deleting the directory invalidates the watch.
          ;; Events arrive for different watch descriptors.
          (delete-directory "/tmp/foo" 'recursive)
               => Event (35025468 deleted "/tmp/foo")
                  Event (11359632 deleted "/tmp/foo/bla")
                  Event (11359632 deleted "/tmp/foo")
                  Event (11359632 stopped "/tmp/foo")

          (file-notify-valid-p desc)
               => nil

==============================================================================
File: elisp.info,  Node: |Dynamic_Libraries|,  Next: |Security_Considerations|,  Prev: |File_Notifications|,  Up: |System_Interface|
==============================================================================

                                                             *Dynamic_Libraries*

40.21 Dynamically Loaded Libraries
----------------------------------

A "dynamically loaded library" is a library that is loaded on demand,
when its facilities are first needed.  Emacs supports such on-demand
loading of support libraries for some of its features.

 -- Variable: dynamic-library-alist
     This is an alist of dynamic libraries and external library files
     implementing them.

     Each element is a list of the form '(LIBRARY FILES...)', where the
     'car' is a symbol representing a supported external library, and
     the rest are strings giving alternate filenames for that library.

     Emacs tries to load the library from the files in the order they
     appear in the list; if none is found, the Emacs session won't have
     access to that library, and the features it provides will be
     unavailable.

     Image support on some platforms uses this facility.  Here's an
     example of setting this variable for supporting images on
     MS-Windows:

          (setq dynamic-library-alist
                '((xpm "libxpm.dll" "xpm4.dll" "libXpm-nox4.dll")
                  (png "libpng12d.dll" "libpng12.dll" "libpng.dll"
                       "libpng13d.dll" "libpng13.dll")
                  (jpeg "jpeg62.dll" "libjpeg.dll" "jpeg-62.dll"
                        "jpeg.dll")
                  (tiff "libtiff3.dll" "libtiff.dll")
                  (gif "giflib4.dll" "libungif4.dll" "libungif.dll")
                  (svg "librsvg-2-2.dll")
                  (gdk-pixbuf "libgdk_pixbuf-2.0-0.dll")
                  (glib "libglib-2.0-0.dll")
                  (gobject "libgobject-2.0-0.dll")))

     Note that image types 'pbm' and 'xbm' do not need entries in this
     variable because they do not depend on external libraries and are
     always available in Emacs.

     Also note that this variable is not meant to be a generic facility
     for accessing external libraries; only those already known by Emacs
     can be loaded through it.

     This variable is ignored if the given LIBRARY is statically linked
     into Emacs.

==============================================================================
File: elisp.info,  Node: |Security_Considerations|,  Prev: |Dynamic_Libraries|,  Up: |System_Interface|
==============================================================================

                                                       *Security_Considerations*

40.22 Security Considerations
-----------------------------

Like any application, Emacs can be run in a secure environment, where
the operating system enforces rules about access and the like.  With
some care, Emacs-based applications can also be part of a security
perimeter that checks such rules.  Although the default settings for
Emacs work well for a typical software development environment, they may
require adjustment in environments containing untrusted users that may
include attackers.  Here is a compendium of security issues that may be
helpful if you are developing such applications.  It is by no means
complete; it is intended to give you an idea of the security issues
involved, rather than to be a security checklist.

File local variables
     A file that Emacs visits can contain variable settings that affect
     the buffer visiting that file; *Note File Local Variables::.
     Similarly, a directory can specify local variable values common to
     all files in that directory; see *note Directory Local Variables::.
     Although Emacs takes some effort to protect against misuse of these
     variables, a security hole can be created merely by a package
     setting 'safe-local-variable' too optimistically, a problem that is
     all too common.  To disable this feature for both files and
     directories, set 'enable-local-variables' to 'nil'.

Access control
     Although Emacs normally respects access permissions of the
     underlying operating system, in some cases it handles accesses
     specially.  For example, file names can have handlers that treat
     the files specially, with their own access checking.  *Note Magic
     File Names::.  Also, a buffer can be read-only even if the
     corresponding file is writable, and vice versa, which can result in
     messages such as 'File passwd is write-protected; try to save
     anyway? (yes or no)'.  *Note Read Only Buffers::.

Authentication
     Emacs has several functions that deal with passwords, e.g.,
     'read-passwd'.  *Note Reading a Password::.  Although these
     functions do not attempt to broadcast passwords to the world, their
     implementations are not proof against determined attackers with
     access to Emacs internals.  For example, even if Elisp code uses
     'clear-string' to scrub a password from its memory after using it,
     remnants of the password may still reside in the garbage-collected
     free list.  *Note Modifying Strings::.

Code injection
     Emacs can send commands to many other applications, and
     applications should take care that strings sent as operands of
     these commands are not misinterpreted as directives.  For example,
     when using a shell command to rename a file A to B, do not simply
     use the string 'mv A B', because either file name might start with
     '-', or might contain shell metacharacters like ';'.  Although
     functions like 'shell-quote-argument' can help avoid this sort of
     problem, they are not panaceas; for example, on a POSIX platform
     'shell-quote-argument' quotes shell metacharacters but not leading
     '-'.  On MS-Windows, quoting for '%' assumes none of the
     environment variables have '^' in their name.  *Note Shell
     Arguments::.  Typically it is safer to use 'call-process' than a
     subshell.  *Note Synchronous Processes::.  And it is safer yet to
     use builtin Emacs functions; for example, use '(rename-file "A" "B"
     t)' instead of invoking 'mv'.  *Note Changing Files::.

Coding systems
     Emacs attempts to infer the coding systems of the files and network
     connections it accesses.  *Note Coding Systems::.  If Emacs infers
     incorrectly, or if the other parties to the network connection
     disagree with Emacs's inferences, the resulting system could be
     unreliable.  Also, even when it infers correctly, Emacs often can
     use bytes that other programs cannot.  For example, although to
     Emacs the null byte is just a character like any other, many other
     applications treat it as a string terminator and mishandle strings
     or files containing null bytes.

Environment and configuration variables
     POSIX specifies several environment variables that can affect how
     Emacs behaves.  Any environment variable whose name consists
     entirely of uppercase ASCII letters, digits, and the underscore may
     affect the internal behavior of Emacs.  Emacs uses several such
     variables, e.g., 'EMACSLOADPATH'.  *Note Library Search::.  On some
     platforms some environment variables (e.g., 'PATH',
     'POSIXLY_CORRECT', 'SHELL', 'TMPDIR') need to have
     properly-configured values in order to get standard behavior for
     any utility Emacs might invoke.  Even seemingly-benign variables
     like 'TZ' may have security implications.  *Note System
     Environment::.

     Emacs has customization and other variables with similar
     considerations.  For example, if the variable 'shell-file-name'
     specifies a shell with nonstandard behavior, an Emacs-based
     application may misbehave.

Installation
     When Emacs is installed, if the installation directory hierarchy
     can be modified by untrusted users, the application cannot be
     trusted.  This applies also to the directory hierarchies of the
     programs that Emacs uses, and of the files that Emacs reads and
     writes.

Network access
     Emacs often accesses the network, and you may want to configure it
     to avoid network accesses that it would normally do.  For example,
     unless you set 'tramp-mode' to 'nil', file names using a certain
     syntax are interpreted as being network files, and are retrieved
     across the network.  *Note The Tramp Manual: (tramp)Top.

Race conditions
     Emacs applications have the same sort of race-condition issues that
     other applications do.  For example, even when '(file-readable-p
     "foo.txt")' returns 't', it could be that 'foo.txt' is unreadable
     because some other program changed the file's permissions between
     the call to 'file-readable-p' and now.  *Note Testing
     Accessibility::.

Resource limits
     When Emacs exhausts memory or other operating system resources, its
     behavior can be less reliable, in that computations that ordinarily
     run to completion may abort back to the top level.  This may cause
     Emacs to neglect operations that it normally would have done.

==============================================================================
File: elisp.info,  Node: |Packaging|,  Next: |Antinews|,  Prev: |System_Interface|,  Up: |Top|
==============================================================================

                                                                     *Packaging*

41 Preparing Lisp code for distribution
=======================================

Emacs provides a standard way to distribute Emacs Lisp code to users.  A
"package" is a collection of one or more files, formatted and bundled in
such a way that users can easily download, install, uninstall, and
upgrade it.

   The following sections describe how to create a package, and how to
put it in a "package archive" for others to download.  *Note
(emacs)Packages::, for a description of user-level features of the
packaging system.

MENU

* |Packaging_Basics|::        The basic concepts of Emacs Lisp packages.
* |Simple_Packages|::         How to package a single .el file.
* |Multi_file_Packages|::     How to package multiple files.
* |Package_Archives|::        Maintaining package archives.
* |Archive_Web_Server|::      Interfacing to an archive web server.

==============================================================================
File: elisp.info,  Node: |Packaging_Basics|,  Next: |Simple_Packages|,  Up: |Packaging|
==============================================================================

                                                              *Packaging_Basics*

41.1 Packaging Basics
---------------------

A package is either a "simple package" or a "multi-file package".  A
simple package is stored in a package archive as a single Emacs Lisp
file, while a multi-file package is stored as a tar file (containing
multiple Lisp files, and possibly non-Lisp files such as a manual).

   In ordinary usage, the difference between simple packages and
multi-file packages is relatively unimportant; the Package Menu
interface makes no distinction between them.  However, the procedure for
creating them differs, as explained in the following sections.

   Each package (whether simple or multi-file) has certain "attributes":

Name
     A short word (e.g., 'auctex').  This is usually also the symbol
     prefix used in the program (*note Coding Conventions::).

Version
     A version number, in a form that the function 'version-to-list'
     understands (e.g., '11.86').  Each release of a package should be
     accompanied by an increase in the version number so that it will be
     recognized as an upgrade by users querying the package archive.

Brief description
     This is shown when the package is listed in the Package Menu.  It
     should occupy a single line, ideally in 36 characters or less.

Long description
     This is shown in the buffer created by 'C-h P'
     ('describe-package'), following the package's brief description and
     installation status.  It normally spans multiple lines, and should
     fully describe the package's capabilities and how to begin using it
     once it is installed.

Dependencies
     A list of other packages (possibly including minimal acceptable
     version numbers) on which this package depends.  The list may be
     empty, meaning this package has no dependencies.  Otherwise,
     installing this package also automatically installs its
     dependencies, recursively; if any dependency cannot be found, the
     package cannot be installed.

   Installing a package, either via the command 'package-install-file',
or via the Package Menu, creates a subdirectory of 'package-user-dir'
named 'NAME-VERSION', where NAME is the package's name and VERSION its
version (e.g., '~/.emacs.d/elpa/auctex-11.86/').  We call this the
package's "content directory".  It is where Emacs puts the package's
contents (the single Lisp file for a simple package, or the files
extracted from a multi-file package).

   Emacs then searches every Lisp file in the content directory for
autoload magic comments (*note Autoload::).  These autoload definitions
are saved to a file named 'NAME-autoloads.el' in the content directory.
They are typically used to autoload the principal user commands defined
in the package, but they can also perform other tasks, such as adding an
element to 'auto-mode-alist' (*note Auto Major Mode::).  Note that a
package typically does _not_ autoload every function and variable
defined within it--only the handful of commands typically called to begin
using the package.  Emacs then byte-compiles every Lisp file in the
package.

   After installation, the installed package is "loaded": Emacs adds the
package's content directory to 'load-path', and evaluates the autoload
definitions in 'NAME-autoloads.el'.

   Whenever Emacs starts up, it automatically calls the function
'package-activate-all' to make installed packages available to the
current session.  This is done after loading the early init file, but
before loading the regular init file (*note Startup Summary::).
Packages are not automatically made available if the user option
'package-enable-at-startup' is set to 'nil' in the early init file.

 -- Function: package-activate-all
     This function makes the packages available to the current session.
     The user option 'package-load-list' specifies which packages to
     make available; by default, all installed packages are made
     available.  *Note (emacs)Package Installation::.

     In most cases, you should not need to call 'package-activate-all',
     as this is done automatically during startup.  Simply make sure to
     put any code that should run before 'package-activate-all' in the
     early init file, and any code that should run after it in the
     primary init file (*note (emacs)Init File::).

 -- Command: package-initialize &optional no-activate
     This function initializes Emacs' internal record of which packages
     are installed, and then calls 'package-activate-all'.

     The optional argument NO-ACTIVATE, if non-'nil', causes Emacs to
     update its record of installed packages without actually making
     them available.

==============================================================================
File: elisp.info,  Node: |Simple_Packages|,  Next: |Multi_file_Packages|,  Prev: |Packaging_Basics|,  Up: |Packaging|
==============================================================================

                                                               *Simple_Packages*

41.2 Simple Packages
--------------------

A simple package consists of a single Emacs Lisp source file.  The file
must conform to the Emacs Lisp library header conventions (*note Library
Headers::).  The package's attributes are taken from the various
headers, as illustrated by the following example:

     ;;; superfrobnicator.el --- Frobnicate and bifurcate flanges

     ;; Copyright (C) 2011 Free Software Foundation, Inc.

     ;; Author: J. R. Hacker <jrh@example.com>
     ;; Version: 1.3
     ;; Package-Requires: ((flange "1.0"))
     ;; Keywords: multimedia, hypermedia
     ;; URL: https://example.com/jrhacker/superfrobnicate

     ...

     ;;; Commentary:

     ;; This package provides a minor mode to frobnicate and/or
     ;; bifurcate any flanges you desire.  To activate it, just type
     ...

     ;;;###autoload
     (define-minor-mode superfrobnicator-mode
     ...

   The name of the package is the same as the base name of the file, as
written on the first line.  Here, it is 'superfrobnicator'.

   The brief description is also taken from the first line.  Here, it is
'Frobnicate and bifurcate flanges'.

   The version number comes from the 'Package-Version' header, if it
exists, or from the 'Version' header otherwise.  One or the other _must_
be present.  Here, the version number is 1.3.

   If the file has a ';;; Commentary:' section, this section is used as
the long description.  (When displaying the description, Emacs omits the
';;; Commentary:' line, as well as the leading comment characters in the
commentary itself.)

   If the file has a 'Package-Requires' header, that is used as the
package dependencies.  In the above example, the package depends on the
'flange' package, version 1.0 or higher.  *Note Library Headers::, for a
description of the 'Package-Requires' header.  If the header is omitted,
the package has no dependencies.

   The 'Keywords' and 'URL' headers are optional, but recommended.  The
command 'describe-package' uses these to add links to its output.  The
'Keywords' header should contain at least one standard keyword from the
'finder-known-keywords' list.

   The file ought to also contain one or more autoload magic comments,
as explained in *note Packaging Basics::.  In the above example, a magic
comment autoloads 'superfrobnicator-mode'.

   *Note Package Archives::, for an explanation of how to add a
single-file package to a package archive.

==============================================================================
File: elisp.info,  Node: |Multi_file_Packages|,  Next: |Package_Archives|,  Prev: |Simple_Packages|,  Up: |Packaging|
==============================================================================

                                                           *Multi_file_Packages*

41.3 Multi-file Packages
------------------------

A multi-file package is less convenient to create than a single-file
package, but it offers more features: it can include multiple Emacs Lisp
files, an Info manual, and other file types (such as images).

   Prior to installation, a multi-file package is stored in a package
archive as a tar file.  The tar file must be named 'NAME-VERSION.tar',
where NAME is the package name and VERSION is the version number.  Its
contents, once extracted, must all appear in a directory named
'NAME-VERSION', the "content directory" (*note Packaging Basics::).
Files may also extract into subdirectories of the content directory.

   One of the files in the content directory must be named
'NAME-pkg.el'.  It must contain a single Lisp form, consisting of a call
to the function 'define-package', described below.  This defines the
package's attributes: version, brief description, and requirements.

   For example, if we distribute version 1.3 of the superfrobnicator as
a multi-file package, the tar file would be 'superfrobnicator-1.3.tar'.
Its contents would extract into the directory 'superfrobnicator-1.3',
and one of these would be the file 'superfrobnicator-pkg.el'.

 -- Function: define-package name version &optional docstring
          requirements
     This function defines a package.  NAME is the package name, a
     string.  VERSION is the version, as a string of a form that can be
     understood by the function 'version-to-list'.  DOCSTRING is the
     brief description.

     REQUIREMENTS is a list of required packages and their versions.
     Each element in this list should have the form '(DEP-NAME
     DEP-VERSION)', where DEP-NAME is a symbol whose name is the
     dependency's package name, and DEP-VERSION is the dependency's
     version (a string).

   If the content directory contains a file named 'README', this file is
used as the long description (overriding any ';;; Commentary:' section).

   If the content directory contains a file named 'dir', this is assumed
to be an Info directory file made with 'install-info'.  *Note Invoking
install-info: (texinfo)Invoking install-info.  The relevant Info files
should also be present in the content directory.  In this case, Emacs
will automatically add the content directory to 'Info-directory-list'
when the package is activated.

   Do not include any '.elc' files in the package.  Those are created
when the package is installed.  Note that there is no way to control the
order in which files are byte-compiled.

   Do not include any file named 'NAME-autoloads.el'.  This file is
reserved for the package's autoload definitions (*note Packaging
Basics::).  It is created automatically when the package is installed,
by searching all the Lisp files in the package for autoload magic
comments.

   If the multi-file package contains auxiliary data files (such as
images), the package's Lisp code can refer to these files via the
variable 'load-file-name' (*note Loading::).  Here is an example:

     (defconst superfrobnicator-base (file-name-directory load-file-name))

     (defun superfrobnicator-fetch-image (file)
       (expand-file-name file superfrobnicator-base))

==============================================================================
File: elisp.info,  Node: |Package_Archives|,  Next: |Archive_Web_Server|,  Prev: |Multi_file_Packages|,  Up: |Packaging|
==============================================================================

                                                              *Package_Archives*

41.4 Creating and Maintaining Package Archives
----------------------------------------------

Via the Package Menu, users may download packages from "package
archives".  Such archives are specified by the variable
'package-archives', whose default value contains a single entry: the
archive hosted by the GNU project at <https://elpa.gnu.org>.  This
section describes how to set up and maintain a package archive.

 -- User Option: package-archives
     The value of this variable is an alist of package archives
     recognized by the Emacs package manager.

     Each alist element corresponds to one archive, and should have the
     form '(ID . LOCATION)', where ID is the name of the archive (a
     string) and LOCATION is its "base location" (a string).

     If the base location starts with 'http:' or 'https:', it is treated
     as an HTTP(S) URL, and packages are downloaded from this archive
     via HTTP(S) (as is the case for the default GNU archive).

     Otherwise, the base location should be a directory name.  In this
     case, Emacs retrieves packages from this archive via ordinary file
     access.  Such local archives are mainly useful for testing.

   A package archive is simply a directory in which the package files,
and associated files, are stored.  If you want the archive to be
reachable via HTTP, this directory must be accessible to a web server;
*Note Archive Web Server::.

   A convenient way to set up and update a package archive is via the
'package-x' library.  This is included with Emacs, but not loaded by
default; type 'M-x load-library <RET> package-x <RET>' to load it, or
add '(require 'package-x)' to your init file.  *Note Lisp Libraries:
(emacs)Lisp Libraries.

After you create an archive, remember that it is not accessible in the
Package Menu interface unless it is in 'package-archives'.

   Maintaining a public package archive entails a degree of
responsibility.  When Emacs users install packages from your archive,
those packages can cause Emacs to run arbitrary code with the
permissions of the installing user.  (This is true for Emacs code in
general, not just for packages.)  So you should ensure that your archive
is well-maintained and keep the hosting system secure.

   One way to increase the security of your packages is to "sign" them
using a cryptographic key.  If you have generated a private/public gpg
key pair, you can use gpg to sign the package like this:

     gpg -ba -o FILE.sig FILE

For a single-file package, FILE is the package Lisp file; for a
multi-file package, it is the package tar file.  You can also sign the
archive's contents file in the same way.  Make the '.sig' files
available in the same location as the packages.  You should also make
your public key available for people to download; e.g., by uploading it
to a key server such as <https://pgp.mit.edu/>.  When people install
packages from your archive, they can use your public key to verify the
signatures.

   A full explanation of these matters is outside the scope of this
manual.  For more information on cryptographic keys and signing, *note
GnuPG: (gnupg)Top.  Emacs comes with an interface to GNU Privacy Guard,
*note EasyPG: (epa)Top.

==============================================================================
File: elisp.info,  Node: |Archive_Web_Server|,  Prev: |Package_Archives|,  Up: |Packaging|
==============================================================================

                                                            *Archive_Web_Server*

41.5 Interfacing to an archive web server
-----------------------------------------

A web server providing access to a package archive must support the
following queries:

archive-contents
     Return a lisp form describing the archive contents.  The form is a
     list of 'package-desc' structures (see 'package.el'), except the
     first element of the list is the archive version.

<package name>-readme.txt
     Return the long description of the package.

<file name>.sig
     Return the signature for the file.

<file name>
     Return the file.  This will be the tarball for a multi-file
     package, or the single file for a simple package.

==============================================================================
File: elisp.info,  Node: |Antinews|,  Next: |GNU_Free_Documentation_License|,  Prev: |Packaging|,  Up: |Top|
==============================================================================

                                                                      *Antinews*

Appendix A Emacs 26 Antinews
============================

For those users who live backwards in time, here is information about
downgrading to Emacs version 26.3.  We hope you will enjoy the greater
simplicity that results from the absence of many Emacs 27.1 features.

   * Lisp objects are again implemented on the C level as integer types,
     not as pointers.  This might be a small step for Emacs Lisp users,
     but it's a giant leap for the Emacs developers who work on the C
     level, since it is now again easy to print Lisp object in the
     debugger in the decimal format, which is so much easier for
     debugging.  It also makes calling Emacs functions from the debugger
     easier, and allows us to freely mix integers and Lisp objects in
     the C code.

   * The test suite was removed from the distribution tarball.  We
     believe that tests need seldom if ever be run, certainly not by the
     end users.  Removing the tests from the tarball makes it much
     smaller, which is important since disk space becomes more and more
     at premium as you move back in time.

   * Dynamic module support is disabled by default.  This both makes
     Emacs smaller (a worthy goal by itself), and removes the
     complications and additional complexity related with installing
     module support files and letting random shared objects an
     opportunity to be loaded into Emacs and mess with it.

   * You now must activate any installed packages only after loading
     your init files.  That requires an explicit call to
     'package-initialize' in your init file, which is a Good Thing, as
     it makes you think seriously where and indeed whether you'd like
     your packages to become available to your sessions.  Simplicity
     should tramp convenience!

   * To reduce the amount of code in Emacs related to unimportant
     features, we've removed native rotation and resizing of images.
     You will have to build Emacs with ImageMagick if you want to resize
     or rotate images inside Emacs.  We don't expect anyone to miss
     that.

   * We've re-enabled color fonts usage by the XFT font back-end.  We
     consider the availability of these fonts more important than a
     random crash here and there, especially since the use of these
     fonts for displaying Emoji will become less and less important as
     we travel back in time, and will completely disappear in some past
     Emacs version.

   * The function 'network-interface-list' can now return only IPv4
     addresses.  We consider the complexity introduced by IPv6 to be too
     much to be justified, and on the other hand its removal is the step
     in the right direction, given that IPv6 is expected to be
     completely removed as we move back in time.

   * The limit on repetitions in regular expressions was reduced to
     2**15 - 1.  We envision that regular expressions will become more
     and more simple as we move towards the distant past.

   * To simplify code and reduce complexity, we removed the capability
     of searching programs on remote hosts in 'executable-find'.  If you
     really need this feature (why would you?), you can always write
     your own shell script and run it on the remote.

   * The ':extend' face attribute is no longer available; all faces have
     their background color extended by default past end of line.  This
     should significantly simplify face management and remove
     unnecessary code bloat, as well as make faces significantly simpler
     to understand and use.

   * The predicates 'display-blink-cursor-p' and 'display-symbol-keys-p'
     were deleted.  They are rarely if ever needed, and can easily be
     substituted by appropriate calls to old and proven APIs like
     'display-graphic-p'.  As an additional bonus, writing Lisp programs
     that depend on this functionality will make sure the programmer
     understands better what exactly is the required features of the
     display terminal.

   * Relative directories in the value of the 'HOME' environment
     variable are once again interpreted relative to the
     'default-directory' of the current buffer.  This is much simpler,
     and also allows 'HOME' to resolve to a different place in different
     buffers, which allows some interesting applications.

     For the same reasons, 'file-name-absolute-p' now again considers
     '~foo' an absolute file name, even if there's no known user 'foo'.
     This means a Lisp program which uses such file names will always
     work the same on any system, regardless of its known users.

   * File-related primitives like 'file-attributes', 'file-modes',
     'file-newer-than-file-p', and some others once again return 'nil'
     when the underlying low-level APIs fail, instead of signaling an
     error.  We decided that functions which signal errors require more
     complex code from Lisp programs which use them, and found this
     complexity unjustified when returning 'nil' will do.

   * Similarly, old-style backquotes no longer signal errors; they
     generate warnings instead.  You can remove error handling from
     programs that use backquotes.

   * Formatting floating-point numbers has been sped up by letting the
     underlying implementation produce unpredictable values, instead of
     signaling errors when the number is too large to format correctly.
     We believe the Emacs Lisp programmers should always know what they
     are doing when they deal with floating-point values.

   * The function 'read-char-from-minibuffer' was deleted.  We decided
     that 'read-char' should be enough for any Lisp program that needs
     to ask the user for a single-character input, in recognition of the
     fact that nothing makes Emacs Lisp hackers rejoice more than the
     need to sit down and write yet another interactive
     question-and-answer function, and make it optimal for each specific
     case.  Consequently, no history is provided for such responses (why
     would someone want history of single-key strokes, anyway?).

   * The function 'ngettext' was deleted.  Non-English languages will
     become less and less widespread, let alone useful, as you move back
     in time, so we took this small step in that direction, and
     simplified Emacs as a nice bonus.

   * Focus-change notifications on text-mode frames are no longer
     recognized or supported.  You can now safely disregard the
     possibility of receiving such notifications on TTY frames.  This is
     one small step on the long road of removing all non-character input
     events Emacs supports on TTY frames.

   * Face specifications in 'face-remapping-alist' now have to be
     buffer-specific, without any differences between windows showing
     the same buffers.  This allowed us to remove a lot of unneeded code
     bloat from Emacs, and make the face handling much simpler.

   * The '%o' and '%x' formats now always produce unsigned values, as
     you'd expect.  This allows you to reveal the underlying machine
     representation, which is different on each architecture, something
     we consider a valuable feature.

   * We no longer highlight in 'font-lock-warning-face' symbols with
     confusable quote characters, such as U+2018.  Detecting them needed
     non-trivial amount of code, and we firmly believe that Lisp
     programmers always know what they are doing, and don't need to be
     annoyed with typefaces that stand out and distract.

   * The function 'file-system-info' was dropped on Posix platforms,
     since you can always invoke 'df' instead and parse its output.

   * The functions that implement the 'base64url' encoding were removed,
     as they can always be emulated by suitable tweaking of the normal
     base-64 encoding.  No need to bloat Emacs and force Lisp
     programmers learn more interfaces on this account.

   * As part of the ongoing quest for simplicity, many other functions
     and variables have been eliminated.

==============================================================================
File: elisp.info,  Node: |GNU_Free_Documentation_License|,  Next: |GPL|,  Prev: |Antinews|,  Up: |Top|
==============================================================================

                                                *GNU_Free_Documentation_License*

Appendix B GNU Free Documentation License
=========================================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

==============================================================================
File: elisp.info,  Node: |GPL|,  Next: |Tips|,  Prev: |GNU_Free_Documentation_License|,  Up: |Top|
==============================================================================

                                                                           *GPL*

Appendix C GNU General Public License
=====================================

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
--------

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
--------------------

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
---------------------------

How to Apply These Terms to Your New Programs
---------------------------------------------

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <https://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/licenses/why-not-lgpl.html>.

==============================================================================
File: elisp.info,  Node: |Tips|,  Next: |GNU_Emacs_Internals|,  Prev: |GPL|,  Up: |Top|
==============================================================================

                                                                          *Tips*

Appendix D Tips and Conventions
===============================

This chapter describes no additional features of Emacs Lisp.  Instead it
gives advice on making effective use of the features described in the
previous chapters, and describes conventions Emacs Lisp programmers
should follow.

   You can automatically check some of the conventions described below
by running the command 'M-x checkdoc <RET>' when visiting a Lisp file.
It cannot check all of the conventions, and not all the warnings it
gives necessarily correspond to problems, but it is worth examining them
all.  Alternatively, use the command 'M-x checkdoc-current-buffer <RET>'
to check the conventions in the current buffer, or 'checkdoc-file' when
you want to check a file in batch mode, e.g., with a command run by
'M-x compile <RET>'.

MENU

* |Coding_Conventions|::        Conventions for clean and robust programs.
* |Key_Binding_Conventions|::   Which keys should be bound by which programs.
* |Programming_Tips|::          Making Emacs code fit smoothly in Emacs.
* |Compilation_Tips|::          Making compiled code run fast.
* |Warning_Tips|::              Turning off compiler warnings.
* |Documentation_Tips|::        Writing readable documentation strings.
* |Comment_Tips|::              Conventions for writing comments.
* |Library_Headers|::           Standard headers for library packages.

==============================================================================
File: elisp.info,  Node: |Coding_Conventions|,  Next: |Key_Binding_Conventions|,  Up: |Tips|
==============================================================================

                                                            *Coding_Conventions*

D.1 Emacs Lisp Coding Conventions
---------------------------------

Here are conventions that you should follow when writing Emacs Lisp code
intended for widespread use:

   * Simply loading a package should not change Emacs's editing
     behavior.  Include a command or commands to enable and disable the
     feature, or to invoke it.

     This convention is mandatory for any file that includes custom
     definitions.  If fixing such a file to follow this convention
     requires an incompatible change, go ahead and make the incompatible
     change; don't postpone it.

   * You should choose a short word to distinguish your program from
     other Lisp programs.  The names of all global symbols in your
     program, that is the names of variables, constants, and functions,
     should begin with that chosen prefix.  Separate the prefix from the
     rest of the name with a hyphen, '-'.  This practice helps avoid
     name conflicts, since all global variables in Emacs Lisp share the
     same name space, and all functions share another name space(1).
     Use two hyphens to separate prefix and name if the symbol is not
     meant to be used by other packages.

     Occasionally, for a command name intended for users to use, it is
     more convenient if some words come before the package's name
     prefix.  For example, it is our convention to have commands that
     list objects named as 'list-SOMETHING', e.g., a package called
     'frob' could have a command 'list-frobs', when its other global
     symbols begin with 'frob-'.  Also, constructs that define
     functions, variables, etc., work better if they start with 'defun'
     or 'defvar', so put the name prefix later on in the name.

     This recommendation applies even to names for traditional Lisp
     primitives that are not primitives in Emacs Lisp--such as
     'copy-list'.  Believe it or not, there is more than one plausible
     way to define 'copy-list'.  Play it safe; append your name prefix
     to produce a name like 'foo-copy-list' or 'mylib-copy-list'
     instead.

     If you write a function that you think ought to be added to Emacs
     under a certain name, such as 'twiddle-files', don't call it by
     that name in your program.  Call it 'mylib-twiddle-files' in your
     program, and send mail to 'bug-gnu-emacs@gnu.org' suggesting we add
     it to Emacs.  If and when we do, we can change the name easily
     enough.

     If one prefix is insufficient, your package can use two or three
     alternative common prefixes, so long as they make sense.

   * Put a call to 'provide' at the end of each separate Lisp file.
     *Note Named Features::.

   * If a file requires certain other Lisp programs to be loaded
     beforehand, then the comments at the beginning of the file should
     say so.  Also, use 'require' to make sure they are loaded.  *Note
     Named Features::.

   * If a file FOO uses a macro defined in another file BAR, but does
     not use any functions or variables defined in BAR, then FOO should
     contain the following expression:

          (eval-when-compile (require 'BAR))

     This tells Emacs to load BAR just before byte-compiling FOO, so
     that the macro definition is available during compilation.  Using
     'eval-when-compile' avoids loading BAR when the compiled version of
     FOO is _used_.  It should be called before the first use of the
     macro in the file.  *Note Compiling Macros::.

   * Avoid loading additional libraries at run time unless they are
     really needed.  If your file simply cannot work without some other
     library, then just 'require' that library at the top-level and be
     done with it.  But if your file contains several independent
     features, and only one or two require the extra library, then
     consider putting 'require' statements inside the relevant functions
     rather than at the top-level.  Or use 'autoload' statements to load
     the extra library when needed.  This way people who don't use those
     aspects of your file do not need to load the extra library.

   * If you need Common Lisp extensions, use the 'cl-lib' library rather
     than the old 'cl' library.  The latter does not use a clean
     namespace (i.e., its definitions do not start with a 'cl-' prefix).
     If your package loads 'cl' at run time, that could cause name
     clashes for users who don't use that package.

     There is no problem with using the 'cl' package at _compile_ time,
     with '(eval-when-compile (require 'cl))'.  That's sufficient for
     using the macros in the 'cl' package, because the compiler expands
     them before generating the byte-code.  It is still better to use
     the more modern 'cl-lib' in this case, though.

   * When defining a major mode, please follow the major mode
     conventions.  *Note Major Mode Conventions::.

   * When defining a minor mode, please follow the minor mode
     conventions.  *Note Minor Mode Conventions::.

   * If the purpose of a function is to tell you whether a certain
     condition is true or false, give the function a name that ends in
     'p' (which stands for "predicate").  If the name is one word, add
     just 'p'; if the name is multiple words, add '-p'.  Examples are
     'framep' and 'frame-live-p'.  We recommend to avoid using this '-p'
     suffix in boolean variable names, unless the variable is bound to a
     predicate function; instead, use a '-flag' suffix or names like
     'is-foo'.

   * If the purpose of a variable is to store a single function, give it
     a name that ends in '-function'.  If the purpose of a variable is
     to store a list of functions (i.e., the variable is a hook), please
     follow the naming conventions for hooks.  *Note Hooks::.

   * If loading the file adds functions to hooks, define a function
     'FEATURE-unload-function', where FEATURE is the name of the feature
     the package provides, and make it undo any such changes.  Using
     'unload-feature' to unload the file will run this function.  *Note
     Unloading::.

   * It is a bad idea to define aliases for the Emacs primitives.
     Normally you should use the standard names instead.  The case where
     an alias may be useful is where it facilitates backwards
     compatibility or portability.

   * If a package needs to define an alias or a new function for
     compatibility with some other version of Emacs, name it with the
     package prefix, not with the raw name with which it occurs in the
     other version.  Here is an example from Gnus, which provides many
     examples of such compatibility issues.

          (defalias 'gnus-point-at-bol
            (if (fboundp 'point-at-bol)
                'point-at-bol
              'line-beginning-position))

   * Redefining or advising an Emacs primitive is a bad idea.  It may do
     the right thing for a particular program, but there is no telling
     what other programs might break as a result.

   * It is likewise a bad idea for one Lisp package to advise a function
     in another Lisp package (*note Advising Functions::).

   * Avoid using 'eval-after-load' and 'with-eval-after-load' in
     libraries and packages (*note Hooks for Loading::).  This feature
     is meant for personal customizations; using it in a Lisp program is
     unclean, because it modifies the behavior of another Lisp file in a
     way that's not visible in that file.  This is an obstacle for
     debugging, much like advising a function in the other package.

   * If a file does replace any of the standard functions or library
     programs of Emacs, prominent comments at the beginning of the file
     should say which functions are replaced, and how the behavior of
     the replacements differs from that of the originals.

   * Constructs that define a function or variable should be macros, not
     functions, and their names should start with 'define-'.  The macro
     should receive the name to be defined as the first argument.  That
     will help various tools find the definition automatically.  Avoid
     constructing the names in the macro itself, since that would
     confuse these tools.

   * In some other systems there is a convention of choosing variable
     names that begin and end with '*'.  We don't use that convention in
     Emacs Lisp, so please don't use it in your programs.  (Emacs uses
     such names only for special-purpose buffers.)  People will find
     Emacs more coherent if all libraries use the same conventions.

   * The default file coding system for Emacs Lisp source files is UTF-8
     (*note Text Representations::).  In the rare event that your
     program contains characters which are _not_ in UTF-8, you should
     specify an appropriate coding system in the source file's '-*-'
     line or local variables list.  *Note Local Variables in Files:
     (emacs)File Variables.

   * Indent the file using the default indentation parameters.

   * Don't make a habit of putting close-parentheses on lines by
     themselves; Lisp programmers find this disconcerting.

   * Please put a copyright notice and copying permission notice on the
     file if you distribute copies.  *Note Library Headers::.

   ---------- Footnotes ----------

   (1) The benefits of a Common Lisp-style package system are considered
not to outweigh the costs.

==============================================================================
File: elisp.info,  Node: |Key_Binding_Conventions|,  Next: |Programming_Tips|,  Prev: |Coding_Conventions|,  Up: |Tips|
==============================================================================

                                                       *Key_Binding_Conventions*

D.2 Key Binding Conventions
---------------------------

   * Many special major modes, like Dired, Info, Compilation, and Occur,
     are designed to handle read-only text that contains "hyper-links".
     Such a major mode should redefine 'mouse-2' and <RET> to follow the
     links.  It should also set up a 'follow-link' condition, so that
     the link obeys 'mouse-1-click-follows-link'.  *Note Clickable
     Text::.  *Note Buttons::, for an easy method of implementing such
     clickable links.

   * Don't define 'C-c LETTER' as a key in Lisp programs.  Sequences
     consisting of 'C-c' and a letter (either upper or lower case) are
     reserved for users; they are the only sequences reserved for
     users, so do not block them.

     Changing all the Emacs major modes to respect this convention was a
     lot of work; abandoning this convention would make that work go to
     waste, and inconvenience users.  Please comply with it.

   * Function keys <F5> through <F9> without modifier keys are also
     reserved for users to define.

   * Sequences consisting of 'C-c' followed by a control character or a
     digit are reserved for major modes.

   * Sequences consisting of 'C-c' followed by '{', '}', '<', '>', ':'
     or ';' are also reserved for major modes.

   * Sequences consisting of 'C-c' followed by any other ASCII
     punctuation or symbol character are allocated for minor modes.
     Using them in a major mode is not absolutely prohibited, but if you
     do that, the major mode binding may be shadowed from time to time
     by minor modes.

   * Don't bind 'C-h' following any prefix character (including 'C-c').
     If you don't bind 'C-h', it is automatically available as a help
     character for listing the subcommands of the prefix character.

   * Don't bind a key sequence ending in <ESC> except following another
     <ESC>.  (That is, it is OK to bind a sequence ending in '<ESC>
     <ESC>'.)

     The reason for this rule is that a non-prefix binding for <ESC> in
     any context prevents recognition of escape sequences as function
     keys in that context.

   * Similarly, don't bind a key sequence ending in 'C-g', since that is
     commonly used to cancel a key sequence.

   * Anything that acts like a temporary mode or state that the user can
     enter and leave should define '<ESC> <ESC>' or '<ESC> <ESC> <ESC>'
     as a way to escape.

     For a state that accepts ordinary Emacs commands, or more generally
     any kind of state in which <ESC> followed by a function key or
     arrow key is potentially meaningful, then you must not define
     '<ESC> <ESC>', since that would preclude recognizing an escape
     sequence after <ESC>.  In these states, you should define '<ESC>
     <ESC> <ESC>' as the way to escape.  Otherwise, define '<ESC> <ESC>'
     instead.

==============================================================================
File: elisp.info,  Node: |Programming_Tips|,  Next: |Compilation_Tips|,  Prev: |Key_Binding_Conventions|,  Up: |Tips|
==============================================================================

                                                              *Programming_Tips*

D.3 Emacs Programming Tips
--------------------------

Following these conventions will make your program fit better into Emacs
when it runs.

   * Don't use 'next-line' or 'previous-line' in programs; nearly
     always, 'forward-line' is more convenient as well as more
     predictable and robust.  *Note Text Lines::.

   * Don't call functions that set the mark, unless setting the mark is
     one of the intended features of your program.  The mark is a
     user-level feature, so it is incorrect to change the mark except to
     supply a value for the user's benefit.  *Note The Mark::.

     In particular, don't use any of these functions:

        * 'beginning-of-buffer', 'end-of-buffer'
        * 'replace-string', 'replace-regexp'
        * 'insert-file', 'insert-buffer'

     If you just want to move point, or replace a certain string, or
     insert a file or buffer's contents, without any of the other
     features intended for interactive users, you can replace these
     functions with one or two lines of simple Lisp code.

   * Use lists rather than vectors, except when there is a particular
     reason to use a vector.  Lisp has more facilities for manipulating
     lists than for vectors, and working with lists is usually more
     convenient.

     Vectors are advantageous for tables that are substantial in size
     and are accessed in random order (not searched front to back),
     provided there is no need to insert or delete elements (only lists
     allow that).

   * The recommended way to show a message in the echo area is with the
     'message' function, not 'princ'.  *Note The Echo Area::.

   * When you encounter an error condition, call the function 'error'
     (or 'signal').  The function 'error' does not return.  *Note
     Signaling Errors::.

     Don't use 'message', 'throw', 'sleep-for', or 'beep' to report
     errors.

   * An error message should start with a capital letter but should not
     end with a period.

   * A question asked in the minibuffer with 'yes-or-no-p' or 'y-or-n-p'
     should start with a capital letter and end with '? '.

   * When you mention a default value in a minibuffer prompt, put it and
     the word 'default' inside parentheses.  It should look like this:

          Enter the answer (default 42):

   * In 'interactive', if you use a Lisp expression to produce a list of
     arguments, don't try to provide the correct default values for
     region or position arguments.  Instead, provide 'nil' for those
     arguments if they were not specified, and have the function body
     compute the default value when the argument is 'nil'.  For
     instance, write this:

          (defun foo (pos)
            (interactive
             (list (if SPECIFIED SPECIFIED-POS)))
            (unless pos (setq pos DEFAULT-POS))
            ...)

     rather than this:

          (defun foo (pos)
            (interactive
             (list (if SPECIFIED SPECIFIED-POS
                       DEFAULT-POS)))
            ...)

     This is so that repetition of the command will recompute these
     defaults based on the current circumstances.

     You do not need to take such precautions when you use interactive
     specs 'd', 'm' and 'r', because they make special arrangements to
     recompute the argument values on repetition of the command.

   * Many commands that take a long time to execute display a message
     that says something like 'Operating...' when they start, and change
     it to 'Operating...done' when they finish.  Please keep the style
     of these messages uniform: _no_ space around the ellipsis, and _no_
     period after 'done'.  *Note Progress::, for an easy way to generate
     such messages.

   * Try to avoid using recursive edits.  Instead, do what the Rmail 'e'
     command does: use a new local keymap that contains a command
     defined to switch back to the old local keymap.  Or simply switch
     to another buffer and let the user switch back at will.  *Note
     Recursive Editing::.

==============================================================================
File: elisp.info,  Node: |Compilation_Tips|,  Next: |Warning_Tips|,  Prev: |Programming_Tips|,  Up: |Tips|
==============================================================================

                                                              *Compilation_Tips*

D.4 Tips for Making Compiled Code Fast
--------------------------------------

Here are ways of improving the execution speed of byte-compiled Lisp
programs.

   * Profile your program, to find out where the time is being spent.
     *Note Profiling::.

   * Use iteration rather than recursion whenever possible.  Function
     calls are slow in Emacs Lisp even when a compiled function is
     calling another compiled function.

   * Using the primitive list-searching functions 'memq', 'member',
     'assq', or 'assoc' is even faster than explicit iteration.  It can
     be worth rearranging a data structure so that one of these
     primitive search functions can be used.

   * Certain built-in functions are handled specially in byte-compiled
     code, avoiding the need for an ordinary function call.  It is a
     good idea to use these functions rather than alternatives.  To see
     whether a function is handled specially by the compiler, examine
     its 'byte-compile' property.  If the property is non-'nil', then
     the function is handled specially.

     For example, the following input will show you that 'aref' is
     compiled specially (*note Array Functions::):

          (get 'aref 'byte-compile)
               => byte-compile-two-args

     Note that in this case (and many others), you must first load the
     'bytecomp' library, which defines the 'byte-compile' property.

   * If calling a small function accounts for a substantial part of your
     program's running time, make the function inline.  This eliminates
     the function call overhead.  Since making a function inline reduces
     the flexibility of changing the program, don't do it unless it
     gives a noticeable speedup in something slow enough that users care
     about the speed.  *Note Inline Functions::.

==============================================================================
File: elisp.info,  Node: |Warning_Tips|,  Next: |Documentation_Tips|,  Prev: |Compilation_Tips|,  Up: |Tips|
==============================================================================

                                                                  *Warning_Tips*

D.5 Tips for Avoiding Compiler Warnings
---------------------------------------

   * Try to avoid compiler warnings about undefined free variables, by
     adding dummy 'defvar' definitions for these variables, like this:

          (defvar foo)

     Such a definition has no effect except to tell the compiler not to
     warn about uses of the variable 'foo' in this file.

   * Similarly, to avoid a compiler warning about an undefined function
     that you know _will_ be defined, use a 'declare-function' statement
     (*note Declaring Functions::).

   * If you use many functions, macros, and variables from a certain
     file, you can add a 'require' (*note require: Named Features.) for
     that package to avoid compilation warnings for them, like this:

          (require 'foo)

     If you need only macros from some file, you can require it only at
     compile time (*note Eval During Compile::).  For instance,

          (eval-when-compile
            (require 'foo))

   * If you bind a variable in one function, and use it or set it in
     another function, the compiler warns about the latter function
     unless the variable has a definition.  But adding a definition
     would be unclean if the variable has a short name, since Lisp
     packages should not define short variable names.  The right thing
     to do is to rename this variable to start with the name prefix used
     for the other functions and variables in your package.

   * The last resort for avoiding a warning, when you want to do
     something that is usually a mistake but you know is not a mistake
     in your usage, is to put it inside 'with-no-warnings'.  *Note
     Compiler Errors::.

==============================================================================
File: elisp.info,  Node: |Documentation_Tips|,  Next: |Comment_Tips|,  Prev: |Warning_Tips|,  Up: |Tips|
==============================================================================

                                                            *Documentation_Tips*

D.6 Tips for Documentation Strings
----------------------------------

Here are some tips and conventions for the writing of documentation
strings.  You can check many of these conventions by running the command
'M-x checkdoc-minor-mode'.

   * Every command, function, or variable intended for users to know
     about should have a documentation string.

   * An internal variable or subroutine of a Lisp program might as well
     have a documentation string.  Documentation strings take up very
     little space in a running Emacs.

   * Format the documentation string so that it fits in an Emacs window
     on an 80-column screen.  It is a good idea for most lines to be no
     wider than 60 characters.  The first line should not be wider than
     67 characters or it will look bad in the output of 'apropos'.

     You can fill the text if that looks good.  Emacs Lisp mode fills
     documentation strings to the width specified by
     'emacs-lisp-docstring-fill-column'.  However, you can sometimes
     make a documentation string much more readable by adjusting its
     line breaks with care.  Use blank lines between sections if the
     documentation string is long.

   * The first line of the documentation string should consist of one or
     two complete sentences that stand on their own as a summary.  'M-x
     apropos' displays just the first line, and if that line's contents
     don't stand on their own, the result looks bad.  In particular,
     start the first line with a capital letter and end it with a
     period.

     For a function, the first line should briefly answer the question,
     "What does this function do?" For a variable, the first line should
     briefly answer the question, "What does this value mean?"

     Don't limit the documentation string to one line; use as many lines
     as you need to explain the details of how to use the function or
     variable.  Please use complete sentences for the rest of the text
     too.

   * When the user tries to use a disabled command, Emacs displays just
     the first paragraph of its documentation string--everything through
     the first blank line.  If you wish, you can choose which
     information to include before the first blank line so as to make
     this display useful.

   * The first line should mention all the important arguments of the
     function, and should mention them in the order that they are
     written in a function call.  If the function has many arguments,
     then it is not feasible to mention them all in the first line; in
     that case, the first line should mention the first few arguments,
     including the most important arguments.

   * When a function's documentation string mentions the value of an
     argument of the function, use the argument name in capital letters
     as if it were a name for that value.  Thus, the documentation
     string of the function 'eval' refers to its first argument as
     'FORM', because the actual argument name is 'form':

          Evaluate FORM and return its value.

     Also write metasyntactic variables in capital letters, such as when
     you show the decomposition of a list or vector into subunits, some
     of which may vary.  'KEY' and 'VALUE' in the following example
     illustrate this practice:

          The argument TABLE should be an alist whose elements
          have the form (KEY . VALUE).  Here, KEY is ...

   * Never change the case of a Lisp symbol when you mention it in a doc
     string.  If the symbol's name is 'foo', write "foo", not "Foo"
     (which is a different symbol).

     This might appear to contradict the policy of writing function
     argument values, but there is no real contradiction; the argument
     _value_ is not the same thing as the _symbol_ that the function
     uses to hold the value.

     If this puts a lower-case letter at the beginning of a sentence and
     that annoys you, rewrite the sentence so that the symbol is not at
     the start of it.

   * Do not start or end a documentation string with whitespace.

   * *Do not* indent subsequent lines of a documentation string so that
     the text is lined up in the source code with the text of the first
     line.  This looks nice in the source code, but looks bizarre when
     users view the documentation.  Remember that the indentation before
     the starting double-quote is not part of the string!

   * When a documentation string refers to a Lisp symbol, write it as it
     would be printed (which usually means in lower case), surrounding
     it with curved single quotes ('..').  There are two exceptions:
     write 't' and 'nil' without surrounding punctuation.  For example:

           CODE can be 'lambda', nil, or t.

     *Note (emacs)Quotation Marks::, for how to enter curved single
     quotes.

     Documentation strings can also use an older single-quoting
     convention, which quotes symbols with grave accent ` and apostrophe
     ': `like-this' rather than 'like-this'.  This older convention was
     designed for now-obsolete displays in which grave accent and
     apostrophe were mirror images.  Documentation using this convention
     is converted to the user's preferred format when it is copied into
     a help buffer.  *Note Keys in Documentation::.

     Help mode automatically creates a hyperlink when a documentation
     string uses a single-quoted symbol name, if the symbol has either a
     function or a variable definition.  You do not need to do anything
     special to make use of this feature.  However, when a symbol has
     both a function definition and a variable definition, and you want
     to refer to just one of them, you can specify which one by writing
     one of the words 'variable', 'option', 'function', or 'command',
     immediately before the symbol name.  (Case makes no difference in
     recognizing these indicator words.)  For example, if you write

          This function sets the variable `buffer-file-name'.

     then the hyperlink will refer only to the variable documentation of
     'buffer-file-name', and not to its function documentation.

     If a symbol has a function definition and/or a variable definition,
     but those are irrelevant to the use of the symbol that you are
     documenting, you can write the words 'symbol' or 'program' before
     the symbol name to prevent making any hyperlink.  For example,

          If the argument KIND-OF-RESULT is the symbol `list',
          this function returns a list of all the objects
          that satisfy the criterion.

     does not make a hyperlink to the documentation, irrelevant here, of
     the function 'list'.

     Normally, no hyperlink is made for a variable without variable
     documentation.  You can force a hyperlink for such variables by
     preceding them with one of the words 'variable' or 'option'.

     Hyperlinks for faces are only made if the face name is preceded or
     followed by the word 'face'.  In that case, only the face
     documentation will be shown, even if the symbol is also defined as
     a variable or as a function.

     To make a hyperlink to Info documentation, write the single-quoted
     name of the Info node (or anchor), preceded by 'info node', 'Info
     node', 'info anchor' or 'Info anchor'.  The Info file name defaults
     to 'emacs'.  For example,

          See Info node `Font Lock' and Info node `(elisp)Font Lock Basics'.

     Finally, to create a hyperlink to URLs, write the single-quoted
     URL, preceded by 'URL'.  For example,

          The home page for the GNU project has more information (see URL
          `https://www.gnu.org/').

   * Don't write key sequences directly in documentation strings.
     Instead, use the '\\[...]' construct to stand for them.  For
     example, instead of writing 'C-f', write the construct
     '\\[forward-char]'.  When Emacs displays the documentation string,
     it substitutes whatever key is currently bound to 'forward-char'.
     (This is normally 'C-f', but it may be some other character if the
     user has moved key bindings.)  *Note Keys in Documentation::.

   * In documentation strings for a major mode, you will want to refer
     to the key bindings of that mode's local map, rather than global
     ones.  Therefore, use the construct '\\<...>' once in the
     documentation string to specify which key map to use.  Do this
     before the first use of '\\[...]'.  The text inside the '\\<...>'
     should be the name of the variable containing the local keymap for
     the major mode.

     It is not practical to use '\\[...]' very many times, because
     display of the documentation string will become slow.  So use this
     to describe the most important commands in your major mode, and
     then use '\\{...}' to display the rest of the mode's keymap.

   * For consistency, phrase the verb in the first sentence of a
     function's documentation string as an imperative--for instance, use
     "Return the cons of A and B." in preference to "Returns the cons of
     A and B." Usually it looks good to do likewise for the rest of the
     first paragraph.  Subsequent paragraphs usually look better if each
     sentence is indicative and has a proper subject.

   * The documentation string for a function that is a yes-or-no
     predicate should start with words such as "Return t if", to
     indicate explicitly what constitutes truth.  The word "return"
     avoids starting the sentence with lower-case "t", which could be
     somewhat distracting.

   * Write documentation strings in the active voice, not the passive,
     and in the present tense, not the future.  For instance, use
     "Return a list containing A and B." instead of "A list containing A
     and B will be returned."

   * Avoid using the word "cause" (or its equivalents) unnecessarily.
     Instead of, "Cause Emacs to display text in boldface", write just
     "Display text in boldface".

   * Avoid using "iff" (a mathematics term meaning "if and only if"),
     since many people are unfamiliar with it and mistake it for a typo.
     In most cases, the meaning is clear with just "if".  Otherwise, try
     to find an alternate phrasing that conveys the meaning.

   * Try to avoid using abbreviations such as "e.g." (for "for
     example"), "i.e." (for "that is"), "no." (for "number"), "c.f."
     (for "in contrast to") and "w.r.t." (for "with respect to") as much
     as possible.  It is almost always clearer and easier to read the
     expanded version.(1)

   * When a command is meaningful only in a certain mode or situation,
     do mention that in the documentation string.  For example, the
     documentation of 'dired-find-file' is:

          In Dired, visit the file or directory named on this line.

   * When you define a variable that represents an option users might
     want to set, use 'defcustom'.  *Note Defining Variables::.

   * The documentation string for a variable that is a yes-or-no flag
     should start with words such as "Non-nil means", to make it clear
     that all non-'nil' values are equivalent and indicate explicitly
     what 'nil' and non-'nil' mean.

   * If a line in a documentation string begins with an
     open-parenthesis, consider writing a backslash before the
     open-parenthesis, like this:

          The argument FOO can be either a number
          \(a buffer position) or a string (a file name).

     This avoids a bug in Emacs versions older than 27.1, where the '('
     was treated as the start of a defun (*note Defuns: (emacs)Defuns.).
     If you do not anticipate anyone editing your code with older Emacs
     versions, there is no need for this work-around.

   ---------- Footnotes ----------

   (1) We do use these occasionally, but try not to overdo it.

==============================================================================
File: elisp.info,  Node: |Comment_Tips|,  Next: |Library_Headers|,  Prev: |Documentation_Tips|,  Up: |Tips|
==============================================================================

                                                                  *Comment_Tips*

D.7 Tips on Writing Comments
----------------------------

We recommend these conventions for comments:

';'
     Comments that start with a single semicolon, ';', should all be
     aligned to the same column on the right of the source code.  Such
     comments usually explain how the code on that line does its job.
     For example:

          (setq base-version-list                 ; There was a base
                (assoc (substring fn 0 start-vn)  ; version to which
                       file-version-assoc-list))  ; this looks like
                                                  ; a subversion.

';;'
     Comments that start with two semicolons, ';;', should be aligned to
     the same level of indentation as the code.  Such comments usually
     describe the purpose of the following lines or the state of the
     program at that point.  For example:

          (prog1 (setq auto-fill-function
                       ...
                       ...
            ;; Update mode line.
            (force-mode-line-update)))

     We also normally use two semicolons for comments outside functions.

          ;; This Lisp code is run in Emacs when it is to operate as
          ;; a server for other processes.

     If a function has no documentation string, it should instead have a
     two-semicolon comment right before the function, explaining what
     the function does and how to call it properly.  Explain precisely
     what each argument means and how the function interprets its
     possible values.  It is much better to convert such comments to
     documentation strings, though.

';;;'
     Comments that start with three semicolons, ';;;', should start at
     the left margin.  We use them for comments which should be
     considered a heading by Outline minor mode.  By default, comments
     starting with at least three semicolons (followed by a single space
     and a non-whitespace character) are considered headings, comments
     starting with two or fewer are not.  Historically, triple-semicolon
     comments have also been used for commenting out lines within a
     function, but this use is discouraged.

     When commenting out entire functions, use two semicolons.

';;;;'
     Comments that start with four (or more) semicolons, ';;;;', should
     be aligned to the left margin and are used for headings of major
     sections of a program.  For example:

          ;;;; The kill ring

     If you wish to have sub-headings under these heading, use more
     semicolons to nest these sub-headings.

Generally speaking, the 'M-;' ('comment-dwim') command automatically
starts a comment of the appropriate type; or indents an existing comment
to the right place, depending on the number of semicolons.  *Note
Manipulating Comments: (emacs)Comments.

==============================================================================
File: elisp.info,  Node: |Library_Headers|,  Prev: |Comment_Tips|,  Up: |Tips|
==============================================================================

                                                               *Library_Headers*

D.8 Conventional Headers for Emacs Libraries
--------------------------------------------

Emacs has conventions for using special comments in Lisp libraries to
divide them into sections and give information such as who wrote them.
Using a standard format for these items makes it easier for tools (and
people) to extract the relevant information.  This section explains
these conventions, starting with an example:

     ;;; foo.el --- Support for the Foo programming language

     ;; Copyright (C) 2010-2020 Your Name

     ;; Author: Your Name <yourname@example.com>
     ;; Maintainer: Someone Else <someone@example.com>
     ;; Created: 14 Jul 2010
     ;; Keywords: languages
     ;; URL: https://example.com/foo

     ;; This file is not part of GNU Emacs.

     ;; This file is free software...
     ...
     ;; along with this file.  If not, see <https://www.gnu.org/licenses/>.

   The very first line should have this format:

     ;;; FILENAME --- DESCRIPTION

The description should be contained in one line.  If the file needs a
'-*-' specification, put it after DESCRIPTION.  If this would make the
first line too long, use a Local Variables section at the end of the
file.

   The copyright notice usually lists your name (if you wrote the file).
If you have an employer who claims copyright on your work, you might
need to list them instead.  Do not say that the copyright holder is the
Free Software Foundation (or that the file is part of GNU Emacs) unless
your file has been accepted into the Emacs distribution.  For more
information on the form of copyright and license notices, see the guide
on the GNU website (https://www.gnu.org/licenses/gpl-howto.html).

   After the copyright notice come several "header comment" lines, each
beginning with ';; HEADER-NAME:'.  Here is a table of the conventional
possibilities for HEADER-NAME:

'Author'
     This line states the name and email address of at least the
     principal author of the library.  If there are multiple authors,
     list them on continuation lines led by ';;' and a tab or at least
     two spaces.  We recommend including a contact email address, of the
     form '<...>'.  For example:

          ;; Author: Your Name <yourname@example.com>
          ;;      Someone Else <someone@example.com>
          ;;      Another Person <another@example.com>

'Maintainer'
     This header has the same format as the Author header.  It lists the
     person(s) who currently maintain(s) the file (respond to bug
     reports, etc.).

     If there is no maintainer line, the person(s) in the Author field
     is/are presumed to be the maintainers.  Some files in Emacs use
     'emacs-devel@gnu.org' for the maintainer, which means the author is
     no longer responsible for the file, and that it is maintained as
     part of Emacs.

'Created'
     This optional line gives the original creation date of the file,
     and is for historical interest only.

'Version'
     If you wish to record version numbers for the individual Lisp
     program, put them in this line.  Lisp files distributed with Emacs
     generally do not have a 'Version' header, since the version number
     of Emacs itself serves the same purpose.  If you are distributing a
     collection of multiple files, we recommend not writing the version
     in every file, but only the main one.

'Keywords'
     This line lists keywords for the 'finder-by-keyword' help command.
     Please use that command to see a list of the meaningful keywords.
     The command 'M-x checkdoc-package-keywords <RET>' will find and
     display any keywords that are not in 'finder-known-keywords'.  If
     you set the variable 'checkdoc-package-keywords-flag' non-'nil',
     checkdoc commands will include the keyword verification in its
     checks.

     This field is how people will find your package when they're
     looking for things by topic.  To separate the keywords, you can use
     spaces, commas, or both.

     The name of this field is unfortunate, since people often assume it
     is the place to write arbitrary keywords that describe their
     package, rather than just the relevant Finder keywords.

'Homepage'
'URL'
     These lines state the homepage of the library.

'Package-Version'
     If 'Version' is not suitable for use by the package manager, then a
     package can define 'Package-Version'; it will be used instead.
     This is handy if 'Version' is an RCS id or something else that
     cannot be parsed by 'version-to-list'.  *Note Packaging Basics::.

'Package-Requires'
     If this exists, it names packages on which the current package
     depends for proper operation.  *Note Packaging Basics::.  This is
     used by the package manager both at download time (to ensure that a
     complete set of packages is downloaded) and at activation time (to
     ensure that a package is only activated if all its dependencies
     have been).

     Its format is a list of lists on a single line.  The 'car' of each
     sub-list is the name of a package, as a symbol.  The 'cadr' of each
     sub-list is the minimum acceptable version number, as a string that
     can be parsed by 'version-to-list'.  An entry that lacks a version
     (i.e., an entry which is just a symbol, or a sub-list of one
     element) is equivalent to entry with version "0".  For instance:

          ;; Package-Requires: ((gnus "1.0") (bubbles "2.7.2") cl-lib (seq))

     The package code automatically defines a package named 'emacs' with
     the version number of the currently running Emacs.  This can be
     used to require a minimal version of Emacs for a package.

   Just about every Lisp library ought to have the 'Author' and
'Keywords' header comment lines.  Use the others if they are
appropriate.  You can also put in header lines with other header
names--they have no standard meanings, so they can't do any harm.

   We use additional stylized comments to subdivide the contents of the
library file.  These should be separated from anything else by blank
lines.  Here is a table of them:

';;; Commentary:'
     This begins introductory comments that explain how the library
     works.  It should come right after the copying permissions,
     terminated by a 'Change Log', 'History' or 'Code' comment line.
     This text is used by the Finder package, so it should make sense in
     that context.

';;; Change Log:'
     This begins an optional log of changes to the file over time.
     Don't put too much information in this section--it is better to keep
     the detailed logs in a version control system (as Emacs does) or in
     a separate 'ChangeLog' file.  'History' is an alternative to
     'Change Log'.

';;; Code:'
     This begins the actual code of the program.

';;; FILENAME ends here'
     This is the "footer line"; it appears at the very end of the file.
     Its purpose is to enable people to detect truncated versions of the
     file from the lack of a footer line.

==============================================================================
File: elisp.info,  Node: |GNU_Emacs_Internals|,  Next: |Standard_Errors|,  Prev: |Tips|,  Up: |Top|
==============================================================================

                                                           *GNU_Emacs_Internals*

Appendix E GNU Emacs Internals
==============================

This chapter describes how the runnable Emacs executable is dumped with
the preloaded Lisp libraries in it, how storage is allocated, and some
internal aspects of GNU Emacs that may be of interest to C programmers.

MENU

* |Building_Emacs|::      How the dumped Emacs is made.
* |Pure_Storage|::        Kludge to make preloaded Lisp functions shareable.
* |Garbage_Collection|::  Reclaiming space for Lisp objects no longer used.
* |Stack_allocated_Objects|::    Temporary conses and strings on C stack.
* |Memory_Usage|::        Info about total size of Lisp objects made so far.
* |C_Dialect|::           What C variant Emacs is written in.
* |Writing_Emacs_Primitives|::   Writing C code for Emacs.
* |Writing_Dynamic_Modules|::    Writing loadable modules for Emacs.
* |Object_Internals|::    Data formats of buffers, windows, processes.
* |C_Integer_Types|::     How C integer types are used inside Emacs.

==============================================================================
File: elisp.info,  Node: |Building_Emacs|,  Next: |Pure_Storage|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                                *Building_Emacs*

E.1 Building Emacs
------------------

This section explains the steps involved in building the Emacs
executable.  You don't have to know this material to build and install
Emacs, since the makefiles do all these things automatically.  This
information is pertinent to Emacs developers.

   Building Emacs requires GNU Make version 3.81 or later.

   Compilation of the C source files in the 'src' directory produces an
executable file called 'temacs', also called a "bare impure Emacs".  It
contains the Emacs Lisp interpreter and I/O routines, but not the
editing commands.

   The command 'temacs -l loadup' would run 'temacs' and direct it to
load 'loadup.el'.  The 'loadup' library loads additional Lisp libraries,
which set up the normal Emacs editing environment.  After this step, the
Emacs executable is no longer "bare".

   Because it takes some time to load the standard Lisp files, the
'temacs' executable usually isn't run directly by users.  Instead, one
of the last steps of building Emacs runs the command
'temacs -batch -l loadup --temacs=DUMP-METHOD'.  The special option
'--temacs' tells 'temacs' how to record all the standard preloaded Lisp
functions and variables, so that when you subsequently run Emacs, it
will start much faster.  The '--temacs' option requires an argument
DUMP-METHOD, which can be one of the following:

'pdump'
     Record the preloaded Lisp data in a "dump file".  This method
     produces an additional data file which Emacs will load at startup.
     The produced dump file is usually called 'emacs.pdmp', and is
     installed in the Emacs 'exec-directory' (*note Help Functions::).
     This method is the most preferred one, as it does not require Emacs
     to employ any special techniques of memory allocation, which might
     get in the way of various memory-layout techniques used by modern
     systems to enhance security and privacy.

'pbootstrap'
     Like 'pdump', but used while "bootstrapping" Emacs, when no
     previous Emacs binary and no '*.elc' byte-compiled Lisp files are
     available.  The produced dump file is usually named
     'bootstrap-emacs.pdmp' in this case.

'dump'
     This method causes 'temacs' to dump out an executable program,
     called 'emacs', which has all the standard Lisp files already
     preloaded into it.  (The '-batch' argument prevents 'temacs' from
     trying to initialize any of its data on the terminal, so that the
     tables of terminal information are empty in the dumped Emacs.)
     This method is also known as "unexec", because it produces a
     program file from a running process, and thus is in some sense the
     opposite of executing a program to start a process.  Although this
     method was the way that Emacs traditionally saved its state, it is
     now deprecated.

'bootstrap'
     Like 'dump', but used when bootstrapping Emacs with the 'unexec'
     method.

   The dumped 'emacs' executable (also called a "pure" Emacs) is the one
which is installed.  If the portable dumper was used to build Emacs, the
'emacs' executable is actually an exact copy of 'temacs', and the
corresponding 'emacs.pdmp' file is installed as well.  The variable
'preloaded-file-list' stores a list of the preloaded Lisp files recorded
in the dump file or in the dumped Emacs executable.  If you port Emacs
to a new operating system, and are not able to implement dumping of any
kind, then Emacs must load 'loadup.el' each time it starts.

   By default the dumped 'emacs' executable records details such as the
build time and host name.  Use the '--disable-build-details' option of
'configure' to suppress these details, so that building and installing
Emacs twice from the same sources is more likely to result in identical
copies of Emacs.

   You can specify additional files to preload by writing a library
named 'site-load.el' that loads them.  You may need to rebuild Emacs
with an added definition

     #define SITELOAD_PURESIZE_EXTRA N

to make N added bytes of pure space to hold the additional files; see
'src/puresize.h'.  (Try adding increments of 20000 until it is big
enough.)  However, the advantage of preloading additional files
decreases as machines get faster.  On modern machines, it is usually not
advisable.

   After 'loadup.el' reads 'site-load.el', it finds the documentation
strings for primitive and preloaded functions (and variables) in the
file 'etc/DOC' where they are stored, by calling 'Snarf-documentation'
(*note Accessing Documentation: Definition of Snarf-documentation.).

   You can specify other Lisp expressions to execute just before dumping
by putting them in a library named 'site-init.el'.  This file is
executed after the documentation strings are found.

   If you want to preload function or variable definitions, there are
three ways you can do this and make their documentation strings
accessible when you subsequently run Emacs:

   * Arrange to scan these files when producing the 'etc/DOC' file, and
     load them with 'site-load.el'.

   * Load the files with 'site-init.el', then copy the files into the
     installation directory for Lisp files when you install Emacs.

   * Specify a 'nil' value for 'byte-compile-dynamic-docstrings' as a
     local variable in each of these files, and load them with either
     'site-load.el' or 'site-init.el'.  (This method has the drawback
     that the documentation strings take up space in Emacs all the
     time.)

   It is not advisable to put anything in 'site-load.el' or
'site-init.el' that would alter any of the features that users expect in
an ordinary unmodified Emacs.  If you feel you must override normal
features for your site, do it with 'default.el', so that users can
override your changes if they wish.  *Note Startup Summary::.  Note that
if either 'site-load.el' or 'site-init.el' changes 'load-path', the
changes will be lost after dumping.  *Note Library Search::.  To make a
permanent change to 'load-path', use the '--enable-locallisppath' option
of 'configure'.

   In a package that can be preloaded, it is sometimes necessary (or
useful) to delay certain evaluations until Emacs subsequently starts up.
The vast majority of such cases relate to the values of customizable
variables.  For example, 'tutorial-directory' is a variable defined in
'startup.el', which is preloaded.  The default value is set based on
'data-directory'.  The variable needs to access the value of
'data-directory' when Emacs starts, not when it is dumped, because the
Emacs executable has probably been installed in a different location
since it was dumped.

 -- Function: custom-initialize-delay symbol value
     This function delays the initialization of SYMBOL to the next Emacs
     start.  You normally use this function by specifying it as the
     ':initialize' property of a customizable variable.  (The argument
     VALUE is unused, and is provided only for compatibility with the
     form Custom expects.)

   In the unlikely event that you need a more general functionality than
'custom-initialize-delay' provides, you can use 'before-init-hook'
(*note Startup Summary::).

 -- Function: dump-emacs-portable to-file &optional track-referrers
     This function dumps the current state of Emacs into a dump file
     TO-FILE, using the 'pdump' method.  Normally, the dump file is
     called 'EMACS-NAME.dmp', where EMACS-NAME is the name of the Emacs
     executable file.  The optional argument TRACK-REFERRERS, if
     non-'nil', causes the portable dumper to keep additional
     information to help track down the provenance of object types that
     are not yet supported by the 'pdump' method.

     Although the portable dumper code can run on many platforms, the
     dump files that it produces are not portable--they can be loaded
     only by the Emacs executable that dumped them.

     If you want to use this function in an Emacs that was already
     dumped, you must run Emacs with the '-batch' option.

 -- Function: dump-emacs to-file from-file
     This function dumps the current state of Emacs into an executable
     file TO-FILE, using the 'unexec' method.  It takes symbols from
     FROM-FILE (this is normally the executable file 'temacs').

     This function cannot be used in an Emacs that was already dumped.
     This function is deprecated, and by default Emacs is built without
     'unexec' support so this function is not available.

 -- Function: pdumper-stats
     If the current Emacs session restored its state from a dump file,
     this function returns information about the dump file and the time
     it took to restore the Emacs state.  The value is an alist
     '((dumped-with-pdumper . t) (load-time . TIME) (dump-file-name . FILE))',
     where FILE is the name of the dump file, and TIME is the time in
     seconds it took to restore the state from the dump file.  If the
     current session was not restored from a dump file, the value is
     nil.

==============================================================================
File: elisp.info,  Node: |Pure_Storage|,  Next: |Garbage_Collection|,  Prev: |Building_Emacs|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                                  *Pure_Storage*

E.2 Pure Storage
----------------

Emacs Lisp uses two kinds of storage for user-created Lisp objects:
"normal storage" and "pure storage".  Normal storage is where all the
new data created during an Emacs session are kept (*note Garbage
Collection::).  Pure storage is used for certain data in the preloaded
standard Lisp files--data that should never change during actual use of
Emacs.

   Pure storage is allocated only while 'temacs' is loading the standard
preloaded Lisp libraries.  In the file 'emacs', it is marked as
read-only (on operating systems that permit this), so that the memory
space can be shared by all the Emacs jobs running on the machine at
once.  Pure storage is not expandable; a fixed amount is allocated when
Emacs is compiled, and if that is not sufficient for the preloaded
libraries, 'temacs' allocates dynamic memory for the part that didn't
fit.  If Emacs will be dumped using the 'pdump' method (*note Building
Emacs::), the pure-space overflow is of no special importance (it just
means some of the preloaded stuff cannot be shared with other Emacs
jobs).  However, if Emacs will be dumped using the now obsolete 'unexec'
method, the resulting image will work, but garbage collection (*note
Garbage Collection::) is disabled in this situation, causing a memory
leak.  Such an overflow normally won't happen unless you try to preload
additional libraries or add features to the standard ones.  Emacs will
display a warning about the overflow when it starts, if it was dumped
using 'unexec'.  If this happens, you should increase the compilation
parameter 'SYSTEM_PURESIZE_EXTRA' in the file 'src/puresize.h' and
rebuild Emacs.

 -- Function: purecopy object
     This function makes a copy in pure storage of OBJECT, and returns
     it.  It copies a string by simply making a new string with the same
     characters, but without text properties, in pure storage.  It
     recursively copies the contents of vectors and cons cells.  It does
     not make copies of other objects such as symbols, but just returns
     them unchanged.  It signals an error if asked to copy markers.

     This function is a no-op except while Emacs is being built and
     dumped; it is usually called only in preloaded Lisp files.

 -- Variable: pure-bytes-used
     The value of this variable is the number of bytes of pure storage
     allocated so far.  Typically, in a dumped Emacs, this number is
     very close to the total amount of pure storage available--if it were
     not, we would preallocate less.

 -- Variable: purify-flag
     This variable determines whether 'defun' should make a copy of the
     function definition in pure storage.  If it is non-'nil', then the
     function definition is copied into pure storage.

     This flag is 't' while loading all of the basic functions for
     building Emacs initially (allowing those functions to be shareable
     and non-collectible).  Dumping Emacs as an executable always writes
     'nil' in this variable, regardless of the value it actually has
     before and after dumping.

     You should not change this flag in a running Emacs.

==============================================================================
File: elisp.info,  Node: |Garbage_Collection|,  Next: |Stack_allocated_Objects|,  Prev: |Pure_Storage|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                            *Garbage_Collection*

E.3 Garbage Collection
----------------------

When a program creates a list or the user defines a new function (such
as by loading a library), that data is placed in normal storage.  If
normal storage runs low, then Emacs asks the operating system to
allocate more memory.  Different types of Lisp objects, such as symbols,
cons cells, small vectors, markers, etc., are segregated in distinct
blocks in memory.  (Large vectors, long strings, buffers and certain
other editing types, which are fairly large, are allocated in individual
blocks, one per object; small strings are packed into blocks of 8k
bytes, and small vectors are packed into blocks of 4k bytes).

   Beyond the basic vector, a lot of objects like markers, overlays and
buffers are managed as if they were vectors.  The corresponding C data
structures include the 'union vectorlike_header' field whose 'size'
member contains the subtype enumerated by 'enum pvec_type' and an
information about how many 'Lisp_Object' fields this structure contains
and what the size of the rest data is.  This information is needed to
calculate the memory footprint of an object, and used by the vector
allocation code while iterating over the vector blocks.

   It is quite common to use some storage for a while, then release it
by (for example) killing a buffer or deleting the last pointer to an
object.  Emacs provides a "garbage collector" to reclaim this abandoned
storage.  The garbage collector operates by finding and marking all Lisp
objects that are still accessible to Lisp programs.  To begin with, it
assumes all the symbols, their values and associated function
definitions, and any data presently on the stack, are accessible.  Any
objects that can be reached indirectly through other accessible objects
are also accessible.

   When marking is finished, all objects still unmarked are garbage.  No
matter what the Lisp program or the user does, it is impossible to refer
to them, since there is no longer a way to reach them.  Their space
might as well be reused, since no one will miss them.  The second
(sweep) phase of the garbage collector arranges to reuse them.

   The sweep phase puts unused cons cells onto a "free list" for future
allocation; likewise for symbols and markers.  It compacts the
accessible strings so they occupy fewer 8k blocks; then it frees the
other 8k blocks.  Unreachable vectors from vector blocks are coalesced
to create largest possible free areas; if a free area spans a complete
4k block, that block is freed.  Otherwise, the free area is recorded in
a free list array, where each entry corresponds to a free list of areas
of the same size.  Large vectors, buffers, and other large objects are
allocated and freed individually.

     Common Lisp note: Unlike other Lisps, GNU Emacs Lisp does not call
     the garbage collector when the free list is empty.  Instead, it
     simply requests the operating system to allocate more storage, and
     processing continues until 'gc-cons-threshold' bytes have been
     used.

     This means that you can make sure that the garbage collector will
     not run during a certain portion of a Lisp program by calling the
     garbage collector explicitly just before it (provided that portion
     of the program does not use so much space as to force a second
     garbage collection).

 -- Command: garbage-collect
     This command runs a garbage collection, and returns information on
     the amount of space in use.  (Garbage collection can also occur
     spontaneously if you use more than 'gc-cons-threshold' bytes of
     Lisp data since the previous garbage collection.)

     'garbage-collect' returns a list with information on amount of
     space in use, where each entry has the form '(NAME SIZE USED)' or
     '(NAME SIZE USED FREE)'.  In the entry, NAME is a symbol describing
     the kind of objects this entry represents, SIZE is the number of
     bytes used by each one, USED is the number of those objects that
     were found live in the heap, and optional FREE is the number of
     those objects that are not live but that Emacs keeps around for
     future allocations.  So an overall result is:

          ((conses CONS-SIZE USED-CONSES FREE-CONSES)
           (symbols SYMBOL-SIZE USED-SYMBOLS FREE-SYMBOLS)
           (strings STRING-SIZE USED-STRINGS FREE-STRINGS)
           (string-bytes BYTE-SIZE USED-BYTES)
           (vectors VECTOR-SIZE USED-VECTORS)
           (vector-slots SLOT-SIZE USED-SLOTS FREE-SLOTS)
           (floats FLOAT-SIZE USED-FLOATS FREE-FLOATS)
           (intervals INTERVAL-SIZE USED-INTERVALS FREE-INTERVALS)
           (buffers BUFFER-SIZE USED-BUFFERS)
           (heap UNIT-SIZE TOTAL-SIZE FREE-SIZE))

     Here is an example:

          (garbage-collect)
                => ((conses 16 49126 8058) (symbols 48 14607 0)
                           (strings 32 2942 2607)
                           (string-bytes 1 78607) (vectors 16 7247)
                           (vector-slots 8 341609 29474) (floats 8 71 102)
                           (intervals 56 27 26) (buffers 944 8)
                           (heap 1024 11715 2678))

     Below is a table explaining each element.  Note that last 'heap'
     entry is optional and present only if an underlying 'malloc'
     implementation provides 'mallinfo' function.

     CONS-SIZE
          Internal size of a cons cell, i.e., 'sizeof (struct
          Lisp_Cons)'.

     USED-CONSES
          The number of cons cells in use.

     FREE-CONSES
          The number of cons cells for which space has been obtained
          from the operating system, but that are not currently being
          used.

     SYMBOL-SIZE
          Internal size of a symbol, i.e., 'sizeof (struct
          Lisp_Symbol)'.

     USED-SYMBOLS
          The number of symbols in use.

     FREE-SYMBOLS
          The number of symbols for which space has been obtained from
          the operating system, but that are not currently being used.

     STRING-SIZE
          Internal size of a string header, i.e., 'sizeof (struct
          Lisp_String)'.

     USED-STRINGS
          The number of string headers in use.

     FREE-STRINGS
          The number of string headers for which space has been obtained
          from the operating system, but that are not currently being
          used.

     BYTE-SIZE
          This is used for convenience and equals to 'sizeof (char)'.

     USED-BYTES
          The total size of all string data in bytes.

     VECTOR-SIZE
          Size in bytes of a vector of length 1, including its header.

     USED-VECTORS
          The number of vector headers allocated from the vector blocks.

     SLOT-SIZE
          Internal size of a vector slot, always equal to 'sizeof
          (Lisp_Object)'.

     USED-SLOTS
          The number of slots in all used vectors.  Slot counts might
          include some or all overhead from vector headers, depending on
          the platform.

     FREE-SLOTS
          The number of free slots in all vector blocks.

     FLOAT-SIZE
          Internal size of a float object, i.e., 'sizeof (struct
          Lisp_Float)'.  (Do not confuse it with the native platform
          'float' or 'double'.)

     USED-FLOATS
          The number of floats in use.

     FREE-FLOATS
          The number of floats for which space has been obtained from
          the operating system, but that are not currently being used.

     INTERVAL-SIZE
          Internal size of an interval object, i.e., 'sizeof (struct
          interval)'.

     USED-INTERVALS
          The number of intervals in use.

     FREE-INTERVALS
          The number of intervals for which space has been obtained from
          the operating system, but that are not currently being used.

     BUFFER-SIZE
          Internal size of a buffer, i.e., 'sizeof (struct buffer)'.
          (Do not confuse with the value returned by 'buffer-size'
          function.)

     USED-BUFFERS
          The number of buffer objects in use.  This includes killed
          buffers invisible to users, i.e., all buffers in 'all_buffers'
          list.

     UNIT-SIZE
          The unit of heap space measurement, always equal to 1024
          bytes.

     TOTAL-SIZE
          Total heap size, in UNIT-SIZE units.

     FREE-SIZE
          Heap space which is not currently used, in UNIT-SIZE units.

     If there was overflow in pure space (*note Pure Storage::), and
     Emacs was dumped using the (now obsolete) 'unexec' method (*note
     Building Emacs::), then 'garbage-collect' returns 'nil', because a
     real garbage collection cannot be done in that case.

 -- User Option: garbage-collection-messages
     If this variable is non-'nil', Emacs displays a message at the
     beginning and end of garbage collection.  The default value is
     'nil'.

 -- Variable: post-gc-hook
     This is a normal hook that is run at the end of garbage collection.
     Garbage collection is inhibited while the hook functions run, so be
     careful writing them.

 -- User Option: gc-cons-threshold
     The value of this variable is the number of bytes of storage that
     must be allocated for Lisp objects after one garbage collection in
     order to trigger another garbage collection.  You can use the
     result returned by 'garbage-collect' to get an information about
     size of the particular object type; space allocated to the contents
     of buffers does not count.

     The initial threshold value is 'GC_DEFAULT_THRESHOLD', defined in
     'alloc.c'.  Since it's defined in 'word_size' units, the value is
     400,000 for the default 32-bit configuration and 800,000 for the
     64-bit one.  If you specify a larger value, garbage collection will
     happen less often.  This reduces the amount of time spent garbage
     collecting, but increases total memory use.  You may want to do
     this when running a program that creates lots of Lisp data.

     You can make collections more frequent by specifying a smaller
     value, down to 1/10th of 'GC_DEFAULT_THRESHOLD'.  A value less than
     this minimum will remain in effect only until the subsequent
     garbage collection, at which time 'garbage-collect' will set the
     threshold back to the minimum.

 -- User Option: gc-cons-percentage
     The value of this variable specifies the amount of consing before a
     garbage collection occurs, as a fraction of the current heap size.
     This criterion and 'gc-cons-threshold' apply in parallel, and
     garbage collection occurs only when both criteria are satisfied.

     As the heap size increases, the time to perform a garbage
     collection increases.  Thus, it can be desirable to do them less
     frequently in proportion.

   Control over the garbage collector via 'gc-cons-threshold' and
'gc-cons-percentage' is only approximate.  Although Emacs checks for
threshold exhaustion regularly, for efficiency reasons it does not do so
immediately after every change to the heap or to 'gc-cons-threshold' or
'gc-cons-percentage', so exhausting the threshold does not immediately
trigger garbage collection.  Also, for efficiency in threshold
calculations Emacs approximates the heap size, which counts the bytes
used by currently-accessible objects in the heap.

   The value returned by 'garbage-collect' describes the amount of
memory used by Lisp data, broken down by data type.  By contrast, the
function 'memory-limit' provides information on the total amount of
memory Emacs is currently using.

 -- Function: memory-limit
     This function returns an estimate of the total amount of bytes of
     virtual memory that Emacs is currently using, divided by 1024.  You
     can use this to get a general idea of how your actions affect the
     memory usage.

 -- Variable: memory-full
     This variable is 't' if Emacs is nearly out of memory for Lisp
     objects, and 'nil' otherwise.

 -- Function: memory-use-counts
     This returns a list of numbers that count the number of objects
     created in this Emacs session.  Each of these counters increments
     for a certain kind of object.  See the documentation string for
     details.

 -- Function: memory-info
     This functions returns an amount of total system memory and how
     much of it is free.  On an unsupported system, the value may be
     'nil'.

 -- Variable: gcs-done
     This variable contains the total number of garbage collections done
     so far in this Emacs session.

 -- Variable: gc-elapsed
     This variable contains the total number of seconds of elapsed time
     during garbage collection so far in this Emacs session, as a
     floating-point number.

==============================================================================
File: elisp.info,  Node: |Stack_allocated_Objects|,  Next: |Memory_Usage|,  Prev: |Garbage_Collection|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                       *Stack_allocated_Objects*

E.4 Stack-allocated Objects
---------------------------

The garbage collector described above is used to manage data visible
from Lisp programs, as well as most of the data internally used by the
Lisp interpreter.  Sometimes it may be useful to allocate temporary
internal objects using the C stack of the interpreter.  This can help
performance, as stack allocation is typically faster than using heap
memory to allocate and the garbage collector to free.  The downside is
that using such objects after they are freed results in undefined
behavior, so uses should be well thought out and carefully debugged by
using the 'GC_CHECK_MARKED_OBJECTS' feature (see 'src/alloc.c').  In
particular, stack-allocated objects should never be made visible to user
Lisp code.

   Currently, cons cells and strings can be allocated this way.  This is
implemented by C macros like 'AUTO_CONS' and 'AUTO_STRING' that define a
named 'Lisp_Object' with block lifetime.  These objects are not freed by
the garbage collector; instead, they have automatic storage duration,
i.e., they are allocated like local variables and are automatically
freed at the end of execution of the C block that defined the object.

   For performance reasons, stack-allocated strings are limited to ASCII
characters, and many of these strings are immutable, i.e., calling
'ASET' on them produces undefined behavior.

==============================================================================
File: elisp.info,  Node: |Memory_Usage|,  Next: |C_Dialect|,  Prev: |Stack_allocated_Objects|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                                  *Memory_Usage*

E.5 Memory Usage
----------------

These functions and variables give information about the total amount of
memory allocation that Emacs has done, broken down by data type.  Note
the difference between these and the values returned by
'garbage-collect'; those count objects that currently exist, but these
count the number or size of all allocations, including those for objects
that have since been freed.

 -- Variable: cons-cells-consed
     The total number of cons cells that have been allocated so far in
     this Emacs session.

 -- Variable: floats-consed
     The total number of floats that have been allocated so far in this
     Emacs session.

 -- Variable: vector-cells-consed
     The total number of vector cells that have been allocated so far in
     this Emacs session.  This includes vector-like objects such as
     markers and overlays, plus certain objects not visible to users.

 -- Variable: symbols-consed
     The total number of symbols that have been allocated so far in this
     Emacs session.

 -- Variable: string-chars-consed
     The total number of string characters that have been allocated so
     far in this session.

 -- Variable: intervals-consed
     The total number of intervals that have been allocated so far in
     this Emacs session.

 -- Variable: strings-consed
     The total number of strings that have been allocated so far in this
     Emacs session.

==============================================================================
File: elisp.info,  Node: |C_Dialect|,  Next: |Writing_Emacs_Primitives|,  Prev: |Memory_Usage|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                                     *C_Dialect*

vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
