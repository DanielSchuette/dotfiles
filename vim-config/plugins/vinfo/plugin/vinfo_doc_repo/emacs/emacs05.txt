
default-A
default-B
     The difference is showing the A or the B state by default, because
     you haven't made a choice.  All differences start in the default-A
     state (and thus the merge buffer is a copy of the A buffer), except
     those for which one alternative is preferred (see below).

     When you select a difference, its state changes from default-A or
     default-B to plain A or B.  Thus, the selected difference never has
     state default-A or default-B, and these states are never displayed
     in the mode line.

     The command 'd a' chooses default-A as the default state, and 'd b'
     chooses default-B.  This chosen default applies to all differences
     that you have never selected and for which no alternative is
     preferred.  If you are moving through the merge sequentially, the
     differences you haven't selected are those following the selected
     one.  Thus, while moving sequentially, you can effectively make the
     A version the default for some sections of the merge buffer and the
     B version the default for others by using 'd a' and 'd b' between
     sections.

prefer-A
prefer-B
     The difference is showing the A or B state because it is
     "preferred".  This means that you haven't made an explicit choice,
     but one alternative seems likely to be right because the other
     alternative agrees with the common ancestor.  Thus, where the A
     buffer agrees with the common ancestor, the B version is preferred,
     because chances are it is the one that was actually changed.

     These two states are displayed in the mode line as 'A*' and 'B*'.

combined
     The difference is showing a combination of the A and B states, as a
     result of the 'x c' or 'x C' commands.

     Once a difference is in this state, the 'a' and 'b' commands don't
     do anything to it unless you give them a numeric argument.

     The mode line displays this state as 'comb'.

==============================================================================
File: emacs.info,  Node: |Merge_Commands|,  Next: |Exiting_Emerge|,  Prev: |State_of_Difference|,  Up: |Emerge|
==============================================================================

                                                                *Merge_Commands*

28.6.4 Merge Commands
---------------------

Here are the Merge commands for Fast mode; in Edit mode, precede them
with 'C-c C-c':

'p'
     Select the previous difference.

'n'
     Select the next difference.

'a'
     Choose the A version of this difference.

'b'
     Choose the B version of this difference.

'C-u N j'
     Select difference number N.

'.'
     Select the difference containing point.

'q'
     Quit--finish the merge.

'C-]'
     Abort--exit merging and do not save the output.

'f'
     Go into Fast mode.  (In Edit mode, this is actually 'C-c C-c f'.)

'e'
     Go into Edit mode.

'l'
     Recenter (like 'C-l') all three windows.  With an argument,
     reestablish the default three-window display.

'-'
     Specify part of a prefix numeric argument.

'DIGIT'
     Also specify part of a prefix numeric argument.

'd a'
     Choose the A version as the default from here down in the merge
     buffer.

'd b'
     Choose the B version as the default from here down in the merge
     buffer.

'c a'
     Copy the A version of this difference into the kill ring.

'c b'
     Copy the B version of this difference into the kill ring.

'i a'
     Insert the A version of this difference at point.

'i b'
     Insert the B version of this difference at point.

'm'
     Put point and mark around the difference.

'^'
     Scroll all three windows down (like 'M-v').

'v'
     Scroll all three windows up (like 'C-v').

'<'
     Scroll all three windows left (like 'C-x <').

'>'
     Scroll all three windows right (like 'C-x >').

'|'
     Reset horizontal scroll on all three windows.

'x 1'
     Shrink the merge window to one line.  (Use 'C-u l' to restore it to
     full size.)

'x c'
     Combine the two versions of this difference (*note Combining in
     Emerge::).

'x f'
     Show the names of the files/buffers Emerge is operating on, in a
     Help window.  (Use 'C-u l' to restore windows.)

'x j'
     Join this difference with the following one.  ('C-u x j' joins this
     difference with the previous one.)

'x s'
     Split this difference into two differences.  Before you use this
     command, position point in each of the three buffers at the place
     where you want to split the difference.

'x t'
     Trim identical lines off the top and bottom of the difference.
     Such lines occur when the A and B versions are identical but differ
     from the ancestor version.

==============================================================================
File: emacs.info,  Node: |Exiting_Emerge|,  Next: |Combining_in_Emerge|,  Prev: |Merge_Commands|,  Up: |Emerge|
==============================================================================

                                                                *Exiting_Emerge*

28.6.5 Exiting Emerge
---------------------

The 'q' command ('emerge-quit') finishes the merge, storing the results
into the output file if you specified one.  It restores the A and B
buffers to their proper contents, or kills them if they were created by
Emerge and you haven't changed them.  It also disables the Emerge
commands in the merge buffer, since executing them later could damage
the contents of the various buffers.

   'C-]' aborts the merge.  This means exiting without writing the
output file.  If you didn't specify an output file, then there is no
real difference between aborting and finishing the merge.

   If the Emerge command was called from another Lisp program, then its
return value is 't' for successful completion, or 'nil' if you abort.

==============================================================================
File: emacs.info,  Node: |Combining_in_Emerge|,  Next: |Fine_Points_of_Emerge|,  Prev: |Exiting_Emerge|,  Up: |Emerge|
==============================================================================

                                                           *Combining_in_Emerge*

28.6.6 Combining the Two Versions
---------------------------------

Sometimes you want to keep _both_ alternatives for a particular
difference.  To do this, use 'x c', which edits the merge buffer like
this:

     #ifdef NEW
     VERSION FROM B BUFFER
     #else /* not NEW */
     VERSION FROM A BUFFER
     #endif /* not NEW */

While this example shows C preprocessor conditionals delimiting the two
alternative versions, you can specify the strings to use by setting the
variable 'emerge-combine-versions-template' to a string of your choice.
In the string, '%a' says where to put version A, and '%b' says where to
put version B.  The default setting, which produces the results shown
above, looks like this:

     "#ifdef NEW\n%b#else /* not NEW */\n%a#endif /* not NEW */\n"

==============================================================================
File: emacs.info,  Node: |Fine_Points_of_Emerge|,  Prev: |Combining_in_Emerge|,  Up: |Emerge|
==============================================================================

                                                         *Fine_Points_of_Emerge*

28.6.7 Fine Points of Emerge
----------------------------

During the merge, you mustn't try to edit the A and B buffers yourself.
Emerge modifies them temporarily, but ultimately puts them back the way
they were.

   You can have any number of merges going at once--just don't use any
one buffer as input to more than one merge at once, since the temporary
changes made in these buffers would get in each other's way.

   Starting Emerge can take a long time because it needs to compare the
files fully.  Emacs can't do anything else until 'diff' finishes.
Perhaps in the future someone will change Emerge to do the comparison in
the background when the input files are large--then you could keep on
doing other things with Emacs until Emerge is ready to accept commands.

   After setting up the merge, Emerge runs the hook
'emerge-startup-hook'.  *Note Hooks::.

==============================================================================
File: emacs.info,  Node: |Abbrevs|,  Next: |Dired|,  Prev: |Maintaining|,  Up: |Top|
==============================================================================

                                                                       *Abbrevs*

29 Abbrevs
==========

A defined "abbrev" is a word which "expands", if you insert it, into
some different text.  Abbrevs are defined by the user to expand in
specific ways.  For example, you might define 'foo' as an abbrev
expanding to 'find outer otter'.  Then you could insert 'find outer
otter ' into the buffer by typing 'f o o <SPC>'.

   A second kind of abbreviation facility is called "dynamic abbrev
expansion".  You use dynamic abbrev expansion with an explicit command
to expand the letters in the buffer before point by looking for other
words in the buffer that start with those letters.  *Note Dynamic
Abbrevs::.

   A third kind, "hippie expansion", generalizes abbreviation expansion.
*Note Hippie Expansion: (autotype)Hippie Expand.

MENU

* |Abbrev_Concepts|::   Fundamentals of defined abbrevs.
* |Defining_Abbrevs|::  Defining an abbrev, so it will expand when typed.
* |Expanding_Abbrevs|:: Controlling expansion: prefixes, canceling expansion.
* |Editing_Abbrevs|::   Viewing or editing the entire list of defined abbrevs.
* |Saving_Abbrevs|::    Saving the entire list of abbrevs for another session.
* |Dynamic_Abbrevs|::   Abbreviations for words already in the buffer.
* |Dabbrev_Customization|:: What is a word, for dynamic abbrevs.  Case handling.

==============================================================================
File: emacs.info,  Node: |Abbrev_Concepts|,  Next: |Defining_Abbrevs|,  Up: |Abbrevs|
==============================================================================

                                                               *Abbrev_Concepts*

29.1 Abbrev Concepts
--------------------

An "abbrev" is a word that has been defined to "expand" into a specified
"expansion".  When you insert a word-separator character following the
abbrev, that expands the abbrev--replacing the abbrev with its expansion.
For example, if 'foo' is defined as an abbrev expanding to 'find outer
otter', then typing 'f o o .' will insert 'find outer otter.'.

   Abbrevs expand only when Abbrev mode, a buffer-local minor mode, is
enabled.  Disabling Abbrev mode does not cause abbrev definitions to be
forgotten, but they do not expand until Abbrev mode is enabled again.
The command 'M-x abbrev-mode' toggles Abbrev mode; with a numeric
argument, it turns Abbrev mode on if the argument is positive, off
otherwise.  *Note Minor Modes::.

   Abbrevs can have "mode-specific" definitions, active only in one
major mode.  Abbrevs can also have "global" definitions that are active
in all major modes.  The same abbrev can have a global definition and
various mode-specific definitions for different major modes.  A
mode-specific definition for the current major mode overrides a global
definition.

   You can define abbrevs interactively during the editing session,
irrespective of whether Abbrev mode is enabled.  You can also save lists
of abbrev definitions in files, which you can then reload for use in
later sessions.

==============================================================================
File: emacs.info,  Node: |Defining_Abbrevs|,  Next: |Expanding_Abbrevs|,  Prev: |Abbrev_Concepts|,  Up: |Abbrevs|
==============================================================================

                                                              *Defining_Abbrevs*

29.2 Defining Abbrevs
---------------------

'C-x a g'
     Define an abbrev, using one or more words before point as its
     expansion ('add-global-abbrev').

'C-x a l'
     Similar, but define an abbrev specific to the current major mode
     ('add-mode-abbrev').

'C-x a i g'
     Define a word in the buffer as an abbrev
     ('inverse-add-global-abbrev').

'C-x a i l'
     Define a word in the buffer as a mode-specific abbrev
     ('inverse-add-mode-abbrev').

'M-x define-global-abbrev <RET> ABBREV <RET> EXP <RET>'
     Define ABBREV as an abbrev expanding into EXP.

'M-x define-mode-abbrev <RET> ABBREV <RET> EXP <RET>'
     Define ABBREV as a mode-specific abbrev expanding into EXP.

'M-x kill-all-abbrevs'
     Discard all abbrev definitions, leaving a blank slate.

   The usual way to define an abbrev is to enter the text you want the
abbrev to expand to, position point after it, and type 'C-x a g'
('add-global-abbrev').  This reads the abbrev itself using the
minibuffer, and then defines it as an abbrev for one or more words
before point.  Use a numeric argument to say how many words before point
should be taken as the expansion.  For example, to define the abbrev
'foo' as mentioned above, insert the text 'find outer otter' and then
type 'C-u 3 C-x a g f o o <RET>'.

   An argument of zero to 'C-x a g' means to use the contents of the
region as the expansion of the abbrev being defined.

   The command 'C-x a l' ('add-mode-abbrev') is similar, but defines a
mode-specific abbrev for the current major mode.  The arguments work the
same as for 'C-x a g'.

   'C-x a i g' ('inverse-add-global-abbrev') and 'C-x a i l'
('inverse-add-mode-abbrev') perform the opposite task: if the abbrev
text is already in the buffer, you use these commands to define an
abbrev by specifying the expansion in the minibuffer.  These commands
will expand the abbrev text used for the definition.

   You can define an abbrev without inserting either the abbrev or its
expansion in the buffer using the command 'define-global-abbrev'.  It
reads two arguments--the abbrev, and its expansion.  The command
'define-mode-abbrev' does likewise for a mode-specific abbrev.

   To change the definition of an abbrev, just make a new definition.
When an abbrev has a prior definition, the abbrev definition commands
ask for confirmation before replacing it.

   To remove an abbrev definition, give a negative argument to the
abbrev definition command: 'C-u - C-x a g' or 'C-u - C-x a l'.  The
former removes a global definition, while the latter removes a
mode-specific definition.  'M-x kill-all-abbrevs' removes all abbrev
definitions, both global and local.

==============================================================================
File: emacs.info,  Node: |Expanding_Abbrevs|,  Next: |Editing_Abbrevs|,  Prev: |Defining_Abbrevs|,  Up: |Abbrevs|
==============================================================================

                                                             *Expanding_Abbrevs*

29.3 Controlling Abbrev Expansion
---------------------------------

When Abbrev mode is enabled, an abbrev expands whenever it is present in
the buffer just before point and you type a self-inserting whitespace or
punctuation character (<SPC>, comma, etc.).  More precisely, any
character that is not a word constituent expands an abbrev, and any
word-constituent character can be part of an abbrev.  The most common
way to use an abbrev is to insert it and then insert a punctuation or
whitespace character to expand it.

   Abbrev expansion preserves case: 'foo' expands to 'find outer otter',
and 'Foo' to 'Find outer otter'.  'FOO' expands to 'Find Outer Otter' by
default, but if you change the variable 'abbrev-all-caps' to a non-'nil'
value, it expands to 'FIND OUTER OTTER'.

   These commands are used to control abbrev expansion:

'M-''
     Separate a prefix from a following abbrev to be expanded
     ('abbrev-prefix-mark').

'C-x a e'
     Expand the abbrev before point ('expand-abbrev').  This is
     effective even when Abbrev mode is not enabled.

'M-x unexpand-abbrev'
     Undo the expansion of the last expanded abbrev.

'M-x expand-region-abbrevs'
     Expand some or all abbrevs found in the region.

   You may wish to expand an abbrev and attach a prefix to the
expansion; for example, if 'cnst' expands into 'construction', you might
want to use it to enter 'reconstruction'.  It does not work to type
'recnst', because that is not necessarily a defined abbrev.  What you
can do is use the command 'M-'' ('abbrev-prefix-mark') in between the
prefix 're' and the abbrev 'cnst'.  First, insert 're'.  Then type
'M-''; this inserts a hyphen in the buffer to indicate that it has done
its work.  Then insert the abbrev 'cnst'; the buffer now contains
're-cnst'.  Now insert a non-word character to expand the abbrev 'cnst'
into 'construction'.  This expansion step also deletes the hyphen that
indicated 'M-'' had been used.  The result is the desired
'reconstruction'.

   If you actually want the text of the abbrev in the buffer, rather
than its expansion, you can accomplish this by inserting the following
punctuation with 'C-q'.  Thus, 'foo C-q ,' leaves 'foo,' in the buffer,
not expanding it.

   If you expand an abbrev by mistake, you can undo the expansion by
typing 'C-/' ('undo').  *Note Undo::.  This undoes the insertion of the
abbrev expansion and brings back the abbrev text.  If the result you
want is the terminating non-word character plus the unexpanded abbrev,
you must reinsert the terminating character, quoting it with 'C-q'.  You
can also use the command 'M-x unexpand-abbrev' to cancel the last
expansion without deleting the terminating character.

   'M-x expand-region-abbrevs' searches through the region for defined
abbrevs, and for each one found offers to replace it with its expansion.
This command is useful if you have typed in text using abbrevs but
forgot to turn on Abbrev mode first.  It may also be useful together
with a special set of abbrev definitions for making several global
replacements at once.  This command is effective even if Abbrev mode is
not enabled.

   The function 'expand-abbrev' performs the expansion by calling the
function that 'abbrev-expand-function' specifies.  By changing this
function you can make arbitrary changes to the abbrev expansion.  *Note
(elisp)Abbrev Expansion::.

==============================================================================
File: emacs.info,  Node: |Editing_Abbrevs|,  Next: |Saving_Abbrevs|,  Prev: |Expanding_Abbrevs|,  Up: |Abbrevs|
==============================================================================

                                                               *Editing_Abbrevs*

29.4 Examining and Editing Abbrevs
----------------------------------

'M-x list-abbrevs'
     Display a list of all abbrev definitions.  With a numeric argument,
     list only local abbrevs.

'M-x edit-abbrevs'
     Edit a list of abbrevs; you can add, alter or remove definitions.

   The output from 'M-x list-abbrevs' looks like this:

     VARIOUS OTHER TABLES...
     (lisp-mode-abbrev-table)
     "dk"          0    "define-key"
     (global-abbrev-table)
     "dfn"         0    "definition"

(Some blank lines of no semantic significance, and some other abbrev
tables, have been omitted.)

   A line containing a name in parentheses is the header for abbrevs in
a particular abbrev table; 'global-abbrev-table' contains all the global
abbrevs, and the other abbrev tables that are named after major modes
contain the mode-specific abbrevs.

   Within each abbrev table, each nonblank line defines one abbrev.  The
word at the beginning of the line is the abbrev.  The number that
follows is the number of times the abbrev has been expanded.  Emacs
keeps track of this to help you see which abbrevs you actually use, so
that you can eliminate those that you don't use often.  The string at
the end of the line is the expansion.

   Some abbrevs are marked with '(sys)'.  These "system abbrevs" (*note
(elisp)Abbrevs::) are pre-defined by various modes, and are not saved to
your abbrev file.  To disable a system abbrev, define an abbrev of the
same name that expands to itself, and save it to your abbrev file.

   'M-x edit-abbrevs' allows you to add, change or kill abbrev
definitions by editing a list of them in an Emacs buffer.  The list has
the same format described above.  The buffer of abbrevs is called
'Abbrevs', and is in Edit-Abbrevs mode.  Type 'C-c C-c' in this buffer
to install the abbrev definitions as specified in the buffer--and delete
any abbrev definitions not listed.

   The command 'edit-abbrevs' is actually the same as 'list-abbrevs'
except that it selects the buffer 'Abbrevs' whereas 'list-abbrevs'
merely displays it in another window.

==============================================================================
File: emacs.info,  Node: |Saving_Abbrevs|,  Next: |Dynamic_Abbrevs|,  Prev: |Editing_Abbrevs|,  Up: |Abbrevs|
==============================================================================

                                                                *Saving_Abbrevs*

29.5 Saving Abbrevs
-------------------

These commands allow you to keep abbrev definitions between editing
sessions.

'M-x write-abbrev-file <RET> FILE <RET>'
     Write a file FILE describing all defined abbrevs.

'M-x read-abbrev-file <RET> FILE <RET>'
     Read the file FILE and define abbrevs as specified therein.

'M-x define-abbrevs'
     Define abbrevs from definitions in current buffer.

'M-x insert-abbrevs'
     Insert all abbrevs and their expansions into current buffer.

   'M-x write-abbrev-file' reads a file name using the minibuffer and
then writes a description of all current abbrev definitions into that
file.  This is used to save abbrev definitions for use in a later
session.  The text stored in the file is a series of Lisp expressions
that, when executed, define the same abbrevs that you currently have.

   'M-x read-abbrev-file' reads a file name using the minibuffer and
then reads the file, defining abbrevs according to the contents of the
file.  The function 'quietly-read-abbrev-file' is similar except that it
does not display a message in the echo area; you cannot invoke it
interactively, and it is used primarily in your init file (*note Init
File::).  If either of these functions is called with 'nil' as the
argument, it uses the file given by the variable 'abbrev-file-name',
which is '~/.emacs.d/abbrev_defs' by default.  This is your standard
abbrev definition file, and Emacs loads abbrevs from it automatically
when it starts up.  (As an exception, Emacs does not load the abbrev
file when it is started in batch mode.  *Note Initial Options::, for a
description of batch mode.)

   Emacs will offer to save abbrevs automatically if you have changed
any of them, whenever it offers to save all files (for 'C-x s' or 'C-x
C-c').  It saves them in the file specified by 'abbrev-file-name'.  This
feature can be inhibited by setting the variable 'save-abbrevs' to
'nil'; setting it to 'silently' will save the abbrevs automatically
without asking.

   The commands 'M-x insert-abbrevs' and 'M-x define-abbrevs' are
similar to the previous commands but work on text in an Emacs buffer.
'M-x insert-abbrevs' inserts text into the current buffer after point,
describing all current abbrev definitions; 'M-x define-abbrevs' parses
the entire current buffer and defines abbrevs accordingly.

==============================================================================
File: emacs.info,  Node: |Dynamic_Abbrevs|,  Next: |Dabbrev_Customization|,  Prev: |Saving_Abbrevs|,  Up: |Abbrevs|
==============================================================================

                                                               *Dynamic_Abbrevs*

29.6 Dynamic Abbrev Expansion
-----------------------------

The abbrev facility described above operates automatically as you insert
text, but all abbrevs must be defined explicitly.  By contrast, "dynamic
abbrevs" allow the meanings of abbreviations to be determined
automatically from the contents of the buffer, but dynamic abbrev
expansion happens only when you request it explicitly.

'M-/'
     Expand the word in the buffer before point as a "dynamic abbrev",
     by searching for words starting with that abbreviation
     ('dabbrev-expand').

'C-M-/'
     Complete the word before point as a dynamic abbrev
     ('dabbrev-completion').

   For example, if the buffer contains 'does this follow ' and you type
'f o M-/', the effect is to insert 'follow' because that is the last
word in the buffer that starts with 'fo'.  A numeric argument to 'M-/'
says to take the second, third, etc. distinct expansion found looking
backward from point.  Repeating 'M-/' searches for an alternative
expansion by looking farther back.  After scanning all the text before
point, it searches the text after point.  The variable 'dabbrev-limit',
if non-'nil', specifies how far away in the buffer to search for an
expansion.

   After scanning the current buffer, 'M-/' normally searches other
buffers.  The variables 'dabbrev-check-all-buffers' and
'dabbrev-check-other-buffers' can be used to determine which other
buffers, if any, are searched.

   For finer control over which buffers to scan, customize the variables
'dabbrev-ignored-buffer-names' and 'dabbrev-ignored-buffer-regexps'.
The value of the former is a list of buffer names to skip.  The value of
the latter is a list of regular expressions; if a buffer's name matches
any of these regular expressions, dynamic abbrev expansion skips that
buffer.

   A negative argument to 'M-/', as in 'C-u - M-/', says to search first
for expansions after point, then other buffers, and consider expansions
before point only as a last resort.  If you repeat the 'M-/' to look for
another expansion, do not specify an argument.  Repeating 'M-/' cycles
through all the expansions after point and then the expansions before
point.

   After you have expanded a dynamic abbrev, you can copy additional
words that follow the expansion in its original context.  Simply type
'<SPC> M-/' for each additional word you want to copy.  The spacing and
punctuation between words is copied along with the words.

   You can control the way 'M-/' determines the word to expand and how
to expand it, see *note Dabbrev Customization::.

   The command 'C-M-/' ('dabbrev-completion') performs completion of a
dynamic abbrev.  Instead of trying the possible expansions one by one,
it finds all of them, then inserts the text that they have in common.
If they have nothing in common, 'C-M-/' displays a list of completions,
from which you can select a choice in the usual manner.  *Note
Completion::.

   Dynamic abbrev expansion is completely independent of Abbrev mode;
the expansion of a word with 'M-/' is completely independent of whether
it has a definition as an ordinary abbrev.

==============================================================================
File: emacs.info,  Node: |Dabbrev_Customization|,  Prev: |Dynamic_Abbrevs|,  Up: |Abbrevs|
==============================================================================

                                                         *Dabbrev_Customization*

29.7 Customizing Dynamic Abbreviation
-------------------------------------

Normally, dynamic abbrev expansion ignores case when searching for
expansions.  That is, the expansion need not agree in case with the word
you are expanding.

   This feature is controlled by the variable
'dabbrev-case-fold-search'.  If it is 't', case is ignored in this
search; if it is 'nil', the word and the expansion must match in case.
If the value is 'case-fold-search' (the default), then the variable
'case-fold-search' controls whether to ignore case while searching for
expansions (*note Lax Search::).

   Normally, dynamic abbrev expansion preserves the case pattern _of the
dynamic abbrev you are expanding_, by converting the expansion to that
case pattern.

   The variable 'dabbrev-case-replace' controls whether to preserve the
case pattern of the dynamic abbrev.  If it is 't', the dynamic abbrev's
case pattern is preserved in most cases; if it is 'nil', the expansion
is always copied verbatim.  If the value is 'case-replace' (the
default), then the variable 'case-replace' controls whether to copy the
expansion verbatim (*note Replacement and Lax Matches::).

   However, if the expansion contains a complex mixed case pattern, and
the dynamic abbrev matches this pattern as far as it goes, then the
expansion is always copied verbatim, regardless of those variables.
Thus, for example, if the buffer contains
'variableWithSillyCasePattern', and you type 'v a M-/', it copies the
expansion verbatim including its case pattern.

   The variable 'dabbrev-abbrev-char-regexp', if non-'nil', controls
which characters are considered part of a word, for dynamic expansion
purposes.  The regular expression must match just one character, never
two or more.  The same regular expression also determines which
characters are part of an expansion.  The (default) value 'nil' has a
special meaning: dynamic abbrevs (i.e. the word at point) are made of
word characters, but their expansions are looked for as sequences of
word and symbol characters.  This is generally appropriate for expanding
symbols in a program source and also for human-readable text in many
languages, but may not be what you want in a text buffer that includes
unusual punctuation characters; in that case, the value '"\\sw"' might
produce better results.

   In shell scripts and makefiles, a variable name is sometimes prefixed
with '$' and sometimes not.  Major modes for this kind of text can
customize dynamic abbrev expansion to handle optional prefixes by
setting the variable 'dabbrev-abbrev-skip-leading-regexp'.  Its value
should be a regular expression that matches the optional prefix that
dynamic abbrev expression should ignore.  The default is 'nil', which
means no characters should be skipped.

==============================================================================
File: emacs.info,  Node: |Dired|,  Next: |Calendar/Diary|,  Prev: |Abbrevs|,  Up: |Top|
==============================================================================

                                                                         *Dired*

30 Dired, the Directory Editor
==============================

Dired makes an Emacs buffer containing a listing of a directory, and
optionally some of its subdirectories as well.  You can use the normal
Emacs commands to move around in this buffer, and special Dired commands
to operate on the listed files.  Dired works with both local and remote
directories.

   The Dired buffer is normally read-only, and inserting text in it is
not allowed (however, the Wdired mode allows that, *note Wdired::).
Ordinary printing characters such as 'd' and 'x' are redefined for
special Dired commands.  Some Dired commands "mark" or "flag" the
"current file" (that is, the file on the current line); other commands
operate on the marked files or on the flagged files.  You first mark
certain files in order to operate on all of them with one command.

   The Dired-X package provides various extra features for Dired mode.
*Note Dired-X: (dired-x)Top.

   You can also view a list of files in a directory with 'C-x C-d'
('list-directory').  Unlike Dired, this command does not allow you to
operate on the listed files.  *Note Directories::.

MENU

* Enter: Dired Enter.         How to invoke Dired.
* Navigation: Dired Navigation.   Special motion commands in the Dired buffer.
* Deletion: Dired Deletion.   Deleting files with Dired.
* |Flagging_Many_Files|::       Flagging files based on their names.
* Visit: Dired Visiting.      Other file operations through Dired.
* |Marks_vs_Flags|::            Flagging for deletion vs marking.
* |Operating_on_Files|::        How to copy, rename, print, compress, etc.
                                either one file or several files.
* |Shell_Commands_in_Dired|::   Running a shell command on the marked files.
* |Transforming_File_Names|::   Using patterns to rename multiple files.
* |Comparison_in_Dired|::       Running 'diff' by way of Dired.
* |Subdirectories_in_Dired|::   Adding subdirectories to the Dired buffer.
* |Subdir_Switches|::           Subdirectory switches in Dired.
* |Subdirectory_Motion|::       Moving across subdirectories, and up and down.
* |Hiding_Subdirectories|::     Making subdirectories visible or invisible.
* Updating: Dired Updating.   Discarding lines for files of no interest.
* Find: Dired and Find.       Using 'find' to choose the files for Dired.
* |Wdired|::                    Operating on files by editing the Dired buffer.
* |Image_Dired|::               Viewing image thumbnails in Dired.
* Misc: Misc Dired Features.  Various other features.

==============================================================================
File: emacs.info,  Node: |Dired_Enter|,  Next: |Dired_Navigation|,  Up: |Dired|
==============================================================================

                                                                   *Dired_Enter*

30.1 Entering Dired
-------------------

To invoke Dired, type 'C-x d' ('dired').  This reads a directory's name
using the minibuffer, and opens a "Dired buffer" listing the files in
that directory.  You can also supply a wildcard file name pattern as the
minibuffer argument, in which case the Dired buffer lists all files
matching that pattern.  A wildcard may appear in the directory part as
well.  For instance,

     C-x d  ~/foo/*.el  <RET>
     C-x d  ~/foo//.el  <RET>

   The former lists all the files with extension '.el' in directory
'foo'.  The latter lists the files with extension '.el' in all the
subdirectories of 'foo'.

   The usual history and completion commands can be used in the
minibuffer; in particular, 'M-n' puts the name of the visited file (if
any) in the minibuffer (*note Minibuffer History::).

   You can also invoke Dired by giving 'C-x C-f' ('find-file') a
directory's name.

   The variable 'dired-listing-switches' specifies the options to give
to 'ls' for listing the directory; this string _must_ contain '-l'.  If
you use a prefix argument with the 'dired' command, you can specify the
'ls' switches with the minibuffer before you enter the directory
specification.  No matter how they are specified, the 'ls' switches can
include short options (that is, single characters) requiring no
arguments, and long options (starting with '--') whose arguments are
specified with '='.

   If your 'ls' program supports the '--dired' option, Dired
automatically passes it that option; this causes 'ls' to emit special
escape sequences for certain unusual file names, without which Dired
will not be able to parse those names.  The first time you run Dired in
an Emacs session, it checks whether 'ls' supports the '--dired' option
by calling it once with that option.  If the exit code is 0, Dired will
subsequently use the '--dired' option; otherwise it will not.  You can
inhibit this check by customizing the variable 'dired-use-ls-dired'.
The value 'unspecified' (the default) means to perform the check; any
other non-'nil' value means to use the '--dired' option; and 'nil' means
not to use the '--dired' option.

   On MS-Windows and MS-DOS systems, and also on some remote systems,
Emacs emulates 'ls'.  *Note ls in Lisp::, for options and peculiarities
of this emulation.

   To display the Dired buffer in another window, use 'C-x 4 d'
('dired-other-window').  'C-x 5 d' ('dired-other-frame') displays the
Dired buffer in a separate frame.

   Typing 'q' ('quit-window') buries the Dired buffer, and deletes its
window if the window was created just for that buffer.

==============================================================================
File: emacs.info,  Node: |Dired_Navigation|,  Next: |Dired_Deletion|,  Prev: |Dired_Enter|,  Up: |Dired|
==============================================================================

                                                              *Dired_Navigation*

30.2 Navigation in the Dired Buffer
-----------------------------------

All the usual Emacs cursor motion commands are available in Dired
buffers.  The keys 'C-n' and 'C-p' are redefined to run
'dired-next-line' and 'dired-previous-line', respectively, and they put
the cursor at the beginning of the file name on the line, rather than at
the beginning of the line.

   For extra convenience, <SPC> and 'n' in Dired are equivalent to
'C-n'.  'p' is equivalent to 'C-p'.  (Moving by lines is so common in
Dired that it deserves to be easy to type.)  <DEL> (move up and unflag)
is also often useful simply for moving up (*note Dired Deletion::).

   'j' ('dired-goto-file') prompts for a file name using the minibuffer,
and moves point to the line in the Dired buffer describing that file.

   'M-s f C-s' ('dired-isearch-filenames') performs a forward
incremental search in the Dired buffer, looking for matches only amongst
the file names and ignoring the rest of the text in the buffer.  'M-s f
M-C-s' ('dired-isearch-filenames-regexp') does the same, using a regular
expression search.  If you change the variable 'dired-isearch-filenames'
to 't', then the usual search commands also limit themselves to the file
names; for instance, 'C-s' behaves like 'M-s f C-s'.  If the value is
'dwim', then search commands match the file names only when point was on
a file name initially.  *Note Search::, for information about
incremental search.

   Some additional navigation commands are available when the Dired
buffer includes several directories.  *Note Subdirectory Motion::.

==============================================================================
File: emacs.info,  Node: |Dired_Deletion|,  Next: |Flagging_Many_Files|,  Prev: |Dired_Navigation|,  Up: |Dired|
==============================================================================

                                                                *Dired_Deletion*

30.3 Deleting Files with Dired
------------------------------

One of the most frequent uses of Dired is to first "flag" files for
deletion, then delete the files that were flagged.

'd'
     Flag this file for deletion ('dired-flag-file-deletion').
'u'
     Remove the deletion flag ('dired-unmark').
'<DEL>'
     Move point to previous line and remove the deletion flag on that
     line ('dired-unmark-backward').
'x'
     Delete files flagged for deletion ('dired-do-flagged-delete').

   You can flag a file for deletion by moving to the line describing the
file and typing 'd' ('dired-flag-file-deletion').  The deletion flag is
visible as a 'D' at the beginning of the line.  This command moves point
to the next line, so that repeated 'd' commands flag successive files.
A numeric prefix argument serves as a repeat count; a negative count
means to flag preceding files.

   If the region is active, the 'd' command flags all files in the
region for deletion; in this case, the command does not move point, and
ignores any prefix argument.

   The reason for flagging files for deletion, rather than deleting
files immediately, is to reduce the danger of deleting a file
accidentally.  Until you direct Dired to delete the flagged files, you
can remove deletion flags using the commands 'u' and <DEL>.  'u'
('dired-unmark') works just like 'd', but removes flags rather than
making flags.  <DEL> ('dired-unmark-backward') moves upward, removing
flags; it is like 'u' with argument -1.  A numeric prefix argument to
either command serves as a repeat count, with a negative count meaning
to unflag in the opposite direction.  If the region is active, these
commands instead unflag all files in the region, without moving point.

   To delete flagged files, type 'x' ('dired-do-flagged-delete').  This
command displays a list of all the file names flagged for deletion, and
requests confirmation with 'yes'.  If you confirm, Dired deletes the
flagged files, then deletes their lines from the text of the Dired
buffer.  The Dired buffer, with somewhat fewer lines, remains selected.

   If you answer 'no' or quit with 'C-g' when asked to confirm, you
return immediately to Dired, with the deletion flags still present in
the buffer, and no files actually deleted.

   You can delete empty directories just like other files, but normally
Dired cannot delete directories that are nonempty.  However, if the
variable 'dired-recursive-deletes' is non-'nil', then Dired is allowed
to delete nonempty directories including all their contents.  That can
be somewhat risky.  If the value of the variable is 'always', Dired will
delete nonempty directories recursively, which is even more risky.

   Even if you have set 'dired-recursive-deletes' to 'nil', you might
want sometimes to delete directories recursively without being asked for
confirmation for all of them.  For example, you may want that when you
have marked many directories for deletion and you are very sure that all
of them can safely be deleted.  For every nonempty directory you are
asked for confirmation to delete, if you answer 'all', then all the
remaining directories will be deleted without any further questions.

   If you change the variable 'delete-by-moving-to-trash' to 't', the
above deletion commands will move the affected files or directories into
the operating system's Trash, instead of deleting them outright.  *Note
Misc File Ops::.

   An alternative way of deleting files is to mark them with 'm' and
delete with 'D', see *note Operating on Files::.

==============================================================================
File: emacs.info,  Node: |Flagging_Many_Files|,  Next: |Dired_Visiting|,  Prev: |Dired_Deletion|,  Up: |Dired|
==============================================================================

                                                           *Flagging_Many_Files*

30.4 Flagging Many Files at Once
--------------------------------

The '#', '~', '.', '% &', and '% d' commands flag many files for
deletion, based on their file names:

'#'
     Flag all auto-save files (files whose names start and end with '#')
     for deletion (*note Auto Save::).

'~'
     Flag all backup files (files whose names end with '~') for deletion
     (*note Backup::).

'. (Period)'
     Flag excess numeric backup files for deletion.  The oldest and
     newest few backup files of any one file are exempt; the middle ones
     are flagged.

'% &'
     Flag for deletion all files with certain kinds of names which
     suggest you could easily create those files again.

'% d REGEXP <RET>'
     Flag for deletion all files whose names match the regular
     expression REGEXP.

   '#' ('dired-flag-auto-save-files') flags all files whose names look
like auto-save files--that is, files whose names begin and end with '#'.
*Note Auto Save::.

   '~' ('dired-flag-backup-files') flags all files whose names say they
are backup files--that is, files whose names end in '~'.  *Note Backup::.

   '.' (period, 'dired-clean-directory') flags just some of the backup
files for deletion: all but the oldest few and newest few backups of any
one file.  Normally, the number of newest versions kept for each file is
given by the variable 'dired-kept-versions' (_not_ 'kept-new-versions';
that applies only when saving).  The number of oldest versions to keep
is given by the variable 'kept-old-versions'.

   Period with a positive numeric argument, as in 'C-u 3 .', specifies
the number of newest versions to keep, overriding 'dired-kept-versions'.
A negative numeric argument overrides 'kept-old-versions', using minus
the value of the argument to specify the number of oldest versions of
each file to keep.

   '% &' ('dired-flag-garbage-files') flags files whose names match the
regular expression specified by the variable
'dired-garbage-files-regexp'.  By default, this matches certain files
produced by TeX, '.bak' files, and the '.orig' and '.rej' files produced
by 'patch'.

   '% d' flags all files whose names match a specified regular
expression ('dired-flag-files-regexp').  Only the non-directory part of
the file name is used in matching.  You can use '^' and '$' to anchor
matches.  You can exclude certain subdirectories from marking by hiding
them while you use '% d'.  *Note Hiding Subdirectories::.

==============================================================================
File: emacs.info,  Node: |Dired_Visiting|,  Next: |Marks_vs_Flags|,  Prev: |Flagging_Many_Files|,  Up: |Dired|
==============================================================================

                                                                *Dired_Visiting*

30.5 Visiting Files in Dired
----------------------------

There are several Dired commands for visiting or examining the files
listed in the Dired buffer.  All of them apply to the current line's
file; if that file is really a directory, these commands invoke Dired on
that subdirectory (making a separate Dired buffer).

'f'
     Visit the file described on the current line, like typing 'C-x C-f'
     and supplying that file name ('dired-find-file').  *Note
     Visiting::.

'<RET>'
'e'
     Equivalent to 'f'.

'o'
     Like 'f', but uses another window to display the file's buffer
     ('dired-find-file-other-window').  The Dired buffer remains visible
     in the first window.  This is like using 'C-x 4 C-f' to visit the
     file.  *Note Windows::.

'C-o'
     Visit the file described on the current line, and display the
     buffer in another window, but do not select that window
     ('dired-display-file').

'mouse-1'
'mouse-2'
     Visit the file whose name you clicked on
     ('dired-mouse-find-file-other-window').  This uses another window
     to display the file, like the 'o' command.

'v'
     View the file described on the current line, with View mode
     ('dired-view-file').  View mode provides convenient commands to
     navigate the buffer but forbids changing it; *Note View Mode::.

'^'
     Visit the parent directory of the current directory
     ('dired-up-directory').  This is equivalent to moving to the line
     for '..' and typing 'f' there.

==============================================================================
File: emacs.info,  Node: |Marks_vs_Flags|,  Next: |Operating_on_Files|,  Prev: |Dired_Visiting|,  Up: |Dired|
==============================================================================

                                                                *Marks_vs_Flags*

30.6 Dired Marks vs. Flags
--------------------------

Instead of flagging a file with 'D', you can "mark" the file with some
other character (usually '*').  Most Dired commands to operate on files
use the files marked with '*'.  The only command that operates on
flagged files is 'x', which deletes them.

   Here are some commands for marking with '*', for unmarking, and for
operating on marks.  (*Note Dired Deletion::, for commands to flag and
unflag files.)

'm'
'* m'
     Mark the current file with '*' ('dired-mark').  If the region is
     active, mark all files in the region instead; otherwise, if a
     numeric argument N is supplied, mark the next N files instead,
     starting with the current file (if N is negative, mark the previous
     -N files).  If invoked on a subdirectory header line (*note
     Subdirectories in Dired::), this command marks all the files in
     that subdirectory.

'* N'
     Report what the number and size of the marked files are
     ('dired-number-of-marked-files').

'* *'
     Mark all executable files with '*' ('dired-mark-executables').
     With a numeric argument, unmark all those files.

'* @'
     Mark all symbolic links with '*' ('dired-mark-symlinks').  With a
     numeric argument, unmark all those files.

'* /'
     Mark with '*' all files which are directories, except for '.' and
     '..' ('dired-mark-directories').  With a numeric argument, unmark
     all those files.

'* s'
     Mark all the files in the current subdirectory, aside from '.' and
     '..' ('dired-mark-subdir-files').

'u'
'* u'
     Remove any mark on this line ('dired-unmark').  If the region is
     active, unmark all files in the region instead; otherwise, if a
     numeric argument N is supplied, unmark the next N files instead,
     starting with the current file (if N is negative, unmark the
     previous -N files).

'<DEL>'
'* <DEL>'
     Move point to previous line and remove any mark on that line
     ('dired-unmark-backward').  If the region is active, unmark all
     files in the region instead; otherwise, if a numeric argument N is
     supplied, unmark the N preceding files instead, starting with the
     current file (if N is negative, unmark the next -N files).

'* !'
'U'
     Remove all marks from all the files in this Dired buffer
     ('dired-unmark-all-marks').

'* ? MARKCHAR'
'M-<DEL>'
     Remove all marks that use the character MARKCHAR
     ('dired-unmark-all-files').  If invoked with 'M-<DEL>', the command
     prompts for MARKCHAR.  That MARKCHAR is a single character--do not
     use <RET> to terminate it.  See the description of the '* c'
     command below, which lets you replace one mark character with
     another.

     With a numeric argument, this command queries about each marked
     file, asking whether to remove its mark.  You can answer 'y'
     meaning yes, 'n' meaning no, or '!' to remove the marks from the
     remaining files without asking about them.

'* C-n'
'M-}'
     Move down to the next marked file ('dired-next-marked-file').  A
     file is "marked" if it has any kind of mark.

'* C-p'
'M-{'
     Move up to the previous marked file ('dired-prev-marked-file').

't'
'* t'
     Toggle all marks ('dired-toggle-marks'): files marked with '*'
     become unmarked, and unmarked files are marked with '*'.  Files
     marked in any other way are not affected.

'* c OLD-MARKCHAR NEW-MARKCHAR'
     Replace all marks that use the character OLD-MARKCHAR with marks
     that use the character NEW-MARKCHAR ('dired-change-marks').  This
     command is the primary way to create or use marks other than '*' or
     'D'.  The arguments are single characters--do not use <RET> to
     terminate them.

     You can use almost any character as a mark character by means of
     this command, to distinguish various classes of files.  If
     OLD-MARKCHAR is a space (' '), then the command operates on all
     unmarked files; if NEW-MARKCHAR is a space, then the command
     unmarks the files it acts on.

     To illustrate the power of this command, here is how to put 'D'
     flags on all the files that have no marks, while unflagging all
     those that already have 'D' flags:

          * c D t  * c <SPC> D  * c t <SPC>

     This assumes that no files were already marked with 't'.

'% m REGEXP <RET>'
'* % REGEXP <RET>'
     Mark (with '*') all files whose names match the regular expression
     REGEXP ('dired-mark-files-regexp').  This command is like '% d',
     except that it marks files with '*' instead of flagging with 'D'.

     Only the non-directory part of the file name is used in matching.
     Use '^' and '$' to anchor matches.  You can exclude subdirectories
     by temporarily hiding them (*note Hiding Subdirectories::).

'% g REGEXP <RET>'
     Mark (with '*') all files whose _contents_ contain a match for the
     regular expression REGEXP ('dired-mark-files-containing-regexp').
     This command is like '% m', except that it searches the file
     contents instead of the file name.  Note that if a file is visited
     in an Emacs buffer, and 'dired-always-read-filesystem' is 'nil'
     (the default), this command will look in the buffer without
     revisiting the file, so the results might be inconsistent with the
     file on disk if its contents have changed since it was last
     visited.  If you don't want this, you may wish to revert the files
     you have visited in your buffers, or to turn on Auto-Revert mode in
     those buffers, before invoking this command.  *Note Reverting::.
     If you prefer that this command should always revisit the file,
     without you having to revert the file or enable Auto-Revert mode,
     you might want to set 'dired-always-read-filesystem' to non-'nil'.

'C-/'
'C-x u'
'C-_'
     Undo changes in the Dired buffer, such as adding or removing marks
     ('dired-undo').  _This command does not revert the actual file
     operations, nor recover lost files!_  It just undoes changes in the
     buffer itself.

     In some cases, using this after commands that operate on files can
     cause trouble.  For example, after renaming one or more files,
     'dired-undo' restores the original names in the Dired buffer, which
     gets the Dired buffer out of sync with the actual contents of the
     directory.

==============================================================================
File: emacs.info,  Node: |Operating_on_Files|,  Next: |Shell_Commands_in_Dired|,  Prev: |Marks_vs_Flags|,  Up: |Dired|
==============================================================================

                                                            *Operating_on_Files*

30.7 Operating on Files
-----------------------

This section describes the basic Dired commands to operate on one file
or several files.  All of these commands are capital letters; all of
them use the minibuffer, either to read an argument or to ask for
confirmation, before they act.  All of them let you specify the files to
manipulate in these ways:

   * If you give the command a numeric prefix argument N, it operates on
     the next N files, starting with the current file.  (If N is
     negative, the command operates on the -N files preceding the
     current line.)

   * Otherwise, if some files are marked with '*', the command operates
     on all those files.

   * Otherwise, the command operates on the current file only.

Certain other Dired commands, such as '!' and the '%' commands, use the
same conventions to decide which files to work on.

   Commands which ask for a destination directory, such as those which
copy and rename files or create links for them, try to guess the default
target directory for the operation.  Normally, they suggest the Dired
buffer's default directory, but if the option 'dired-dwim-target' is
non-'nil', and if there is another Dired buffer displayed in some
window, that other buffer's directory is suggested instead.  You can
customize 'dired-dwim-target' to prefer either the next window with a
Dired buffer, or the most recently used window with a Dired buffer, or
to use any other function.  When the value is a function, it will be
called with no arguments and is expected to return a list of directories
which will be used as defaults (i.e.  default target and "future
history").

   Here are the file-manipulating Dired commands that operate on files.

'C NEW <RET>'
     Copy the specified files ('dired-do-copy').  The argument NEW is
     the directory to copy into, or (if copying a single file) the new
     name.  This is like the shell command 'cp'.

     The option 'dired-create-destination-dirs' controls whether Dired
     should create non-existent directories in the destination while
     copying/renaming files.  The default value 'nil' means Dired never
     creates such missing directories; the value 'always', means Dired
     automatically creates them; the value 'ask' means Dired asks you
     for confirmation before creating them.

     If 'dired-copy-preserve-time' is non-'nil', then copying with this
     command preserves the modification time of the old file in the
     copy, like 'cp -p'.

     The variable 'dired-recursive-copies' controls whether to copy
     directories recursively (like 'cp -r').  The default is 'top',
     which means to ask before recursively copying a directory.

'D'
     Delete the specified files ('dired-do-delete').  This is like the
     shell command 'rm'.

     Like the other commands in this section, this command operates on
     the _marked_ files, or the next N files.  By contrast, 'x'
     ('dired-do-flagged-delete') deletes all "flagged" files.

'R NEW <RET>'
     Rename the specified files ('dired-do-rename').  If you rename a
     single file, the argument NEW is the new name of the file.  If you
     rename several files, the argument NEW is the directory into which
     to move the files (this is like the shell command 'mv').

     The option 'dired-create-destination-dirs' controls whether Dired
     should create non-existent directories in NEW.

     Dired automatically changes the visited file name of buffers
     associated with renamed files so that they refer to the new names.

     If the value of the variable 'dired-vc-rename-file' is non-'nil',
     files are renamed using the commands of the underlying VCS, via
     'vc-rename-file' (*note VC Delete/Rename::).

'H NEW <RET>'
     Make hard links to the specified files ('dired-do-hardlink').  This
     is like the shell command 'ln'.  The argument NEW is the directory
     to make the links in, or (if making just one link) the name to give
     the link.

'S NEW <RET>'
     Make symbolic links to the specified files ('dired-do-symlink').
     This is like 'ln -s'.  The argument NEW is the directory to make
     the links in, or (if making just one link) the name to give the
     link.

'M MODESPEC <RET>'
     Change the mode (also called "permission bits") of the specified
     files ('dired-do-chmod').  MODESPEC can be in octal or symbolic
     notation, like arguments handled by the 'chmod' program.

'G NEWGROUP <RET>'
     Change the group of the specified files to NEWGROUP
     ('dired-do-chgrp').

'O NEWOWNER <RET>'
     Change the owner of the specified files to NEWOWNER
     ('dired-do-chown').  (On most systems, only the superuser can do
     this.)

     The variable 'dired-chown-program' specifies the name of the
     program to use to do the work.  (This variable is necessary because
     different systems put 'chown' in different places).

'T TIMESTAMP <RET>'
     Touch the specified files ('dired-do-touch').  This means updating
     their modification times to the present time.  This is like the
     shell command 'touch'.

'P COMMAND <RET>'
     Print the specified files ('dired-do-print').  You must specify the
     command to print them with, but the minibuffer starts out with a
     suitable guess made using the variables 'lpr-command' and
     'lpr-switches' (the same variables that 'lpr-buffer' uses; *note
     Printing::).

'Z'
     Compress the specified files ('dired-do-compress').  If the file
     appears to be a compressed file already, uncompress it instead.
     Each marked file is compressed into its own archive; this uses the
     'gzip' program if it is available, otherwise it uses 'compress'.
     On a directory name, this command produces a compressed '.tar.gz'
     archive containing all of the directory's files, by running the
     'tar' command with output piped to 'gzip'.  To allow decompression
     of compressed directories, typing 'Z' on a '.tar.gz' or '.tgz'
     archive file unpacks all the files in the archive into a directory
     whose name is the archive name with the extension removed.

'c'
     Compress the specified files ('dired-do-compress-to') into a single
     archive anywhere on the file system.  The compression algorithm is
     determined by the extension of the archive, see
     'dired-compress-files-alist'.

':d'
     Decrypt the specified files ('epa-dired-do-decrypt').  *Note
     (epa)Dired integration::.

':v'
     Verify digital signatures on the specified files
     ('epa-dired-do-verify').  *Note (epa)Dired integration::.

':s'
     Digitally sign the specified files ('epa-dired-do-sign').  *Note
     (epa)Dired integration::.

':e'
     Encrypt the specified files ('epa-dired-do-encrypt').  *Note
     (epa)Dired integration::.

'L'
     Load the specified Emacs Lisp files ('dired-do-load').  *Note Lisp
     Libraries::.

'B'
     Byte compile the specified Emacs Lisp files
     ('dired-do-byte-compile').  *Note Byte Compilation: (elisp)Byte
     Compilation.

'A REGEXP <RET>'
     Search all the specified files for the regular expression REGEXP
     ('dired-do-find-regexp').

     This command is a variant of 'xref-find-references' (*note
     Identifier Search::), it displays the 'xref' buffer, where you
     can navigate between matches and display them as needed using the
     commands described in *note Xref Commands::.

     If any of the marked files are directories, then this command
     searches all of the files in those directories, and any of their
     subdirectories, recursively, except files whose names match
     'grep-find-ignored-files' and subdirectories whose names match
     'grep-find-ignored-directories'.

'Q REGEXP <RET> TO <RET>'
     Perform 'query-replace-regexp' on each of the specified files,
     replacing matches for REGEXP with the string TO
     ('dired-do-find-regexp-and-replace').

     This command is a variant of 'xref-query-replace-in-results'.  It
     presents an 'xref' buffer that lists all the matches of REGEXP,
     and you can use the special commands in that buffer (*note Xref
     Commands::).  In particular, if you exit the query replace loop,
     you can use 'r' in that buffer to replace more matches.  *Note
     Identifier Search::.

     Like with 'dired-do-find-regexp', if any of the marked files are
     directories, this command performs replacements in all of the files
     in those directories, and in any of their subdirectories,
     recursively, except for files whose names match
     'grep-find-ignored-files' and subdirectories whose names match
     'grep-find-ignored-directories'.

==============================================================================
File: emacs.info,  Node: |Shell_Commands_in_Dired|,  Next: |Transforming_File_Names|,  Prev: |Operating_on_Files|,  Up: |Dired|
==============================================================================

                                                       *Shell_Commands_in_Dired*

30.8 Shell Commands in Dired
----------------------------

The Dired command '!' ('dired-do-shell-command') reads a shell command
string in the minibuffer, and runs that shell command on one or more
files.  The files that the shell command operates on are determined in
the usual way for Dired commands (*note Operating on Files::).  The
command 'X' is a synonym for '!'.

   The command '&' ('dired-do-async-shell-command') does the same,
except that it runs the shell command asynchronously.  (You can also do
this with '!', by appending a '&' character to the end of the shell
command.)  When the command operates on more than one file, it runs
multiple parallel copies of the specified shell command, one for each
file.  As an exception, if the specified shell command ends in ';' or
';&', the shell command is run in the background on each file
sequentially; Emacs waits for each invoked shell command to terminate
before running the next one.

   For both '!' and '&', the working directory for the shell command is
the top-level directory of the Dired buffer.

   If you tell '!' or '&' to operate on more than one file, the shell
command string determines how those files are passed to the shell
command:

   * If you use '*' surrounded by whitespace in the command string, then
     the command runs just once, with the list of file names substituted
     for the '*'.  The order of file names is the order of appearance in
     the Dired buffer.

     Thus, '! tar cf foo.tar * <RET>' runs 'tar' on the entire list of
     file names, putting them into one tar file 'foo.tar'.

     If you want to use '*' as a shell wildcard with whitespace around
     it, write '*""'.  In the shell, this is equivalent to '*'; but
     since the '*' is not surrounded by whitespace, Dired does not treat
     it specially.

   * Otherwise, if the command string contains '?' surrounded by
     whitespace or '`?`', Emacs runs the shell command once _for each
     file_, substituting the current file name for '?' and '`?`' each
     time.  You can use both '?' and '`?`' more than once in the
     command; the same file name replaces each occurrence.  If you mix
     them with '*' the command signals an error.

   * If the command string contains neither '*' nor '?' nor '`?`', Emacs
     runs the shell command once for each file, adding the file name at
     the end.  For example, '! uudecode <RET>' runs 'uudecode' on each
     file.

   To iterate over the file names in a more complicated fashion, you
might prefer to use an explicit shell loop.  For example, here is how to
uuencode each file, making the output file name by appending '.uu' to
the input file name:

     for file in * ; do uuencode "$file" "$file" >"$file".uu; done

   The same example with '`?`' notation:
     uuencode ? ? > `?`.uu

   The '!' and '&' commands do not attempt to update the Dired buffer to
show new or modified files, because they don't know what files will be
changed.  Use the 'g' command to update the Dired buffer (*note Dired
Updating::).

   *Note Single Shell::, for information about running shell commands
outside Dired.

==============================================================================
File: emacs.info,  Node: |Transforming_File_Names|,  Next: |Comparison_in_Dired|,  Prev: |Shell_Commands_in_Dired|,  Up: |Dired|
==============================================================================

                                                       *Transforming_File_Names*

30.9 Transforming File Names in Dired
-------------------------------------

This section describes Dired commands which alter file names in a
systematic way.  Each command operates on some or all of the marked
files, using a new name made by transforming the existing name.

   Like the basic Dired file-manipulation commands (*note Operating on
Files::), the commands described here operate either on the next N
files, or on all files marked with '*', or on the current file.  (To
mark files, use the commands described in *note Marks vs Flags::.)

   All of the commands described in this section work _interactively_:
they ask you to confirm the operation for each candidate file.  Thus,
you can select more files than you actually need to operate on (e.g.,
with a regexp that matches many files), and then filter the selected
names by typing 'y' or 'n' when the command prompts for confirmation.

'% u'
     Rename each of the selected files to an upper-case name
     ('dired-upcase').  If the old file names are 'Foo' and 'bar', the
     new names are 'FOO' and 'BAR'.

'% l'
     Rename each of the selected files to a lower-case name
     ('dired-downcase').  If the old file names are 'Foo' and 'bar', the
     new names are 'foo' and 'bar'.

'% R FROM <RET> TO <RET>'
'% C FROM <RET> TO <RET>'
'% H FROM <RET> TO <RET>'
'% S FROM <RET> TO <RET>'
     These four commands rename, copy, make hard links and make soft
     links, in each case computing the new name by regular-expression
     substitution from the name of the old file.

   The four regular-expression substitution commands effectively perform
a search-and-replace on the selected file names.  They read two
arguments: a regular expression FROM, and a substitution pattern TO;
they match each old file name against FROM, and then replace the
matching part with TO.  You can use '\&' and '\DIGIT' in TO to refer to
all or part of what the pattern matched in the old file name, as in
'replace-regexp' (*note Regexp Replace::).  If the regular expression
matches more than once in a file name, only the first match is replaced.

   For example, '% R ^.*$ <RET> x-\& <RET>' renames each selected file
by prepending 'x-' to its name.  The inverse of this, removing 'x-' from
the front of each file name, is also possible: one method is '% R
^x-\(.*\)$ <RET> \1 <RET>'; another is '% R ^x- <RET> <RET>'.  (Use '^'
and '$' to anchor matches that should span the whole file name.)

   Normally, the replacement process does not consider the files'
directory names; it operates on the file name within the directory.  If
you specify a numeric argument of zero, then replacement affects the
entire absolute file name including directory name.  (A non-zero
argument specifies the number of files to operate on.)

   You may want to select the set of files to operate on using the same
regexp FROM that you will use to operate on them.  To do this, mark
those files with '% m FROM <RET>', then use the same regular expression
in the command to operate on the files.  To make this more convenient,
the '%' commands to operate on files use the last regular expression
specified in any '%' command as a default.

==============================================================================
File: emacs.info,  Node: |Comparison_in_Dired|,  Next: |Subdirectories_in_Dired|,  Prev: |Transforming_File_Names|,  Up: |Dired|
==============================================================================

                                                           *Comparison_in_Dired*

30.10 File Comparison with Dired
--------------------------------

The '=' ('dired-diff') command compares the current file (the file at
point) with another file (read using the minibuffer) using the 'diff'
program.  The file specified with the minibuffer is the first argument
of 'diff', and file at point is the second argument.  The output of the
'diff' program is shown in a buffer using Diff mode (*note Comparing
Files::).

   If the region is active, the default for the file read using the
minibuffer is the file at the mark (i.e., the ordinary Emacs mark, not a
Dired mark; *note Setting Mark::).  Otherwise, if the file at point has
a backup file (*note Backup::), that is the default.

   You could also compare files using 'ediff-files', see *note
(ediff)Major Entry Points::.

==============================================================================
File: emacs.info,  Node: |Subdirectories_in_Dired|,  Next: |Subdir_Switches|,  Prev: |Comparison_in_Dired|,  Up: |Dired|
==============================================================================

                                                       *Subdirectories_in_Dired*

30.11 Subdirectories in Dired
-----------------------------

A Dired buffer usually displays just one directory, but you can
optionally include its subdirectories as well.

   The simplest way to include multiple directories in one Dired buffer
is to specify the options '-lR' for running 'ls'.  (If you give a
numeric argument when you run Dired, then you can specify these options
in the minibuffer.)  That produces a recursive directory listing showing
all subdirectories at all levels.

   More often, you will want to show only specific subdirectories.  You
can do this with 'i' ('dired-maybe-insert-subdir'):

'i'
     Insert the contents of a subdirectory later in the buffer.

If you use this command on a line that describes a file which is a
directory, it inserts the contents of that directory into the same Dired
buffer, and moves there.  Inserted subdirectory contents follow the
top-level directory of the Dired buffer, just as they do in 'ls -lR'
output.

   If the subdirectory's contents are already present in the buffer, the
'i' command just moves to it.

   In either case, 'i' sets the Emacs mark before moving, so 'C-u
C-<SPC>' returns to your previous position in the Dired buffer (*note
Setting Mark::).  You can also use '^' to return to the parent directory
in the same Dired buffer (*note Dired Visiting::).

   Use the 'l' command ('dired-do-redisplay') to update the
subdirectory's contents, and use 'C-u k' on the subdirectory header line
to remove the subdirectory listing (*note Dired Updating::).  You can
also hide and show inserted subdirectories (*note Hiding
Subdirectories::).

==============================================================================
File: emacs.info,  Node: |Subdir_Switches|,  Next: |Subdirectory_Motion|,  Prev: |Subdirectories_in_Dired|,  Up: |Dired|
==============================================================================

                                                               *Subdir_Switches*

30.12 Subdirectory Switches in Dired
------------------------------------

You can insert subdirectories with specified 'ls' switches in Dired
buffers using 'C-u i'.  You can change the 'ls' switches of an already
inserted subdirectory at point using 'C-u l'.

   Dired preserves the switches if you revert the buffer.  Deleting a
subdirectory forgets about its switches.

   Using 'dired-undo' (*note Marks vs Flags::) to reinsert or delete
subdirectories that were inserted with explicit switches can bypass
Dired's machinery for remembering (or forgetting) switches.  Deleting a
subdirectory using 'dired-undo' does not forget its switches.  When
later reinserted using 'i', it will be reinserted using its old
switches.  Using 'dired-undo' to reinsert a subdirectory that was
deleted using the regular Dired commands (not 'dired-undo') will
originally insert it with its old switches.  Reverting the buffer,
however, will relist it using the buffer's default switches.  If any of
this yields problems, you can easily correct the situation using 'C-u i'
or 'C-u l'.

   Dired does not remember the 'R' switch.  Inserting a subdirectory
with switches that include the 'R' switch is equivalent to inserting
each of its subdirectories using all remaining switches.  For instance,
updating or killing a subdirectory that was inserted with the 'R' switch
will not update or kill its subdirectories.

   The buffer's default switches do not affect subdirectories that were
inserted using explicitly specified switches.  In particular, commands
such as 's' that change the buffer's switches do not affect such
subdirectories.  (They do, however, affect subdirectories without
explicitly assigned switches.)

   You can make Dired forget about all subdirectory switches and relist
all subdirectories with the buffer's default switches using 'M-x
dired-reset-subdir-switches'.  This also reverts the Dired buffer.

==============================================================================
File: emacs.info,  Node: |Subdirectory_Motion|,  Next: |Hiding_Subdirectories|,  Prev: |Subdir_Switches|,  Up: |Dired|
==============================================================================

                                                           *Subdirectory_Motion*

30.13 Moving Over Subdirectories
--------------------------------

When a Dired buffer lists subdirectories, you can use the page motion
commands 'C-x [' and 'C-x ]' to move by entire directories (*note
Pages::).

   The following commands move across, up and down in the tree of
directories within one Dired buffer.  They move to "directory header
lines", which are the lines that give a directory's name, at the
beginning of the directory's contents.

'C-M-n'
     Go to next subdirectory header line, regardless of level
     ('dired-next-subdir').

'C-M-p'
     Go to previous subdirectory header line, regardless of level
     ('dired-prev-subdir').

'C-M-u'
     Go up to the parent directory's header line ('dired-tree-up').

'C-M-d'
     Go down in the directory tree, to the first subdirectory's header
     line ('dired-tree-down').

'<'
     Move up to the previous directory-file line ('dired-prev-dirline').
     These lines are the ones that describe a directory as a file in its
     parent directory.

'>'
     Move down to the next directory-file line ('dired-next-dirline').

==============================================================================
File: emacs.info,  Node: |Hiding_Subdirectories|,  Next: |Dired_Updating|,  Prev: |Subdirectory_Motion|,  Up: |Dired|
==============================================================================

                                                         *Hiding_Subdirectories*

30.14 Hiding Subdirectories
---------------------------

"Hiding" a subdirectory means to make it invisible, except for its
header line.

'$'
     Hide or show the subdirectory that point is in, and move point to
     the next subdirectory ('dired-hide-subdir').  This is a toggle.  A
     numeric argument serves as a repeat count.

'M-$'
     Hide all subdirectories in this Dired buffer, leaving only their
     header lines ('dired-hide-all').  Or, if any subdirectory is
     currently hidden, make all subdirectories visible again.  You can
     use this command to get an overview in very deep directory trees or
     to move quickly to subdirectories far away.

   Ordinary Dired commands never consider files inside a hidden
subdirectory.  For example, the commands to operate on marked files
ignore files in hidden directories even if they are marked.  Thus you
can use hiding to temporarily exclude subdirectories from operations
without having to remove the Dired marks on files in those
subdirectories.

   *Note Subdirectories in Dired::, for how to insert a subdirectory
listing, and see *note Dired Updating::, for how to delete it.

==============================================================================
File: emacs.info,  Node: |Dired_Updating|,  Next: |Dired_and_Find|,  Prev: |Hiding_Subdirectories|,  Up: |Dired|
==============================================================================

                                                                *Dired_Updating*

30.15 Updating the Dired Buffer
-------------------------------

This section describes commands to update the Dired buffer to reflect
outside (non-Dired) changes in the directories and files, and to delete
part of the Dired buffer.

'g'
     Update the entire contents of the Dired buffer ('revert-buffer').

'l'
     Update the specified files ('dired-do-redisplay').  You specify the
     files for 'l' in the same way as for file operations.

'k'
     Delete the specified _file lines_--not the files, just the lines
     ('dired-do-kill-lines').

's'
     Toggle between alphabetical order and date/time order
     ('dired-sort-toggle-or-edit').

'C-u s SWITCHES <RET>'
     Refresh the Dired buffer using SWITCHES as
     'dired-listing-switches'.

   Type 'g' ('revert-buffer') to update the contents of the Dired
buffer, based on changes in the files and directories listed.  This
preserves all marks except for those on files that have vanished.
Hidden subdirectories are updated but remain hidden.

   To update only some of the files, type 'l' ('dired-do-redisplay').
Like the Dired file-operating commands, this command operates on the
next N files (or previous -N files), or on the marked files if any, or
on the current file.  Updating the files means reading their current
status, then updating their lines in the buffer to indicate that status.

   If you use 'l' on a subdirectory header line, it updates the contents
of the corresponding subdirectory.

   If you use 'C-x d' or some other Dired command to visit a directory
that is already being shown in a Dired buffer, Dired switches to that
buffer but does not update it.  If the buffer is not up-to-date, Dired
displays a warning telling you to type 'g' to update it.  You can also
tell Emacs to revert each Dired buffer automatically when you revisit
it, by setting the variable 'dired-auto-revert-buffer' to a non-'nil'
value.

   To delete _file lines_ from the buffer--without actually deleting the
files--type 'k' ('dired-do-kill-lines').  Like the file-operating
commands, this command operates on the next N files, or on the marked
files if any.  However, it does not operate on the current file, since
otherwise mistyping 'k' could be annoying.

   If you use 'k' to kill the line for a directory file which you had
inserted in the Dired buffer as a subdirectory (*note Subdirectories in
Dired::), it removes the subdirectory listing as well.  Typing 'C-u k'
on the header line for a subdirectory also removes the subdirectory line
from the Dired buffer.

   The 'g' command brings back any individual lines that you have killed
in this way, but not subdirectories--you must use 'i' to reinsert a
subdirectory.

   The files in a Dired buffers are normally listed in alphabetical
order by file names.  Alternatively Dired can sort them by date/time.
The Dired command 's' ('dired-sort-toggle-or-edit') switches between
these two sorting modes.  The mode line in a Dired buffer indicates
which way it is currently sorted--by name, or by date.

   'C-u s SWITCHES <RET>' lets you specify a new value for
'dired-listing-switches'.

==============================================================================
File: emacs.info,  Node: |Dired_and_Find|,  Next: |Wdired|,  Prev: |Dired_Updating|,  Up: |Dired|
==============================================================================

                                                                *Dired_and_Find*

30.16 Dired and 'find'
----------------------

You can select a set of files for display in a Dired buffer more
flexibly by using the 'find' utility to choose the files.

   To search for files with names matching a wildcard pattern use 'M-x
find-name-dired'.  It reads arguments DIRECTORY and PATTERN, and chooses
all the files in DIRECTORY or its subdirectories whose individual names
match PATTERN.

   The files thus chosen are displayed in a Dired buffer, in which the
ordinary Dired commands are available.

   If you want to test the contents of files, rather than their names,
use 'M-x find-grep-dired'.  This command reads two minibuffer arguments,
DIRECTORY and REGEXP; it chooses all the files in DIRECTORY or its
subdirectories that contain a match for REGEXP.  It works by running the
programs 'find' and 'grep'.  See also 'M-x grep-find', in *note Grep
Searching::.  Remember to write the regular expression for 'grep', not
for Emacs.  (An alternative method of showing files whose contents match
a given regexp is the '% g REGEXP' command, see *note Marks vs Flags::.)

   The most general command in this series is 'M-x find-dired', which
lets you specify any condition that 'find' can test.  It takes two
minibuffer arguments, DIRECTORY and FIND-ARGS; it runs 'find' in
DIRECTORY, passing FIND-ARGS to tell 'find' what condition to test.  To
use this command, you need to know how to use 'find'.

   The format of listing produced by these commands is controlled by the
variable 'find-ls-option'.  This is a pair of options; the first
specifying how to call 'find' to produce the file listing, and the
second telling Dired to parse the output.

   The command 'M-x locate' provides a similar interface to the 'locate'
program.  'M-x locate-with-filter' is similar, but keeps only files
whose names match a given regular expression.

   These buffers don't work entirely like ordinary Dired buffers: file
operations work, but do not always automatically update the buffer.
Reverting the buffer with 'g' deletes all inserted subdirectories, and
erases all flags and marks.

==============================================================================
File: emacs.info,  Node: |Wdired|,  Next: |Image_Dired|,  Prev: |Dired_and_Find|,  Up: |Dired|
==============================================================================

                                                                        *Wdired*

30.17 Editing the Dired Buffer
------------------------------

Wdired is a special mode that allows you to perform file operations by
editing the Dired buffer directly (the "W" in "Wdired" stands for
"writable").  To enter Wdired mode, type 'C-x C-q'
('dired-toggle-read-only') while in a Dired buffer.  Alternatively, use
the 'Immediate / Edit File Names' menu item.

   While in Wdired mode, you can rename files by editing the file names
displayed in the Dired buffer.  All the ordinary Emacs editing commands,
including rectangle operations and 'query-replace', are available for
this.  Once you are done editing, type 'C-c C-c' ('wdired-finish-edit').
This applies your changes and switches back to ordinary Dired mode.

   Apart from simply renaming files, you can move a file to another
directory by typing in the new file name (either absolute or relative).
To mark a file for deletion, delete the entire file name.  To change the
target of a symbolic link, edit the link target name which appears next
to the link name.

   If you edit the file names to create a new subdirectory, Wdired will
automatically create these new directories.  To inhibit this behavior,
set 'wdired-create-parent-directories' to 'nil'.

   The rest of the text in the buffer, such as the file sizes and
modification dates, is marked read-only, so you can't edit it.  However,
if you set 'wdired-allow-to-change-permissions' to 't', you can edit the
file permissions.  For example, you can change '-rw-r--r--' to
'-rw-rw-rw-' to make a file world-writable.  These changes also take
effect when you type 'C-c C-c'.

==============================================================================
File: emacs.info,  Node: |Image_Dired|,  Next: |Misc_Dired_Features|,  Prev: |Wdired|,  Up: |Dired|
==============================================================================

                                                                   *Image_Dired*

30.18 Viewing Image Thumbnails in Dired
---------------------------------------

Image-Dired is a facility for browsing image files.  It provides viewing
the images either as thumbnails or in full size, either inside Emacs or
through an external viewer.  This is different from Image mode (*note
Image Mode::) for visiting an image file in the Emacs buffer.

   To enter Image-Dired, mark the image files you want to look at in the
Dired buffer, using 'm' as usual.  Then type 'C-t d'
('image-dired-display-thumbs').  This creates and switches to a buffer
containing image-dired, corresponding to the marked files.

   You can also enter Image-Dired directly by typing 'M-x image-dired'.
This prompts for a directory; specify one that has image files.  This
creates thumbnails for all the images in that directory, and displays
them all in the thumbnail buffer.  This takes a long time if the
directory contains many image files, and it asks for confirmation if the
number of image files exceeds 'image-dired-show-all-from-dir-max-files'.

   With point in the thumbnail buffer, you can type <RET>
('image-dired-display-thumbnail-original-image') to display a sized
version of it in another window.  This sizes the image to fit the
window.  Use the arrow keys to move around in the buffer.  For easy
browsing, use <SPC> ('image-dired-display-next-thumbnail-original') to
advance and display the next image.  Typing <DEL>
('image-dired-display-previous-thumbnail-original') backs up to the
previous thumbnail and displays that instead.

   To view the image in its original size, either provide a prefix
argument ('C-u') before pressing <RET>, or type 'C-<RET>'
('image-dired-thumbnail-display-external') to display the image in an
external viewer.  You must first configure
'image-dired-external-viewer'.

   You can delete images through Image-Dired also.  Type 'd'
('image-dired-flag-thumb-original-file') to flag the image file for
deletion in the Dired buffer.  You can also delete the thumbnail image
from the thumbnail buffer with 'C-d' ('image-dired-delete-char').

   More advanced features include "image tags", which are metadata used
to categorize image files.  The tags are stored in a plain text file
configured by 'image-dired-db-file'.

   To tag image files, mark them in the dired buffer (you can also mark
files in Dired from the thumbnail buffer by typing 'm') and type 'C-t t'
('image-dired-tag-files').  This reads the tag name in the minibuffer.
To mark files having a certain tag, type 'C-t f'
('image-dired-mark-tagged-files').  After marking image files with a
certain tag, you can use 'C-t d' to view them.

   You can also tag a file directly from the thumbnail buffer by typing
't t' and you can remove a tag by typing 't r'.  There is also a special
tag called "comment" for each file (it is not a tag in the exact same
sense as the other tags, it is handled slightly differently).  That is
used to enter a comment or description about the image.  You comment a
file from the thumbnail buffer by typing 'c'.  You will be prompted for
a comment.  Type 'C-t c' to add a comment from Dired
('image-dired-dired-comment-files').

   Image-Dired also provides simple image manipulation.  In the
thumbnail buffer, type 'L' to rotate the original image 90 degrees anti
clockwise, and 'R' to rotate it 90 degrees clockwise.  This rotation is
lossless, and uses an external utility called 'jpegtran', which you need
to install first.

==============================================================================
File: emacs.info,  Node: |Misc_Dired_Features|,  Prev: |Image_Dired|,  Up: |Dired|
==============================================================================

                                                           *Misc_Dired_Features*

30.19 Other Dired Features
--------------------------

The command '+' ('dired-create-directory') reads a directory's name, and
creates that directory.  It signals an error if the directory already
exists.

   The command ('dired-create-empty-file') reads a file name, and
creates that file.  It signals an error if the file already exists.

   The command 'M-s a C-s' ('dired-do-isearch') begins a multi-file
incremental search on the marked files.  If a search fails at the end of
a file, typing 'C-s' advances to the next marked file and repeats the
search; at the end of the last marked file, the search wraps around to
the first marked file.  The command 'M-s a M-C-s'
('dired-do-isearch-regexp') does the same with a regular expression
search.  *Note Repeat Isearch::, for information about search
repetition.

   The command 'w' ('dired-copy-filename-as-kill') puts the names of the
marked (or next N) files into the kill ring, as if you had killed them
with 'C-w'.  The names are separated by a space.

   With a zero prefix argument, this uses the absolute file name of each
marked file.  With just 'C-u' as the prefix argument, it uses file names
relative to the Dired buffer's default directory.  (This can still
contain slashes if in a subdirectory.)  As a special case, if point is
on a directory header line, 'w' gives you the absolute name of that
directory.  Any prefix argument or marked files are ignored in this
case.

   The main purpose of this command is so that you can yank the file
names into arguments for other Emacs commands.  It also displays what it
added to the kill ring, so you can use it to display the list of
currently marked files in the echo area.

   If you have an HTML file in the file listing, it can be useful to
view that file with a browser.  The 'W' ('browse-url-of-dired-file')
command will use the standard configured browser to view that file.

   The command '(' ('dired-hide-details-mode') toggles whether details,
such as ownership or file permissions, are visible in the current Dired
buffer.  By default, it also hides the targets of symbolic links, and
all lines other than the header line and file/directory listings.  To
change this, customize the options
'dired-hide-details-hide-symlink-targets' and
'dired-hide-details-hide-information-lines', respectively.

   If the directory you are visiting is under version control (*note
Version Control::), then the normal VC diff and log commands will
operate on the selected files.

   The command 'M-x dired-compare-directories' is used to compare the
current Dired buffer with another directory.  It marks all the files
that differ between the two directories.  It puts these marks in all
Dired buffers where these files are listed, which of course includes the
current buffer.

   The default comparison method (used if you type <RET> at the prompt)
is to compare just the file names--file names differ if they do not
appear in the other directory.  You can specify more stringent
comparisons by entering a Lisp expression, which can refer to the
variables 'size1' and 'size2', the respective file sizes; 'mtime1' and
'mtime2', the last modification times in seconds, as floating point
numbers; and 'fa1' and 'fa2', the respective file attribute lists (as
returned by the function 'file-attributes').  This expression is
evaluated for each pair of like-named files, and files differ if the
expression's value is non-'nil'.

   For instance, the sequence 'M-x dired-compare-directories <RET> (>
mtime1 mtime2) <RET>' marks files newer in this directory than in the
other, and marks files older in the other directory than in this one.
It also marks files with no counterpart, in both directories, as always.

   On the X Window System, Emacs supports the drag and drop protocol.
You can drag a file object from another program, and drop it onto a
Dired buffer; this either moves, copies, or creates a link to the file
in that directory.  Precisely which action is taken is determined by the
originating program.  Dragging files out of a Dired buffer is currently
not supported.

==============================================================================
File: emacs.info,  Node: |Calendar/Diary|,  Next: |Sending_Mail|,  Prev: |Dired|,  Up: |Top|
==============================================================================

                                                                *Calendar/Diary*

31 The Calendar and the Diary
=============================

Emacs provides the functions of a desk calendar, with a diary of planned
or past events.  It also has facilities for managing your appointments,
and keeping track of how much time you spend working on certain
projects.

   To enter the calendar, type 'M-x calendar'.  This displays a
three-month calendar centered on the current month, with point on the
current date.  With a numeric argument, as in 'C-u M-x calendar', it
prompts you for the month and year to be the center of the three-month
calendar.  The calendar uses its own buffer, whose major mode is
Calendar mode.

   'mouse-3' in the calendar brings up a menu of operations on a
particular date; 'mouse-2' brings up a menu of commonly used calendar
features that are independent of any particular date.  To exit the
calendar, type 'q'.

MENU

* |Calendar_Motion|::     Moving through the calendar; selecting a date.
* |Scroll_Calendar|::     Bringing earlier or later months onto the screen.
* |Counting_Days|::       How many days are there between two dates?
* |General_Calendar|::    Exiting or recomputing the calendar.
* |Writing_Calendar_Files|:: Writing calendars to files of various formats.
* |Holidays|::            Displaying dates of holidays.
* |Sunrise/Sunset|::      Displaying local times of sunrise and sunset.
* |Lunar_Phases|::        Displaying phases of the moon.
* |Other_Calendars|::     Converting dates to other calendar systems.
* |Diary|::               Displaying events from your diary.
* |Daylight_Saving|::     How to specify when daylight saving time is active.
* |Time_Intervals|::      Keeping track of time intervals.
* |Advanced_Calendar/Diary_Usage|:: Advanced Calendar/Diary customization.

==============================================================================
File: emacs.info,  Node: |Calendar_Motion|,  Next: |Scroll_Calendar|,  Up: |Calendar/Diary|
==============================================================================

                                                               *Calendar_Motion*

31.1 Movement in the Calendar
-----------------------------

Calendar mode provides commands to move through the calendar in logical
units of time such as days, weeks, months, and years.  If you move
outside the three months originally displayed, the calendar display
scrolls automatically through time to make the selected date visible.
Moving to a date lets you view its holidays or diary entries, or convert
it to other calendars; moving by long time periods is also useful simply
to scroll the calendar.

MENU

* |Calendar_Unit_Motion|::      Moving by days, weeks, months, and years.
* |Move_to_Beginning_or_End|::  Moving to start/end of weeks, months, and years.
* |Specified_Dates|::           Moving to the current date or another
                                specific date.

==============================================================================
File: emacs.info,  Node: |Calendar_Unit_Motion|,  Next: |Move_to_Beginning_or_End|,  Up: Calendar Motion
==============================================================================

                                                          *Calendar_Unit_Motion*

31.1.1 Motion by Standard Lengths of Time
-----------------------------------------

The commands for movement in the calendar buffer parallel the commands
for movement in text.  You can move forward and backward by days, weeks,
months, and years.

'C-f'
     Move point one day forward ('calendar-forward-day').
'C-b'
     Move point one day backward ('calendar-backward-day').
'C-n'
     Move point one week forward ('calendar-forward-week').
'C-p'
     Move point one week backward ('calendar-backward-week').
'M-}'
     Move point one month forward ('calendar-forward-month').
'M-{'
     Move point one month backward ('calendar-backward-month').
'C-x ]'
     Move point one year forward ('calendar-forward-year').
'C-x ['
     Move point one year backward ('calendar-backward-year').

   The day and week commands are natural analogues of the usual Emacs
commands for moving by characters and by lines.  Just as 'C-n' usually
moves to the same column in the following line, in Calendar mode it
moves to the same day in the following week.  And 'C-p' moves to the
same day in the previous week.

   The arrow keys are equivalent to 'C-f', 'C-b', 'C-n' and 'C-p', just
as they normally are in other modes.

   The commands for motion by months and years work like those for
weeks, but move a larger distance.  The month commands 'M-}' and 'M-{'
move forward or backward by an entire month.  The year commands 'C-x ]'
and 'C-x [' move forward or backward a whole year.

   The easiest way to remember these commands is to consider months and
years analogous to paragraphs and pages of text, respectively.  But the
calendar movement commands themselves do not quite parallel those for
movement through text: the ordinary Emacs paragraph commands move to the
beginning or end of a paragraph, whereas these month and year commands
move by an entire month or an entire year, keeping the same date within
the month or year.

   All these commands accept a numeric argument as a repeat count.  For
convenience, the digit keys and the minus sign specify numeric arguments
in Calendar mode even without the Meta modifier.  For example, '100 C-f'
moves point 100 days forward from its present location.

==============================================================================
File: emacs.info,  Node: |Move_to_Beginning_or_End|,  Next: |Specified_Dates|,  Prev: |Calendar_Unit_Motion|,  Up: |Calendar_Motion|
==============================================================================

                                                      *Move_to_Beginning_or_End*

31.1.2 Beginning or End of Week, Month or Year
----------------------------------------------

A week (or month, or year) is not just a quantity of days; we think of
weeks (months, years) as starting on particular dates.  So Calendar mode
provides commands to move to the start or end of a week, month or year:

'C-a'
     Move point to start of week ('calendar-beginning-of-week').
'C-e'
     Move point to end of week ('calendar-end-of-week').
'M-a'
     Move point to start of month ('calendar-beginning-of-month').
'M-e'
     Move point to end of month ('calendar-end-of-month').
'M-<'
     Move point to start of year ('calendar-beginning-of-year').
'M->'
     Move point to end of year ('calendar-end-of-year').

   These commands also take numeric arguments as repeat counts, with the
repeat count indicating how many weeks, months, or years to move
backward or forward.

   By default, weeks begin on Sunday.  To make them begin on Monday
instead, set the variable 'calendar-week-start-day' to 1.  To change
which day headers are highlighted as weekend days, set the variable
'calendar-weekend-days'.

==============================================================================
File: emacs.info,  Node: |Specified_Dates|,  Prev: |Move_to_Beginning_or_End|,  Up: |Calendar_Motion|
==============================================================================

                                                               *Specified_Dates*

31.1.3 Specified Dates
----------------------

Calendar mode provides commands for moving to a particular date
specified in various ways.

'g d'
     Move point to specified date ('calendar-goto-date').
'g D'
     Move point to specified day of year ('calendar-goto-day-of-year').
'g w'
     Move point to specified week of year ('calendar-iso-goto-week').
'o'
     Center calendar around specified month ('calendar-other-month').
'.'
     Move point to today's date ('calendar-goto-today').

   'g d' ('calendar-goto-date') prompts for a year, a month, and a day
of the month, and then moves to that date.  Because the calendar
includes all dates from the beginning of the current era, you must type
the year in its entirety; that is, type '2010', not '10'.

   'g D' ('calendar-goto-day-of-year') prompts for a year and day
number, and moves to that date.  Negative day numbers count backward
from the end of the year.  'g w' ('calendar-iso-goto-week') prompts for
a year and week number, and moves to that week.

   'o' ('calendar-other-month') prompts for a month and year, then
centers the three-month calendar around that month.

   You can return to today's date with '.' ('calendar-goto-today').

==============================================================================
File: emacs.info,  Node: |Scroll_Calendar|,  Next: |Counting_Days|,  Prev: |Calendar_Motion|,  Up: |Calendar/Diary|
==============================================================================

                                                               *Scroll_Calendar*

31.2 Scrolling in the Calendar
------------------------------

The calendar display scrolls automatically through time when you move
out of the visible portion.  You can also scroll it manually.  Imagine
that the calendar window contains a long strip of paper with the months
on it.  Scrolling the calendar means moving the strip horizontally, so
that new months become visible in the window.

'>'
     Scroll calendar one month forward ('calendar-scroll-left').
'<'
     Scroll calendar one month backward ('calendar-scroll-right').
'C-v'
'<PageDown>'
'<next>'
     Scroll forward by three months
     ('calendar-scroll-left-three-months').
'M-v'
'<PageUp>'
'<prior>'
     Scroll backward by three months
     ('calendar-scroll-right-three-months').

   The most basic calendar scroll commands scroll by one month at a
time.  This means that there are two months of overlap between the
display before the command and the display after.  '>' scrolls the
calendar contents one month forward in time.  '<' scrolls the contents
one month backwards in time.

   The commands 'C-v' and 'M-v' scroll the calendar by an entire
screenful--three months--in analogy with the usual meaning of these
commands.  'C-v' makes later dates visible and 'M-v' makes earlier dates
visible.  These commands take a numeric argument as a repeat count; in
particular, since 'C-u' multiplies the next command by four, typing 'C-u
C-v' scrolls the calendar forward by a year and typing 'C-u M-v' scrolls
the calendar backward by a year.

   The function keys <PageDown> (or <next>) and <PageUp> (or <prior>)
are equivalent to 'C-v' and 'M-v', just as they are in other modes.

==============================================================================
File: emacs.info,  Node: |Counting_Days|,  Next: |General_Calendar|,  Prev: |Scroll_Calendar|,  Up: |Calendar/Diary|
==============================================================================

                                                                 *Counting_Days*

31.3 Counting Days
------------------

'M-='
     Display the number of days in the current region
     ('calendar-count-days-region').

   To determine the number of days in a range, set the mark on one date
using 'C-<SPC>', move point to another date, and type 'M-='
('calendar-count-days-region').  The numbers of days shown is
_inclusive_; that is, it includes the days specified by mark and point.

==============================================================================
File: emacs.info,  Node: |General_Calendar|,  Next: |Writing_Calendar_Files|,  Prev: |Counting_Days|,  Up: |Calendar/Diary|
==============================================================================

                                                              *General_Calendar*

31.4 Miscellaneous Calendar Commands
------------------------------------

'p d'
     Display day-in-year ('calendar-print-day-of-year').
'C-c C-l'
     Regenerate the calendar window ('calendar-redraw').
'<SPC>'
     Scroll the next window up ('scroll-other-window').
'<DEL>'
'S-<SPC>'
     Scroll the next window down ('scroll-other-window-down').
'q'
     Exit from calendar ('calendar-exit').

   To display the number of days elapsed since the start of the year, or
the number of days remaining in the year, type the 'p d' command
('calendar-print-day-of-year').  This displays both of those numbers in
the echo area.  The count of days elapsed includes the selected date.
The count of days remaining does not include that date.

   If the calendar window text gets corrupted, type 'C-c C-l'
('calendar-redraw') to redraw it.  (This can only happen if you use
non-Calendar-mode editing commands.)

   In Calendar mode, you can use <SPC> ('scroll-other-window') and <DEL>
('scroll-other-window-down') to scroll the other window (if there is
one) up or down, respectively.  This is handy when you display a list of
holidays or diary entries in another window.

   To exit from the calendar, type 'q' ('calendar-exit').  This buries
all buffers related to the calendar, selecting other buffers.  (If a
frame contains a dedicated calendar window, exiting from the calendar
deletes or iconifies that frame depending on the value of
'calendar-remove-frame-by-deleting'.)

==============================================================================
File: emacs.info,  Node: |Writing_Calendar_Files|,  Next: |Holidays|,  Prev: |General_Calendar|,  Up: |Calendar/Diary|
==============================================================================

                                                        *Writing_Calendar_Files*

31.5 Writing Calendar Files
---------------------------

You can write calendars and diary entries to HTML and LaTeX files.

   The Calendar HTML commands produce files of HTML code that contain
calendar, holiday, and diary entries.  Each file applies to one month,
and has a name of the format 'YYYY-MM.html', where YYYY and MM are the
four-digit year and two-digit month, respectively.  The variable
'cal-html-directory' specifies the default output directory for the HTML
files.  To prevent holidays from being shown, customize
'cal-html-holidays'.

   Diary entries enclosed by '<' and '>' are interpreted as HTML tags
(for example: this is a diary entry with <font color="red">some red
text</font>).  You can change the overall appearance of the displayed
HTML pages (for example, the color of various page elements, header
styles) via a stylesheet 'cal.css' in the directory containing the HTML
files (see the value of the variable 'cal-html-css-default' for relevant
style settings).

'H m'
     Generate a one-month calendar ('cal-html-cursor-month').
'H y'
     Generate a calendar file for each month of a year, as well as an
     index page ('cal-html-cursor-year').  By default, this command
     writes files to a YYYY subdirectory--if this is altered some
     hyperlinks between years will not work.

   If the variable 'cal-html-print-day-number-flag' is non-'nil', then
the monthly calendars show the day-of-the-year number.  The variable
'cal-html-year-index-cols' specifies the number of columns in the yearly
index page.

   The Calendar LaTeX commands produce a buffer of LaTeX code that
prints as a calendar.  Depending on the command you use, the printed
calendar covers the day, week, month or year that point is in.

't m'
     Generate a one-month calendar ('cal-tex-cursor-month').
't M'
     Generate a sideways-printing one-month calendar
     ('cal-tex-cursor-month-landscape').
't d'
     Generate a one-day calendar ('cal-tex-cursor-day').
't w 1'
     Generate a one-page calendar for one week, with hours
     ('cal-tex-cursor-week').
't w 2'
     Generate a two-page calendar for one week, with hours
     ('cal-tex-cursor-week2').
't w 3'
     Generate an ISO-style calendar for one week, without hours
     ('cal-tex-cursor-week-iso').
't w 4'
     Generate a calendar for one Monday-starting week, with hours
     ('cal-tex-cursor-week-monday').
't w W'
     Generate a two-page calendar for one week, without hours
     ('cal-tex-cursor-week2-summary').
't f w'
     Generate a Filofax-style two-weeks-at-a-glance calendar
     ('cal-tex-cursor-filofax-2week').
't f W'
     Generate a Filofax-style one-week-at-a-glance calendar
     ('cal-tex-cursor-filofax-week').
't y'
     Generate a calendar for one year ('cal-tex-cursor-year').
't Y'
     Generate a sideways-printing calendar for one year
     ('cal-tex-cursor-year-landscape').
't f y'
     Generate a Filofax-style calendar for one year
     ('cal-tex-cursor-filofax-year').

   Some of these commands print the calendar sideways (in landscape
mode), so it can be wider than it is long.  Some of them use Filofax
paper size (3.75in x 6.75in).  All of these commands accept a prefix
argument, which specifies how many days, weeks, months or years to print
(starting always with the selected one).

   If the variable 'cal-tex-holidays' is non-'nil' (the default), then
the printed calendars show the holidays in 'calendar-holidays'.  If the
variable 'cal-tex-diary' is non-'nil' (the default is 'nil'), diary
entries are included also (in monthly, Filofax, and iso-week calendars
only).  If the variable 'cal-tex-rules' is non-'nil' (the default is
'nil'), the calendar displays ruled pages in styles that have sufficient
room.  Consult the documentation of the individual cal-tex functions to
see which calendars support which features.

   You can use the variable 'cal-tex-preamble-extra' to insert extra
LaTeX commands in the preamble of the generated document if you need to.

==============================================================================
File: emacs.info,  Node: |Holidays|,  Next: |Sunrise/Sunset|,  Prev: |Writing_Calendar_Files|,  Up: |Calendar/Diary|
==============================================================================

                                                                      *Holidays*

31.6 Holidays
-------------

The Emacs calendar knows about many major and minor holidays, and can
display them.  You can add your own holidays to the default list.

'mouse-3 Holidays'
'h'
     Display holidays for the selected date
     ('calendar-cursor-holidays').
'x'
     Mark holidays in the calendar window ('calendar-mark-holidays').
'u'
     Unmark calendar window ('calendar-unmark').
'a'
     List all holidays for the displayed three months in another window
     ('calendar-list-holidays').
'M-x holidays'
     List all holidays for three months around today's date in another
     window.
'M-x list-holidays'
     List holidays in another window for a specified range of years.

   To see if any holidays fall on a given date, position point on that
date in the calendar window and use the 'h' command.  Alternatively,
click on that date with 'mouse-3' and then choose 'Holidays' from the
menu that appears.  Either way, this displays the holidays for that
date, in the echo area if they fit there, otherwise in a separate
window.

   To view the distribution of holidays for all the dates shown in the
calendar, use the 'x' command.  This displays the dates that are
holidays in a different face.  *Note calendar-holiday-marker: Calendar
Customizing.  The command applies both to the currently visible months
and to other months that subsequently become visible by scrolling.  To
turn marking off and erase the current marks, type 'u', which also
erases any diary marks (*note Diary::).  If the variable
'calendar-mark-holidays-flag' is non-'nil', creating or updating the
calendar marks holidays automatically.

   To get even more detailed information, use the 'a' command, which
displays a separate buffer containing a list of all holidays in the
current three-month range.  You can use <SPC> and <DEL> in the calendar
window to scroll that list up and down, respectively.

   The command 'M-x holidays' displays the list of holidays for the
current month and the preceding and succeeding months; this works even
if you don't have a calendar window.  If the variable
'calendar-view-holidays-initially-flag' is non-'nil', creating the
calendar displays holidays in this way.  If you want the list of
holidays centered around a different month, use 'C-u M-x holidays',
which prompts for the month and year.

   The holidays known to Emacs include United States holidays and the
major Bah??'??, Chinese, Christian, Islamic, and Jewish holidays; also the
solstices and equinoxes.

   The command 'M-x holiday-list' displays the list of holidays for a
range of years.  This function asks you for the starting and stopping
years, and allows you to choose all the holidays or one of several
categories of holidays.  You can use this command even if you don't have
a calendar window.

   The dates used by Emacs for holidays are based on _current practice_,
not historical fact.  For example Veteran's Day began in 1919, but is
shown in earlier years.

==============================================================================
File: emacs.info,  Node: |Sunrise/Sunset|,  Next: |Lunar_Phases|,  Prev: |Holidays|,  Up: |Calendar/Diary|
==============================================================================

                                                                *Sunrise/Sunset*

31.7 Times of Sunrise and Sunset
--------------------------------

Special calendar commands can tell you, to within a minute or two, the
times of sunrise and sunset for any date.

'mouse-3 Sunrise/sunset'
'S'
     Display times of sunrise and sunset for the selected date
     ('calendar-sunrise-sunset').
'M-x sunrise-sunset'
     Display times of sunrise and sunset for today's date.
'C-u M-x sunrise-sunset'
     Display times of sunrise and sunset for a specified date.
'M-x calendar-sunrise-sunset-month'
     Display times of sunrise and sunset for the selected month.

   Within the calendar, to display the _local times_ of sunrise and
sunset in the echo area, move point to the date you want, and type 'S'.
Alternatively, click 'mouse-3' on the date, then choose 'Sunrise/sunset'
from the menu that appears.  The command 'M-x sunrise-sunset' is
available outside the calendar to display this information for today's
date or a specified date.  To specify a date other than today, use 'C-u
M-x sunrise-sunset', which prompts for the year, month, and day.

   You can display the times of sunrise and sunset for any location and
any date with 'C-u C-u M-x sunrise-sunset'.  This asks you for a
longitude, latitude, number of minutes difference from Coordinated
Universal Time, and date, and then tells you the times of sunrise and
sunset for that location on that date.

   Because the times of sunrise and sunset depend on the location on
earth, you need to tell Emacs your latitude, longitude, and location
name before using these commands.  Here is an example of what to set:

     (setq calendar-latitude 40.1)
     (setq calendar-longitude -88.2)
     (setq calendar-location-name "Urbana, IL")

Use one decimal place in the values of 'calendar-latitude' and
'calendar-longitude'.

   Your time zone also affects the local time of sunrise and sunset.
Emacs usually gets time zone information from the operating system, but
if these values are not what you want (or if the operating system does
not supply them), you must set them yourself.  Here is an example:

     (setq calendar-time-zone -360)
     (setq calendar-standard-time-zone-name "CST")
     (setq calendar-daylight-time-zone-name "CDT")

The value of 'calendar-time-zone' is the number of minutes difference
between your local standard time and Coordinated Universal Time
(Greenwich time).  The values of 'calendar-standard-time-zone-name' and
'calendar-daylight-time-zone-name' are the abbreviations used in your
time zone.  Emacs displays the times of sunrise and sunset _corrected
for daylight saving time_.  *Note Daylight Saving::, for how daylight
saving time is determined.

   As a user, you might find it convenient to set the calendar location
variables for your usual physical location in your '.emacs' file.  If
you are a system administrator, you may want to set these variables for
all users in a 'default.el' file.  *Note Init File::.

==============================================================================
File: emacs.info,  Node: |Lunar_Phases|,  Next: |Other_Calendars|,  Prev: |Sunrise/Sunset|,  Up: |Calendar/Diary|
==============================================================================

                                                                  *Lunar_Phases*

31.8 Phases of the Moon
-----------------------

These calendar commands display the dates and times of the phases of the
moon (new moon, first quarter, full moon, last quarter).  This feature
is useful for debugging problems that depend on the phase of the moon.

'M'
     Display the dates and times for all the quarters of the moon for
     the three-month period shown ('calendar-lunar-phases').
'M-x lunar-phases'
     Display dates and times of the quarters of the moon for three
     months around today's date.

   Within the calendar, use the 'M' command to display a separate buffer
of the phases of the moon for the current three-month range.  The dates
and times listed are accurate to within a few minutes.

   Outside the calendar, use the command 'M-x lunar-phases' to display
the list of the phases of the moon for the current month and the
preceding and succeeding months.  For information about a different
month, use 'C-u M-x lunar-phases', which prompts for the month and year.

   The dates and times given for the phases of the moon are given in
local time (corrected for daylight saving, when appropriate).  See the
discussion in the previous section.  *Note Sunrise/Sunset::.

==============================================================================
File: emacs.info,  Node: |Other_Calendars|,  Next: |Diary|,  Prev: |Lunar_Phases|,  Up: |Calendar/Diary|
==============================================================================

                                                               *Other_Calendars*

31.9 Conversion To and From Other Calendars
-------------------------------------------

The Emacs calendar displayed is _always_ the Gregorian calendar,
sometimes called the New Style calendar, which is used in most of the
world today.  However, this calendar did not exist before the sixteenth
century and was not widely used before the eighteenth century; it did
not fully displace the Julian calendar and gain universal acceptance
until the early twentieth century.  The Emacs calendar can display any
month since January, year 1 of the current era, but the calendar
displayed is always the Gregorian, even for a date at which the
Gregorian calendar did not exist.

   While Emacs cannot display other calendars, it can convert dates to
and from several other calendars.

MENU

* |Calendar_Systems|::       The calendars Emacs understands
                             (aside from Gregorian).
* |To_Other_Calendar|::      Converting the selected date to various calendars.
* |From_Other_Calendar|::    Moving to a date specified in another calendar.

==============================================================================
File: emacs.info,  Node: |Calendar_Systems|,  Next: |To_Other_Calendar|,  Up: |Other_Calendars|
==============================================================================

                                                              *Calendar_Systems*

31.9.1 Supported Calendar Systems
---------------------------------

The ISO commercial calendar is often used in business.

   The Julian calendar, named after Julius Caesar, was the one used in
Europe throughout medieval times, and in many countries up until the
nineteenth century.

   Astronomers use a simple counting of days elapsed since noon, Monday,
January 1, 4713 BC on the Julian calendar.  The number of days elapsed
is called the "Julian day number" or the "Astronomical day number".

   The Hebrew calendar is used by tradition in the Jewish religion.  The
Emacs calendar program uses the Hebrew calendar to determine the dates
of Jewish holidays.  Hebrew calendar dates begin and end at sunset.

   The Islamic calendar is used in many predominantly Islamic countries.
Emacs uses it to determine the dates of Islamic holidays.  There is no
universal agreement in the Islamic world about the calendar; Emacs uses
a widely accepted version, but the precise dates of Islamic holidays
often depend on proclamation by religious authorities, not on
calculations.  As a consequence, the actual dates of observance can vary
slightly from the dates computed by Emacs.  Islamic calendar dates begin
and end at sunset.

   The French Revolutionary calendar was created by the Jacobins after
the 1789 revolution, to represent a more secular and nature-based view
of the annual cycle, and to install a 10-day week in a rationalization
measure similar to the metric system.  The French government officially
abandoned this calendar at the end of 1805.

   The Maya of Central America used three separate, overlapping calendar
systems, the _long count_, the _tzolkin_, and the _haab_.  Emacs knows
about all three of these calendars.  Experts dispute the exact
correlation between the Mayan calendar and our calendar; Emacs uses the
Goodman-Martinez-Thompson correlation in its calculations.

   The Copts use a calendar based on the ancient Egyptian solar
calendar.  Their calendar consists of twelve 30-day months followed by
an extra five-day period.  Once every fourth year they add a leap day to
this extra period to make it six days.  The Ethiopic calendar is
identical in structure, but has different year numbers and month names.

   The Persians use a solar calendar based on a design of Omar Khayyam.
Their calendar consists of twelve months of which the first six have 31
days, the next five have 30 days, and the last has 29 in ordinary years
and 30 in leap years.  Leap years occur in a complicated pattern every
four or five years.  The calendar implemented here is the arithmetical
Persian calendar championed by Birashk, based on a 2,820-year cycle.  It
differs from the astronomical Persian calendar, which is based on
astronomical events.  As of this writing the first future discrepancy is
projected to occur on March 20, 2025.  It is currently not clear what
the official calendar of Iran will be at that time.

   The Chinese calendar is a complicated system of lunar months arranged
into solar years.  The years go in cycles of sixty, each year containing
either twelve months in an ordinary year or thirteen months in a leap
year; each month has either 29 or 30 days.  Years, ordinary months, and
days are named by combining one of ten "celestial stems" with one of
twelve "terrestrial branches" for a total of sixty names that are
repeated in a cycle of sixty.

   The Bah??'?? calendar system is based on a solar cycle of 19 months
with 19 days each.  The four remaining intercalary days are placed
between the 18th and 19th months.

==============================================================================
File: emacs.info,  Node: |To_Other_Calendar|,  Next: |From_Other_Calendar|,  Prev: |Calendar_Systems|,  Up: |Other_Calendars|
==============================================================================

                                                             *To_Other_Calendar*

31.9.2 Converting To Other Calendars
------------------------------------

The following commands describe the selected date (the date at point) in
various other calendar systems:

'mouse-3 Other calendars'
'p o'
     Display the selected date in various other calendars.
     ('calendar-print-other-dates').
'p c'
     Display ISO commercial calendar equivalent for selected day
     ('calendar-iso-print-date').
'p j'
     Display Julian date for selected day
     ('calendar-julian-print-date').
'p a'
     Display astronomical (Julian) day number for selected day
     ('calendar-astro-print-day-number').
'p h'
     Display Hebrew date for selected day
     ('calendar-hebrew-print-date').
'p i'
     Display Islamic date for selected day
     ('calendar-islamic-print-date').
'p f'
     Display French Revolutionary date for selected day
     ('calendar-french-print-date').
'p b'
     Display Bah??'?? date for selected day ('calendar-bahai-print-date').
'p C'
     Display Chinese date for selected day
     ('calendar-chinese-print-date').
'p k'
     Display Coptic date for selected day
     ('calendar-coptic-print-date').
'p e'
     Display Ethiopic date for selected day
     ('calendar-ethiopic-print-date').
'p p'
     Display Persian date for selected day
     ('calendar-persian-print-date').
'p m'
     Display Mayan date for selected day ('calendar-mayan-print-date').

   Otherwise, move point to the date you want to convert, then type the
appropriate command starting with 'p' from the table above.  The prefix
'p' is a mnemonic for "print", since Emacs "prints" the equivalent date
in the echo area.  'p o' displays the date in all forms known to Emacs.
You can also use 'mouse-3' and then choose 'Other calendars' from the
menu that appears.  This displays the equivalent forms of the date in
all the calendars Emacs understands, in the form of a menu.  (Choosing
an alternative from this menu doesn't actually do anything--the menu is
used only for display.)

==============================================================================
File: emacs.info,  Node: |From_Other_Calendar|,  Prev: |To_Other_Calendar|,  Up: |Other_Calendars|
==============================================================================

                                                           *From_Other_Calendar*

31.9.3 Converting From Other Calendars
--------------------------------------

You can use the other supported calendars to specify a date to move to.
This section describes the commands for doing this using calendars other
than Mayan; for the Mayan calendar, see the following section.

'g c'
     Move to a date specified in the ISO commercial calendar
     ('calendar-iso-goto-date').
'g w'
     Move to a week specified in the ISO commercial calendar
     ('calendar-iso-goto-week').
'g j'
     Move to a date specified in the Julian calendar
     ('calendar-julian-goto-date').
'g a'
     Move to a date specified with an astronomical (Julian) day number
     ('calendar-astro-goto-day-number').
'g b'
     Move to a date specified in the Bah??'?? calendar
     ('calendar-bahai-goto-date').
'g h'
     Move to a date specified in the Hebrew calendar
     ('calendar-hebrew-goto-date').
'g i'
     Move to a date specified in the Islamic calendar
     ('calendar-islamic-goto-date').
'g f'
     Move to a date specified in the French Revolutionary calendar
     ('calendar-french-goto-date').
'g C'
     Move to a date specified in the Chinese calendar
     ('calendar-chinese-goto-date').
'g p'
     Move to a date specified in the Persian calendar
     ('calendar-persian-goto-date').
'g k'
     Move to a date specified in the Coptic calendar
     ('calendar-coptic-goto-date').
'g e'
     Move to a date specified in the Ethiopic calendar
     ('calendar-ethiopic-goto-date').

   These commands ask you for a date on the other calendar, move point
to the Gregorian calendar date equivalent to that date, and display the
other calendar's date in the echo area.  Emacs uses strict completion
(*note Completion Exit::) whenever it asks you to type a month name, so
you don't have to worry about the spelling of Hebrew, Islamic, or French
names.

   One common issue concerning the Hebrew calendar is the computation of
the anniversary of a date of death, called a "yahrzeit".  The Emacs
calendar includes a facility for such calculations.  If you are in the
calendar, the command 'M-x calendar-hebrew-list-yahrzeits' asks you for
a range of years and then displays a list of the yahrzeit dates for
those years for the date given by point.  If you are not in the
calendar, this command first asks you for the date of death and the
range of years, and then displays the list of yahrzeit dates.

==============================================================================
File: emacs.info,  Node: |Diary|,  Next: |Daylight_Saving|,  Prev: |Other_Calendars|,  Up: |Calendar/Diary|
==============================================================================

                                                                         *Diary*

31.10 The Diary
---------------

The Emacs diary keeps track of appointments or other events on a daily
basis, in conjunction with the calendar.  To use the diary feature, you
must first create a diary file containing a list of events and their
dates.  Then Emacs can automatically pick out and display the events for
today, for the immediate future, or for any specified date.

   Although you probably will start by creating a diary manually, Emacs
provides a number of commands to let you view, add, and change diary
entries.

MENU

* |Format_of_Diary_File|::   Entering events in your diary.
* |Displaying_the_Diary|::   Viewing diary entries and associated calendar dates.
* |Date_Formats|::           Various ways you can specify dates.
* |Adding_to_Diary|::        Commands to create diary entries.
* |Special_Diary_Entries|::  Anniversaries, blocks of dates, cyclic entries, etc.
* |Appointments|::           Reminders when it's time to do something.
* |Importing_Diary|::        Converting diary events to/from other formats.

==============================================================================
File: emacs.info,  Node: |Format_of_Diary_File|,  Next: |Displaying_the_Diary|,  Up: |Diary|
==============================================================================

                                                          *Format_of_Diary_File*

31.10.1 The Diary File
----------------------

Your "diary file" is a file that records events associated with
particular dates.  The name of the diary file is specified by the
variable 'diary-file'.  The default is '~/.emacs.d/diary', though for
compatibility with older versions Emacs will use '~/diary' if it exists.

   Each entry in the diary file describes one event and consists of one
or more lines.  An entry always begins with a date specification at the
left margin.  The rest of the entry is simply text to describe the
event.  If the entry has more than one line, then the lines after the
first must begin with whitespace to indicate they continue a previous
entry.  Lines that do not begin with valid dates and do not continue a
preceding entry are ignored.  Here's an example:

     12/22/2015  Twentieth wedding anniversary!
     10/22       Ruth's birthday.
     * 21, *:    Payday
     Tuesday--weekly meeting with grad students at 10am
              Supowit, Shen, Bitner, and Kapoor to attend.
     1/13/89     Friday the thirteenth!!
     thu 4pm     squash game with Lloyd.
     mar 16      Dad's birthday
     April 15, 2016 Income tax due.
     * 15        time cards due.

This example uses extra spaces to align the event descriptions of most
of the entries.  Such formatting is purely a matter of taste.

   You can also use a format where the first line of a diary entry
consists only of the date or day name (with no following blanks or
punctuation).  For example:

     02/11/2012
           Bill B. visits Princeton today
           2pm Cognitive Studies Committee meeting
           2:30-5:30 Liz at Lawrenceville
           4:00pm Dentist appt
           7:30pm Dinner at George's
           8:00-10:00pm concert

This entry will have a different appearance if you use the simple diary
display (*note Diary Display::).  The simple diary display omits the
date line at the beginning; only the continuation lines appear.  This
style of entry looks neater when you display just a single day's
entries, but can cause confusion if you ask for more than one day's
entries.

==============================================================================
File: emacs.info,  Node: |Displaying_the_Diary|,  Next: |Date_Formats|,  Prev: |Format_of_Diary_File|,  Up: |Diary|
==============================================================================

                                                          *Displaying_the_Diary*

31.10.2 Displaying the Diary
----------------------------

Once you have created a diary file, you can use the calendar to view it.
You can also view today's events outside of Calendar mode.  In the
following, key bindings refer to the Calendar buffer.

'mouse-3 Diary'
'd'
     Display all diary entries for the selected date
     ('diary-view-entries').
's'
     Display the entire diary file ('diary-show-all-entries').
'm'
     Mark all visible dates that have diary entries
     ('diary-mark-entries').
'u'
     Unmark the calendar window ('calendar-unmark').
'M-x diary-print-entries'
     Print hard copy of the diary display as it appears.
'M-x diary'
     Display all diary entries for today's date.
'M-x diary-mail-entries'
     Mail yourself email reminders about upcoming diary entries.

   Displaying the diary entries with 'd' shows in a separate buffer the
diary entries for the selected date in the calendar.  The mode line of
the new buffer shows the date of the diary entries.  Holidays are shown
either in the buffer or in the mode line, depending on the display
method you choose (*note Diary Display::).  If you specify a numeric
argument with 'd', it shows all the diary entries for that many
successive days.  Thus, '2 d' displays all the entries for the selected
date and for the following day.

   Another way to display the diary entries for a date is to click
'mouse-3' on the date, and then choose 'Diary entries' from the menu
that appears.  If the variable 'calendar-view-diary-initially-flag' is
non-'nil', creating the calendar lists the diary entries for the current
date (provided the current date is visible).

   To get a broader view of which days are mentioned in the diary, use
the 'm' command.  This marks the dates that have diary entries in a
different face.  *Note diary-entry-marker: Calendar Customizing.

   This command applies both to the months that are currently visible
and to those that subsequently become visible after scrolling.  To turn
marking off and erase the current marks, type 'u', which also turns off
holiday marks (*note Holidays::).  If the variable
'calendar-mark-diary-entries-flag' is non-'nil', creating or updating
the calendar marks diary dates automatically.

   To prevent an individual diary entry from being marked in the
calendar, insert the string that 'diary-nonmarking-symbol' specifies
(the default is '&') at the beginning of the entry, before the date.
This has no effect on display of the entry in the diary buffer; it only
affects marks on dates in the calendar.  Nonmarking entries can be
useful for generic entries that would otherwise mark many different
dates.

   To see the full diary file, rather than just some of the entries, use
the 's' command.

   The command 'M-x diary' displays the diary entries for the current
date, independently of the calendar display, and optionally for the next
few days as well; the variable 'diary-number-of-entries' specifies how
many days to include.  *Note diary-number-of-entries: Diary Customizing.

   If you put '(diary)' in your '.emacs' file, this automatically
displays a window with the day's diary entries when you start Emacs.

   Some people like to receive email notifications of events in their
diary.  To send such mail to yourself, use the command 'M-x
diary-mail-entries'.  A prefix argument specifies how many days
(starting with today) to check; otherwise, the variable
'diary-mail-days' says how many days.

==============================================================================
File: emacs.info,  Node: |Date_Formats|,  Next: |Adding_to_Diary|,  Prev: |Displaying_the_Diary|,  Up: |Diary|
==============================================================================

                                                                  *Date_Formats*

31.10.3 Date Formats
--------------------

Here are some sample diary entries, illustrating different ways of
formatting a date.  The examples all show dates in American order
(month, day, year), but Calendar mode supports European order (day,
month, year) and ISO order (year, month, day) as options.

     4/20/12  Switch-over to new tabulation system
     apr. 25  Start tabulating annual results
     4/30  Results for April are due
     */25  Monthly cycle finishes
     Friday  Don't leave without backing up files

   The first entry appears only once, on April 20, 2012.  The second and
third appear every year on the specified dates, and the fourth uses a
wildcard (asterisk) for the month, so it appears on the 25th of every
month.  The final entry appears every week on Friday.

   You can use just numbers to express a date, as in 'MONTH/DAY' or
'MONTH/DAY/YEAR'.  This must be followed by a nondigit.  In the date
itself, MONTH and DAY are numbers of one or two digits.  The optional
YEAR is also a number, and may be abbreviated to the last two digits;
that is, you can use '11/12/2012' or '11/12/12'.

   Dates can also have the form 'MONTHNAME DAY' or 'MONTHNAME DAY,
YEAR', where the month's name can be spelled in full or abbreviated
(with or without a period).  The preferred abbreviations for month and
day names can be set using the variables 'calendar-abbrev-length',
'calendar-month-abbrev-array', and 'calendar-day-abbrev-array'.  The
default is to use the first three letters of a name as its abbreviation.
Case is not significant.

   A date may be "generic"; that is, partially unspecified.  Then the
entry applies to all dates that match the specification.  If the date
does not contain a year, it is generic and applies to any year.
Alternatively, MONTH, DAY, or YEAR can be '*'; this matches any month,
day, or year, respectively.  Thus, a diary entry '3//' matches any day
in March of any year; so does 'march *'.

   If you prefer the European style of writing dates (in which the day
comes before the month), or the ISO style (in which the order is year,
month, day), type 'M-x calendar-set-date-style' while in the calendar,
or customize the variable 'calendar-date-style'.  This affects how diary
dates are interpreted, date display, and the order in which some
commands expect their arguments to be given.

   You can use the name of a day of the week as a generic date which
applies to any date falling on that day of the week.  You can abbreviate
the day of the week as described above, or spell it in full; case is not
significant.

==============================================================================
File: emacs.info,  Node: |Adding_to_Diary|,  Next: |Special_Diary_Entries|,  Prev: |Date_Formats|,  Up: |Diary|
==============================================================================

                                                               *Adding_to_Diary*

31.10.4 Commands to Add to the Diary
------------------------------------

While in the calendar, there are several commands to create diary
entries.  The basic commands are listed here; more sophisticated
commands are in the next section (*note Special Diary Entries::).
Entries can also be based on non-Gregorian calendars.  *Note
Non-Gregorian Diary::.

'i d'
     Add a diary entry for the selected date ('diary-insert-entry').
'i w'
     Add a diary entry for the selected day of the week
     ('diary-insert-weekly-entry').
'i m'
     Add a diary entry for the selected day of the month
     ('diary-insert-monthly-entry').
'i y'
     Add a diary entry for the selected day of the year
     ('diary-insert-yearly-entry').

   You can make a diary entry for a specific date by selecting that date
in the calendar window and typing the 'i d' command.  This command
displays the end of your diary file in another window and inserts the
date; you can then type the rest of the diary entry.

   If you want to make a diary entry that applies to a specific day of
the week, select that day of the week (any occurrence will do) and type
'i w'.  This inserts the day-of-week as a generic date; you can then
type the rest of the diary entry.  You can make a monthly diary entry in
the same fashion: select the day of the month, use the 'i m' command,
and type the rest of the entry.  Similarly, you can insert a yearly
diary entry with the 'i y' command.

   All of the above commands make marking diary entries by default.  To
make a nonmarking diary entry, give a prefix argument to the command.
For example, 'C-u i w' makes a nonmarking weekly diary entry.

   When you modify the diary file, be sure to save the file before
exiting Emacs.  Saving the diary file after using any of the above
insertion commands will automatically update the diary marks in the
calendar window, if appropriate.  You can use the command
'calendar-redraw' to force an update at any time.

==============================================================================
File: emacs.info,  Node: |Special_Diary_Entries|,  Next: |Appointments|,  Prev: |Adding_to_Diary|,  Up: |Diary|
==============================================================================

                                                         *Special_Diary_Entries*

31.10.5 Special Diary Entries
-----------------------------

In addition to entries based on calendar dates, the diary file can
contain "sexp entries" for regular events such as anniversaries.  These
entries are based on Lisp expressions (sexps) that Emacs evaluates as it
scans the diary file.  Instead of a date, a sexp entry contains '%%'
followed by a Lisp expression which must begin and end with parentheses.
The Lisp expression determines which dates the entry applies to.

   Calendar mode provides commands to insert certain commonly used sexp
entries:

'i a'
     Add an anniversary diary entry for the selected date
     ('diary-insert-anniversary-entry').
'i b'
     Add a block diary entry for the current region
     ('diary-insert-block-entry').
'i c'
     Add a cyclic diary entry starting at the date
     ('diary-insert-cyclic-entry').

   If you want to make a diary entry that applies to the anniversary of
a specific date, move point to that date and use the 'i a' command.
This displays the end of your diary file in another window and inserts
the anniversary description; you can then type the rest of the diary
entry.  The entry looks like this:

     %%(diary-anniversary 10 31 1988) Arthur's birthday

This entry applies to October 31 in any year after 1988; '10 31 1988'
specifies the date.  (If you are using the European or ISO calendar
style, the input order of month, day and year is different.)  The reason
this expression requires a beginning year is that advanced diary
functions can use it to calculate the number of elapsed years.

   A "block" diary entry applies to a specified range of consecutive
dates.  Here is a block diary entry that applies to all dates from June
24, 2012 through July 10, 2012:

     %%(diary-block 6 24 2012 7 10 2012) Vacation

The '6 24 2012' indicates the starting date and the '7 10 2012'
indicates the stopping date.  (Again, if you are using the European or
ISO calendar style, the input order of month, day and year is
different.)

   To insert a block entry, place point and the mark on the two dates
that begin and end the range, and type 'i b'.  This command displays the
end of your diary file in another window and inserts the block
description; you can then type the diary entry.

   "Cyclic" diary entries repeat after a fixed interval of days.  To
create one, select the starting date and use the 'i c' command.  The
command prompts for the length of interval, then inserts the entry,
which looks like this:

     %%(diary-cyclic 50 3 1 2012) Renew medication

This entry applies to March 1, 2012 and every 50th day following; '3 1
2012' specifies the starting date.  (If you are using the European or
ISO calendar style, the input order of month, day and year is
different.)

   All three of these commands make marking diary entries.  To insert a
nonmarking entry, give a prefix argument to the command.  For example,
'C-u i a' makes a nonmarking anniversary diary entry.

   Marking sexp diary entries in the calendar can be time-consuming,
since every date visible in the calendar window must be individually
checked.  So it's a good idea to make sexp diary entries nonmarking
(with '&') when possible.

   Another sophisticated kind of sexp entry, a "floating" diary entry,
specifies a regularly occurring event by offsets specified in days,
weeks, and months.  It is comparable to a crontab entry interpreted by
the 'cron' utility.  Here is a nonmarking, floating diary entry that
applies to the fourth Thursday in November:

     &%%(diary-float 11 4 4) American Thanksgiving

The 11 specifies November (the eleventh month), the 4 specifies Thursday
(the fourth day of the week, where Sunday is numbered zero), and the
second 4 specifies the fourth Thursday (1 would mean "first", 2 would
mean "second", -2 would mean "second-to-last", and so on).  The month
can be a single month or a list of months.  Thus you could change the 11
above to ''(1 2 3)' and have the entry apply to the last Thursday of
January, February, and March.  If the month is 't', the entry applies to
all months of the year.

   Each of the standard sexp diary entries takes an optional parameter
specifying the name of a face or a single-character string to use when
marking the entry in the calendar.  Most generally, sexp diary entries
can perform arbitrary computations to determine when they apply.  *Note
Sexp Diary Entries::.

==============================================================================
File: emacs.info,  Node: |Appointments|,  Next: |Importing_Diary|,  Prev: |Special_Diary_Entries|,  Up: |Diary|
==============================================================================

                                                                  *Appointments*

31.10.6 Appointments
--------------------

If you have a diary entry for an appointment, and that diary entry
begins with a recognizable time of day, Emacs can warn you in advance
that an appointment is pending.  Emacs alerts you to the appointment by
displaying a message in your chosen format, as specified by the variable
'appt-display-format'.  If the value of 'appt-audible' is non-'nil', the
warning includes an audible reminder.  In addition, if
'appt-display-mode-line' is non-'nil', Emacs displays the number of
minutes to the appointment on the mode line.

   If 'appt-display-format' has the value 'window', then the variable
'appt-display-duration' controls how long the reminder window is visible
for; and the variables 'appt-disp-window-function' and
'appt-delete-window-function' give the names of functions used to create
and destroy the window, respectively.

   To enable appointment notification, type 'M-x appt-activate'.  With a
positive argument, it enables notification; with a negative argument, it
disables notification; with no argument, it toggles.  Enabling
notification also sets up an appointment list for today from the diary
file, giving all diary entries found with recognizable times of day, and
reminds you just before each of them.

   For example, suppose the diary file contains these lines:

     Monday
       9:30am Coffee break
      12:00pm Lunch

Then on Mondays, you will be reminded at around 9:20am about your coffee
break and at around 11:50am about lunch.  The variable
'appt-message-warning-time' specifies how many minutes (default 12) in
advance to warn you.  This is a default warning time.  Each appointment
can specify a different warning time by adding a piece matching
'appt-warning-time-regexp' (see that variable's documentation for
details).

   You can write times in am/pm style (with '12:00am' standing for
midnight and '12:00pm' standing for noon), or 24-hour European/military
style.  You need not be consistent; your diary file can have a mixture
of the two styles.  Times must be at the beginning of diary entries if
they are to be recognized.

   Emacs updates the appointments list from the diary file automatically
just after midnight.  You can force an update at any time by re-enabling
appointment notification.  Both these actions also display the day's
diary buffer, unless you set 'appt-display-diary' to 'nil'.  The
appointments list is also updated whenever the diary file (or a file it
includes; see *note Fancy Diary Display::) is saved.  If you use the Org
Mode and keep appointments in your Org agenda files, you can add those
appointments to the list using the 'org-agenda-to-appt' command.  *Note
Appointment reminders: (org)Weekly/daily agenda, for more about that
command.

   You can also use the appointment notification facility like an alarm
clock.  The command 'M-x appt-add' adds entries to the appointment list
without affecting your diary file.  You delete entries from the
appointment list with 'M-x appt-delete'.

==============================================================================
File: emacs.info,  Node: |Importing_Diary|,  Prev: |Appointments|,  Up: |Diary|
==============================================================================

                                                               *Importing_Diary*

31.10.7 Importing and Exporting Diary Entries
---------------------------------------------

You can transfer diary entries between Emacs diary files and a variety
of other formats.

   You can import diary entries from Outlook-generated appointment
messages.  While viewing such a message in Rmail or Gnus, do 'M-x
diary-from-outlook' to import the entry.  You can make this command
recognize additional appointment message formats by customizing the
variable 'diary-outlook-formats'.  Other mail clients can set
'diary-from-outlook-function' to an appropriate value.

   The icalendar package allows you to transfer data between your Emacs
diary file and iCalendar files, which are defined in 'RFC 2445--Internet
Calendaring and Scheduling Core Object Specification (iCalendar)' (as
well as the earlier vCalendar format).

   The command 'icalendar-import-buffer' extracts iCalendar data from
the current buffer and adds it to your diary file.  This function is
also suitable for automatic extraction of iCalendar data; for example
with the Rmail mail client one could use:

     (add-hook 'rmail-show-message-hook 'icalendar-import-buffer)

   The command 'icalendar-import-file' imports an iCalendar file and
adds the results to an Emacs diary file.  For example:

     (icalendar-import-file "/here/is/calendar.ics"
                            "/there/goes/ical-diary")

You can use an '#include' directive to add the import file contents to
the main diary file, if these are different files.  *Note Fancy Diary
Display::.

   Use 'icalendar-export-file' to interactively export an entire Emacs
diary file to iCalendar format.  To export only a part of a diary file,
mark the relevant area, and call 'icalendar-export-region'.  In both
cases, Emacs appends the result to the target file.

==============================================================================
File: emacs.info,  Node: |Daylight_Saving|,  Next: |Time_Intervals|,  Prev: |Diary|,  Up: |Calendar/Diary|
==============================================================================

                                                               *Daylight_Saving*

31.11 Daylight Saving Time
--------------------------

Emacs understands the difference between standard time and daylight
saving time--the times given for sunrise, sunset, solstices, equinoxes,
and the phases of the moon take that into account.  The rules for
daylight saving time vary from place to place and have also varied
historically from year to year.  To do the job properly, Emacs needs to
know which rules to use.

   Some operating systems keep track of the rules that apply to the
place where you are; on these systems, Emacs gets the information it
needs from the system automatically.  If some or all of this information
is missing, Emacs fills in the gaps with the rules currently used in
Cambridge, Massachusetts.  If the resulting rules are not what you want,
you can tell Emacs the rules to use by setting certain variables:
'calendar-daylight-savings-starts' and 'calendar-daylight-savings-ends'.

   These values should be Lisp expressions that refer to the variable
'year', and evaluate to the Gregorian date on which daylight saving time
starts or (respectively) ends, in the form of a list '(MONTH DAY YEAR)'.
The values should be 'nil' if your area does not use daylight saving
time.

   Emacs uses these expressions to determine the starting date of
daylight saving time for the holiday list and for correcting times of
day in the solar and lunar calculations.

   The values for Cambridge, Massachusetts are as follows:

     (calendar-nth-named-day 2 0 3 year)
     (calendar-nth-named-day 1 0 11 year)

That is, the second 0th day (Sunday) of the third month (March) in the
year specified by 'year', and the first Sunday of the eleventh month
(November) of that year.  If daylight saving time were changed to start
on October 1, you would set 'calendar-daylight-savings-starts' to this:

     (list 10 1 year)

   If there is no daylight saving time at your location, or if you want
all times in standard time, set 'calendar-daylight-savings-starts' and
'calendar-daylight-savings-ends' to 'nil'.

   The variable 'calendar-daylight-time-offset' specifies the difference
between daylight saving time and standard time, measured in minutes.
The value for Cambridge, Massachusetts is 60.

   Finally, the two variables 'calendar-daylight-savings-starts-time'
and 'calendar-daylight-savings-ends-time' specify the number of minutes
after midnight local time when the transition to and from daylight
saving time should occur.  For Cambridge, Massachusetts both variables'
values are 120.

==============================================================================
File: emacs.info,  Node: |Time_Intervals|,  Next: |Advanced_Calendar/Diary_Usage|,  Prev: |Daylight_Saving|,  Up: |Calendar/Diary|
==============================================================================

                                                                *Time_Intervals*

31.12 Summing Time Intervals
----------------------------

The timeclock package adds up time intervals, so you can (for instance)
keep track of how much time you spend working on particular projects.
(A more advanced alternative is to use the Org Mode's facilities for
clocking time, *note (org)Clocking Work Time::).

   Use the 'M-x timeclock-in' command when you start working on a
project, and 'M-x timeclock-out' command when you're done.  Each time
you do this, it adds one time interval to the record of the project.
You can change to working on a different project with 'M-x
timeclock-change'.

   Once you've collected data from a number of time intervals, you can
use 'M-x timeclock-workday-remaining' to see how much time is left to
work today (assuming a typical average of 8 hours a day), and 'M-x
timeclock-when-to-leave' which will calculate when you're done.

   If you want Emacs to display the amount of time left of your workday
in the mode line, either customize the 'timeclock-mode-line-display'
variable and set its value to 't', or invoke the 'M-x
timeclock-mode-line-display' command.

   Terminating the current Emacs session might or might not mean that
you have stopped working on the project and, by default, Emacs asks you.
You can, however, customize the value of the variable
'timeclock-ask-before-exiting' to 'nil' to avoid the question; then,
only an explicit 'M-x timeclock-out' or 'M-x timeclock-change' will tell
Emacs that the current interval is over.

   The timeclock functions work by accumulating the data in a file
called '~/.emacs.d/timelog'.  You can specify a different name for this
file by customizing the variable 'timeclock-file'.  If you edit the
timeclock file manually, or if you change the value of any of
timeclock's customizable variables, you should run the command 'M-x
timeclock-reread-log' to update the data in Emacs from the file.

==============================================================================
File: emacs.info,  Node: |Advanced_Calendar/Diary_Usage|,  Prev: |Time_Intervals|,  Up: |Calendar/Diary|
==============================================================================

                                                 *Advanced_Calendar/Diary_Usage*

31.13 More advanced features of the Calendar and Diary
------------------------------------------------------

This section describes some of the more advanced/specialized features of
the calendar and diary.  It starts with some of the many ways in which
you can customize the calendar and diary to suit your personal tastes.

MENU

* |Calendar_Customizing|::   Calendar layout and hooks.
* |Holiday_Customizing|::    Defining your own holidays.
* |Mayan_Calendar|::         Moving to a date specified in a Mayan calendar.
* |Date_Display_Format|::    Changing the format.
* |Time_Display_Format|::    Changing the format.
* |Diary_Customizing|::      Defaults you can set.
* |Non_Gregorian_Diary|::    Diary entries based on other calendars.
* |Diary_Display|::          A choice of ways to display the diary.
* |Fancy_Diary_Display|::    Sorting diary entries, using included diary files.
* |Sexp_Diary_Entries|::     More flexible diary entries.

==============================================================================
File: emacs.info,  Node: |Calendar_Customizing|,  Next: |Holiday_Customizing|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                          *Calendar_Customizing*

31.13.1 Customizing the Calendar
--------------------------------

The calendar display unfortunately cannot be changed from three months,
but you can customize the whitespace used by setting the variables:
'calendar-left-margin', 'calendar-day-header-width',
'calendar-day-digit-width', 'calendar-column-width', and
'calendar-intermonth-spacing'.  To display text _between_ the months,
for example week numbers, customize the variables
'calendar-intermonth-header' and 'calendar-intermonth-text' as described
in their documentation.

   The variable 'calendar-month-header' controls the text that appears
above each month in the calendar.  By default, it shows the month and
year.  The variable 'calendar-day-header-array' controls the text that
appears above each day's column in every month.  By default, it shows
the first two letters of each day's name.

   The variable 'calendar-holiday-marker' specifies how to mark a date
that is a holiday.  Its value may be a single-character string to insert
next to the date, or a face name to use for displaying the date.
Likewise, the variable 'diary-entry-marker' specifies how to mark a date
that has diary entries.  The function 'calendar-mark-today' uses
'calendar-today-marker' to mark today's date.  By default, the calendar
uses faces named 'holiday', 'diary', and 'calendar-today' for these
purposes.

   Starting the calendar runs the normal hook
'calendar-initial-window-hook'.  Recomputation of the calendar display
does not run this hook.  But if you leave the calendar with the 'q'
command and reenter it, the hook runs again.

   The variable 'calendar-today-visible-hook' is a normal hook run after
the calendar buffer has been prepared with the calendar, when the
current date is visible in the window.  One use of this hook is to mark
today's date; to do that use either of the functions
'calendar-mark-today' or 'calendar-star-date':

     (add-hook 'calendar-today-visible-hook 'calendar-mark-today)

A similar normal hook, 'calendar-today-invisible-hook' is run if the
current date is _not_ visible in the window.

   Each of the calendar cursor motion commands runs the hook
'calendar-move-hook' after it moves the cursor.

==============================================================================
File: emacs.info,  Node: |Holiday_Customizing|,  Next: |Mayan_Calendar|,  Prev: |Calendar_Customizing|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                           *Holiday_Customizing*

31.13.2 Customizing the Holidays
--------------------------------

There are several variables listing the default holidays that Emacs
knows about.  These are: 'holiday-general-holidays',
'holiday-local-holidays', 'holiday-solar-holidays',
'holiday-bahai-holidays', 'holiday-christian-holidays',
'holiday-hebrew-holidays', 'holiday-islamic-holidays',
'holiday-oriental-holidays', and 'holiday-other-holidays'.  The names
should be self-explanatory; e.g., 'holiday-solar-holidays' lists sun-
and moon-related holidays.

   You can customize these lists of holidays to your own needs, deleting
or adding holidays as described below.  Set any of them to 'nil' to not
show the associated holidays.

   The general holidays are, by default, holidays common throughout the
United States.  In contrast, 'holiday-local-holidays' and
'holiday-other-holidays' are both empty by default.  These are intended
for system-wide settings and your individual use, respectively.

   By default, Emacs does not include all the holidays of the religions
that it knows, only those commonly found in secular calendars.  For a
more extensive collection of religious holidays, you can set any (or
all) of the variables 'calendar-bahai-all-holidays-flag',
'calendar-christian-all-holidays-flag',
'calendar-hebrew-all-holidays-flag', or
'calendar-islamic-all-holidays-flag' to 't'.

   Each of the holiday variables is a list of "holiday forms", each form
describing a holiday (or sometimes a list of holidays).  Here is a table
of the possible kinds of holiday form.  Day numbers and month numbers
count starting from 1, but "dayname" numbers count Sunday as 0.  The
argument STRING is always the description of the holiday, as a string.

'(holiday-fixed MONTH DAY STRING)'
     A fixed date on the Gregorian calendar.

'(holiday-float MONTH DAYNAME K STRING'
     &optional DAY) The Kth DAYNAME (DAYNAME=0 for Sunday, and so on)
     after or before Gregorian date MONTH, DAY.  Negative K means count
     back from the end of the month.  Optional DAY defaults to 1 if K is
     positive, and the last day of MONTH otherwise.

'(holiday-chinese MONTH DAY STRING)'
     A fixed date on the Chinese calendar.

'(holiday-hebrew MONTH DAY STRING)'
     A fixed date on the Hebrew calendar.

'(holiday-islamic MONTH DAY STRING)'
     A fixed date on the Islamic calendar.

'(holiday-julian MONTH DAY STRING)'
     A fixed date on the Julian calendar.

'(holiday-sexp SEXP STRING)'
     A date calculated by the Lisp expression SEXP.  The expression
     should use the variable 'year' to compute and return the date of a
     holiday in the form of a list '(MONTH DAY YEAR)', or 'nil' if the
     holiday doesn't happen this year.

'(if CONDITION HOLIDAY-FORM)'
     A holiday that happens only if CONDITION is true.

'(FUNCTION [ARGS])'
     A list of dates calculated by the function FUNCTION, called with
     arguments ARGS.

   For example, suppose you want to add Bastille Day, celebrated in
France on July 14 (i.e., the fourteenth day of the seventh month).  You
can do this as follows:

     (setq holiday-other-holidays '((holiday-fixed 7 14 "Bastille Day")))

   Many holidays occur on a specific day of the week, at a specific time
of month.  Here is a holiday form describing Hurricane Supplication Day,
celebrated in the Virgin Islands on the fourth Monday in July:

     (holiday-float 7 1 4 "Hurricane Supplication Day")

Here the 7 specifies July, the 1 specifies Monday (Sunday is 0, Tuesday
is 2, and so on), and the 4 specifies the fourth occurrence in the month
(1 specifies the first occurrence, 2 the second occurrence, -1 the last
occurrence, -2 the second-to-last occurrence, and so on).

   You can specify holidays that occur on fixed days of the Bah??'??,
Chinese, Hebrew, Islamic, and Julian calendars too.  For example,

     (setq holiday-other-holidays
           '((holiday-hebrew 10 2 "Last day of Hanukkah")
             (holiday-islamic 3 12 "Mohammed's Birthday")
             (holiday-julian 4 2 "Jefferson's Birthday")))

adds the last day of Hanukkah (since the Hebrew months are numbered with
1 starting from Nisan), the Islamic feast celebrating Mohammed's
birthday (since the Islamic months are numbered from 1 starting with
Muharram), and Thomas Jefferson's birthday, which is 2 April 1743 on the
Julian calendar.

   To include a holiday conditionally, use either Emacs Lisp's 'if' or
the 'holiday-sexp' form.  For example, American presidential elections
occur on the first Tuesday after the first Monday in November of years
divisible by 4:

     (holiday-sexp '(if (zerop (% year 4))
                        (calendar-gregorian-from-absolute
                         (1+ (calendar-dayname-on-or-before
                               1 (+ 6 (calendar-absolute-from-gregorian
                                       (list 11 1 year)))))))
                   "US Presidential Election")

or

     (if (zerop (% displayed-year 4))
         (holiday-fixed 11
                (calendar-extract-day
                  (calendar-gregorian-from-absolute
                    (1+ (calendar-dayname-on-or-before
                          1 (+ 6 (calendar-absolute-from-gregorian
                                   (list 11 1 displayed-year)))))))
                "US Presidential Election"))

   Some holidays just don't fit into any of these forms because special
calculations are involved in their determination.  In such cases you
must write a Lisp function to do the calculation.  To include eclipses,
for example, add '(eclipses)' to 'holiday-other-holidays' and write an
Emacs Lisp function 'eclipses' that returns a (possibly empty) list of
the relevant Gregorian dates among the range visible in the calendar
window, with descriptive strings, like this:

     (((6 4 2012) "Lunar Eclipse") ((11 13 2012) "Solar Eclipse") ... )

==============================================================================
File: emacs.info,  Node: |Mayan_Calendar|,  Next: |Date_Display_Format|,  Prev: |Holiday_Customizing|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                                *Mayan_Calendar*

31.13.3 Converting from the Mayan Calendar
------------------------------------------

Here are the commands to select dates based on the Mayan calendar:

'g m l'
     Move to a date specified by the long count calendar
     ('calendar-mayan-goto-long-count-date').
'g m n t'
     Move to the next occurrence of a place in the tzolkin calendar
     ('calendar-mayan-next-tzolkin-date').
'g m p t'
     Move to the previous occurrence of a place in the tzolkin calendar
     ('calendar-mayan-previous-tzolkin-date').
'g m n h'
     Move to the next occurrence of a place in the haab calendar
     ('calendar-mayan-next-haab-date').
'g m p h'
     Move to the previous occurrence of a place in the haab calendar
     ('calendar-mayan-previous-haab-date').
'g m n c'
     Move to the next occurrence of a place in the calendar round
     ('calendar-mayan-next-calendar-round-date').
'g m p c'
     Move to the previous occurrence of a place in the calendar round
     ('calendar-mayan-previous-calendar-round-date').

   To understand these commands, you need to understand the Mayan
calendars.  The "long count" is a counting of days with these units:

     1 kin = 1 day   1 uinal = 20 kin   1 tun = 18 uinal
     1 katun = 20 tun   1 baktun = 20 katun

Thus, the long count date 12.16.11.16.6 means 12 baktun, 16 katun, 11
tun, 16 uinal, and 6 kin.  The Emacs calendar can handle Mayan long
count dates as early as 7.17.18.13.3, but no earlier.  When you use the
'g m l' command, type the Mayan long count date with the baktun, katun,
tun, uinal, and kin separated by periods.

   The Mayan tzolkin calendar is a cycle of 260 days formed by a pair of
independent cycles of 13 and 20 days.  Since this cycle repeats
endlessly, Emacs provides commands to move backward and forward to the
previous or next point in the cycle.  Type 'g m p t' to go to the
previous tzolkin date; Emacs asks you for a tzolkin date and moves point
to the previous occurrence of that date.  Similarly, type 'g m n t' to
go to the next occurrence of a tzolkin date.

   The Mayan haab calendar is a cycle of 365 days arranged as 18 months
of 20 days each, followed by a 5-day monthless period.  Like the tzolkin
cycle, this cycle repeats endlessly, and there are commands to move
backward and forward to the previous or next point in the cycle.  Type
'g m p h' to go to the previous haab date; Emacs asks you for a haab
date and moves point to the previous occurrence of that date.
Similarly, type 'g m n h' to go to the next occurrence of a haab date.

   The Maya also used the combination of the tzolkin date and the haab
date.  This combination is a cycle of about 52 years called a _calendar
round_.  If you type 'g m p c', Emacs asks you for both a haab and a
tzolkin date and then moves point to the previous occurrence of that
combination.  Use 'g m n c' to move point to the next occurrence of a
combination.  These commands signal an error if the haab/tzolkin date
combination you have typed is impossible.

   Emacs uses strict completion (*note Completion Exit::) whenever it
asks you to type a Mayan name, so you don't have to worry about
spelling.

==============================================================================
File: emacs.info,  Node: |Date_Display_Format|,  Next: |Time_Display_Format|,  Prev: |Mayan_Calendar|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                           *Date_Display_Format*

31.13.4 Date Display Format
---------------------------

You can customize the way dates are displayed in the diary, mode lines,
and messages by setting 'calendar-date-display-form'.  This variable
holds a list of expressions that can involve the variables 'month',
'day', and 'year', which are all numbers in string form, and 'monthname'
and 'dayname', which are both alphabetic strings.  In the American
style, the default value of this list is as follows:

     ((if dayname (concat dayname ", ")) monthname " " day ", " year)

while in the European style this value is the default:

     ((if dayname (concat dayname ", ")) day " " monthname " " year)

The default ISO date representation is:

     ((format "%s-%.2d-%.2d" year (string-to-number month)
              (string-to-number day)))

Another typical American format is:

     (month "/" day "/" (substring year -2))

==============================================================================
File: emacs.info,  Node: |Time_Display_Format|,  Next: |Diary_Customizing|,  Prev: |Date_Display_Format|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                           *Time_Display_Format*

31.13.5 Time Display Format
---------------------------

The calendar and diary by default display times of day in the
conventional American style with the hours from 1 through 12, minutes,
and either 'am' or 'pm'.  If you prefer the European style, also known
in the US as military, in which the hours go from 00 to 23, you can
alter the variable 'calendar-time-display-form'.  This variable is a
list of expressions that can involve the variables '12-hours',
'24-hours', and 'minutes', which are all numbers in string form, and
'am-pm' and 'time-zone', which are both alphabetic strings.  The default
value is:

     (12-hours ":" minutes am-pm
               (if time-zone " (") time-zone (if time-zone ")"))

Here is a value that provides European style times:

     (24-hours ":" minutes
               (if time-zone " (") time-zone (if time-zone ")"))

   Note that few calendar functions return a time of day (at present,
only solar functions).

==============================================================================
File: emacs.info,  Node: |Diary_Customizing|,  Next: |Non_Gregorian_Diary|,  Prev: |Time_Display_Format|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                             *Diary_Customizing*

31.13.6 Customizing the Diary
-----------------------------

Ordinarily, the diary window indicates any holidays that fall on the
date of the diary entries, either in the mode line or the buffer itself.
The process of checking for holidays can be slow, depending on the
defined holidays.  In that case, setting 'diary-show-holidays-flag' to
'nil' will speed up the diary display.

   The variable 'diary-number-of-entries' controls the number of days of
diary entries to be displayed at one time.  It affects the initial
display when 'calendar-view-diary-initially-flag' is 't', as well as the
command 'M-x diary'.  For example, a value of 1 (the default) displays
only the current day's diary entries, whereas a value of 2 will also
show the next day's entries.  The value can also be a vector of seven
integers: for example, if the value is '[0 2 2 2 2 4 1]' then no diary
entries appear on Sunday, the current date's and the next day's diary
entries appear Monday through Thursday, Friday through Monday's entries
appear on Friday, while on Saturday only that day's entries appear.

   You can customize the form of dates in your diary file by setting the
variable 'diary-date-forms'.  This variable is a list of patterns for
recognizing a date.  Each date pattern is a list whose elements may be
regular expressions (*note (elisp)Regular Expressions::) or the symbols
'month', 'day', 'year', 'monthname', and 'dayname'.  All these elements
serve as patterns that match certain kinds of text in the diary file.
In order for the date pattern as a whole to match, all of its elements
must match consecutively.

   A regular expression in a date pattern matches in its usual fashion,
using the standard syntax table altered so that '*' is a word
constituent.

   The symbols 'month', 'day', 'year', 'monthname', and 'dayname' match
the month number, day number, year number, month name, and day name of
the date being considered.  The symbols that match numbers allow leading
zeros; those that match names allow capitalization and abbreviation (as
specified by 'calendar-month-abbrev-array' and
'calendar-day-abbrev-array').  All the symbols can match '*'; since '*'
in a diary entry means "any day", "any month", and so on, it should
match regardless of the date being considered.

   The default value of 'diary-date-forms' in the American style is
provided by 'diary-american-date-forms':

     ((month "/" day "[^/0-9]")
      (month "/" day "/" year "[^0-9]")
      (monthname " *" day "[^,0-9]")
      (monthname " *" day ", *" year "[^0-9]")
      (dayname "\\W"))

The variables 'diary-european-date-forms' and 'diary-iso-date-forms'
provide other default styles.

   The date patterns in the list must be _mutually exclusive_ and must
not match any portion of the diary entry itself, just the date and one
character of whitespace.  If, to be mutually exclusive, the pattern must
match a portion of the diary entry text--beyond the whitespace that ends
the date--then the first element of the date pattern _must_ be 'backup'.
This causes the date recognizer to back up to the beginning of the
current word of the diary entry, after finishing the match.  Even if you
use 'backup', the date pattern must absolutely not match more than a
portion of the first word of the diary entry.  For example, the default
value of 'diary-european-date-forms' is:

     ((day "/" month "[^/0-9]")
      (day "/" month "/" year "[^0-9]")
      (backup day " *" monthname "\\W+\\<\\([^*0-9]\\|\\([0-9]+[:aApP]\\)\\)")
      (day " *" monthname " *" year "[^0-9]")
      (dayname "\\W"))

Notice the use of 'backup' in the third pattern, because it needs to
match part of a word beyond the date itself to distinguish it from the
fourth pattern.

==============================================================================
File: emacs.info,  Node: |Non_Gregorian_Diary|,  Next: |Diary_Display|,  Prev: |Diary_Customizing|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                           *Non_Gregorian_Diary*

31.13.7 Diary Entries Using non-Gregorian Calendars
---------------------------------------------------

As well as entries based on the standard Gregorian calendar, your diary
can have entries based on Bah??'??, Chinese, Hebrew, or Islamic dates.
Recognition of such entries can be time-consuming, however, and since
most people don't use them, you must explicitly enable their use.  If
you want the diary to recognize Hebrew-date diary entries, for example,
you must do this:

     (add-hook 'diary-nongregorian-listing-hook 'diary-hebrew-list-entries)
     (add-hook 'diary-nongregorian-marking-hook 'diary-hebrew-mark-entries)

Similarly, for Islamic, Bah??'?? and Chinese entries, add
'diary-islamic-list-entries' and 'diary-islamic-mark-entries',
'diary-bahai-list-entries' and 'diary-bahai-mark-entries', or
'diary-chinese-list-entries' and 'diary-chinese-mark-entries'.

   These diary entries have the same formats as Gregorian-date diary
entries; except that 'diary-bahai-entry-symbol' (default 'B') must
precede a Bah??'?? date, 'diary-chinese-entry-symbol' (default 'C') a
Chinese date, 'diary-hebrew-entry-symbol' (default 'H') a Hebrew date,
and 'diary-islamic-entry-symbol' (default 'I') an Islamic date.
Moreover, non-Gregorian month names may not be abbreviated (because the
first three letters are often not unique).  (Note also that you must use
"Adar I" if you want Adar of a common Hebrew year.)  For example, a
diary entry for the Hebrew date Heshvan 25 could look like this:

     HHeshvan 25 Happy Hebrew birthday!

and would appear in the diary for any date that corresponds to Heshvan
25 on the Hebrew calendar.  And here is an Islamic-date diary entry that
matches Dhu al-Qada 25:

     IDhu al-Qada 25 Happy Islamic birthday!

   As with Gregorian-date diary entries, non-Gregorian entries are
nonmarking if preceded by 'diary-nonmarking-symbol' (default '&').

   Here is a table of commands used in the calendar to create diary
entries that match the selected date and other dates that are similar in
the Bah??'??, Chinese, Hebrew, or Islamic calendars:

'i h d'
     'diary-hebrew-insert-entry'
'i h m'
     'diary-hebrew-insert-monthly-entry'
'i h y'
     'diary-hebrew-insert-yearly-entry'
'i i d'
     'diary-islamic-insert-entry'
'i i m'
     'diary-islamic-insert-monthly-entry'
'i i y'
     'diary-islamic-insert-yearly-entry'
'i B d'
     'diary-bahai-insert-entry'
'i B m'
     'diary-bahai-insert-monthly-entry'
'i B y'
     'diary-bahai-insert-yearly-entry'
'i C d'
     'diary-chinese-insert-entry'
'i C m'
     'diary-chinese-insert-monthly-entry'
'i C y'
     'diary-chinese-insert-yearly-entry'
'i C a'
     'diary-chinese-insert-anniversary-entry'

   These commands work much like the corresponding commands for ordinary
diary entries: they apply to the date that point is on in the calendar
window, and what they do is insert just the date portion of a diary
entry at the end of your diary file.  You must then insert the rest of
the diary entry.  The basic commands add an entry for the specific
non-Gregorian date, the 'monthly' commands for the given non-Gregorian
day-within-month in every month, and the 'yearly' commands for the given
non-Gregorian day and month in every year.

==============================================================================
File: emacs.info,  Node: |Diary_Display|,  Next: |Fancy_Diary_Display|,  Prev: |Non_Gregorian_Diary|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                                 *Diary_Display*

31.13.8 Diary Display
---------------------

Diary display works by preparing the list of diary entries and then
running the function specified by the variable 'diary-display-function'.
The default value 'diary-fancy-display' displays diary entries and
holidays by copying them into a special buffer that exists only for the
sake of display.  Copying diary entries to a separate buffer provides an
opportunity to change the displayed text to make it prettier--for
example, to sort the entries by the dates they apply to.

   Ordinarily, the fancy diary buffer does not show days for which there
are no diary entries, even if that day is a holiday.  If you want such
days to be shown in the fancy diary buffer, set the variable
'diary-list-include-blanks' to 't'.

   The fancy diary buffer enables View mode (*note View Mode::).

   The alternative display method 'diary-simple-display' shows the
actual diary buffer, and uses invisible text to hide entries that don't
apply.  Holidays are shown in the mode line.  The advantage of this
method is that you can edit the buffer and save your changes directly to
the diary file.  This method is not as flexible as the fancy method,
however.  For example, it cannot sort entries.  Another disadvantage is
that invisible text can be confusing.  For example, if you copy a region
of text in order to paste it elsewhere, invisible text may be included.
Similarly, since the diary buffer as you see it is an illusion, simply
printing the buffer may not print what you see on your screen.

   For this reason, there is a special command to print hard copy of the
diary buffer _as it appears_; this command is 'M-x diary-print-entries'.
It works with either display method, although with the fancy display you
can also print the buffer like any other.  To print a hard copy of a
day-by-day diary for a week, position point on the first day of the
week, type '7 d', and then do 'M-x diary-print-entries'.  As usual, the
inclusion of the holidays slows down the display slightly; you can speed
things up by setting the variable 'diary-show-holidays-flag' to 'nil'.

   This command prepares a temporary buffer that contains only the diary
entries currently visible in the diary buffer.  Unlike with the simple
display, the other irrelevant entries are really absent, not just
hidden.  After preparing the buffer, it runs the hook
'diary-print-entries-hook'.  The default value of this hook sends the
data directly to the printer with the command 'lpr-buffer' (*note
Printing::).  If you want to use a different command to do the printing,
just change the value of this hook.  Other uses might include, for
example, rearranging the lines into order by day and time.

   You can edit the diary entries as they appear in the simple diary
window, but it is important to remember that the buffer displayed
contains the _entire_ diary file, with portions of it concealed from
view.  This means, for instance, that the 'C-f' ('forward-char') command
can put point at what appears to be the end of the line, but what is in
reality the middle of some concealed line.

   _Be careful when editing the diary entries in the simple display!_
Inserting additional lines or adding/deleting characters in the middle
of a visible line cannot cause problems, but editing at the end of a
line may not do what you expect.  Deleting a line may delete other
invisible entries that follow it.  Before editing the simple diary
buffer, it is best to display the entire file with 's'
('diary-show-all-entries').

==============================================================================
File: emacs.info,  Node: |Fancy_Diary_Display|,  Next: |Sexp_Diary_Entries|,  Prev: |Diary_Display|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                           *Fancy_Diary_Display*

31.13.9 Fancy Diary Display
---------------------------

The following features only work with the fancy diary display.

   You can use the normal hook 'diary-list-entries-hook' to sort each
day's diary entries by their time of day.  Here's how:

     (add-hook 'diary-list-entries-hook 'diary-sort-entries t)

For each day, this sorts diary entries that begin with a recognizable
time of day according to their times.  Diary entries without times come
first within each day.  Note how the sort command is placed at the end
of the hook list, in case earlier members of the list change the order
of the diary entries, or add items.

   You can write 'comments' in diary entries, by setting the variables
'diary-comment-start' and 'diary-comment-end' to strings that delimit
comments.  The fancy display does not print comments.  You might want to
put meta-data for the use of other packages (e.g., the appointment
package, *note Appointments::) inside comments.

   Your main diary file can include other files.  This permits a group
of people to share a diary file for events that apply to all of them.
Lines in the diary file starting with 'diary-include-string':

     #include "FILENAME"

include the diary entries from the file FILENAME in the fancy diary
buffer.  The include mechanism is recursive, so that included files can
include other files, and so on (you must be careful not to have a cycle
of inclusions, of course).  Here is how to enable the include facility:

     (add-hook 'diary-list-entries-hook 'diary-include-other-diary-files)
     (add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)

   The include mechanism works only with the fancy diary display,
because simple diary display shows the entries directly from your diary
file.

==============================================================================
File: emacs.info,  Node: |Sexp_Diary_Entries|,  Prev: |Fancy_Diary_Display|,  Up: |Advanced_Calendar/Diary_Usage|
==============================================================================

                                                            *Sexp_Diary_Entries*

31.13.10 Sexp Entries and the Fancy Diary Display
-------------------------------------------------

Sexp diary entries allow you to do more than just have complicated
conditions under which a diary entry applies.  Sexp entries should be
preceded by 'diary-sexp-entry-symbol' (default '%%') in the diary file.
With the fancy diary display, sexp entries can generate the text of the
entry depending on the date itself.

   For example, an anniversary diary entry can insert the number of
years since the anniversary date into the text of the diary entry.  Thus
the '%d' in this diary entry:

     %%(diary-anniversary 10 31 1948) Arthur's birthday (%d years old)

gets replaced by the age, so on October 31, 1990 the entry appears in
the fancy diary buffer like this:

     Arthur's birthday (42 years old)

If the diary file instead contains this entry:

     %%(diary-anniversary 10 31 1948) Arthur's %d%s birthday

the entry in the fancy diary buffer for October 31, 1990 appears like
this:

     Arthur's 42nd birthday

   Similarly, cyclic diary entries can interpolate the number of
repetitions that have occurred:

     %%(diary-cyclic 50 1 1 2012) Renew medication (%d%s time)

looks like this:

     Renew medication (5th time)

in the fancy diary display on September 7, 2012.

   There is an early-reminder diary sexp that includes its entry in the
diary not only on the date of occurrence, but also on earlier dates.
For example, if you want a reminder a week before your anniversary, you
can use

     %%(diary-remind '(diary-anniversary 12 22 1968) 7) Ed's anniversary

and the fancy diary will show 'Ed's anniversary' both on December 15 and
on December 22.

   The function 'diary-date' applies to dates described by a month, day,
year combination, each of which can be an integer, a list of integers,
or 't' (meaning all values).  For example,

     %%(diary-date '(10 11 12) 22 t) Rake leaves

causes the fancy diary to show

     Rake leaves

on October 22, November 22, and December 22 of every year.

   The function 'diary-float' allows you to describe diary entries that
apply to dates like the third Friday of November, or the last Tuesday in
April.  The parameters are the MONTH, DAYNAME, and an index N.  The
entry appears on the Nth DAYNAME after the first day of MONTH, where
DAYNAME=0 means Sunday, 1 means Monday, and so on.  If N is negative it
counts backward from the end of MONTH.  The value of MONTH can be a list
of months, a single month, or 't' to specify all months.  You can also
use an optional parameter DAY to specify the Nth DAYNAME on or
after/before DAY of MONTH; the value of DAY defaults to 1 if N is
positive and to the last day of MONTH if N is negative.  For example,

     %%(diary-float t 1 -1) Pay rent

causes the fancy diary to show

     Pay rent

on the last Monday of every month.

   The generality of sexp diary entries lets you specify any diary entry
that you can describe algorithmically.  A sexp diary entry contains an
expression that computes whether the entry applies to any given date.
If its value is non-'nil', the entry applies to that date; otherwise, it
does not.  The expression can use the variable 'date' to find the date
being considered; its value is a list (MONTH DAY YEAR) that refers to
the Gregorian calendar.

   The sexp diary entry applies to a date when the expression's value is
non-'nil', but some values have more specific meanings.  If the value is
a string, that string is a description of the event which occurs on that
date.  The value can also have the form '(MARK . STRING)'; then MARK
specifies how to mark the date in the calendar, and STRING is the
description of the event.  If MARK is a single-character string, that
character appears next to the date in the calendar.  If MARK is a face
name, the date is displayed in that face.  If MARK is 'nil', that
specifies no particular highlighting for the date.

   Suppose you get paid on the 21st of the month if it is a weekday, and
on the Friday before if the 21st is on a weekend.  Here is how to write
a sexp diary entry that matches those dates:

     &%%(let ((dayname (calendar-day-of-week date))
              (day (cadr date)))
           (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
               (and (memq day '(19 20)) (= dayname 5)))
              ) Pay check deposited

   The following sexp diary entries take advantage of the ability (in
the fancy diary display) to concoct diary entries whose text varies
based on the date:

'%%(diary-sunrise-sunset)'
     Make a diary entry for today's local times of sunrise and sunset.
'%%(diary-lunar-phases)'
     Make a diary entry for the phases (quarters) of the moon.
'%%(diary-day-of-year)'
     Make a diary entry with today's day number in the current year and
     the number of days remaining in the current year.
'%%(diary-iso-date)'
     Make a diary entry with today's equivalent ISO commercial date.
'%%(diary-julian-date)'
     Make a diary entry with today's equivalent Julian calendar date.
'%%(diary-astro-day-number)'
     Make a diary entry with today's equivalent astronomical (Julian)
     day number.
'%%(diary-bahai-date)'
     Make a diary entry with today's equivalent Bah??'?? calendar date.
'%%(diary-chinese-date)'
     Make a diary entry with today's equivalent Chinese calendar date.
'%%(diary-coptic-date)'
     Make a diary entry with today's equivalent Coptic calendar date.
'%%(diary-ethiopic-date)'
     Make a diary entry with today's equivalent Ethiopic calendar date.
'%%(diary-french-date)'
     Make a diary entry with today's equivalent date on the French
     Revolutionary calendar.
'%%(diary-hebrew-date)'
     Make a diary entry with today's equivalent Hebrew calendar date.
'%%(diary-islamic-date)'
     Make a diary entry with today's equivalent Islamic calendar date.
'%%(diary-mayan-date)'
     Make a diary entry with today's equivalent Mayan calendar date.
'%%(diary-persian-date)'
     Make a diary entry with today's equivalent Persian calendar date.

For example, including the diary entry

     &%%(diary-hebrew-date)

causes every day's diary display to contain the equivalent date on the
Hebrew calendar, if you are using the fancy diary display.  (With simple
diary display, the literal line '&%%(diary-hebrew-date)' appears in the
diary for any date.)

   This function has been used to construct certain standard Hebrew sexp
diary entries:

'%%(diary-hebrew-rosh-hodesh)'
     Make a diary entry that tells the occurrence and ritual
     announcement of each new Hebrew month.
'%%(diary-hebrew-parasha)'
     Make a Saturday diary entry that tells the weekly synagogue
     scripture reading.
'%%(diary-hebrew-sabbath-candles)'
     Make a Friday diary entry that tells the _local time_ of Sabbath
     candle lighting.
'%%(diary-hebrew-omer)'
     Make a diary entry that gives the omer count, when appropriate.
'%%(diary-hebrew-yahrzeit MONTH DAY YEAR) NAME'
     Make a diary entry marking the anniversary of a date of death.  The
     date is the _Gregorian_ (civil) date of death.  The diary entry
     appears on the proper Hebrew calendar anniversary and on the day
     before.  (The order of the parameters changes according to the
     calendar date style; for example in the European style to DAY,
     MONTH, YEAR.)
'%%(diary-hebrew-birthday MONTH DAY YEAR)'
     Make a diary entry for a birthday on the Hebrew calendar.

   All the functions documented above take an optional argument MARK
which specifies how to mark the date in the calendar display.  If one of
these functions decides that it applies to a certain date, it returns a
value that contains MARK, as described above.

==============================================================================
File: emacs.info,  Node: |Sending_Mail|,  Next: |Rmail|,  Prev: |Calendar/Diary|,  Up: |Top|
==============================================================================

                                                                  *Sending_Mail*

32 Sending Mail
===============

To send an email message from Emacs, type 'C-x m'.  This switches to a
buffer named '*unsent mail*', where you can edit the text and headers of
the message.  When done, type 'C-c C-s' or 'C-c C-c' to send it.

'C-x m'
     Begin composing mail ('compose-mail').
'C-x 4 m'
     Likewise, in another window ('compose-mail-other-window').
'C-x 5 m'
     Likewise, but in a new frame ('compose-mail-other-frame').
'C-c C-s'
     In the mail buffer, send the message ('message-send').
'C-c C-c'
     In the mail buffer, send the message and bury the buffer
     ('message-send-and-exit').

   The mail buffer is an ordinary Emacs buffer, so you can switch to
other buffers while composing the mail.  If you want to send another
message before finishing the current one, type 'C-x m' again to open a
new mail buffer whose name has a different numeric suffix (*note Misc
Buffer::).  (This only works if you use the default Message mode to
compose email; see *note Mail Commands::.)  If you know that you'd like
to continue composing the unsent message you were editing, invoke this
command with a prefix argument, 'C-u C-x m', and Emacs will switch to
the last mail buffer you used and let you pick up editing the message
where you left off.

   The command 'C-x 4 m' ('compose-mail-other-window') does the same as
'C-x m', except it displays the mail buffer in a different window.  The
command 'C-x 5 m' ('compose-mail-other-frame') does it in a new frame.

   When you type 'C-c C-c' or 'C-c C-s' to send the mail, Emacs may ask
you how it should deliver the mail--either directly via SMTP, or using
some other method.  *Note Mail Sending::, for details.

MENU

* Format: Mail Format.        Format of a mail message.
* Headers: Mail Headers.      Details of some standard mail header fields.
* Aliases: Mail Aliases.      Abbreviating and grouping mail addresses.
* Commands: Mail Commands.    Special commands for editing mail being composed.
* Signature: Mail Signature.  Adding a signature to every message.
* Amuse: Mail Amusements.     Distracting the NSA; adding fortune messages.
* Methods: Mail Methods.      Using alternative mail-composition methods.

==============================================================================
File: emacs.info,  Node: |Mail_Format|,  Next: |Mail_Headers|,  Up: |Sending_Mail|
==============================================================================

                                                                   *Mail_Format*

32.1 The Format of the Mail Buffer
----------------------------------

Here is an example of the contents of a mail buffer:

     To: subotai@example.org
     CC: mongol.soldier@example.net, rms@gnu.org
     Subject: Re: What is best in life?
     From: conan@example.org
     --text follows this line--
     To crush your enemies, see them driven before you, and to
     hear the lamentation of their women.

At the top of the mail buffer is a set of "header fields", which are
used for specifying information about the email's recipient(s), subject,
and so on.  The above buffer contains header fields for 'To', 'CC',
'Subject', and 'From'.  Some header fields are automatically
pre-initialized in the mail buffer, when appropriate.

   The line that says '--text follows this line--' separates the header
fields from the "body" (or "text") of the message.  Everything above
that line is treated as part of the headers; everything below it is
treated as the body.  The delimiter line itself does not appear in the
message actually sent.

   You can insert and edit header fields using ordinary editing
commands.  *Note Header Editing::, for commands specific to editing
header fields.  Certain headers, such as 'Date' and 'Message-Id', are
normally omitted from the mail buffer and are created automatically when
the message is sent.

==============================================================================
File: emacs.info,  Node: |Mail_Headers|,  Next: |Mail_Aliases|,  Prev: |Mail_Format|,  Up: |Sending_Mail|
==============================================================================

                                                                  *Mail_Headers*

32.2 Mail Header Fields
-----------------------

A header field in the mail buffer starts with a field name at the
beginning of a line, terminated by a colon.  Upper and lower case are
equivalent in field names.  After the colon and optional whitespace
comes the contents of the field.

   You can use any name you like for a header field, but normally people
use only standard field names with accepted meanings.

   The 'From' header field identifies the person sending the email
(i.e., you).  This should be a valid mailing address, as replies are
normally sent there.  The default contents of this header field are
computed from the variables 'user-full-name' (which specifies your full
name) and 'user-mail-address' (your email address).  On some operating
systems, Emacs initializes these two variables using environment
variables (*note General Variables::).  If this information is
unavailable or wrong, you should customize the variables yourself (*note
Easy Customization::).

   Apart from 'From', here is a table of commonly-used fields:

'To'
     The mailing address(es) to which the message is addressed.  To list
     more than one address, use commas to separate them.

'Subject'
     The subject of the message.

'CC'
     Additional mailing address(es) to send the message to.  This is
     like 'To', except that these readers should not regard the message
     as directed at them.

'BCC'
     Additional mailing address(es) to send the message to, which should
     not appear in the header of the message actually sent.  'BCC'
     stands for "blind carbon copies".

'FCC'
     The name of a file, to which a copy of the sent message should be
     appended.  Emacs writes the message in mbox format, unless the file
     is in Babyl format (used by Rmail before Emacs 23), in which case
     Emacs writes in Babyl format.  If an Rmail buffer is visiting the
     file, Emacs updates it accordingly.  To specify more than one file,
     use several 'FCC' fields, with one file name in each field.

'Reply-To'
     An address to which replies should be sent, instead of 'From'.
     This is used if, for some reason, your 'From' address cannot
     receive replies.

'Mail-Reply-To'
     This field takes precedence over 'Reply-To'.  It is used because
     some mailing lists set the 'Reply-To' field for their own purposes
     (a somewhat controversial practice).

'Mail-Followup-To'
     One of more address(es) to use as default recipient(s) for
     follow-up messages.  This is typically used when you reply to a
     message from a mailing list that you are subscribed to, and want
     replies to go to the list without sending an extra copy to you.

'In-Reply-To'
     An identifier for the message you are replying to.  Most mail
     readers use this information to group related messages together.
     Normally, this header is filled in automatically when you reply to
     a message in any mail program built into Emacs.

'References'
     Identifiers for previous related messages.  Like 'In-Reply-To',
     this is normally filled in automatically for you.

The 'To', 'CC', and 'BCC' fields can appear any number of times, and
each such header field can contain multiple addresses, separated by
commas.  This way, you can specify any number of places to send the
message.  These fields can also have continuation lines: one or more
lines starting with whitespace, following the starting line of the
field, are considered part of the field.  Here's an example of a 'To'
field with a continuation line:

     To: foo@example.net, this@example.net,
       bob@example.com

   You can direct Emacs to insert certain default headers into the mail
buffer by setting the variable 'mail-default-headers' to a string.  Then
'C-x m' inserts this string into the message headers.  For example, here
is how to add a 'Reply-To' and 'FCC' header to each message:

     (setq mail-default-headers
           "Reply-To: foo@example.com\nFCC: ~/Mail/sent")

If the default header fields are not appropriate for a particular
message, edit them as necessary before sending the message.

==============================================================================
File: emacs.info,  Node: |Mail_Aliases|,  Next: |Mail_Commands|,  Prev: |Mail_Headers|,  Up: |Sending_Mail|
==============================================================================

                                                                  *Mail_Aliases*

32.3 Mail Aliases
-----------------

You can define "mail aliases", which are short mnemonic names that stand
for one or more mailing addresses.  By default, mail aliases are defined
in the file '~/.mailrc'.  You can specify a different file name to use,
by setting the variable 'mail-personal-alias-file'.

   To define an alias in '~/.mailrc', write a line like this:

     alias NICK FULLADDRESSES

This means that NICK should expand into FULLADDRESSES, where
FULLADDRESSES can be either a single address, or multiple addresses
separated with spaces.  For instance, to make 'maingnu' stand for
'gnu@gnu.org' plus a local address of your own, put in this line:

     alias maingnu gnu@gnu.org local-gnu

If an address contains a space, quote the whole address with a pair of
double quotes, like this:

     alias jsmith "John Q. Smith <none@example.com>"

Note that you need not include double quotes around individual parts of
the address, such as the person's full name.  Emacs puts them in if they
are needed.  For instance, it inserts the above address as '"John Q.
Smith" <none@example.com>'.

   Emacs also recognizes include commands in '~/.mailrc'.  They look
like this:

     source FILENAME

The '~/.mailrc' file is not unique to Emacs; many other mail-reading
programs use it for mail aliases, and it can contain various other
commands.  However, Emacs ignores everything except alias definitions
and include commands.

   Mail aliases expand as abbrevs--that is to say, as soon as you type a
word-separator character after an alias (*note Abbrevs::).  This
expansion takes place only within the 'To', 'From', 'CC', 'BCC', and
'Reply-To' header fields (plus their 'Resent-' variants); it does not
take place in other header fields, such as 'Subject'.

   You can also insert an aliased address directly, using the command
'M-x mail-abbrev-insert-alias'.  This reads an alias name, with
completion, and inserts its definition at point.

==============================================================================
File: emacs.info,  Node: |Mail_Commands|,  Next: |Mail_Signature|,  Prev: |Mail_Aliases|,  Up: |Sending_Mail|
==============================================================================

                                                                 *Mail_Commands*

32.4 Mail Commands
------------------

The default major mode for the 'mail' buffer is called Message mode.
It behaves like Text mode in many ways, but provides several additional
commands on the 'C-c' prefix, which make editing a message more
convenient.

   In this section, we will describe some of the most commonly-used
commands available in Message mode.  Message mode also has its own
manual, where its features are described in greater detail.  *Note
Message: (message)Top.

MENU

* |Mail_Sending|::        Commands to send the message.
* |Header_Editing|::      Commands to move to header fields and edit them.
* |Citing_Mail|::         Quoting a message you are replying to.
* |Mail_Misc|::           Attachments, spell checking, etc.

==============================================================================
File: emacs.info,  Node: |Mail_Sending|,  Next: |Header_Editing|,  Up: |Mail_Commands|
==============================================================================

                                                                  *Mail_Sending*

32.4.1 Mail Sending
-------------------

'C-c C-c'
     Send the message, and bury the mail buffer
     ('message-send-and-exit').
'C-c C-s'
     Send the message, and leave the mail buffer selected
     ('message-send').

   The usual command to send a message is 'C-c C-c'
('message-send-and-exit').  This sends the message and then buries the
mail buffer, putting it at the lowest priority for reselection.  If you
want it to kill the mail buffer instead, change the variable
'message-kill-buffer-on-exit' to 't'.

   The command 'C-c C-s' ('message-send') sends the message and leaves
the buffer selected.  Use this command if you want to modify the message
(perhaps with new recipients) and send it again.

   Sending a message runs the hook 'message-send-hook'.  It also marks
the mail buffer as unmodified, except if the mail buffer is also a
file-visiting buffer (in that case, only saving the file does that, and
you don't get a warning if you try to send the same message twice).

   The variable 'message-send-mail-function' controls how the message is
delivered ('send-mail-function' is used for Mail mode).  The value of
'send-mail-function' should be one of the following functions:

'sendmail-query-once'
     Query for a delivery method (one of the other entries in this
     list), and use that method for this message; then save the method
     to 'send-mail-function', so that it is used for future deliveries.
     This is the default, unless you have already set the variables for
     sending mail via 'smtpmail-send-it' (see below).

'smtpmail-send-it'
     Send mail through an external mail host, such as your Internet
     service provider's outgoing SMTP mail server.  If you have not told
     Emacs how to contact the SMTP server, it prompts for this
     information, which is saved in the 'smtpmail-smtp-server' variable
     and the file '~/.authinfo'.  *Note Emacs SMTP Library:
     (smtpmail)Top.

'sendmail-send-it'
     Send mail using the system's default 'sendmail' program, or
     equivalent.  This requires the system to be set up for delivering
     mail directly via SMTP.

'mailclient-send-it'
     Pass the mail buffer on to the system's designated mail client.
     See the commentary section in the file 'mailclient.el' for details.

'feedmail-send-it'
     This is similar to 'sendmail-send-it', but allows you to queue
     messages for later sending.  See the commentary section in the file
     'feedmail.el' for details.

   When you send a message containing non-ASCII characters, they need to
be encoded with a coding system (*note Coding Systems::).  Usually the
coding system is specified automatically by your chosen language
environment (*note Language Environments::).  You can explicitly specify
the coding system for outgoing mail by setting the variable
'sendmail-coding-system' (*note Recognize Coding::).  If the coding
system thus determined does not handle the characters in a particular
message, Emacs asks you to select the coding system to use, showing a
list of possible coding systems.  *Note Output Coding::.

==============================================================================
File: emacs.info,  Node: |Header_Editing|,  Next: |Citing_Mail|,  Prev: |Mail_Sending|,  Up: |Mail_Commands|
==============================================================================

                                                                *Header_Editing*

32.4.2 Mail Header Editing
--------------------------

Message mode provides the following special commands to move to
particular header fields and to complete addresses in headers.

'C-c C-f C-t'
     Move to the 'To' header ('message-goto-to').
'C-c C-f C-s'
     Move to the 'Subject' header ('message-goto-subject').
'C-c C-f C-c'
     Move to the 'CC' header ('message-goto-cc').
'C-c C-f C-b'
     Move to the 'BCC' header ('message-goto-bcc').
'C-c C-f C-r'
     Move to the 'Reply-To' header ('message-goto-reply-to').
'C-c C-f C-f'
     Move to the 'Mail-Followup-To' header field
     ('message-goto-followup-to').
'C-c C-f C-w'
     Add a new 'FCC' header field, with file-name completion
     ('message-goto-fcc').
'C-c C-b'
     Move to the start of the message body ('message-goto-body').
'<TAB>'
     Complete a mailing address ('message-tab').

   The commands to move point to particular header fields are all based
on the prefix 'C-c C-f' ('C-f' is for "field").  If the field in
question does not exist, the command creates one (the exception is
'mail-fcc', which creates a new field each time).

   The command 'C-c C-b' ('message-goto-body') moves point to just after
the header separator line--that is, to the beginning of the body.

   While editing a header field that contains addresses, such as 'To:',
'CC:' and 'BCC:', you can complete an address by typing <TAB>
('message-tab').  This attempts to insert the full name corresponding to
the address based on a couple of methods, including EUDC, a library that
recognizes a number of directory server protocols (*note EUDC:
(eudc)Top.).  Failing that, it attempts to expand the address as a mail
alias (*note Mail Aliases::).  If point is on a header field that does
not take addresses, or if it is in the message body, then <TAB> just
inserts a tab character.

==============================================================================
File: emacs.info,  Node: |Citing_Mail|,  Next: |Mail_Misc|,  Prev: |Header_Editing|,  Up: |Mail_Commands|
==============================================================================

                                                                   *Citing_Mail*

32.4.3 Citing Mail
------------------

'C-c C-y'
     Yank the selected message from the mail reader, as a citation
     ('message-yank-original').
'C-c C-q'
     Fill each paragraph cited from another message
     ('message-fill-yanked-message').

   You can use the command 'C-c C-y' ('message-yank-original') to "cite"
a message that you are replying to.  This inserts the text of that
message into the mail buffer.  This command works only if the mail
buffer is invoked from a mail reader running in Emacs, such as Rmail.

   By default, Emacs inserts the string '>' in front of each line of the
cited text; this prefix string is specified by the variable
'message-yank-prefix'.  If you call 'message-yank-original' with a
prefix argument, the citation prefix is not inserted.

   After using 'C-c C-y', you can type 'C-c C-q'
('message-fill-yanked-message') to fill the paragraphs of the cited
message.  One use of 'C-c C-q' fills all such paragraphs, each one
individually.  To fill a single paragraph of the quoted message, use
'M-q'.  If filling does not automatically handle the type of citation
prefix you use, try setting the fill prefix explicitly.  *Note
Filling::.

   You can customize mail citation through the hook
'mail-citation-hook'.  For example, you can use the Supercite package,
which provides more flexible citation (*note (sc)Introduction::).

==============================================================================
File: emacs.info,  Node: |Mail_Misc|,  Prev: |Citing_Mail|,  Up: |Mail_Commands|
==============================================================================

                                                                     *Mail_Misc*

32.4.4 Mail Miscellany
----------------------

You can "attach" a file to an outgoing message by typing 'C-c C-a'
('mml-attach-file') in the mail buffer.  Attaching is done using the
Multipurpose Internet Mail Extensions (MIME) standard.

   The 'mml-attach-file' command prompts for the name of the file, and
for the attachment's "content type", "description", and "disposition".
The content type is normally detected automatically; just type <RET> to
accept the default.  The description is a single line of text that the
recipient will see next to the attachment; you may also choose to leave
this empty.  The disposition is either 'inline', which means the
recipient will see a link to the attachment within the message body, or
'attachment', which means the link will be separate from the body.

   The 'mml-attach-file' command is specific to Message mode; in Mail
mode use 'mail-add-attachment' instead.  It will prompt only for the
name of the file, and will determine the content type and the
disposition automatically.  If you want to include some description of
the attached file, type that in the message body.

   The actual contents of the attached file are not inserted into the
mail buffer.  Instead, some placeholder text is inserted into the mail
buffer, like this:

     <#part type="text/plain" filename="~/foo.txt" disposition=inline>
     <#/part>

When you type 'C-c C-c' or 'C-c C-s' to send the message, the attached
file will be delivered with it.

   While composing a message, you can do spelling correction on the
message text by typing 'M-x ispell-message'.  If you have yanked an
incoming message into the outgoing draft, this command skips what was
yanked, but it checks the text that you yourself inserted (it looks for
indentation or 'mail-yank-prefix' to distinguish the cited lines from
your input).  *Note Spelling::.

   Turning on Message mode (which 'C-x m' does automatically) runs the
normal hooks 'text-mode-hook' and 'message-mode-hook'.  Initializing a
new outgoing message runs the normal hook 'message-setup-hook'; you can
use this hook if you want to make changes to the appearance of the mail
buffer.  *Note Hooks::.

   The main difference between these hooks is just when they are
invoked.  Whenever you type 'C-x m', 'message-mode-hook' runs as soon as
the mail buffer is created.  Then the 'message-setup' function inserts
the default contents of the buffer.  After these default contents are
inserted, 'message-setup-hook' runs.

   If you use 'C-x m' to continue an existing composition,
'message-mode-hook' runs immediately after switching to the mail buffer.
If the buffer is unmodified, or if you decide to erase it and start
again, 'message-setup-hook' runs after the default contents are
inserted.

==============================================================================
File: emacs.info,  Node: |Mail_Signature|,  Next: |Mail_Amusements|,  Prev: |Mail_Commands|,  Up: |Sending_Mail|
==============================================================================

                                                                *Mail_Signature*

32.5 Mail Signature
-------------------

You can add a standard piece of text--your "mail signature"--to the end of
every message.  This signature may contain information such as your
telephone number or your physical location.  The variable
'message-signature' determines how Emacs handles the mail signature.

   The default value of 'message-signature' is 't'; this means to look
for your mail signature in the file '~/.signature'.  If this file
exists, its contents are automatically inserted into the end of the mail
buffer.  You can change the signature file via the variable
'message-signature-file'.

   If you change 'message-signature' to a string, that specifies the
text of the signature directly.

   If you change 'message-signature' to 'nil', Emacs will not insert
your mail signature automatically.  You can insert your mail signature
by typing 'C-c C-w' ('message-insert-signature') in the mail buffer.
Emacs will look for your signature in the signature file.

   If you use Mail mode rather than Message mode for composing your
mail, the corresponding variables that determine how your signature is
sent are 'mail-signature' and 'mail-signature-file' instead.

   By convention, a mail signature should be marked by a line whose
contents are '-- '.  If your signature lacks this prefix, it is added
for you.  The remainder of your signature should be no more than four
lines.

==============================================================================
File: emacs.info,  Node: |Mail_Amusements|,  Next: |Mail_Methods|,  Prev: |Mail_Signature|,  Up: |Sending_Mail|
==============================================================================

                                                               *Mail_Amusements*

32.6 Mail Amusements
--------------------

'M-x spook' adds a line of randomly chosen keywords to an outgoing mail
message.  The keywords are chosen from a list of words that suggest you
are discussing something subversive.

   The idea behind this feature is the suspicion that the NSA(1) and
other intelligence agencies snoop on all electronic mail messages that
contain keywords suggesting they might find them interesting.  (The
agencies say that they don't, but that's what they _would_ say.)  The
idea is that if lots of people add suspicious words to their messages,
the agencies will get so busy with spurious input that they will have to
give up reading it all.  Whether or not this is true, it at least amuses
some people.

   You can use the 'fortune' program to put a fortune cookie message
into outgoing mail.  To do this, add 'fortune-to-signature' to
'mail-setup-hook':

     (add-hook 'mail-setup-hook 'fortune-to-signature)

You will probably need to set the variable 'fortune-file' before using
this.

   ---------- Footnotes ----------

   (1) The US National Security Agency.

==============================================================================
File: emacs.info,  Node: |Mail_Methods|,  Prev: |Mail_Amusements|,  Up: |Sending_Mail|
==============================================================================

                                                                  *Mail_Methods*

32.7 Mail-Composition Methods
-----------------------------

In this chapter we have described the usual Emacs mode for editing and
sending mail--Message mode.  This is only one of several available modes.
Prior to Emacs 23.2, the default mode was Mail mode, which is similar to
Message mode in many respects but lacks features such as MIME support.
Another available mode is MH-E (*note MH-E: (mh-e)Top.).

   You can choose any of these "mail user agents" as your preferred
method for editing and sending mail.  The commands 'C-x m', 'C-x 4 m'
and 'C-x 5 m' use whichever agent you have specified; so do various
other parts of Emacs that send mail, such as the bug reporter (*note
Bugs::).  To specify a mail user agent, customize the variable
'mail-user-agent'.  Currently, legitimate values include
'message-user-agent' (Message mode) 'sendmail-user-agent' (Mail mode),
'gnus-user-agent', and 'mh-e-user-agent'.

   If you select a different mail-composition method, the information in
this chapter about the mail buffer and Message mode does not apply; the
other methods use a different format of text in a different buffer, and
their commands are different as well.

   Similarly, to specify your preferred method for reading mail,
customize the variable 'read-mail-command'.  The default is 'rmail'
(*note Rmail::).

==============================================================================
File: emacs.info,  Node: |Rmail|,  Next: |Gnus|,  Prev: |Sending_Mail|,  Up: |Top|
==============================================================================

                                                                         *Rmail*

33 Reading Mail with Rmail
==========================

Rmail is an Emacs subsystem for reading and disposing of mail that you
receive.  Rmail stores mail messages in files called Rmail files.
Reading the messages in an Rmail file is done in a special major mode,
Rmail mode, which redefines most letters to run commands for managing
mail.

   Emacs also comes with a much more sophisticated and flexible
subsystem for reading mail, called Gnus.  Gnus is a very large package,
and is therefore described in its own manual, see *note (gnus)Top::.

MENU

* Basic: Rmail Basics.       Basic concepts of Rmail, and simple use.
* Scroll: Rmail Scrolling.   Scrolling through a message.
* Motion: Rmail Motion.      Moving to another message.
* Deletion: Rmail Deletion.  Deleting and expunging messages.
* Inbox: Rmail Inbox.        How mail gets into the Rmail file.
* Files: Rmail Files.        Using multiple Rmail files.
* Output: Rmail Output.      Copying messages out to files.
* Labels: Rmail Labels.      Classifying messages by labeling them.
* Attrs: Rmail Attributes.   Certain standard labels, called attributes.
* Reply: Rmail Reply.        Sending replies to messages you are viewing.
* Summary: Rmail Summary.    Summaries show brief info on many messages.
* Sort: Rmail Sorting.       Sorting messages in Rmail.
* Display: Rmail Display.    How Rmail displays a message; customization.
* Coding: Rmail Coding.      How Rmail handles decoding character sets.
* Editing: Rmail Editing.    Editing message text and headers in Rmail.
* Digest: Rmail Digest.      Extracting the messages from a digest message.
* Rot13: Rmail Rot13.        Reading messages encoded in the rot13 code.
* |Movemail|::                 More details of fetching new mail.
* |Remote_Mailboxes|::         Retrieving mail from remote mailboxes.
* |Other_Mailbox_Formats|::    Retrieving mail from local mailboxes in
                             various formats.

==============================================================================
File: emacs.info,  Node: |Rmail_Basics|,  Next: |Rmail_Scrolling|,  Up: |Rmail|
==============================================================================

                                                                  *Rmail_Basics*

33.1 Basic Concepts of Rmail
----------------------------

Using Rmail in the simplest fashion, you have one Rmail file '~/RMAIL'
in which all of your mail is saved.  It is called your "primary Rmail
file".  The command 'M-x rmail' reads your primary Rmail file, merges
new mail in from your inboxes, displays the first message you haven't
read yet, and lets you begin reading.  The variable 'rmail-file-name'
specifies the name of the primary Rmail file.

   Rmail displays only one message in the Rmail file at a time.  The
message that is shown is called the "current message".  Rmail mode's
special commands can do such things as delete the current message, copy
it into another file, send a reply, or move to another message.  You can
also create multiple Rmail files (*note Files::) and use Rmail to move
messages between them (*note Rmail Output::).

   Within the Rmail file, messages are normally arranged sequentially in
order of receipt; you can specify other ways to sort them (*note Rmail
Sorting::).  Messages are identified by consecutive integers which are
their "message numbers".  The number of the current message is displayed
in Rmail's mode line, followed by the total number of messages in the
file.  You can move to a message by specifying its message number with
the 'j' key (*note Rmail Motion::).

   Following the usual conventions of Emacs, changes in an Rmail file
become permanent only when you save the file.  You can save it with 's'
('rmail-expunge-and-save'), which also expunges deleted messages from
the file first (*note Rmail Deletion::).  To save the file without
expunging, use 'C-x C-s'.  Rmail automatically saves the Rmail file
after merging new mail from an inbox file (*note Rmail Inbox::).

   You can exit Rmail with 'q' ('rmail-quit'); this expunges and saves
the Rmail file, then buries the Rmail buffer as well as its summary
buffer, if present (*note Rmail Summary::).  But there is no need to
exit formally.  If you switch from Rmail to editing in other buffers,
and never switch back, you have exited.  Just make sure to save the
Rmail file eventually (like any other file you have changed).  'C-x s'
is a suitable way to do this (*note Save Commands::).  The Rmail command
'b', 'rmail-bury', buries the Rmail buffer and its summary without
expunging and saving the Rmail file.

==============================================================================
File: emacs.info,  Node: |Rmail_Scrolling|,  Next: |Rmail_Motion|,  Prev: |Rmail_Basics|,  Up: |Rmail|
==============================================================================

                                                               *Rmail_Scrolling*

33.2 Scrolling Within a Message
-------------------------------

When Rmail displays a message that does not fit on the screen, you must
scroll through it to read the rest.  You could do this with the usual
scrolling commands: 'C-v', 'M-v' and 'M-<' (*note Scrolling::), but in
Rmail scrolling is so frequent that it deserves to be easier.

'<SPC>'
     Scroll forward ('scroll-up-command').
'<DEL>'
'S-<SPC>'
     Scroll backward ('scroll-down-command').
'.'
     Scroll to start of message ('rmail-beginning-of-message').
'/'
     Scroll to end of message ('rmail-end-of-message').

   Since the most common thing to do while reading a message is to
scroll through it by screenfuls, Rmail makes <SPC> and <DEL> (or
'S-<SPC>') do the same as 'C-v' ('scroll-up-command') and 'M-v'
('scroll-down-command') respectively.

   The command '.' ('rmail-beginning-of-message') scrolls back to the
beginning of the selected message.  This is not quite the same as 'M-<':
for one thing, it does not set the mark; for another, it resets the
buffer boundaries of the current message if you have changed them (e.g.,
by editing, *note Rmail Editing::).  Similarly, the command '/'
('rmail-end-of-message') scrolls forward to the end of the selected
message.

==============================================================================
File: emacs.info,  Node: |Rmail_Motion|,  Next: |Rmail_Deletion|,  Prev: |Rmail_Scrolling|,  Up: |Rmail|
==============================================================================

                                                                  *Rmail_Motion*

33.3 Moving Among Messages
--------------------------

The most basic thing to do with a message is to read it.  The way to do
this in Rmail is to make the message current.  The usual practice is to
move sequentially through the file, since this is the order of receipt
of messages.  When you enter Rmail, you are positioned at the first
message that you have not yet made current (that is, the first one that
has the 'unseen' attribute; *note Rmail Attributes::).  Move forward to
see the other new messages; move backward to re-examine old messages.

'n'
     Move to the next nondeleted message, skipping any intervening
     deleted messages ('rmail-next-undeleted-message').
'p'
     Move to the previous nondeleted message
     ('rmail-previous-undeleted-message').
'M-n'
     Move to the next message, including deleted messages
     ('rmail-next-message').
'M-p'
     Move to the previous message, including deleted messages
     ('rmail-previous-message').
'C-c C-n'
     Move to the next message with the same subject as the current one
     ('rmail-next-same-subject').
'C-c C-p'
     Move to the previous message with the same subject as the current
     one ('rmail-previous-same-subject').
'j'
     Move to the first message.  With argument N, move to message number
     N ('rmail-show-message').
'>'
     Move to the last message ('rmail-last-message').
'<'
     Move to the first message ('rmail-first-message').
'M-s REGEXP <RET>'
     Move to the next message containing a match for REGEXP
     ('rmail-search').
'- M-s REGEXP <RET>'
     Move to the previous message containing a match for REGEXP.  (This
     is 'M-s' with a negative argument.)

   'n' and 'p' are the usual way of moving among messages in Rmail.
They move through the messages sequentially, but skip over deleted
messages, which is usually what you want to do.  Their command
definitions are named 'rmail-next-undeleted-message' and
'rmail-previous-undeleted-message'.  If you do not want to skip deleted
messages--for example, if you want to move to a message to undelete
it--use the variants 'M-n' and 'M-p' ('rmail-next-message' and
'rmail-previous-message').  A numeric argument to any of these commands
serves as a repeat count.

   In Rmail, you can specify a numeric argument by typing just the
digits.  You don't need to type 'C-u' first.  You can also specify a
negative argument by typing just '-'.

   The 'M-s' ('rmail-search') command is Rmail's version of search.  The
usual incremental search command 'C-s' works in Rmail, but it searches
only within the current message.  The purpose of 'M-s' is to search for
another message.  It reads a regular expression (*note Regexps::)
nonincrementally, then searches starting at the beginning of the
following message for a match.  It then selects that message.  If REGEXP
is empty, 'M-s' reuses the regexp used the previous time.

   To search backward in the file for another message, give 'M-s' a
negative argument.  In Rmail you can do this with '- M-s'.  This begins
searching from the end of the previous message.

   It is also possible to search for a message based on labels.  *Note
Rmail Labels::.

   The 'C-c C-n' ('rmail-next-same-subject') command moves to the next
message with the same subject as the current one.  A prefix argument
serves as a repeat count.  With a negative argument, this command moves
backward, acting like 'C-c C-p' ('rmail-previous-same-subject').  When
comparing subjects, these commands ignore the prefixes typically added
to the subjects of replies.  These commands are useful for reading all
of the messages pertaining to the same subject, a.k.a. "thread".

   To move to a message specified by absolute message number, use 'j'
('rmail-show-message') with the message number as argument.  With no
argument, 'j' selects the first message.  '<' ('rmail-first-message')
also selects the first message.  '>' ('rmail-last-message') selects the
last message.

==============================================================================
File: emacs.info,  Node: |Rmail_Deletion|,  Next: |Rmail_Inbox|,  Prev: |Rmail_Motion|,  Up: |Rmail|
==============================================================================

                                                                *Rmail_Deletion*

33.4 Deleting Messages
----------------------

When you no longer need to keep a message, you can "delete" it.  This
flags it as ignorable, and some Rmail commands pretend it is no longer
present; but it still has its place in the Rmail file, and still has its
message number.

   "Expunging" the Rmail file actually removes the deleted messages.
The remaining messages are renumbered consecutively.

'd'
     Delete the current message, and move to the next nondeleted message
     ('rmail-delete-forward').
'C-d'
     Delete the current message, and move to the previous nondeleted
     message ('rmail-delete-backward').
'u'
     Undelete the current message, or move back to the previous deleted
     message and undelete it ('rmail-undelete-previous-message').
'x'
     Expunge the Rmail file ('rmail-expunge').

   There are two Rmail commands for deleting messages.  Both delete the
current message and select another.  'd' ('rmail-delete-forward') moves
to the following message, skipping messages already deleted, while 'C-d'
('rmail-delete-backward') moves to the previous nondeleted message.  If
there is no nondeleted message to move to in the specified direction,
the message that was just deleted remains current.  A numeric prefix
argument serves as a repeat count, to allow deletion of several messages
in a single command.  A negative argument reverses the meaning of 'd'
and 'C-d'.

   Whenever Rmail deletes a message, it runs the hook
'rmail-delete-message-hook'.  When the hook functions are invoked, the
message has been marked deleted, but it is still the current message in
the Rmail buffer.

   To make all the deleted messages finally vanish from the Rmail file,
type 'x' ('rmail-expunge').  Until you do this, you can still "undelete"
the deleted messages.  The undeletion command, 'u'
('rmail-undelete-previous-message'), is designed to cancel the effect of
a 'd' command in most cases.  It undeletes the current message if the
current message is deleted.  Otherwise it moves backward to previous
messages until a deleted message is found, and undeletes that message.
A numeric prefix argument serves as a repeat count, to allow undeletion
of several messages in a single command.

   You can usually undo a 'd' with a 'u' because the 'u' moves back to
and undeletes the message that the 'd' deleted.  But this does not work
when the 'd' skips a few already-deleted messages that follow the
message being deleted; then the 'u' command undeletes the last of the
messages that were skipped.  There is no clean way to avoid this
problem.  However, by repeating the 'u' command, you can eventually get
back to the message that you intend to undelete.  You can also select a
particular deleted message with the 'M-p' command, then type 'u' to
undelete it.

   A deleted message has the 'deleted' attribute, and as a result
'deleted' appears in the mode line when the current message is deleted.
In fact, deleting or undeleting a message is nothing more than adding or
removing this attribute.  *Note Rmail Attributes::.

==============================================================================
File: emacs.info,  Node: |Rmail_Inbox|,  Next: |Rmail_Files|,  Prev: |Rmail_Deletion|,  Up: |Rmail|
==============================================================================

                                                                   *Rmail_Inbox*

33.5 Rmail Files and Inboxes
----------------------------

When you receive mail locally, the operating system places incoming mail
for you in a file that we call your "inbox".  When you start up Rmail,
it runs a C program called 'movemail' to copy the new messages from your
inbox into your primary Rmail file, which also contains other messages
saved from previous Rmail sessions.  It is in this file that you
actually read the mail with Rmail.  This operation is called "getting
new mail".  You can get new mail at any time in Rmail by typing 'g'.

   The variable 'rmail-primary-inbox-list' contains a list of the files
that are inboxes for your primary Rmail file.  If you don't set this
variable explicitly, Rmail uses the 'MAIL' environment variable, or, as
a last resort, a default inbox based on 'rmail-spool-directory'.  The
default inbox file depends on your operating system; often it is
'/var/mail/USERNAME', '/var/spool/mail/USERNAME', or
'/usr/spool/mail/USERNAME'.

   You can specify the inbox file(s) for any Rmail file for the current
session with the command 'set-rmail-inbox-list'; see *note Rmail
Files::.

   There are two reasons for having separate Rmail files and inboxes.

  1. The inbox file format varies between operating systems and
     according to the other mail software in use.  Only one part of
     Rmail needs to know about the alternatives, and it need only
     understand how to convert all of them to Rmail's own format.

  2. It is very cumbersome to access an inbox file without danger of
     losing mail, because it is necessary to interlock with mail
     delivery.  Moreover, different operating systems use different
     interlocking techniques.  The strategy of moving mail out of the
     inbox once and for all into a separate Rmail file avoids the need
     for interlocking in all the rest of Rmail, since only Rmail
     operates on the Rmail file.

   Rmail uses the standard 'mbox' format, introduced by Unix and GNU
systems for inbox files, as its internal format of Rmail files.  (In
fact, there are a few slightly different mbox formats.  The differences
are not very important, but you can set the variable 'rmail-mbox-format'
to tell Rmail which form your system uses.  See that variable's
documentation for more details.)

   When getting new mail, Rmail first copies the new mail from the inbox
file to the Rmail file; then it saves the Rmail file; then it clears out
the inbox file.  This way, a system crash may cause duplication of mail
between the inbox and the Rmail file, but cannot lose mail.  If
'rmail-preserve-inbox' is non-'nil', then Rmail does not clear out the
inbox file when it gets new mail.  You may wish to set this, for
example, on a portable computer you use to check your mail via POP while
traveling, so that your mail will remain on the server and you can save
it later on your main desktop workstation.

   In some cases, Rmail copies the new mail from the inbox file
indirectly.  First it runs the 'movemail' program to move the mail from
the inbox to an intermediate file called '.newmail-INBOXNAME', in the
same directory as the Rmail file.  Then Rmail merges the new mail from
that file, saves the Rmail file, and only then deletes the intermediate
file.  If there is a crash at the wrong time, this file continues to
exist, and Rmail will use it again the next time it gets new mail from
that inbox.

   If Rmail is unable to convert the data in '.newmail-INBOXNAME' into
mbox format, it renames the file to 'RMAILOSE.N' (N is an integer chosen
to make the name unique) so that Rmail will not have trouble with the
data again.  You should look at the file, find whatever message confuses
Rmail (probably one that includes the control-underscore character,
octal code 037), and delete it.  Then you can use '1 g' to get new mail
from the corrected file.

==============================================================================
File: emacs.info,  Node: |Rmail_Files|,  Next: |Rmail_Output|,  Prev: |Rmail_Inbox|,  Up: |Rmail|
==============================================================================

                                                                   *Rmail_Files*

33.6 Multiple Rmail Files
-------------------------

Rmail operates by default on your "primary Rmail file", which is named
'~/RMAIL' and receives your incoming mail from your system inbox file.
But you can also have other Rmail files and edit them with Rmail.  These
files can receive mail through their own inboxes, or you can move
messages into them with explicit Rmail commands (*note Rmail Output::).

'i FILE <RET>'
     Read FILE into Emacs and run Rmail on it ('rmail-input').
'g'
     Merge new mail from current Rmail file's inboxes
     ('rmail-get-new-mail').
'C-u g FILE <RET>'
     Merge new mail from inbox file FILE.

   To run Rmail on a file other than your primary Rmail file, you can
use the 'i' ('rmail-input') command in Rmail.  This visits the file in
Rmail mode.  You can use 'M-x rmail-input' even when not in Rmail, but
it is easier to type 'C-u M-x rmail', which does the same thing.

   The file you read with 'i' should normally be a valid mbox file.  If
it is not, Rmail tries to convert its text to mbox format, and visits
the converted text in the buffer.  If you save the buffer, that converts
the file.

   If you specify a file name that doesn't exist, 'i' initializes a new
buffer for creating a new Rmail file.

   You can also select an Rmail file from a menu.  In the Classify menu,
choose the Input Rmail File item; then choose the Rmail file you want.
The variables 'rmail-secondary-file-directory' and
'rmail-secondary-file-regexp' specify which files to offer in the menu:
the first variable says which directory to find them in; the second says
which files in that directory to offer (all those that match the regular
expression).  If no files match, you cannot select this menu item.
These variables also apply to choosing a file for output (*note Rmail
Output::).

   The inbox files to use are specified by the variable
'rmail-inbox-list', which is buffer-local in Rmail mode.  As a special
exception, if you have specified no inbox files for your primary Rmail
file, it uses the 'MAIL' environment variable, or your standard system
inbox.

   The 'g' command ('rmail-get-new-mail') merges mail into the current
Rmail file from its inboxes.  If the Rmail file has no inboxes, 'g' does
nothing.  The command 'M-x rmail' also merges new mail into your primary
Rmail file.

   To merge mail from a file that is not the usual inbox, give the 'g'
key a numeric argument, as in 'C-u g'.  Then it reads a file name and
merges mail from that file.  The inbox file is not deleted or changed in
any way when 'g' with an argument is used.  This is, therefore, a
general way of merging one file of messages into another.

==============================================================================
File: emacs.info,  Node: |Rmail_Output|,  Next: |Rmail_Labels|,  Prev: |Rmail_Files|,  Up: |Rmail|
==============================================================================

                                                                  *Rmail_Output*

33.7 Copying Messages Out to Files
----------------------------------

These commands copy messages from an Rmail file into another file.

'o FILE <RET>'
     Append a full copy of the current message to the file FILE
     ('rmail-output').

'C-o FILE <RET>'
     Append a copy of the current message, as displayed, to the file
     FILE ('rmail-output-as-seen').

'w FILE <RET>'
     Output just the message body to the file FILE, taking the default
     file name from the message 'Subject' header.

   The commands 'o' and 'C-o' copy the current message into a specified
file, adding it at the end.  A positive prefix argument serves as a
repeat count: that many consecutive messages will be copied to the
specified file, starting with the current one and ignoring deleted
messages.

   The two commands differ mainly in how much to copy: 'o' copies the
full message headers, even if they are not all visible, while 'C-o'
copies exactly the headers currently displayed and no more.  *Note Rmail
Display::.  In addition, 'o' converts the message to Babyl format (used
by Rmail in Emacs version 22 and before) if the file is in Babyl format;
'C-o' cannot output to Babyl files at all.

vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
