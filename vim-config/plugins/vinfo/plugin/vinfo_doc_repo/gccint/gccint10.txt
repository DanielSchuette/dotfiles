* __fractunsqiqq:                        Fixed-point fractional library routines.
                                                             (line 1642)
* __fractunsqisa:                        Fixed-point fractional library routines.
                                                             (line 1647)
* __fractunsqisq:                        Fixed-point fractional library routines.
                                                             (line 1644)
* __fractunsqita:                        Fixed-point fractional library routines.
                                                             (line 1649)
* __fractunsqiuda:                       Fixed-point fractional library routines.
                                                             (line 1660)
* __fractunsqiudq:                       Fixed-point fractional library routines.
                                                             (line 1655)
* __fractunsqiuha:                       Fixed-point fractional library routines.
                                                             (line 1657)
* __fractunsqiuhq:                       Fixed-point fractional library routines.
                                                             (line 1652)
* __fractunsqiuqq:                       Fixed-point fractional library routines.
                                                             (line 1650)
* __fractunsqiusa:                       Fixed-point fractional library routines.
                                                             (line 1659)
* __fractunsqiusq:                       Fixed-point fractional library routines.
                                                             (line 1653)
* __fractunsqiuta:                       Fixed-point fractional library routines.
                                                             (line 1662)
* __fractunsqqdi:                        Fixed-point fractional library routines.
                                                             (line 1531)
* __fractunsqqhi:                        Fixed-point fractional library routines.
                                                             (line 1529)
* __fractunsqqqi:                        Fixed-point fractional library routines.
                                                             (line 1528)
* __fractunsqqsi:                        Fixed-point fractional library routines.
                                                             (line 1530)
* __fractunsqqti:                        Fixed-point fractional library routines.
                                                             (line 1532)
* __fractunssadi:                        Fixed-point fractional library routines.
                                                             (line 1557)
* __fractunssahi:                        Fixed-point fractional library routines.
                                                             (line 1555)
* __fractunssaqi:                        Fixed-point fractional library routines.
                                                             (line 1554)
* __fractunssasi:                        Fixed-point fractional library routines.
                                                             (line 1556)
* __fractunssati:                        Fixed-point fractional library routines.
                                                             (line 1558)
* __fractunssida:                        Fixed-point fractional library routines.
                                                             (line 1692)
* __fractunssidq:                        Fixed-point fractional library routines.
                                                             (line 1689)
* __fractunssiha:                        Fixed-point fractional library routines.
                                                             (line 1690)
* __fractunssihq:                        Fixed-point fractional library routines.
                                                             (line 1687)
* __fractunssiqq:                        Fixed-point fractional library routines.
                                                             (line 1686)
* __fractunssisa:                        Fixed-point fractional library routines.
                                                             (line 1691)
* __fractunssisq:                        Fixed-point fractional library routines.
                                                             (line 1688)
* __fractunssita:                        Fixed-point fractional library routines.
                                                             (line 1693)
* __fractunssiuda:                       Fixed-point fractional library routines.
                                                             (line 1704)
* __fractunssiudq:                       Fixed-point fractional library routines.
                                                             (line 1699)
* __fractunssiuha:                       Fixed-point fractional library routines.
                                                             (line 1701)
* __fractunssiuhq:                       Fixed-point fractional library routines.
                                                             (line 1696)
* __fractunssiuqq:                       Fixed-point fractional library routines.
                                                             (line 1694)
* __fractunssiusa:                       Fixed-point fractional library routines.
                                                             (line 1703)
* __fractunssiusq:                       Fixed-point fractional library routines.
                                                             (line 1697)
* __fractunssiuta:                       Fixed-point fractional library routines.
                                                             (line 1706)
* __fractunssqdi:                        Fixed-point fractional library routines.
                                                             (line 1541)
* __fractunssqhi:                        Fixed-point fractional library routines.
                                                             (line 1539)
* __fractunssqqi:                        Fixed-point fractional library routines.
                                                             (line 1538)
* __fractunssqsi:                        Fixed-point fractional library routines.
                                                             (line 1540)
* __fractunssqti:                        Fixed-point fractional library routines.
                                                             (line 1542)
* __fractunstadi:                        Fixed-point fractional library routines.
                                                             (line 1567)
* __fractunstahi:                        Fixed-point fractional library routines.
                                                             (line 1565)
* __fractunstaqi:                        Fixed-point fractional library routines.
                                                             (line 1564)
* __fractunstasi:                        Fixed-point fractional library routines.
                                                             (line 1566)
* __fractunstati:                        Fixed-point fractional library routines.
                                                             (line 1568)
* __fractunstida:                        Fixed-point fractional library routines.
                                                             (line 1737)
* __fractunstidq:                        Fixed-point fractional library routines.
                                                             (line 1733)
* __fractunstiha:                        Fixed-point fractional library routines.
                                                             (line 1735)
* __fractunstihq:                        Fixed-point fractional library routines.
                                                             (line 1731)
* __fractunstiqq:                        Fixed-point fractional library routines.
                                                             (line 1730)
* __fractunstisa:                        Fixed-point fractional library routines.
                                                             (line 1736)
* __fractunstisq:                        Fixed-point fractional library routines.
                                                             (line 1732)
* __fractunstita:                        Fixed-point fractional library routines.
                                                             (line 1738)
* __fractunstiuda:                       Fixed-point fractional library routines.
                                                             (line 1752)
* __fractunstiudq:                       Fixed-point fractional library routines.
                                                             (line 1746)
* __fractunstiuha:                       Fixed-point fractional library routines.
                                                             (line 1748)
* __fractunstiuhq:                       Fixed-point fractional library routines.
                                                             (line 1742)
* __fractunstiuqq:                       Fixed-point fractional library routines.
                                                             (line 1740)
* __fractunstiusa:                       Fixed-point fractional library routines.
                                                             (line 1750)
* __fractunstiusq:                       Fixed-point fractional library routines.
                                                             (line 1744)
* __fractunstiuta:                       Fixed-point fractional library routines.
                                                             (line 1754)
* __fractunsudadi:                       Fixed-point fractional library routines.
                                                             (line 1628)
* __fractunsudahi:                       Fixed-point fractional library routines.
                                                             (line 1624)
* __fractunsudaqi:                       Fixed-point fractional library routines.
                                                             (line 1622)
* __fractunsudasi:                       Fixed-point fractional library routines.
                                                             (line 1626)
* __fractunsudati:                       Fixed-point fractional library routines.
                                                             (line 1630)
* __fractunsudqdi:                       Fixed-point fractional library routines.
                                                             (line 1602)
* __fractunsudqhi:                       Fixed-point fractional library routines.
                                                             (line 1598)
* __fractunsudqqi:                       Fixed-point fractional library routines.
                                                             (line 1596)
* __fractunsudqsi:                       Fixed-point fractional library routines.
                                                             (line 1600)
* __fractunsudqti:                       Fixed-point fractional library routines.
                                                             (line 1604)
* __fractunsuhadi:                       Fixed-point fractional library routines.
                                                             (line 1612)
* __fractunsuhahi:                       Fixed-point fractional library routines.
                                                             (line 1608)
* __fractunsuhaqi:                       Fixed-point fractional library routines.
                                                             (line 1606)
* __fractunsuhasi:                       Fixed-point fractional library routines.
                                                             (line 1610)
* __fractunsuhati:                       Fixed-point fractional library routines.
                                                             (line 1614)
* __fractunsuhqdi:                       Fixed-point fractional library routines.
                                                             (line 1583)
* __fractunsuhqhi:                       Fixed-point fractional library routines.
                                                             (line 1581)
* __fractunsuhqqi:                       Fixed-point fractional library routines.
                                                             (line 1580)
* __fractunsuhqsi:                       Fixed-point fractional library routines.
                                                             (line 1582)
* __fractunsuhqti:                       Fixed-point fractional library routines.
                                                             (line 1584)
* __fractunsuqqdi:                       Fixed-point fractional library routines.
                                                             (line 1576)
* __fractunsuqqhi:                       Fixed-point fractional library routines.
                                                             (line 1572)
* __fractunsuqqqi:                       Fixed-point fractional library routines.
                                                             (line 1570)
* __fractunsuqqsi:                       Fixed-point fractional library routines.
                                                             (line 1574)
* __fractunsuqqti:                       Fixed-point fractional library routines.
                                                             (line 1578)
* __fractunsusadi:                       Fixed-point fractional library routines.
                                                             (line 1619)
* __fractunsusahi:                       Fixed-point fractional library routines.
                                                             (line 1617)
* __fractunsusaqi:                       Fixed-point fractional library routines.
                                                             (line 1616)
* __fractunsusasi:                       Fixed-point fractional library routines.
                                                             (line 1618)
* __fractunsusati:                       Fixed-point fractional library routines.
                                                             (line 1620)
* __fractunsusqdi:                       Fixed-point fractional library routines.
                                                             (line 1592)
* __fractunsusqhi:                       Fixed-point fractional library routines.
                                                             (line 1588)
* __fractunsusqqi:                       Fixed-point fractional library routines.
                                                             (line 1586)
* __fractunsusqsi:                       Fixed-point fractional library routines.
                                                             (line 1590)
* __fractunsusqti:                       Fixed-point fractional library routines.
                                                             (line 1594)
* __fractunsutadi:                       Fixed-point fractional library routines.
                                                             (line 1638)
* __fractunsutahi:                       Fixed-point fractional library routines.
                                                             (line 1634)
* __fractunsutaqi:                       Fixed-point fractional library routines.
                                                             (line 1632)
* __fractunsutasi:                       Fixed-point fractional library routines.
                                                             (line 1636)
* __fractunsutati:                       Fixed-point fractional library routines.
                                                             (line 1640)
* __fractuqqda:                          Fixed-point fractional library routines.
                                                             (line  679)
* __fractuqqdf:                          Fixed-point fractional library routines.
                                                             (line  702)
* __fractuqqdi:                          Fixed-point fractional library routines.
                                                             (line  699)
* __fractuqqdq:                          Fixed-point fractional library routines.
                                                             (line  675)
* __fractuqqha:                          Fixed-point fractional library routines.
                                                             (line  677)
* __fractuqqhi:                          Fixed-point fractional library routines.
                                                             (line  697)
* __fractuqqhq:                          Fixed-point fractional library routines.
                                                             (line  673)
* __fractuqqqi:                          Fixed-point fractional library routines.
                                                             (line  696)
* __fractuqqqq:                          Fixed-point fractional library routines.
                                                             (line  672)
* __fractuqqsa:                          Fixed-point fractional library routines.
                                                             (line  678)
* __fractuqqsf:                          Fixed-point fractional library routines.
                                                             (line  701)
* __fractuqqsi:                          Fixed-point fractional library routines.
                                                             (line  698)
* __fractuqqsq:                          Fixed-point fractional library routines.
                                                             (line  674)
* __fractuqqta:                          Fixed-point fractional library routines.
                                                             (line  680)
* __fractuqqti:                          Fixed-point fractional library routines.
                                                             (line  700)
* __fractuqquda:                         Fixed-point fractional library routines.
                                                             (line  692)
* __fractuqqudq2:                        Fixed-point fractional library routines.
                                                             (line  686)
* __fractuqquha:                         Fixed-point fractional library routines.
                                                             (line  688)
* __fractuqquhq2:                        Fixed-point fractional library routines.
                                                             (line  682)
* __fractuqqusa:                         Fixed-point fractional library routines.
                                                             (line  690)
* __fractuqqusq2:                        Fixed-point fractional library routines.
                                                             (line  684)
* __fractuqquta:                         Fixed-point fractional library routines.
                                                             (line  694)
* __fractusada:                          Fixed-point fractional library routines.
                                                             (line  836)
* __fractusadf:                          Fixed-point fractional library routines.
                                                             (line  857)
* __fractusadi:                          Fixed-point fractional library routines.
                                                             (line  854)
* __fractusadq:                          Fixed-point fractional library routines.
                                                             (line  833)
* __fractusaha:                          Fixed-point fractional library routines.
                                                             (line  834)
* __fractusahi:                          Fixed-point fractional library routines.
                                                             (line  852)
* __fractusahq:                          Fixed-point fractional library routines.
                                                             (line  831)
* __fractusaqi:                          Fixed-point fractional library routines.
                                                             (line  851)
* __fractusaqq:                          Fixed-point fractional library routines.
                                                             (line  830)
* __fractusasa:                          Fixed-point fractional library routines.
                                                             (line  835)
* __fractusasf:                          Fixed-point fractional library routines.
                                                             (line  856)
* __fractusasi:                          Fixed-point fractional library routines.
                                                             (line  853)
* __fractusasq:                          Fixed-point fractional library routines.
                                                             (line  832)
* __fractusata:                          Fixed-point fractional library routines.
                                                             (line  837)
* __fractusati:                          Fixed-point fractional library routines.
                                                             (line  855)
* __fractusauda2:                        Fixed-point fractional library routines.
                                                             (line  847)
* __fractusaudq:                         Fixed-point fractional library routines.
                                                             (line  843)
* __fractusauha2:                        Fixed-point fractional library routines.
                                                             (line  845)
* __fractusauhq:                         Fixed-point fractional library routines.
                                                             (line  840)
* __fractusauqq:                         Fixed-point fractional library routines.
                                                             (line  838)
* __fractusausq:                         Fixed-point fractional library routines.
                                                             (line  841)
* __fractusauta2:                        Fixed-point fractional library routines.
                                                             (line  849)
* __fractusqda:                          Fixed-point fractional library routines.
                                                             (line  738)
* __fractusqdf:                          Fixed-point fractional library routines.
                                                             (line  761)
* __fractusqdi:                          Fixed-point fractional library routines.
                                                             (line  758)
* __fractusqdq:                          Fixed-point fractional library routines.
                                                             (line  734)
* __fractusqha:                          Fixed-point fractional library routines.
                                                             (line  736)
* __fractusqhi:                          Fixed-point fractional library routines.
                                                             (line  756)
* __fractusqhq:                          Fixed-point fractional library routines.
                                                             (line  732)
* __fractusqqi:                          Fixed-point fractional library routines.
                                                             (line  755)
* __fractusqqq:                          Fixed-point fractional library routines.
                                                             (line  731)
* __fractusqsa:                          Fixed-point fractional library routines.
                                                             (line  737)
* __fractusqsf:                          Fixed-point fractional library routines.
                                                             (line  760)
* __fractusqsi:                          Fixed-point fractional library routines.
                                                             (line  757)
* __fractusqsq:                          Fixed-point fractional library routines.
                                                             (line  733)
* __fractusqta:                          Fixed-point fractional library routines.
                                                             (line  739)
* __fractusqti:                          Fixed-point fractional library routines.
                                                             (line  759)
* __fractusquda:                         Fixed-point fractional library routines.
                                                             (line  751)
* __fractusqudq2:                        Fixed-point fractional library routines.
                                                             (line  745)
* __fractusquha:                         Fixed-point fractional library routines.
                                                             (line  747)
* __fractusquhq2:                        Fixed-point fractional library routines.
                                                             (line  743)
* __fractusquqq2:                        Fixed-point fractional library routines.
                                                             (line  741)
* __fractusqusa:                         Fixed-point fractional library routines.
                                                             (line  749)
* __fractusquta:                         Fixed-point fractional library routines.
                                                             (line  753)
* __fractutada:                          Fixed-point fractional library routines.
                                                             (line  899)
* __fractutadf:                          Fixed-point fractional library routines.
                                                             (line  925)
* __fractutadi:                          Fixed-point fractional library routines.
                                                             (line  921)
* __fractutadq:                          Fixed-point fractional library routines.
                                                             (line  894)
* __fractutaha:                          Fixed-point fractional library routines.
                                                             (line  896)
* __fractutahi:                          Fixed-point fractional library routines.
                                                             (line  919)
* __fractutahq:                          Fixed-point fractional library routines.
                                                             (line  891)
* __fractutaqi:                          Fixed-point fractional library routines.
                                                             (line  917)
* __fractutaqq:                          Fixed-point fractional library routines.
                                                             (line  889)
* __fractutasa:                          Fixed-point fractional library routines.
                                                             (line  898)
* __fractutasf:                          Fixed-point fractional library routines.
                                                             (line  924)
* __fractutasi:                          Fixed-point fractional library routines.
                                                             (line  920)
* __fractutasq:                          Fixed-point fractional library routines.
                                                             (line  892)
* __fractutata:                          Fixed-point fractional library routines.
                                                             (line  901)
* __fractutati:                          Fixed-point fractional library routines.
                                                             (line  922)
* __fractutauda2:                        Fixed-point fractional library routines.
                                                             (line  915)
* __fractutaudq:                         Fixed-point fractional library routines.
                                                             (line  909)
* __fractutauha2:                        Fixed-point fractional library routines.
                                                             (line  911)
* __fractutauhq:                         Fixed-point fractional library routines.
                                                             (line  905)
* __fractutauqq:                         Fixed-point fractional library routines.
                                                             (line  903)
* __fractutausa2:                        Fixed-point fractional library routines.
                                                             (line  913)
* __fractutausq:                         Fixed-point fractional library routines.
                                                             (line  907)
* __gedf2:                               Soft float library routines.
                                                             (line  205)
* __gesf2:                               Soft float library routines.
                                                             (line  204)
* __getf2:                               Soft float library routines.
                                                             (line  206)
* __gtdf2:                               Soft float library routines.
                                                             (line  223)
* __gtsf2:                               Soft float library routines.
                                                             (line  222)
* __gttf2:                               Soft float library routines.
                                                             (line  224)
* __ledf2:                               Soft float library routines.
                                                             (line  217)
* __lesf2:                               Soft float library routines.
                                                             (line  216)
* __letf2:                               Soft float library routines.
                                                             (line  218)
* __lshrdi3:                             Integer library routines.
                                                             (line   30)
* __lshrsi3:                             Integer library routines.
                                                             (line   29)
* __lshrti3:                             Integer library routines.
                                                             (line   31)
* __lshruda3:                            Fixed-point fractional library routines.
                                                             (line  396)
* __lshrudq3:                            Fixed-point fractional library routines.
                                                             (line  390)
* __lshruha3:                            Fixed-point fractional library routines.
                                                             (line  392)
* __lshruhq3:                            Fixed-point fractional library routines.
                                                             (line  386)
* __lshruqq3:                            Fixed-point fractional library routines.
                                                             (line  384)
* __lshrusa3:                            Fixed-point fractional library routines.
                                                             (line  394)
* __lshrusq3:                            Fixed-point fractional library routines.
                                                             (line  388)
* __lshruta3:                            Fixed-point fractional library routines.
                                                             (line  398)
* __ltdf2:                               Soft float library routines.
                                                             (line  211)
* __ltsf2:                               Soft float library routines.
                                                             (line  210)
* __lttf2:                               Soft float library routines.
                                                             (line  212)
* __main:                                Collect2.           (line   15)
* __moddi3:                              Integer library routines.
                                                             (line   36)
* __modsi3:                              Integer library routines.
                                                             (line   35)
* __modti3:                              Integer library routines.
                                                             (line   37)
* __morestack_current_segment:           Miscellaneous routines.
                                                             (line   45)
* __morestack_initial_sp:                Miscellaneous routines.
                                                             (line   46)
* __morestack_segments:                  Miscellaneous routines.
                                                             (line   44)
* __mulda3:                              Fixed-point fractional library routines.
                                                             (line  178)
* __muldc3:                              Soft float library routines.
                                                             (line  239)
* __muldf3:                              Soft float library routines.
                                                             (line   39)
* __muldi3:                              Integer library routines.
                                                             (line   42)
* __muldq3:                              Fixed-point fractional library routines.
                                                             (line  165)
* __mulha3:                              Fixed-point fractional library routines.
                                                             (line  175)
* __mulhq3:                              Fixed-point fractional library routines.
                                                             (line  163)
* __mulqq3:                              Fixed-point fractional library routines.
                                                             (line  161)
* __mulsa3:                              Fixed-point fractional library routines.
                                                             (line  177)
* __mulsc3:                              Soft float library routines.
                                                             (line  237)
* __mulsf3:                              Soft float library routines.
                                                             (line   38)
* __mulsi3:                              Integer library routines.
                                                             (line   41)
* __mulsq3:                              Fixed-point fractional library routines.
                                                             (line  164)
* __multa3:                              Fixed-point fractional library routines.
                                                             (line  179)
* __multc3:                              Soft float library routines.
                                                             (line  241)
* __multf3:                              Soft float library routines.
                                                             (line   40)
* __multi3:                              Integer library routines.
                                                             (line   43)
* __muluda3:                             Fixed-point fractional library routines.
                                                             (line  185)
* __muludq3:                             Fixed-point fractional library routines.
                                                             (line  173)
* __muluha3:                             Fixed-point fractional library routines.
                                                             (line  181)
* __muluhq3:                             Fixed-point fractional library routines.
                                                             (line  169)
* __muluqq3:                             Fixed-point fractional library routines.
                                                             (line  167)
* __mulusa3:                             Fixed-point fractional library routines.
                                                             (line  183)
* __mulusq3:                             Fixed-point fractional library routines.
                                                             (line  171)
* __muluta3:                             Fixed-point fractional library routines.
                                                             (line  187)
* __mulvdi3:                             Integer library routines.
                                                             (line  114)
* __mulvsi3:                             Integer library routines.
                                                             (line  113)
* __mulxc3:                              Soft float library routines.
                                                             (line  243)
* __mulxf3:                              Soft float library routines.
                                                             (line   42)
* __nedf2:                               Soft float library routines.
                                                             (line  199)
* __negda2:                              Fixed-point fractional library routines.
                                                             (line  306)
* __negdf2:                              Soft float library routines.
                                                             (line   55)
* __negdi2:                              Integer library routines.
                                                             (line   46)
* __negdq2:                              Fixed-point fractional library routines.
                                                             (line  296)
* __negha2:                              Fixed-point fractional library routines.
                                                             (line  304)
* __neghq2:                              Fixed-point fractional library routines.
                                                             (line  294)
* __negqq2:                              Fixed-point fractional library routines.
                                                             (line  293)
* __negsa2:                              Fixed-point fractional library routines.
                                                             (line  305)
* __negsf2:                              Soft float library routines.
                                                             (line   54)
* __negsq2:                              Fixed-point fractional library routines.
                                                             (line  295)
* __negta2:                              Fixed-point fractional library routines.
                                                             (line  307)
* __negtf2:                              Soft float library routines.
                                                             (line   56)
* __negti2:                              Integer library routines.
                                                             (line   47)
* __neguda2:                             Fixed-point fractional library routines.
                                                             (line  311)
* __negudq2:                             Fixed-point fractional library routines.
                                                             (line  302)
* __neguha2:                             Fixed-point fractional library routines.
                                                             (line  308)
* __neguhq2:                             Fixed-point fractional library routines.
                                                             (line  299)
* __neguqq2:                             Fixed-point fractional library routines.
                                                             (line  297)
* __negusa2:                             Fixed-point fractional library routines.
                                                             (line  310)
* __negusq2:                             Fixed-point fractional library routines.
                                                             (line  300)
* __neguta2:                             Fixed-point fractional library routines.
                                                             (line  313)
* __negvdi2:                             Integer library routines.
                                                             (line  118)
* __negvsi2:                             Integer library routines.
                                                             (line  117)
* __negxf2:                              Soft float library routines.
                                                             (line   57)
* __nesf2:                               Soft float library routines.
                                                             (line  198)
* __netf2:                               Soft float library routines.
                                                             (line  200)
* __paritydi2:                           Integer library routines.
                                                             (line  150)
* __paritysi2:                           Integer library routines.
                                                             (line  149)
* __parityti2:                           Integer library routines.
                                                             (line  151)
* __popcountdi2:                         Integer library routines.
                                                             (line  156)
* __popcountsi2:                         Integer library routines.
                                                             (line  155)
* __popcountti2:                         Integer library routines.
                                                             (line  157)
* __powidf2:                             Soft float library routines.
                                                             (line  232)
* __powisf2:                             Soft float library routines.
                                                             (line  231)
* __powitf2:                             Soft float library routines.
                                                             (line  233)
* __powixf2:                             Soft float library routines.
                                                             (line  234)
* __satfractdadq:                        Fixed-point fractional library routines.
                                                             (line 1160)
* __satfractdaha2:                       Fixed-point fractional library routines.
                                                             (line 1161)
* __satfractdahq:                        Fixed-point fractional library routines.
                                                             (line 1158)
* __satfractdaqq:                        Fixed-point fractional library routines.
                                                             (line 1157)
* __satfractdasa2:                       Fixed-point fractional library routines.
                                                             (line 1162)
* __satfractdasq:                        Fixed-point fractional library routines.
                                                             (line 1159)
* __satfractdata2:                       Fixed-point fractional library routines.
                                                             (line 1163)
* __satfractdauda:                       Fixed-point fractional library routines.
                                                             (line 1173)
* __satfractdaudq:                       Fixed-point fractional library routines.
                                                             (line 1168)
* __satfractdauha:                       Fixed-point fractional library routines.
                                                             (line 1170)
* __satfractdauhq:                       Fixed-point fractional library routines.
                                                             (line 1166)
* __satfractdauqq:                       Fixed-point fractional library routines.
                                                             (line 1164)
* __satfractdausa:                       Fixed-point fractional library routines.
                                                             (line 1172)
* __satfractdausq:                       Fixed-point fractional library routines.
                                                             (line 1167)
* __satfractdauta:                       Fixed-point fractional library routines.
                                                             (line 1174)
* __satfractdfda:                        Fixed-point fractional library routines.
                                                             (line 1513)
* __satfractdfdq:                        Fixed-point fractional library routines.
                                                             (line 1510)
* __satfractdfha:                        Fixed-point fractional library routines.
                                                             (line 1511)
* __satfractdfhq:                        Fixed-point fractional library routines.
                                                             (line 1508)
* __satfractdfqq:                        Fixed-point fractional library routines.
                                                             (line 1507)
* __satfractdfsa:                        Fixed-point fractional library routines.
                                                             (line 1512)
* __satfractdfsq:                        Fixed-point fractional library routines.
                                                             (line 1509)
* __satfractdfta:                        Fixed-point fractional library routines.
                                                             (line 1514)
* __satfractdfuda:                       Fixed-point fractional library routines.
                                                             (line 1522)
* __satfractdfudq:                       Fixed-point fractional library routines.
                                                             (line 1518)
* __satfractdfuha:                       Fixed-point fractional library routines.
                                                             (line 1520)
* __satfractdfuhq:                       Fixed-point fractional library routines.
                                                             (line 1516)
* __satfractdfuqq:                       Fixed-point fractional library routines.
                                                             (line 1515)
* __satfractdfusa:                       Fixed-point fractional library routines.
                                                             (line 1521)
* __satfractdfusq:                       Fixed-point fractional library routines.
                                                             (line 1517)
* __satfractdfuta:                       Fixed-point fractional library routines.
                                                             (line 1523)
* __satfractdida:                        Fixed-point fractional library routines.
                                                             (line 1463)
* __satfractdidq:                        Fixed-point fractional library routines.
                                                             (line 1460)
* __satfractdiha:                        Fixed-point fractional library routines.
                                                             (line 1461)
* __satfractdihq:                        Fixed-point fractional library routines.
                                                             (line 1458)
* __satfractdiqq:                        Fixed-point fractional library routines.
                                                             (line 1457)
* __satfractdisa:                        Fixed-point fractional library routines.
                                                             (line 1462)
* __satfractdisq:                        Fixed-point fractional library routines.
                                                             (line 1459)
* __satfractdita:                        Fixed-point fractional library routines.
                                                             (line 1464)
* __satfractdiuda:                       Fixed-point fractional library routines.
                                                             (line 1471)
* __satfractdiudq:                       Fixed-point fractional library routines.
                                                             (line 1468)
* __satfractdiuha:                       Fixed-point fractional library routines.
                                                             (line 1469)
* __satfractdiuhq:                       Fixed-point fractional library routines.
                                                             (line 1466)
* __satfractdiuqq:                       Fixed-point fractional library routines.
                                                             (line 1465)
* __satfractdiusa:                       Fixed-point fractional library routines.
                                                             (line 1470)
* __satfractdiusq:                       Fixed-point fractional library routines.
                                                             (line 1467)
* __satfractdiuta:                       Fixed-point fractional library routines.
                                                             (line 1472)
* __satfractdqda:                        Fixed-point fractional library routines.
                                                             (line 1105)
* __satfractdqha:                        Fixed-point fractional library routines.
                                                             (line 1103)
* __satfractdqhq2:                       Fixed-point fractional library routines.
                                                             (line 1101)
* __satfractdqqq2:                       Fixed-point fractional library routines.
                                                             (line 1100)
* __satfractdqsa:                        Fixed-point fractional library routines.
                                                             (line 1104)
* __satfractdqsq2:                       Fixed-point fractional library routines.
                                                             (line 1102)
* __satfractdqta:                        Fixed-point fractional library routines.
                                                             (line 1106)
* __satfractdquda:                       Fixed-point fractional library routines.
                                                             (line 1117)
* __satfractdqudq:                       Fixed-point fractional library routines.
                                                             (line 1112)
* __satfractdquha:                       Fixed-point fractional library routines.
                                                             (line 1114)
* __satfractdquhq:                       Fixed-point fractional library routines.
                                                             (line 1109)
* __satfractdquqq:                       Fixed-point fractional library routines.
                                                             (line 1107)
* __satfractdqusa:                       Fixed-point fractional library routines.
                                                             (line 1116)
* __satfractdqusq:                       Fixed-point fractional library routines.
                                                             (line 1110)
* __satfractdquta:                       Fixed-point fractional library routines.
                                                             (line 1119)
* __satfracthada2:                       Fixed-point fractional library routines.
                                                             (line 1126)
* __satfracthadq:                        Fixed-point fractional library routines.
                                                             (line 1124)
* __satfracthahq:                        Fixed-point fractional library routines.
                                                             (line 1122)
* __satfracthaqq:                        Fixed-point fractional library routines.
                                                             (line 1121)
* __satfracthasa2:                       Fixed-point fractional library routines.
                                                             (line 1125)
* __satfracthasq:                        Fixed-point fractional library routines.
                                                             (line 1123)
* __satfracthata2:                       Fixed-point fractional library routines.
                                                             (line 1127)
* __satfracthauda:                       Fixed-point fractional library routines.
                                                             (line 1138)
* __satfracthaudq:                       Fixed-point fractional library routines.
                                                             (line 1133)
* __satfracthauha:                       Fixed-point fractional library routines.
                                                             (line 1135)
* __satfracthauhq:                       Fixed-point fractional library routines.
                                                             (line 1130)
* __satfracthauqq:                       Fixed-point fractional library routines.
                                                             (line 1128)
* __satfracthausa:                       Fixed-point fractional library routines.
                                                             (line 1137)
* __satfracthausq:                       Fixed-point fractional library routines.
                                                             (line 1131)
* __satfracthauta:                       Fixed-point fractional library routines.
                                                             (line 1140)
* __satfracthida:                        Fixed-point fractional library routines.
                                                             (line 1431)
* __satfracthidq:                        Fixed-point fractional library routines.
                                                             (line 1428)
* __satfracthiha:                        Fixed-point fractional library routines.
                                                             (line 1429)
* __satfracthihq:                        Fixed-point fractional library routines.
                                                             (line 1426)
* __satfracthiqq:                        Fixed-point fractional library routines.
                                                             (line 1425)
* __satfracthisa:                        Fixed-point fractional library routines.
                                                             (line 1430)
* __satfracthisq:                        Fixed-point fractional library routines.
                                                             (line 1427)
* __satfracthita:                        Fixed-point fractional library routines.
                                                             (line 1432)
* __satfracthiuda:                       Fixed-point fractional library routines.
                                                             (line 1439)
* __satfracthiudq:                       Fixed-point fractional library routines.
                                                             (line 1436)
* __satfracthiuha:                       Fixed-point fractional library routines.
                                                             (line 1437)
* __satfracthiuhq:                       Fixed-point fractional library routines.
                                                             (line 1434)
* __satfracthiuqq:                       Fixed-point fractional library routines.
                                                             (line 1433)
* __satfracthiusa:                       Fixed-point fractional library routines.
                                                             (line 1438)
* __satfracthiusq:                       Fixed-point fractional library routines.
                                                             (line 1435)
* __satfracthiuta:                       Fixed-point fractional library routines.
                                                             (line 1440)
* __satfracthqda:                        Fixed-point fractional library routines.
                                                             (line 1071)
* __satfracthqdq2:                       Fixed-point fractional library routines.
                                                             (line 1068)
* __satfracthqha:                        Fixed-point fractional library routines.
                                                             (line 1069)
* __satfracthqqq2:                       Fixed-point fractional library routines.
                                                             (line 1066)
* __satfracthqsa:                        Fixed-point fractional library routines.
                                                             (line 1070)
* __satfracthqsq2:                       Fixed-point fractional library routines.
                                                             (line 1067)
* __satfracthqta:                        Fixed-point fractional library routines.
                                                             (line 1072)
* __satfracthquda:                       Fixed-point fractional library routines.
                                                             (line 1079)
* __satfracthqudq:                       Fixed-point fractional library routines.
                                                             (line 1076)
* __satfracthquha:                       Fixed-point fractional library routines.
                                                             (line 1077)
* __satfracthquhq:                       Fixed-point fractional library routines.
                                                             (line 1074)
* __satfracthquqq:                       Fixed-point fractional library routines.
                                                             (line 1073)
* __satfracthqusa:                       Fixed-point fractional library routines.
                                                             (line 1078)
* __satfracthqusq:                       Fixed-point fractional library routines.
                                                             (line 1075)
* __satfracthquta:                       Fixed-point fractional library routines.
                                                             (line 1080)
* __satfractqida:                        Fixed-point fractional library routines.
                                                             (line 1409)
* __satfractqidq:                        Fixed-point fractional library routines.
                                                             (line 1406)
* __satfractqiha:                        Fixed-point fractional library routines.
                                                             (line 1407)
* __satfractqihq:                        Fixed-point fractional library routines.
                                                             (line 1404)
* __satfractqiqq:                        Fixed-point fractional library routines.
                                                             (line 1403)
* __satfractqisa:                        Fixed-point fractional library routines.
                                                             (line 1408)
* __satfractqisq:                        Fixed-point fractional library routines.
                                                             (line 1405)
* __satfractqita:                        Fixed-point fractional library routines.
                                                             (line 1410)
* __satfractqiuda:                       Fixed-point fractional library routines.
                                                             (line 1421)
* __satfractqiudq:                       Fixed-point fractional library routines.
                                                             (line 1416)
* __satfractqiuha:                       Fixed-point fractional library routines.
                                                             (line 1418)
* __satfractqiuhq:                       Fixed-point fractional library routines.
                                                             (line 1413)
* __satfractqiuqq:                       Fixed-point fractional library routines.
                                                             (line 1411)
* __satfractqiusa:                       Fixed-point fractional library routines.
                                                             (line 1420)
* __satfractqiusq:                       Fixed-point fractional library routines.
                                                             (line 1414)
* __satfractqiuta:                       Fixed-point fractional library routines.
                                                             (line 1423)
* __satfractqqda:                        Fixed-point fractional library routines.
                                                             (line 1050)
* __satfractqqdq2:                       Fixed-point fractional library routines.
                                                             (line 1047)
* __satfractqqha:                        Fixed-point fractional library routines.
                                                             (line 1048)
* __satfractqqhq2:                       Fixed-point fractional library routines.
                                                             (line 1045)
* __satfractqqsa:                        Fixed-point fractional library routines.
                                                             (line 1049)
* __satfractqqsq2:                       Fixed-point fractional library routines.
                                                             (line 1046)
* __satfractqqta:                        Fixed-point fractional library routines.
                                                             (line 1051)
* __satfractqquda:                       Fixed-point fractional library routines.
                                                             (line 1062)
* __satfractqqudq:                       Fixed-point fractional library routines.
                                                             (line 1057)
* __satfractqquha:                       Fixed-point fractional library routines.
                                                             (line 1059)
* __satfractqquhq:                       Fixed-point fractional library routines.
                                                             (line 1054)
* __satfractqquqq:                       Fixed-point fractional library routines.
                                                             (line 1052)
* __satfractqqusa:                       Fixed-point fractional library routines.
                                                             (line 1061)
* __satfractqqusq:                       Fixed-point fractional library routines.
                                                             (line 1055)
* __satfractqquta:                       Fixed-point fractional library routines.
                                                             (line 1064)
* __satfractsada2:                       Fixed-point fractional library routines.
                                                             (line 1147)
* __satfractsadq:                        Fixed-point fractional library routines.
                                                             (line 1145)
* __satfractsaha2:                       Fixed-point fractional library routines.
                                                             (line 1146)
* __satfractsahq:                        Fixed-point fractional library routines.
                                                             (line 1143)
* __satfractsaqq:                        Fixed-point fractional library routines.
                                                             (line 1142)
* __satfractsasq:                        Fixed-point fractional library routines.
                                                             (line 1144)
* __satfractsata2:                       Fixed-point fractional library routines.
                                                             (line 1148)
* __satfractsauda:                       Fixed-point fractional library routines.
                                                             (line 1155)
* __satfractsaudq:                       Fixed-point fractional library routines.
                                                             (line 1152)
* __satfractsauha:                       Fixed-point fractional library routines.
                                                             (line 1153)
* __satfractsauhq:                       Fixed-point fractional library routines.
                                                             (line 1150)
* __satfractsauqq:                       Fixed-point fractional library routines.
                                                             (line 1149)
* __satfractsausa:                       Fixed-point fractional library routines.
                                                             (line 1154)
* __satfractsausq:                       Fixed-point fractional library routines.
                                                             (line 1151)
* __satfractsauta:                       Fixed-point fractional library routines.
                                                             (line 1156)
* __satfractsfda:                        Fixed-point fractional library routines.
                                                             (line 1497)
* __satfractsfdq:                        Fixed-point fractional library routines.
                                                             (line 1494)
* __satfractsfha:                        Fixed-point fractional library routines.
                                                             (line 1495)
* __satfractsfhq:                        Fixed-point fractional library routines.
                                                             (line 1492)
* __satfractsfqq:                        Fixed-point fractional library routines.
                                                             (line 1491)
* __satfractsfsa:                        Fixed-point fractional library routines.
                                                             (line 1496)
* __satfractsfsq:                        Fixed-point fractional library routines.
                                                             (line 1493)
* __satfractsfta:                        Fixed-point fractional library routines.
                                                             (line 1498)
* __satfractsfuda:                       Fixed-point fractional library routines.
                                                             (line 1505)
* __satfractsfudq:                       Fixed-point fractional library routines.
                                                             (line 1502)
* __satfractsfuha:                       Fixed-point fractional library routines.
                                                             (line 1503)
* __satfractsfuhq:                       Fixed-point fractional library routines.
                                                             (line 1500)
* __satfractsfuqq:                       Fixed-point fractional library routines.
                                                             (line 1499)
* __satfractsfusa:                       Fixed-point fractional library routines.
                                                             (line 1504)
* __satfractsfusq:                       Fixed-point fractional library routines.
                                                             (line 1501)
* __satfractsfuta:                       Fixed-point fractional library routines.
                                                             (line 1506)
* __satfractsida:                        Fixed-point fractional library routines.
                                                             (line 1447)
* __satfractsidq:                        Fixed-point fractional library routines.
                                                             (line 1444)
* __satfractsiha:                        Fixed-point fractional library routines.
                                                             (line 1445)
* __satfractsihq:                        Fixed-point fractional library routines.
                                                             (line 1442)
* __satfractsiqq:                        Fixed-point fractional library routines.
                                                             (line 1441)
* __satfractsisa:                        Fixed-point fractional library routines.
                                                             (line 1446)
* __satfractsisq:                        Fixed-point fractional library routines.
                                                             (line 1443)
* __satfractsita:                        Fixed-point fractional library routines.
                                                             (line 1448)
* __satfractsiuda:                       Fixed-point fractional library routines.
                                                             (line 1455)
* __satfractsiudq:                       Fixed-point fractional library routines.
                                                             (line 1452)
* __satfractsiuha:                       Fixed-point fractional library routines.
                                                             (line 1453)
* __satfractsiuhq:                       Fixed-point fractional library routines.
                                                             (line 1450)
* __satfractsiuqq:                       Fixed-point fractional library routines.
                                                             (line 1449)
* __satfractsiusa:                       Fixed-point fractional library routines.
                                                             (line 1454)
* __satfractsiusq:                       Fixed-point fractional library routines.
                                                             (line 1451)
* __satfractsiuta:                       Fixed-point fractional library routines.
                                                             (line 1456)
* __satfractsqda:                        Fixed-point fractional library routines.
                                                             (line 1086)
* __satfractsqdq2:                       Fixed-point fractional library routines.
                                                             (line 1083)
* __satfractsqha:                        Fixed-point fractional library routines.
                                                             (line 1084)
* __satfractsqhq2:                       Fixed-point fractional library routines.
                                                             (line 1082)
* __satfractsqqq2:                       Fixed-point fractional library routines.
                                                             (line 1081)
* __satfractsqsa:                        Fixed-point fractional library routines.
                                                             (line 1085)
* __satfractsqta:                        Fixed-point fractional library routines.
                                                             (line 1087)
* __satfractsquda:                       Fixed-point fractional library routines.
                                                             (line 1097)
* __satfractsqudq:                       Fixed-point fractional library routines.
                                                             (line 1092)
* __satfractsquha:                       Fixed-point fractional library routines.
                                                             (line 1094)
* __satfractsquhq:                       Fixed-point fractional library routines.
                                                             (line 1090)
* __satfractsquqq:                       Fixed-point fractional library routines.
                                                             (line 1088)
* __satfractsqusa:                       Fixed-point fractional library routines.
                                                             (line 1096)
* __satfractsqusq:                       Fixed-point fractional library routines.
                                                             (line 1091)
* __satfractsquta:                       Fixed-point fractional library routines.
                                                             (line 1098)
* __satfracttada2:                       Fixed-point fractional library routines.
                                                             (line 1182)
* __satfracttadq:                        Fixed-point fractional library routines.
                                                             (line 1179)
* __satfracttaha2:                       Fixed-point fractional library routines.
                                                             (line 1180)
* __satfracttahq:                        Fixed-point fractional library routines.
                                                             (line 1177)
* __satfracttaqq:                        Fixed-point fractional library routines.
                                                             (line 1176)
* __satfracttasa2:                       Fixed-point fractional library routines.
                                                             (line 1181)
* __satfracttasq:                        Fixed-point fractional library routines.
                                                             (line 1178)
* __satfracttauda:                       Fixed-point fractional library routines.
                                                             (line 1193)
* __satfracttaudq:                       Fixed-point fractional library routines.
                                                             (line 1188)
* __satfracttauha:                       Fixed-point fractional library routines.
                                                             (line 1190)
* __satfracttauhq:                       Fixed-point fractional library routines.
                                                             (line 1185)
* __satfracttauqq:                       Fixed-point fractional library routines.
                                                             (line 1183)
* __satfracttausa:                       Fixed-point fractional library routines.
                                                             (line 1192)
* __satfracttausq:                       Fixed-point fractional library routines.
                                                             (line 1186)
* __satfracttauta:                       Fixed-point fractional library routines.
                                                             (line 1195)
* __satfracttida:                        Fixed-point fractional library routines.
                                                             (line 1479)
* __satfracttidq:                        Fixed-point fractional library routines.
                                                             (line 1476)
* __satfracttiha:                        Fixed-point fractional library routines.
                                                             (line 1477)
* __satfracttihq:                        Fixed-point fractional library routines.
                                                             (line 1474)
* __satfracttiqq:                        Fixed-point fractional library routines.
                                                             (line 1473)
* __satfracttisa:                        Fixed-point fractional library routines.
                                                             (line 1478)
* __satfracttisq:                        Fixed-point fractional library routines.
                                                             (line 1475)
* __satfracttita:                        Fixed-point fractional library routines.
                                                             (line 1480)
* __satfracttiuda:                       Fixed-point fractional library routines.
                                                             (line 1488)
* __satfracttiudq:                       Fixed-point fractional library routines.
                                                             (line 1484)
* __satfracttiuha:                       Fixed-point fractional library routines.
                                                             (line 1486)
* __satfracttiuhq:                       Fixed-point fractional library routines.
                                                             (line 1482)
* __satfracttiuqq:                       Fixed-point fractional library routines.
                                                             (line 1481)
* __satfracttiusa:                       Fixed-point fractional library routines.
                                                             (line 1487)
* __satfracttiusq:                       Fixed-point fractional library routines.
                                                             (line 1483)
* __satfracttiuta:                       Fixed-point fractional library routines.
                                                             (line 1489)
* __satfractudada:                       Fixed-point fractional library routines.
                                                             (line 1358)
* __satfractudadq:                       Fixed-point fractional library routines.
                                                             (line 1353)
* __satfractudaha:                       Fixed-point fractional library routines.
                                                             (line 1355)
* __satfractudahq:                       Fixed-point fractional library routines.
                                                             (line 1351)
* __satfractudaqq:                       Fixed-point fractional library routines.
                                                             (line 1349)
* __satfractudasa:                       Fixed-point fractional library routines.
                                                             (line 1357)
* __satfractudasq:                       Fixed-point fractional library routines.
                                                             (line 1352)
* __satfractudata:                       Fixed-point fractional library routines.
                                                             (line 1359)
* __satfractudaudq:                      Fixed-point fractional library routines.
                                                             (line 1367)
* __satfractudauha2:                     Fixed-point fractional library routines.
                                                             (line 1369)
* __satfractudauhq:                      Fixed-point fractional library routines.
                                                             (line 1363)
* __satfractudauqq:                      Fixed-point fractional library routines.
                                                             (line 1361)
* __satfractudausa2:                     Fixed-point fractional library routines.
                                                             (line 1371)
* __satfractudausq:                      Fixed-point fractional library routines.
                                                             (line 1365)
* __satfractudauta2:                     Fixed-point fractional library routines.
                                                             (line 1373)
* __satfractudqda:                       Fixed-point fractional library routines.
                                                             (line 1282)
* __satfractudqdq:                       Fixed-point fractional library routines.
                                                             (line 1277)
* __satfractudqha:                       Fixed-point fractional library routines.
                                                             (line 1279)
* __satfractudqhq:                       Fixed-point fractional library routines.
                                                             (line 1274)
* __satfractudqqq:                       Fixed-point fractional library routines.
                                                             (line 1272)
* __satfractudqsa:                       Fixed-point fractional library routines.
                                                             (line 1281)
* __satfractudqsq:                       Fixed-point fractional library routines.
                                                             (line 1275)
* __satfractudqta:                       Fixed-point fractional library routines.
                                                             (line 1284)
* __satfractudquda:                      Fixed-point fractional library routines.
                                                             (line 1296)
* __satfractudquha:                      Fixed-point fractional library routines.
                                                             (line 1292)
* __satfractudquhq2:                     Fixed-point fractional library routines.
                                                             (line 1288)
* __satfractudquqq2:                     Fixed-point fractional library routines.
                                                             (line 1286)
* __satfractudqusa:                      Fixed-point fractional library routines.
                                                             (line 1294)
* __satfractudqusq2:                     Fixed-point fractional library routines.
                                                             (line 1290)
* __satfractudquta:                      Fixed-point fractional library routines.
                                                             (line 1298)
* __satfractuhada:                       Fixed-point fractional library routines.
                                                             (line 1310)
* __satfractuhadq:                       Fixed-point fractional library routines.
                                                             (line 1305)
* __satfractuhaha:                       Fixed-point fractional library routines.
                                                             (line 1307)
* __satfractuhahq:                       Fixed-point fractional library routines.
                                                             (line 1302)
* __satfractuhaqq:                       Fixed-point fractional library routines.
                                                             (line 1300)
* __satfractuhasa:                       Fixed-point fractional library routines.
                                                             (line 1309)
* __satfractuhasq:                       Fixed-point fractional library routines.
                                                             (line 1303)
* __satfractuhata:                       Fixed-point fractional library routines.
                                                             (line 1312)
* __satfractuhauda2:                     Fixed-point fractional library routines.
                                                             (line 1324)
* __satfractuhaudq:                      Fixed-point fractional library routines.
                                                             (line 1320)
* __satfractuhauhq:                      Fixed-point fractional library routines.
                                                             (line 1316)
* __satfractuhauqq:                      Fixed-point fractional library routines.
                                                             (line 1314)
* __satfractuhausa2:                     Fixed-point fractional library routines.
                                                             (line 1322)
* __satfractuhausq:                      Fixed-point fractional library routines.
                                                             (line 1318)
* __satfractuhauta2:                     Fixed-point fractional library routines.
                                                             (line 1326)
* __satfractuhqda:                       Fixed-point fractional library routines.
                                                             (line 1231)
* __satfractuhqdq:                       Fixed-point fractional library routines.
                                                             (line 1228)
* __satfractuhqha:                       Fixed-point fractional library routines.
                                                             (line 1229)
* __satfractuhqhq:                       Fixed-point fractional library routines.
                                                             (line 1226)
* __satfractuhqqq:                       Fixed-point fractional library routines.
                                                             (line 1225)
* __satfractuhqsa:                       Fixed-point fractional library routines.
                                                             (line 1230)
* __satfractuhqsq:                       Fixed-point fractional library routines.
                                                             (line 1227)
* __satfractuhqta:                       Fixed-point fractional library routines.
                                                             (line 1232)
* __satfractuhquda:                      Fixed-point fractional library routines.
                                                             (line 1242)
* __satfractuhqudq2:                     Fixed-point fractional library routines.
                                                             (line 1237)
* __satfractuhquha:                      Fixed-point fractional library routines.
                                                             (line 1239)
* __satfractuhquqq2:                     Fixed-point fractional library routines.
                                                             (line 1233)
* __satfractuhqusa:                      Fixed-point fractional library routines.
                                                             (line 1241)
* __satfractuhqusq2:                     Fixed-point fractional library routines.
                                                             (line 1235)
* __satfractuhquta:                      Fixed-point fractional library routines.
                                                             (line 1244)
* __satfractunsdida:                     Fixed-point fractional library routines.
                                                             (line 1841)
* __satfractunsdidq:                     Fixed-point fractional library routines.
                                                             (line 1837)
* __satfractunsdiha:                     Fixed-point fractional library routines.
                                                             (line 1839)
* __satfractunsdihq:                     Fixed-point fractional library routines.
                                                             (line 1835)
* __satfractunsdiqq:                     Fixed-point fractional library routines.
                                                             (line 1834)
* __satfractunsdisa:                     Fixed-point fractional library routines.
                                                             (line 1840)
* __satfractunsdisq:                     Fixed-point fractional library routines.
                                                             (line 1836)
* __satfractunsdita:                     Fixed-point fractional library routines.
                                                             (line 1842)
* __satfractunsdiuda:                    Fixed-point fractional library routines.
                                                             (line 1856)
* __satfractunsdiudq:                    Fixed-point fractional library routines.
                                                             (line 1850)
* __satfractunsdiuha:                    Fixed-point fractional library routines.
                                                             (line 1852)
* __satfractunsdiuhq:                    Fixed-point fractional library routines.
                                                             (line 1846)
* __satfractunsdiuqq:                    Fixed-point fractional library routines.
                                                             (line 1844)
* __satfractunsdiusa:                    Fixed-point fractional library routines.
                                                             (line 1854)
* __satfractunsdiusq:                    Fixed-point fractional library routines.
                                                             (line 1848)
* __satfractunsdiuta:                    Fixed-point fractional library routines.
                                                             (line 1858)
* __satfractunshida:                     Fixed-point fractional library routines.
                                                             (line 1793)
* __satfractunshidq:                     Fixed-point fractional library routines.
                                                             (line 1789)
* __satfractunshiha:                     Fixed-point fractional library routines.
                                                             (line 1791)
* __satfractunshihq:                     Fixed-point fractional library routines.
                                                             (line 1787)
* __satfractunshiqq:                     Fixed-point fractional library routines.
                                                             (line 1786)
* __satfractunshisa:                     Fixed-point fractional library routines.
                                                             (line 1792)
* __satfractunshisq:                     Fixed-point fractional library routines.
                                                             (line 1788)
* __satfractunshita:                     Fixed-point fractional library routines.
                                                             (line 1794)
* __satfractunshiuda:                    Fixed-point fractional library routines.
                                                             (line 1808)
* __satfractunshiudq:                    Fixed-point fractional library routines.
                                                             (line 1802)
* __satfractunshiuha:                    Fixed-point fractional library routines.
                                                             (line 1804)
* __satfractunshiuhq:                    Fixed-point fractional library routines.
                                                             (line 1798)
* __satfractunshiuqq:                    Fixed-point fractional library routines.
                                                             (line 1796)
* __satfractunshiusa:                    Fixed-point fractional library routines.
                                                             (line 1806)
* __satfractunshiusq:                    Fixed-point fractional library routines.
                                                             (line 1800)
* __satfractunshiuta:                    Fixed-point fractional library routines.
                                                             (line 1810)
* __satfractunsqida:                     Fixed-point fractional library routines.
                                                             (line 1767)
* __satfractunsqidq:                     Fixed-point fractional library routines.
                                                             (line 1763)
* __satfractunsqiha:                     Fixed-point fractional library routines.
                                                             (line 1765)
* __satfractunsqihq:                     Fixed-point fractional library routines.
                                                             (line 1761)
* __satfractunsqiqq:                     Fixed-point fractional library routines.
                                                             (line 1760)
* __satfractunsqisa:                     Fixed-point fractional library routines.
                                                             (line 1766)
* __satfractunsqisq:                     Fixed-point fractional library routines.
                                                             (line 1762)
* __satfractunsqita:                     Fixed-point fractional library routines.
                                                             (line 1768)
* __satfractunsqiuda:                    Fixed-point fractional library routines.
                                                             (line 1782)
* __satfractunsqiudq:                    Fixed-point fractional library routines.
                                                             (line 1776)
* __satfractunsqiuha:                    Fixed-point fractional library routines.
                                                             (line 1778)
* __satfractunsqiuhq:                    Fixed-point fractional library routines.
                                                             (line 1772)
* __satfractunsqiuqq:                    Fixed-point fractional library routines.
                                                             (line 1770)
* __satfractunsqiusa:                    Fixed-point fractional library routines.
                                                             (line 1780)
* __satfractunsqiusq:                    Fixed-point fractional library routines.
                                                             (line 1774)
* __satfractunsqiuta:                    Fixed-point fractional library routines.
                                                             (line 1784)
* __satfractunssida:                     Fixed-point fractional library routines.
                                                             (line 1818)
* __satfractunssidq:                     Fixed-point fractional library routines.
                                                             (line 1815)
* __satfractunssiha:                     Fixed-point fractional library routines.
                                                             (line 1816)
* __satfractunssihq:                     Fixed-point fractional library routines.
                                                             (line 1813)
* __satfractunssiqq:                     Fixed-point fractional library routines.
                                                             (line 1812)
* __satfractunssisa:                     Fixed-point fractional library routines.
                                                             (line 1817)
* __satfractunssisq:                     Fixed-point fractional library routines.
                                                             (line 1814)
* __satfractunssita:                     Fixed-point fractional library routines.
                                                             (line 1819)
* __satfractunssiuda:                    Fixed-point fractional library routines.
                                                             (line 1830)
* __satfractunssiudq:                    Fixed-point fractional library routines.
                                                             (line 1825)
* __satfractunssiuha:                    Fixed-point fractional library routines.
                                                             (line 1827)
* __satfractunssiuhq:                    Fixed-point fractional library routines.
                                                             (line 1822)
* __satfractunssiuqq:                    Fixed-point fractional library routines.
                                                             (line 1820)
* __satfractunssiusa:                    Fixed-point fractional library routines.
                                                             (line 1829)
* __satfractunssiusq:                    Fixed-point fractional library routines.
                                                             (line 1823)
* __satfractunssiuta:                    Fixed-point fractional library routines.
                                                             (line 1832)
* __satfractunstida:                     Fixed-point fractional library routines.
                                                             (line 1870)
* __satfractunstidq:                     Fixed-point fractional library routines.
                                                             (line 1865)
* __satfractunstiha:                     Fixed-point fractional library routines.
                                                             (line 1867)
* __satfractunstihq:                     Fixed-point fractional library routines.
                                                             (line 1862)
* __satfractunstiqq:                     Fixed-point fractional library routines.
                                                             (line 1860)
* __satfractunstisa:                     Fixed-point fractional library routines.
                                                             (line 1869)
* __satfractunstisq:                     Fixed-point fractional library routines.
                                                             (line 1863)
* __satfractunstita:                     Fixed-point fractional library routines.
                                                             (line 1872)
* __satfractunstiuda:                    Fixed-point fractional library routines.
                                                             (line 1886)
* __satfractunstiudq:                    Fixed-point fractional library routines.
                                                             (line 1880)
* __satfractunstiuha:                    Fixed-point fractional library routines.
                                                             (line 1882)
* __satfractunstiuhq:                    Fixed-point fractional library routines.
                                                             (line 1876)
* __satfractunstiuqq:                    Fixed-point fractional library routines.
                                                             (line 1874)
* __satfractunstiusa:                    Fixed-point fractional library routines.
                                                             (line 1884)
* __satfractunstiusq:                    Fixed-point fractional library routines.
                                                             (line 1878)
* __satfractunstiuta:                    Fixed-point fractional library routines.
                                                             (line 1888)
* __satfractuqqda:                       Fixed-point fractional library routines.
                                                             (line 1207)
* __satfractuqqdq:                       Fixed-point fractional library routines.
                                                             (line 1202)
* __satfractuqqha:                       Fixed-point fractional library routines.
                                                             (line 1204)
* __satfractuqqhq:                       Fixed-point fractional library routines.
                                                             (line 1199)
* __satfractuqqqq:                       Fixed-point fractional library routines.
                                                             (line 1197)
* __satfractuqqsa:                       Fixed-point fractional library routines.
                                                             (line 1206)
* __satfractuqqsq:                       Fixed-point fractional library routines.
                                                             (line 1200)
* __satfractuqqta:                       Fixed-point fractional library routines.
                                                             (line 1209)
* __satfractuqquda:                      Fixed-point fractional library routines.
                                                             (line 1221)
* __satfractuqqudq2:                     Fixed-point fractional library routines.
                                                             (line 1215)
* __satfractuqquha:                      Fixed-point fractional library routines.
                                                             (line 1217)
* __satfractuqquhq2:                     Fixed-point fractional library routines.
                                                             (line 1211)
* __satfractuqqusa:                      Fixed-point fractional library routines.
                                                             (line 1219)
* __satfractuqqusq2:                     Fixed-point fractional library routines.
                                                             (line 1213)
* __satfractuqquta:                      Fixed-point fractional library routines.
                                                             (line 1223)
* __satfractusada:                       Fixed-point fractional library routines.
                                                             (line 1334)
* __satfractusadq:                       Fixed-point fractional library routines.
                                                             (line 1331)
* __satfractusaha:                       Fixed-point fractional library routines.
                                                             (line 1332)
* __satfractusahq:                       Fixed-point fractional library routines.
                                                             (line 1329)
* __satfractusaqq:                       Fixed-point fractional library routines.
                                                             (line 1328)
* __satfractusasa:                       Fixed-point fractional library routines.
                                                             (line 1333)
* __satfractusasq:                       Fixed-point fractional library routines.
                                                             (line 1330)
* __satfractusata:                       Fixed-point fractional library routines.
                                                             (line 1335)
* __satfractusauda2:                     Fixed-point fractional library routines.
                                                             (line 1345)
* __satfractusaudq:                      Fixed-point fractional library routines.
                                                             (line 1341)
* __satfractusauha2:                     Fixed-point fractional library routines.
                                                             (line 1343)
* __satfractusauhq:                      Fixed-point fractional library routines.
                                                             (line 1338)
* __satfractusauqq:                      Fixed-point fractional library routines.
                                                             (line 1336)
* __satfractusausq:                      Fixed-point fractional library routines.
                                                             (line 1339)
* __satfractusauta2:                     Fixed-point fractional library routines.
                                                             (line 1347)
* __satfractusqda:                       Fixed-point fractional library routines.
                                                             (line 1255)
* __satfractusqdq:                       Fixed-point fractional library routines.
                                                             (line 1250)
* __satfractusqha:                       Fixed-point fractional library routines.
                                                             (line 1252)
* __satfractusqhq:                       Fixed-point fractional library routines.
                                                             (line 1248)
* __satfractusqqq:                       Fixed-point fractional library routines.
                                                             (line 1246)
* __satfractusqsa:                       Fixed-point fractional library routines.
                                                             (line 1254)
* __satfractusqsq:                       Fixed-point fractional library routines.
                                                             (line 1249)
* __satfractusqta:                       Fixed-point fractional library routines.
                                                             (line 1256)
* __satfractusquda:                      Fixed-point fractional library routines.
                                                             (line 1268)
* __satfractusqudq2:                     Fixed-point fractional library routines.
                                                             (line 1262)
* __satfractusquha:                      Fixed-point fractional library routines.
                                                             (line 1264)
* __satfractusquhq2:                     Fixed-point fractional library routines.
                                                             (line 1260)
* __satfractusquqq2:                     Fixed-point fractional library routines.
                                                             (line 1258)
* __satfractusqusa:                      Fixed-point fractional library routines.
                                                             (line 1266)
* __satfractusquta:                      Fixed-point fractional library routines.
                                                             (line 1270)
* __satfractutada:                       Fixed-point fractional library routines.
                                                             (line 1385)
* __satfractutadq:                       Fixed-point fractional library routines.
                                                             (line 1380)
* __satfractutaha:                       Fixed-point fractional library routines.
                                                             (line 1382)
* __satfractutahq:                       Fixed-point fractional library routines.
                                                             (line 1377)
* __satfractutaqq:                       Fixed-point fractional library routines.
                                                             (line 1375)
* __satfractutasa:                       Fixed-point fractional library routines.
                                                             (line 1384)
* __satfractutasq:                       Fixed-point fractional library routines.
                                                             (line 1378)
* __satfractutata:                       Fixed-point fractional library routines.
                                                             (line 1387)
* __satfractutauda2:                     Fixed-point fractional library routines.
                                                             (line 1401)
* __satfractutaudq:                      Fixed-point fractional library routines.
                                                             (line 1395)
* __satfractutauha2:                     Fixed-point fractional library routines.
                                                             (line 1397)
* __satfractutauhq:                      Fixed-point fractional library routines.
                                                             (line 1391)
* __satfractutauqq:                      Fixed-point fractional library routines.
                                                             (line 1389)
* __satfractutausa2:                     Fixed-point fractional library routines.
                                                             (line 1399)
* __satfractutausq:                      Fixed-point fractional library routines.
                                                             (line 1393)
* __splitstack_find:                     Miscellaneous routines.
                                                             (line   15)
* __ssaddda3:                            Fixed-point fractional library routines.
                                                             (line   74)
* __ssadddq3:                            Fixed-point fractional library routines.
                                                             (line   69)
* __ssaddha3:                            Fixed-point fractional library routines.
                                                             (line   71)
* __ssaddhq3:                            Fixed-point fractional library routines.
                                                             (line   67)
* __ssaddqq3:                            Fixed-point fractional library routines.
                                                             (line   65)
* __ssaddsa3:                            Fixed-point fractional library routines.
                                                             (line   73)
* __ssaddsq3:                            Fixed-point fractional library routines.
                                                             (line   68)
* __ssaddta3:                            Fixed-point fractional library routines.
                                                             (line   75)
* __ssashlda3:                           Fixed-point fractional library routines.
                                                             (line  409)
* __ssashldq3:                           Fixed-point fractional library routines.
                                                             (line  405)
* __ssashlha3:                           Fixed-point fractional library routines.
                                                             (line  407)
* __ssashlhq3:                           Fixed-point fractional library routines.
                                                             (line  403)
* __ssashlsa3:                           Fixed-point fractional library routines.
                                                             (line  408)
* __ssashlsq3:                           Fixed-point fractional library routines.
                                                             (line  404)
* __ssashlta3:                           Fixed-point fractional library routines.
                                                             (line  410)
* __ssdivda3:                            Fixed-point fractional library routines.
                                                             (line  268)
* __ssdivdq3:                            Fixed-point fractional library routines.
                                                             (line  263)
* __ssdivha3:                            Fixed-point fractional library routines.
                                                             (line  265)
* __ssdivhq3:                            Fixed-point fractional library routines.
                                                             (line  261)
* __ssdivqq3:                            Fixed-point fractional library routines.
                                                             (line  259)
* __ssdivsa3:                            Fixed-point fractional library routines.
                                                             (line  267)
* __ssdivsq3:                            Fixed-point fractional library routines.
                                                             (line  262)
* __ssdivta3:                            Fixed-point fractional library routines.
                                                             (line  269)
* __ssmulda3:                            Fixed-point fractional library routines.
                                                             (line  200)
* __ssmuldq3:                            Fixed-point fractional library routines.
                                                             (line  195)
* __ssmulha3:                            Fixed-point fractional library routines.
                                                             (line  197)
* __ssmulhq3:                            Fixed-point fractional library routines.
                                                             (line  193)
* __ssmulqq3:                            Fixed-point fractional library routines.
                                                             (line  191)
* __ssmulsa3:                            Fixed-point fractional library routines.
                                                             (line  199)
* __ssmulsq3:                            Fixed-point fractional library routines.
                                                             (line  194)
* __ssmulta3:                            Fixed-point fractional library routines.
                                                             (line  201)
* __ssnegda2:                            Fixed-point fractional library routines.
                                                             (line  323)
* __ssnegdq2:                            Fixed-point fractional library routines.
                                                             (line  320)
* __ssnegha2:                            Fixed-point fractional library routines.
                                                             (line  321)
* __ssneghq2:                            Fixed-point fractional library routines.
                                                             (line  318)
* __ssnegqq2:                            Fixed-point fractional library routines.
                                                             (line  317)
* __ssnegsa2:                            Fixed-point fractional library routines.
                                                             (line  322)
* __ssnegsq2:                            Fixed-point fractional library routines.
                                                             (line  319)
* __ssnegta2:                            Fixed-point fractional library routines.
                                                             (line  324)
* __sssubda3:                            Fixed-point fractional library routines.
                                                             (line  136)
* __sssubdq3:                            Fixed-point fractional library routines.
                                                             (line  131)
* __sssubha3:                            Fixed-point fractional library routines.
                                                             (line  133)
* __sssubhq3:                            Fixed-point fractional library routines.
                                                             (line  129)
* __sssubqq3:                            Fixed-point fractional library routines.
                                                             (line  127)
* __sssubsa3:                            Fixed-point fractional library routines.
                                                             (line  135)
* __sssubsq3:                            Fixed-point fractional library routines.
                                                             (line  130)
* __sssubta3:                            Fixed-point fractional library routines.
                                                             (line  137)
* __subda3:                              Fixed-point fractional library routines.
                                                             (line  114)
* __subdf3:                              Soft float library routines.
                                                             (line   30)
* __subdq3:                              Fixed-point fractional library routines.
                                                             (line  101)
* __subha3:                              Fixed-point fractional library routines.
                                                             (line  111)
* __subhq3:                              Fixed-point fractional library routines.
                                                             (line   99)
* __subqq3:                              Fixed-point fractional library routines.
                                                             (line   97)
* __subsa3:                              Fixed-point fractional library routines.
                                                             (line  113)
* __subsf3:                              Soft float library routines.
                                                             (line   29)
* __subsq3:                              Fixed-point fractional library routines.
                                                             (line  100)
* __subta3:                              Fixed-point fractional library routines.
                                                             (line  115)
* __subtf3:                              Soft float library routines.
                                                             (line   31)
* __subuda3:                             Fixed-point fractional library routines.
                                                             (line  121)
* __subudq3:                             Fixed-point fractional library routines.
                                                             (line  109)
* __subuha3:                             Fixed-point fractional library routines.
                                                             (line  117)
* __subuhq3:                             Fixed-point fractional library routines.
                                                             (line  105)
* __subuqq3:                             Fixed-point fractional library routines.
                                                             (line  103)
* __subusa3:                             Fixed-point fractional library routines.
                                                             (line  119)
* __subusq3:                             Fixed-point fractional library routines.
                                                             (line  107)
* __subuta3:                             Fixed-point fractional library routines.
                                                             (line  123)
* __subvdi3:                             Integer library routines.
                                                             (line  122)
* __subvsi3:                             Integer library routines.
                                                             (line  121)
* __subxf3:                              Soft float library routines.
                                                             (line   33)
* __truncdfsf2:                          Soft float library routines.
                                                             (line   75)
* __trunctfdf2:                          Soft float library routines.
                                                             (line   72)
* __trunctfsf2:                          Soft float library routines.
                                                             (line   74)
* __truncxfdf2:                          Soft float library routines.
                                                             (line   71)
* __truncxfsf2:                          Soft float library routines.
                                                             (line   73)
* __ucmpdi2:                             Integer library routines.
                                                             (line   92)
* __ucmpti2:                             Integer library routines.
                                                             (line   93)
* __udivdi3:                             Integer library routines.
                                                             (line   52)
* __udivmoddi4:                          Integer library routines.
                                                             (line   59)
* __udivmodti4:                          Integer library routines.
                                                             (line   61)
* __udivsi3:                             Integer library routines.
                                                             (line   50)
* __udivti3:                             Integer library routines.
                                                             (line   54)
* __udivuda3:                            Fixed-point fractional library routines.
                                                             (line  252)
* __udivudq3:                            Fixed-point fractional library routines.
                                                             (line  246)
* __udivuha3:                            Fixed-point fractional library routines.
                                                             (line  248)
* __udivuhq3:                            Fixed-point fractional library routines.
                                                             (line  242)
* __udivuqq3:                            Fixed-point fractional library routines.
                                                             (line  240)
* __udivusa3:                            Fixed-point fractional library routines.
                                                             (line  250)
* __udivusq3:                            Fixed-point fractional library routines.
                                                             (line  244)
* __udivuta3:                            Fixed-point fractional library routines.
                                                             (line  254)
* __umoddi3:                             Integer library routines.
                                                             (line   69)
* __umodsi3:                             Integer library routines.
                                                             (line   67)
* __umodti3:                             Integer library routines.
                                                             (line   71)
* __unorddf2:                            Soft float library routines.
                                                             (line  172)
* __unordsf2:                            Soft float library routines.
                                                             (line  171)
* __unordtf2:                            Soft float library routines.
                                                             (line  173)
* __usadduda3:                           Fixed-point fractional library routines.
                                                             (line   91)
* __usaddudq3:                           Fixed-point fractional library routines.
                                                             (line   85)
* __usadduha3:                           Fixed-point fractional library routines.
                                                             (line   87)
* __usadduhq3:                           Fixed-point fractional library routines.
                                                             (line   81)
* __usadduqq3:                           Fixed-point fractional library routines.
                                                             (line   79)
* __usaddusa3:                           Fixed-point fractional library routines.
                                                             (line   89)
* __usaddusq3:                           Fixed-point fractional library routines.
                                                             (line   83)
* __usadduta3:                           Fixed-point fractional library routines.
                                                             (line   93)
* __usashluda3:                          Fixed-point fractional library routines.
                                                             (line  427)
* __usashludq3:                          Fixed-point fractional library routines.
                                                             (line  421)
* __usashluha3:                          Fixed-point fractional library routines.
                                                             (line  423)
* __usashluhq3:                          Fixed-point fractional library routines.
                                                             (line  417)
* __usashluqq3:                          Fixed-point fractional library routines.
                                                             (line  415)
* __usashlusa3:                          Fixed-point fractional library routines.
                                                             (line  425)
* __usashlusq3:                          Fixed-point fractional library routines.
                                                             (line  419)
* __usashluta3:                          Fixed-point fractional library routines.
                                                             (line  429)
* __usdivuda3:                           Fixed-point fractional library routines.
                                                             (line  286)
* __usdivudq3:                           Fixed-point fractional library routines.
                                                             (line  280)
* __usdivuha3:                           Fixed-point fractional library routines.
                                                             (line  282)
* __usdivuhq3:                           Fixed-point fractional library routines.
                                                             (line  276)
* __usdivuqq3:                           Fixed-point fractional library routines.
                                                             (line  274)
* __usdivusa3:                           Fixed-point fractional library routines.
                                                             (line  284)
* __usdivusq3:                           Fixed-point fractional library routines.
                                                             (line  278)
* __usdivuta3:                           Fixed-point fractional library routines.
                                                             (line  288)
* __usmuluda3:                           Fixed-point fractional library routines.
                                                             (line  218)
* __usmuludq3:                           Fixed-point fractional library routines.
                                                             (line  212)
* __usmuluha3:                           Fixed-point fractional library routines.
                                                             (line  214)
* __usmuluhq3:                           Fixed-point fractional library routines.
                                                             (line  208)
* __usmuluqq3:                           Fixed-point fractional library routines.
                                                             (line  206)
* __usmulusa3:                           Fixed-point fractional library routines.
                                                             (line  216)
* __usmulusq3:                           Fixed-point fractional library routines.
                                                             (line  210)
* __usmuluta3:                           Fixed-point fractional library routines.
                                                             (line  220)
* __usneguda2:                           Fixed-point fractional library routines.
                                                             (line  337)
* __usnegudq2:                           Fixed-point fractional library routines.
                                                             (line  332)
* __usneguha2:                           Fixed-point fractional library routines.
                                                             (line  334)
* __usneguhq2:                           Fixed-point fractional library routines.
                                                             (line  329)
* __usneguqq2:                           Fixed-point fractional library routines.
                                                             (line  327)
* __usnegusa2:                           Fixed-point fractional library routines.
                                                             (line  336)
* __usnegusq2:                           Fixed-point fractional library routines.
                                                             (line  330)
* __usneguta2:                           Fixed-point fractional library routines.
                                                             (line  339)
* __ussubuda3:                           Fixed-point fractional library routines.
                                                             (line  154)
* __ussubudq3:                           Fixed-point fractional library routines.
                                                             (line  148)
* __ussubuha3:                           Fixed-point fractional library routines.
                                                             (line  150)
* __ussubuhq3:                           Fixed-point fractional library routines.
                                                             (line  144)
* __ussubuqq3:                           Fixed-point fractional library routines.
                                                             (line  142)
* __ussubusa3:                           Fixed-point fractional library routines.
                                                             (line  152)
* __ussubusq3:                           Fixed-point fractional library routines.
                                                             (line  146)
* __ussubuta3:                           Fixed-point fractional library routines.
                                                             (line  156)
* abort:                                 Portability.        (line   20)
* abs:                                   Arithmetic.         (line  200)
* abs and attributes:                    Expressions.        (line   83)
* absence_set:                           Processor pipeline description.
                                                             (line  223)
* absM2 instruction pattern:             Standard Names.     (line  879)
* absolute value:                        Arithmetic.         (line  200)
* ABSU_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* ABS_EXPR:                              Unary and Binary Expressions.
                                                             (line    6)
* access to operands:                    Accessors.          (line    6)
* access to special operands:            Special Accessors.  (line    6)
* accessors:                             Accessors.          (line    6)
* ACCUMULATE_OUTGOING_ARGS:              Stack Arguments.    (line   48)
* ACCUMULATE_OUTGOING_ARGS and stack frames: Function Entry. (line  140)
* ACCUM_TYPE_SIZE:                       Type Layout.        (line   87)
* acosM2 instruction pattern:            Standard Names.     (line  966)
* ADA_LONG_TYPE_SIZE:                    Type Layout.        (line   25)
* Adding a new GIMPLE statement code:    Adding a new GIMPLE statement code.
                                                             (line    6)
* ADDITIONAL_REGISTER_NAMES:             Instruction Output. (line   14)
* addM3 instruction pattern:             Standard Names.     (line  436)
* addMODEcc instruction pattern:         Standard Names.     (line 1589)
* addptrM3 instruction pattern:          Standard Names.     (line  469)
* address constraints:                   Simple Constraints. (line  162)
* addressing modes:                      Addressing Modes.   (line    6)
* address_operand:                       Machine-Independent Predicates.
                                                             (line   62)
* address_operand <1>:                   Simple Constraints. (line  166)
* addr_diff_vec:                         Side Effects.       (line  314)
* addr_diff_vec, length of:              Insn Lengths.       (line   26)
* ADDR_EXPR:                             Storage References. (line    6)
* addr_vec:                              Side Effects.       (line  309)
* addr_vec, length of:                   Insn Lengths.       (line   26)
* addvM4 instruction pattern:            Standard Names.     (line  452)
* ADJUST_FIELD_ALIGN:                    Storage Layout.     (line  212)
* ADJUST_INSN_LENGTH:                    Insn Lengths.       (line   41)
* ADJUST_REG_ALLOC_ORDER:                Allocation Order.   (line   22)
* aggregates as return values:           Aggregate Return.   (line    6)
* alias:                                 Alias analysis.     (line    6)
* allocate_stack instruction pattern:    Standard Names.     (line 1956)
* ALL_REGS:                              Register Classes.   (line   17)
* alternate entry points:                Insns.              (line  146)
* analyzer:                              Static Analyzer.    (line    6)
* analyzer, debugging:                   Debugging the Analyzer.
                                                             (line    6)
* analyzer, internals:                   Analyzer Internals. (line    6)
* anchored addresses:                    Anchored Addresses. (line    6)
* and:                                   Arithmetic.         (line  158)
* and and attributes:                    Expressions.        (line   50)
* and, canonicalization of:              Insn Canonicalizations.
                                                             (line   67)
* andM3 instruction pattern:             Standard Names.     (line  442)
* ANNOTATE_EXPR:                         Unary and Binary Expressions.
                                                             (line    6)
* annotations:                           Annotations.        (line    6)
* APPLY_RESULT_SIZE:                     Scalar Return.      (line  112)
* ARGS_GROW_DOWNWARD:                    Frame Layout.       (line   30)
* argument passing:                      Interface.          (line   36)
* arguments in registers:                Register Arguments. (line    6)
* arguments on stack:                    Stack Arguments.    (line    6)
* ARG_POINTER_CFA_OFFSET:                Frame Layout.       (line  207)
* ARG_POINTER_REGNUM:                    Frame Registers.    (line   40)
* ARG_POINTER_REGNUM and virtual registers: Regs and Memory. (line   65)
* arg_pointer_rtx:                       Frame Registers.    (line  104)
* arithmetic library:                    Soft float library routines.
                                                             (line    6)
* arithmetic shift:                      Arithmetic.         (line  173)
* arithmetic shift with signed saturation: Arithmetic.       (line  173)
* arithmetic shift with unsigned saturation: Arithmetic.     (line  173)
* arithmetic, in RTL:                    Arithmetic.         (line    6)
* ARITHMETIC_TYPE_P:                     Types for C++.      (line   59)
* array:                                 Types.              (line    6)
* ARRAY_RANGE_REF:                       Storage References. (line    6)
* ARRAY_REF:                             Storage References. (line    6)
* ARRAY_TYPE:                            Types.              (line    6)
* ashift:                                Arithmetic.         (line  173)
* ashift and attributes:                 Expressions.        (line   83)
* ashiftrt:                              Arithmetic.         (line  190)
* ashiftrt and attributes:               Expressions.        (line   83)
* ashlM3 instruction pattern:            Standard Names.     (line  828)
* ashrM3 instruction pattern:            Standard Names.     (line  840)
* asinM2 instruction pattern:            Standard Names.     (line  960)
* ASM_APP_OFF:                           File Framework.     (line   76)
* ASM_APP_ON:                            File Framework.     (line   69)
* ASM_COMMENT_START:                     File Framework.     (line   64)
* ASM_DECLARE_COLD_FUNCTION_NAME:        Label Output.       (line  136)
* ASM_DECLARE_COLD_FUNCTION_SIZE:        Label Output.       (line  151)
* ASM_DECLARE_FUNCTION_NAME:             Label Output.       (line  108)
* ASM_DECLARE_FUNCTION_SIZE:             Label Output.       (line  123)
* ASM_DECLARE_OBJECT_NAME:               Label Output.       (line  164)
* ASM_DECLARE_REGISTER_GLOBAL:           Label Output.       (line  192)
* ASM_FINAL_SPEC:                        Driver.             (line   81)
* ASM_FINISH_DECLARE_OBJECT:             Label Output.       (line  200)
* ASM_FORMAT_PRIVATE_NAME:               Label Output.       (line  426)
* asm_fprintf:                           Instruction Output. (line  150)
* ASM_FPRINTF_EXTENSIONS:                Instruction Output. (line  160)
* ASM_GENERATE_INTERNAL_LABEL:           Label Output.       (line  410)
* asm_input:                             Side Effects.       (line  296)
* asm_input and /v:                      Flags.              (line   65)
* ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX:     Exception Handling. (line   80)
* asm_noperands:                         Insns.              (line  327)
* ASM_NO_SKIP_IN_TEXT:                   Alignment Output.   (line   59)
* asm_operands and /v:                   Flags.              (line   65)
* asm_operands, RTL sharing:             Sharing.            (line   48)
* asm_operands, usage:                   Assembler.          (line    6)
* ASM_OUTPUT_ADDR_DIFF_ELT:              Dispatch Tables.    (line    8)
* ASM_OUTPUT_ADDR_VEC_ELT:               Dispatch Tables.    (line   25)
* ASM_OUTPUT_ALIGN:                      Alignment Output.   (line   66)
* ASM_OUTPUT_ALIGNED_BSS:                Uninitialized Data. (line   45)
* ASM_OUTPUT_ALIGNED_COMMON:             Uninitialized Data. (line   29)
* ASM_OUTPUT_ALIGNED_DECL_COMMON:        Uninitialized Data. (line   36)
* ASM_OUTPUT_ALIGNED_DECL_LOCAL:         Uninitialized Data. (line   89)
* ASM_OUTPUT_ALIGNED_LOCAL:              Uninitialized Data. (line   82)
* ASM_OUTPUT_ALIGN_WITH_NOP:             Alignment Output.   (line   71)
* ASM_OUTPUT_ASCII:                      Data Output.        (line   60)
* ASM_OUTPUT_CASE_END:                   Dispatch Tables.    (line   50)
* ASM_OUTPUT_CASE_LABEL:                 Dispatch Tables.    (line   37)
* ASM_OUTPUT_COMMON:                     Uninitialized Data. (line    9)
* ASM_OUTPUT_DEBUG_LABEL:                Label Output.       (line  398)
* ASM_OUTPUT_DEF:                        Label Output.       (line  447)
* ASM_OUTPUT_DEF_FROM_DECLS:             Label Output.       (line  454)
* ASM_OUTPUT_DWARF_DATAREL:              DWARF.              (line  110)
* ASM_OUTPUT_DWARF_DELTA:                DWARF.              (line   89)
* ASM_OUTPUT_DWARF_OFFSET:               DWARF.              (line   98)
* ASM_OUTPUT_DWARF_PCREL:                DWARF.              (line  105)
* ASM_OUTPUT_DWARF_TABLE_REF:            DWARF.              (line  115)
* ASM_OUTPUT_DWARF_VMS_DELTA:            DWARF.              (line   93)
* ASM_OUTPUT_EXTERNAL:                   Label Output.       (line  327)
* ASM_OUTPUT_FDESC:                      Data Output.        (line   69)
* ASM_OUTPUT_FUNCTION_LABEL:             Label Output.       (line   16)
* ASM_OUTPUT_INTERNAL_LABEL:             Label Output.       (line   27)
* ASM_OUTPUT_LABEL:                      Label Output.       (line    8)
* ASM_OUTPUT_LABELREF:                   Label Output.       (line  349)
* ASM_OUTPUT_LABEL_REF:                  Label Output.       (line  371)
* ASM_OUTPUT_LOCAL:                      Uninitialized Data. (line   69)
* ASM_OUTPUT_MAX_SKIP_ALIGN:             Alignment Output.   (line   75)
* ASM_OUTPUT_MEASURED_SIZE:              Label Output.       (line   51)
* ASM_OUTPUT_OPCODE:                     Instruction Output. (line   35)
* ASM_OUTPUT_POOL_EPILOGUE:              Data Output.        (line  118)
* ASM_OUTPUT_POOL_PROLOGUE:              Data Output.        (line   82)
* ASM_OUTPUT_REG_POP:                    Instruction Output. (line  206)
* ASM_OUTPUT_REG_PUSH:                   Instruction Output. (line  201)
* ASM_OUTPUT_SIZE_DIRECTIVE:             Label Output.       (line   45)
* ASM_OUTPUT_SKIP:                       Alignment Output.   (line   53)
* ASM_OUTPUT_SOURCE_FILENAME:            File Framework.     (line   83)
* ASM_OUTPUT_SPECIAL_POOL_ENTRY:         Data Output.        (line   93)
* ASM_OUTPUT_SYMBOL_REF:                 Label Output.       (line  364)
* ASM_OUTPUT_TYPE_DIRECTIVE:             Label Output.       (line   98)
* ASM_OUTPUT_WEAKREF:                    Label Output.       (line  259)
* ASM_OUTPUT_WEAK_ALIAS:                 Label Output.       (line  473)
* ASM_PREFERRED_EH_DATA_FORMAT:          Exception Handling. (line   66)
* ASM_SPEC:                              Driver.             (line   73)
* ASM_STABD_OP:                          DBX Options.        (line   34)
* ASM_STABN_OP:                          DBX Options.        (line   41)
* ASM_STABS_OP:                          DBX Options.        (line   28)
* ASM_WEAKEN_DECL:                       Label Output.       (line  251)
* ASM_WEAKEN_LABEL:                      Label Output.       (line  238)
* assembler format:                      File Framework.     (line    6)
* assembler instructions in RTL:         Assembler.          (line    6)
* ASSEMBLER_DIALECT:                     Instruction Output. (line  172)
* assemble_name:                         Label Output.       (line    8)
* assemble_name_raw:                     Label Output.       (line   27)
* assigning attribute values to insns:   Tagging Insns.      (line    6)
* ASSUME_EXTENDED_UNWIND_CONTEXT:        Frame Registers.    (line  163)
* asterisk in template:                  Output Statement.   (line   29)
* AS_NEEDS_DASH_FOR_PIPED_INPUT:         Driver.             (line   88)
* atan2M3 instruction pattern:           Standard Names.     (line 1061)
* atanM2 instruction pattern:            Standard Names.     (line  972)
* atomic:                                GTY Options.        (line  197)
* atomic_addMODE instruction pattern:    Standard Names.     (line 2380)
* atomic_add_fetchMODE instruction pattern: Standard Names.  (line 2409)
* atomic_andMODE instruction pattern:    Standard Names.     (line 2380)
* atomic_and_fetchMODE instruction pattern: Standard Names.  (line 2409)
* atomic_bit_test_and_complementMODE instruction pattern: Standard Names.
                                                             (line 2437)
* atomic_bit_test_and_resetMODE instruction pattern: Standard Names.
                                                             (line 2437)
* atomic_bit_test_and_setMODE instruction pattern: Standard Names.
                                                             (line 2437)
* atomic_compare_and_swapMODE instruction pattern: Standard Names.
                                                             (line 2316)
* atomic_exchangeMODE instruction pattern: Standard Names.   (line 2368)
* atomic_fetch_addMODE instruction pattern: Standard Names.  (line 2394)
* atomic_fetch_andMODE instruction pattern: Standard Names.  (line 2394)
* atomic_fetch_nandMODE instruction pattern: Standard Names. (line 2394)
* atomic_fetch_orMODE instruction pattern: Standard Names.   (line 2394)
* atomic_fetch_subMODE instruction pattern: Standard Names.  (line 2394)
* atomic_fetch_xorMODE instruction pattern: Standard Names.  (line 2394)
* atomic_loadMODE instruction pattern:   Standard Names.     (line 2347)
* atomic_nandMODE instruction pattern:   Standard Names.     (line 2380)
* atomic_nand_fetchMODE instruction pattern: Standard Names. (line 2409)
* atomic_orMODE instruction pattern:     Standard Names.     (line 2380)
* atomic_or_fetchMODE instruction pattern: Standard Names.   (line 2409)
* atomic_storeMODE instruction pattern:  Standard Names.     (line 2357)
* atomic_subMODE instruction pattern:    Standard Names.     (line 2380)
* atomic_sub_fetchMODE instruction pattern: Standard Names.  (line 2409)
* atomic_test_and_set instruction pattern: Standard Names.   (line 2426)
* atomic_xorMODE instruction pattern:    Standard Names.     (line 2380)
* atomic_xor_fetchMODE instruction pattern: Standard Names.  (line 2409)
* attr:                                  Expressions.        (line  163)
* attr <1>:                              Tagging Insns.      (line   54)
* attribute expressions:                 Expressions.        (line    6)
* attribute specifications:              Attr Example.       (line    6)
* attribute specifications example:      Attr Example.       (line    6)
* attributes:                            Attributes.         (line    6)
* attributes, defining:                  Defining Attributes.
                                                             (line    6)
* attributes, target-specific:           Target Attributes.  (line    6)
* ATTRIBUTE_ALIGNED_VALUE:               Storage Layout.     (line  194)
* attr_flag:                             Expressions.        (line  138)
* autoincrement addressing, availability: Portability.       (line   20)
* autoincrement/decrement addressing:    Simple Constraints. (line   30)
* automata_option:                       Processor pipeline description.
                                                             (line  304)
* automaton based pipeline description:  Processor pipeline description.
                                                             (line    6)
* automaton based pipeline description <1>: Processor pipeline description.
                                                             (line   49)
* automaton based scheduler:             Processor pipeline description.
                                                             (line    6)
* avgM3_ceil instruction pattern:        Standard Names.     (line  860)
* avgM3_floor instruction pattern:       Standard Names.     (line  848)
* AVOID_CCMODE_COPIES:                   Values in Registers.
                                                             (line  148)
* backslash:                             Output Template.    (line   46)
* barrier:                               Insns.              (line  176)
* barrier and /f:                        Flags.              (line  135)
* barrier and /v:                        Flags.              (line   33)
* BASE_REG_CLASS:                        Register Classes.   (line  111)
* basic block:                           Basic Blocks.       (line    6)
* Basic Statements:                      Basic Statements.   (line    6)
* basic-block.h:                         Control Flow.       (line    6)
* basic_block:                           Basic Blocks.       (line    6)
* BASIC_BLOCK:                           Basic Blocks.       (line   14)
* BB_HEAD, BB_END:                       Maintaining the CFG.
                                                             (line   76)
* bb_seq:                                GIMPLE sequences.   (line   72)
* BIGGEST_ALIGNMENT:                     Storage Layout.     (line  179)
* BIGGEST_FIELD_ALIGNMENT:               Storage Layout.     (line  205)
* BImode:                                Machine Modes.      (line   22)
* BIND_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* BINFO_TYPE:                            Classes.            (line    6)
* bit-fields:                            Bit-Fields.         (line    6)
* BITFIELD_NBYTES_LIMITED:               Storage Layout.     (line  428)
* BITS_BIG_ENDIAN:                       Storage Layout.     (line   11)
* BITS_BIG_ENDIAN, effect on sign_extract: Bit-Fields.       (line    8)
* BITS_PER_UNIT:                         Machine Modes.      (line  440)
* BITS_PER_WORD:                         Storage Layout.     (line   50)
* bitwise complement:                    Arithmetic.         (line  154)
* bitwise exclusive-or:                  Arithmetic.         (line  168)
* bitwise inclusive-or:                  Arithmetic.         (line  163)
* bitwise logical-and:                   Arithmetic.         (line  158)
* BIT_AND_EXPR:                          Unary and Binary Expressions.
                                                             (line    6)
* BIT_IOR_EXPR:                          Unary and Binary Expressions.
                                                             (line    6)
* BIT_NOT_EXPR:                          Unary and Binary Expressions.
                                                             (line    6)
* BIT_XOR_EXPR:                          Unary and Binary Expressions.
                                                             (line    6)
* BLKmode:                               Machine Modes.      (line  185)
* BLKmode, and function return values:   Calls.              (line   23)
* blockage instruction pattern:          Standard Names.     (line 2156)
* Blocks:                                Blocks.             (line    6)
* BLOCK_FOR_INSN, gimple_bb:             Maintaining the CFG.
                                                             (line   28)
* BLOCK_REG_PADDING:                     Register Arguments. (line  238)
* BND32mode:                             Machine Modes.      (line  210)
* BND64mode:                             Machine Modes.      (line  210)
* bool:                                  Misc.               (line  958)
* BOOLEAN_TYPE:                          Types.              (line    6)
* BOOL_TYPE_SIZE:                        Type Layout.        (line   43)
* branch prediction:                     Profile information.
                                                             (line   24)
* BRANCH_COST:                           Costs.              (line  104)
* break_out_memory_refs:                 Addressing Modes.   (line  134)
* BREAK_STMT:                            Statements for C++. (line    6)
* BSS_SECTION_ASM_OP:                    Sections.           (line   67)
* bswap:                                 Arithmetic.         (line  246)
* bswapM2 instruction pattern:           Standard Names.     (line  868)
* btruncM2 instruction pattern:          Standard Names.     (line 1078)
* build0:                                Macros and Functions.
                                                             (line   16)
* build1:                                Macros and Functions.
                                                             (line   17)
* build2:                                Macros and Functions.
                                                             (line   18)
* build3:                                Macros and Functions.
                                                             (line   19)
* build4:                                Macros and Functions.
                                                             (line   20)
* build5:                                Macros and Functions.
                                                             (line   21)
* build6:                                Macros and Functions.
                                                             (line   22)
* builtin_longjmp instruction pattern:   Standard Names.     (line 2054)
* builtin_setjmp_receiver instruction pattern: Standard Names.
                                                             (line 2044)
* builtin_setjmp_setup instruction pattern: Standard Names.  (line 2033)
* BYTES_BIG_ENDIAN:                      Storage Layout.     (line   23)
* BYTES_BIG_ENDIAN, effect on subreg:    Regs and Memory.    (line  229)
* byte_mode:                             Machine Modes.      (line  458)
* C statements for assembler output:     Output Statement.   (line    6)
* cache:                                 GTY Options.        (line  127)
* call:                                  Flags.              (line  230)
* call <1>:                              Side Effects.       (line   92)
* call instruction pattern:              Standard Names.     (line 1709)
* call usage:                            Calls.              (line   10)
* call, in call_insn:                    Flags.              (line  129)
* call, in mem:                          Flags.              (line   70)
* call-clobbered register:               Register Basics.    (line   35)
* call-clobbered register <1>:           Register Basics.    (line   50)
* call-clobbered register <2>:           Register Basics.    (line   58)
* call-clobbered register <3>:           Register Basics.    (line   76)
* call-saved register:                   Register Basics.    (line   35)
* call-saved register <1>:               Register Basics.    (line   50)
* call-saved register <2>:               Register Basics.    (line   58)
* call-saved register <3>:               Register Basics.    (line   76)
* call-used register:                    Register Basics.    (line   35)
* call-used register <1>:                Register Basics.    (line   50)
* call-used register <2>:                Register Basics.    (line   58)
* call-used register <3>:                Register Basics.    (line   76)
* calling conventions:                   Stack and Calling.  (line    6)
* calling functions in RTL:              Calls.              (line    6)
* CALL_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* call_insn:                             Insns.              (line   95)
* call_insn and /c:                      Flags.              (line  129)
* call_insn and /f:                      Flags.              (line  135)
* call_insn and /i:                      Flags.              (line  120)
* call_insn and /j:                      Flags.              (line  175)
* call_insn and /s:                      Flags.              (line   38)
* call_insn and /s <1>:                  Flags.              (line  162)
* call_insn and /u:                      Flags.              (line   28)
* call_insn and /u <1>:                  Flags.              (line  115)
* call_insn and /u or /i:                Flags.              (line  125)
* call_insn and /v:                      Flags.              (line   33)
* CALL_INSN_FUNCTION_USAGE:              Insns.              (line  101)
* call_pop instruction pattern:          Standard Names.     (line 1737)
* CALL_POPS_ARGS:                        Stack Arguments.    (line  138)
* CALL_REALLY_USED_REGISTERS:            Register Basics.    (line   49)
* CALL_USED_REGISTERS:                   Register Basics.    (line   34)
* call_used_regs:                        Register Basics.    (line  102)
* call_value instruction pattern:        Standard Names.     (line 1729)
* call_value_pop instruction pattern:    Standard Names.     (line 1737)
* canadian:                              Configure Terms.    (line    6)
* canonicalization of instructions:      Insn Canonicalizations.
                                                             (line    6)
* canonicalize_funcptr_for_compare instruction pattern: Standard Names.
                                                             (line 1888)
* can_create_pseudo_p:                   Standard Names.     (line   75)
* can_fallthru:                          Basic Blocks.       (line   67)
* caret:                                 Multi-Alternative.  (line   53)
* caret <1>:                             Guidelines for Diagnostics.
                                                             (line  159)
* casesi instruction pattern:            Standard Names.     (line 1830)
* CASE_VECTOR_MODE:                      Misc.               (line   26)
* CASE_VECTOR_PC_RELATIVE:               Misc.               (line   39)
* CASE_VECTOR_SHORTEN_MODE:              Misc.               (line   30)
* cbranchMODE4 instruction pattern:      Standard Names.     (line 1698)
* cc0:                                   Regs and Memory.    (line  329)
* cc0 <1>:                               CC0 Condition Codes.
                                                             (line    6)
* cc0, RTL sharing:                      Sharing.            (line   30)
* cc0_rtx:                               Regs and Memory.    (line  355)
* CC1PLUS_SPEC:                          Driver.             (line   63)
* CC1_SPEC:                              Driver.             (line   55)
* CCmode:                                Machine Modes.      (line  178)
* CCmode <1>:                            MODE_CC Condition Codes.
                                                             (line    6)
* cc_status:                             CC0 Condition Codes.
                                                             (line    6)
* CC_STATUS_MDEP:                        CC0 Condition Codes.
                                                             (line   16)
* CC_STATUS_MDEP_INIT:                   CC0 Condition Codes.
                                                             (line   22)
* CDImode:                               Machine Modes.      (line  204)
* ceilM2 instruction pattern:            Standard Names.     (line 1097)
* CEIL_DIV_EXPR:                         Unary and Binary Expressions.
                                                             (line    6)
* CEIL_MOD_EXPR:                         Unary and Binary Expressions.
                                                             (line    6)
* CFA_FRAME_BASE_OFFSET:                 Frame Layout.       (line  239)
* CFG verification:                      Maintaining the CFG.
                                                             (line  116)
* CFG, Control Flow Graph:               Control Flow.       (line    6)
* cfghooks.h:                            Maintaining the CFG.
                                                             (line    6)
* cgraph_finalize_function:              Parsing pass.       (line   51)
* chain_circular:                        GTY Options.        (line  160)
* chain_next:                            GTY Options.        (line  160)
* chain_prev:                            GTY Options.        (line  160)
* change_address:                        Standard Names.     (line   47)
* CHAR_TYPE_SIZE:                        Type Layout.        (line   38)
* check_raw_ptrsM instruction pattern:   Standard Names.     (line  330)
* check_stack instruction pattern:       Standard Names.     (line 1974)
* check_war_ptrsM instruction pattern:   Standard Names.     (line  349)
* CHImode:                               Machine Modes.      (line  204)
* class definitions, register:           Register Classes.   (line    6)
* class preference constraints:          Class Preferences.  (line    6)
* class, scope:                          Classes.            (line    6)
* classes of RTX codes:                  RTL Classes.        (line    6)
* CLASSTYPE_DECLARED_CLASS:              Classes.            (line    6)
* CLASSTYPE_HAS_MUTABLE:                 Classes.            (line   82)
* CLASSTYPE_NON_POD_P:                   Classes.            (line   87)
* CLASS_MAX_NREGS:                       Register Classes.   (line  531)
* CLASS_TYPE_P:                          Types for C++.      (line   63)
* Cleanups:                              Cleanups.           (line    6)
* CLEANUP_DECL:                          Statements for C++. (line    6)
* CLEANUP_EXPR:                          Statements for C++. (line    6)
* CLEANUP_POINT_EXPR:                    Unary and Binary Expressions.
                                                             (line    6)
* CLEANUP_STMT:                          Statements for C++. (line    6)
* clear_cache instruction pattern:       Standard Names.     (line 2543)
* CLEAR_INSN_CACHE:                      Trampolines.        (line  151)
* CLEAR_RATIO:                           Costs.              (line  225)
* clobber:                               Side Effects.       (line  106)
* clrsb:                                 Arithmetic.         (line  215)
* clrsbM2 instruction pattern:           Standard Names.     (line 1170)
* clz:                                   Arithmetic.         (line  222)
* clzM2 instruction pattern:             Standard Names.     (line 1186)
* CLZ_DEFINED_VALUE_AT_ZERO:             Misc.               (line  338)
* cmpmemM instruction pattern:           Standard Names.     (line 1389)
* cmpstrM instruction pattern:           Standard Names.     (line 1368)
* cmpstrnM instruction pattern:          Standard Names.     (line 1355)
* code generation RTL sequences:         Expander Definitions.
                                                             (line    6)
* code iterators in .md files:           Code Iterators.     (line    6)
* codes, RTL expression:                 RTL Objects.        (line   47)
* code_label:                            Insns.              (line  125)
* CODE_LABEL:                            Basic Blocks.       (line   50)
* code_label and /i:                     Flags.              (line   48)
* code_label and /v:                     Flags.              (line   33)
* CODE_LABEL_NUMBER:                     Insns.              (line  125)
* COImode:                               Machine Modes.      (line  204)
* COLLECT2_HOST_INITIALIZATION:          Host Misc.          (line   32)
* COLLECT_EXPORT_LIST:                   Misc.               (line  864)
* COLLECT_SHARED_FINI_FUNC:              Macros for Initialization.
                                                             (line   43)
* COLLECT_SHARED_INIT_FUNC:              Macros for Initialization.
                                                             (line   32)
* command-line options, guidelines for:  Guidelines for Options.
                                                             (line    6)
* commit_edge_insertions:                Maintaining the CFG.
                                                             (line  104)
* compare:                               Arithmetic.         (line   46)
* compare, canonicalization of:          Insn Canonicalizations.
                                                             (line   36)
* COMPARE_MAX_PIECES:                    Costs.              (line  220)
* comparison_operator:                   Machine-Independent Predicates.
                                                             (line  110)
* compiler passes and files:             Passes.             (line    6)
* complement, bitwise:                   Arithmetic.         (line  154)
* COMPLEX_CST:                           Constant expressions.
                                                             (line    6)
* COMPLEX_EXPR:                          Unary and Binary Expressions.
                                                             (line    6)
* complex_mode:                          Machine Modes.      (line  302)
* COMPLEX_TYPE:                          Types.              (line    6)
* COMPONENT_REF:                         Storage References. (line    6)
* Compound Expressions:                  Compound Expressions.
                                                             (line    6)
* Compound Lvalues:                      Compound Lvalues.   (line    6)
* COMPOUND_EXPR:                         Unary and Binary Expressions.
                                                             (line    6)
* COMPOUND_LITERAL_EXPR:                 Unary and Binary Expressions.
                                                             (line    6)
* COMPOUND_LITERAL_EXPR_DECL:            Unary and Binary Expressions.
                                                             (line  392)
* COMPOUND_LITERAL_EXPR_DECL_EXPR:       Unary and Binary Expressions.
                                                             (line  392)
* computed jump:                         Edges.              (line  127)
* computing the length of an insn:       Insn Lengths.       (line    6)
* concat:                                Regs and Memory.    (line  407)
* concatn:                               Regs and Memory.    (line  413)
* cond:                                  Comparisons.        (line   90)
* cond and attributes:                   Expressions.        (line   37)
* condition code register:               Regs and Memory.    (line  329)
* condition code status:                 Condition Code.     (line    6)
* condition codes:                       Comparisons.        (line   20)
* conditional execution:                 Conditional Execution.
                                                             (line    6)
* Conditional Expressions:               Conditional Expressions.
                                                             (line    6)
* conditions, in patterns:               Patterns.           (line   55)
* cond_addMODE instruction pattern:      Standard Names.     (line 1596)
* cond_andMODE instruction pattern:      Standard Names.     (line 1596)
* cond_divMODE instruction pattern:      Standard Names.     (line 1596)
* cond_exec:                             Side Effects.       (line  254)
* COND_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* cond_fmaMODE instruction pattern:      Standard Names.     (line 1634)
* cond_fmsMODE instruction pattern:      Standard Names.     (line 1634)
* cond_fnmaMODE instruction pattern:     Standard Names.     (line 1634)
* cond_fnmsMODE instruction pattern:     Standard Names.     (line 1634)
* cond_iorMODE instruction pattern:      Standard Names.     (line 1596)
* cond_modMODE instruction pattern:      Standard Names.     (line 1596)
* cond_mulMODE instruction pattern:      Standard Names.     (line 1596)
* cond_smaxMODE instruction pattern:     Standard Names.     (line 1596)
* cond_sminMODE instruction pattern:     Standard Names.     (line 1596)
* cond_subMODE instruction pattern:      Standard Names.     (line 1596)
* cond_udivMODE instruction pattern:     Standard Names.     (line 1596)
* cond_umaxMODE instruction pattern:     Standard Names.     (line 1596)
* cond_uminMODE instruction pattern:     Standard Names.     (line 1596)
* cond_umodMODE instruction pattern:     Standard Names.     (line 1596)
* cond_xorMODE instruction pattern:      Standard Names.     (line 1596)
* configuration file:                    Filesystem.         (line    6)
* configuration file <1>:                Host Misc.          (line    6)
* configure terms:                       Configure Terms.    (line    6)
* CONJ_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* const:                                 Constants.          (line  212)
* const0_rtx:                            Constants.          (line   21)
* CONST0_RTX:                            Constants.          (line  230)
* const1_rtx:                            Constants.          (line   21)
* CONST1_RTX:                            Constants.          (line  230)
* const2_rtx:                            Constants.          (line   21)
* CONST2_RTX:                            Constants.          (line  230)
* constant attributes:                   Constant Attributes.
                                                             (line    6)
* constant definitions:                  Constant Definitions.
                                                             (line    6)
* constants in constraints:              Simple Constraints. (line   68)
* CONSTANT_ADDRESS_P:                    Addressing Modes.   (line   28)
* CONSTANT_P:                            Addressing Modes.   (line   35)
* CONSTANT_POOL_ADDRESS_P:               Flags.              (line   19)
* CONSTANT_POOL_BEFORE_FUNCTION:         Data Output.        (line   74)
* constm1_rtx:                           Constants.          (line   21)
* constraint modifier characters:        Modifiers.          (line    6)
* constraint, matching:                  Simple Constraints. (line  140)
* constraints:                           Constraints.        (line    6)
* constraints, defining:                 Define Constraints. (line    6)
* constraints, machine specific:         Machine Constraints.
                                                             (line    6)
* constraints, testing:                  C Constraint Interface.
                                                             (line    6)
* constraint_num:                        C Constraint Interface.
                                                             (line   30)
* constraint_satisfied_p:                C Constraint Interface.
                                                             (line   42)
* CONSTRUCTOR:                           Unary and Binary Expressions.
                                                             (line    6)
* constructors, automatic calls:         Collect2.           (line   15)
* constructors, output of:               Initialization.     (line    6)
* CONST_DECL:                            Declarations.       (line    6)
* const_double:                          Constants.          (line   37)
* const_double, RTL sharing:             Sharing.            (line   32)
* CONST_DOUBLE_LOW:                      Constants.          (line   54)
* const_double_operand:                  Machine-Independent Predicates.
                                                             (line   20)
* const_fixed:                           Constants.          (line   93)
* const_int:                             Constants.          (line    8)
* const_int and attribute tests:         Expressions.        (line   47)
* const_int and attributes:              Expressions.        (line   10)
* const_int, RTL sharing:                Sharing.            (line   23)
* const_int_operand:                     Machine-Independent Predicates.
                                                             (line   15)
* const_poly_int:                        Constants.          (line  100)
* const_poly_int, RTL sharing:           Sharing.            (line   25)
* const_string:                          Constants.          (line  184)
* const_string and attributes:           Expressions.        (line   20)
* const_true_rtx:                        Constants.          (line   31)
* const_vector:                          Constants.          (line  107)
* const_vector, RTL sharing:             Sharing.            (line   35)
* CONST_WIDE_INT:                        Constants.          (line   67)
* CONST_WIDE_INT_ELT:                    Constants.          (line   89)
* CONST_WIDE_INT_NUNITS:                 Constants.          (line   84)
* CONST_WIDE_INT_VEC:                    Constants.          (line   80)
* container:                             Containers.         (line    6)
* CONTINUE_STMT:                         Statements for C++. (line    6)
* contributors:                          Contributors.       (line    6)
* controlling register usage:            Register Basics.    (line  116)
* controlling the compilation driver:    Driver.             (line    6)
* conventions, run-time:                 Interface.          (line    6)
* conversions:                           Conversions.        (line    6)
* CONVERT_EXPR:                          Unary and Binary Expressions.
                                                             (line    6)
* copysignM3 instruction pattern:        Standard Names.     (line 1142)
* copy_rtx:                              Addressing Modes.   (line  189)
* copy_rtx_if_shared:                    Sharing.            (line   67)
* cosM2 instruction pattern:             Standard Names.     (line  931)
* costs of instructions:                 Costs.              (line    6)
* CPLUSPLUS_CPP_SPEC:                    Driver.             (line   50)
* CPP_SPEC:                              Driver.             (line   43)
* CPSImode:                              Machine Modes.      (line  204)
* cpymemM instruction pattern:           Standard Names.     (line 1244)
* CP_INTEGRAL_TYPE:                      Types for C++.      (line   55)
* cp_namespace_decls:                    Namespaces.         (line   49)
* CP_TYPE_CONST_NON_VOLATILE_P:          Types for C++.      (line   33)
* CP_TYPE_CONST_P:                       Types for C++.      (line   24)
* cp_type_quals:                         Types for C++.      (line    6)
* cp_type_quals <1>:                     Types for C++.      (line   16)
* CP_TYPE_RESTRICT_P:                    Types for C++.      (line   30)
* CP_TYPE_VOLATILE_P:                    Types for C++.      (line   27)
* CQImode:                               Machine Modes.      (line  204)
* cross compilation and floating point:  Floating Point.     (line    6)
* CROSSING_JUMP_P:                       Flags.              (line   10)
* crtl->args.pops_args:                  Function Entry.     (line  111)
* crtl->args.pretend_args_size:          Function Entry.     (line  117)
* crtl->outgoing_args_size:              Stack Arguments.    (line   48)
* CRTSTUFF_T_CFLAGS:                     Target Fragment.    (line   15)
* CRTSTUFF_T_CFLAGS_S:                   Target Fragment.    (line   19)
* CRT_CALL_STATIC_FUNCTION:              Sections.           (line  125)
* CSImode:                               Machine Modes.      (line  204)
* cstoreMODE4 instruction pattern:       Standard Names.     (line 1659)
* CTImode:                               Machine Modes.      (line  204)
* ctrapMM4 instruction pattern:          Standard Names.     (line 2125)
* ctz:                                   Arithmetic.         (line  230)
* ctzM2 instruction pattern:             Standard Names.     (line 1201)
* CTZ_DEFINED_VALUE_AT_ZERO:             Misc.               (line  339)
* CUMULATIVE_ARGS:                       Register Arguments. (line  137)
* current_function_is_leaf:              Leaf Functions.     (line   50)
* current_function_uses_only_leaf_regs:  Leaf Functions.     (line   50)
* current_insn_predicate:                Conditional Execution.
                                                             (line   27)
* C_COMMON_OVERRIDE_OPTIONS:             Run-time Target.    (line  136)
* c_register_pragma:                     Misc.               (line  440)
* c_register_pragma_with_expansion:      Misc.               (line  442)
* DAmode:                                Machine Modes.      (line  154)
* data bypass:                           Processor pipeline description.
                                                             (line  105)
* data bypass <1>:                       Processor pipeline description.
                                                             (line  196)
* data dependence delays:                Processor pipeline description.
                                                             (line    6)
* Data Dependency Analysis:              Dependency analysis.
                                                             (line    6)
* data structures:                       Per-Function Data.  (line    6)
* DATA_ABI_ALIGNMENT:                    Storage Layout.     (line  263)
* DATA_ALIGNMENT:                        Storage Layout.     (line  250)
* DATA_SECTION_ASM_OP:                   Sections.           (line   52)
* DBR_OUTPUT_SEQEND:                     Instruction Output. (line  133)
* dbr_sequence_length:                   Instruction Output. (line  133)
* DBX_BLOCKS_FUNCTION_RELATIVE:          DBX Options.        (line  100)
* DBX_CONTIN_CHAR:                       DBX Options.        (line   63)
* DBX_CONTIN_LENGTH:                     DBX Options.        (line   53)
* DBX_DEBUGGING_INFO:                    DBX Options.        (line    8)
* DBX_FUNCTION_FIRST:                    DBX Options.        (line   94)
* DBX_LINES_FUNCTION_RELATIVE:           DBX Options.        (line  106)
* DBX_NO_XREFS:                          DBX Options.        (line   47)
* DBX_OUTPUT_MAIN_SOURCE_FILENAME:       File Names and DBX. (line    8)
* DBX_OUTPUT_MAIN_SOURCE_FILE_END:       File Names and DBX. (line   33)
* DBX_OUTPUT_NULL_N_SO_AT_MAIN_SOURCE_FILE_END: File Names and DBX.
                                                             (line   41)
* DBX_OUTPUT_SOURCE_LINE:                DBX Hooks.          (line    8)
* DBX_REGISTER_NUMBER:                   All Debuggers.      (line    8)
* DBX_REGPARM_STABS_CODE:                DBX Options.        (line   84)
* DBX_REGPARM_STABS_LETTER:              DBX Options.        (line   89)
* DBX_STATIC_CONST_VAR_CODE:             DBX Options.        (line   79)
* DBX_STATIC_STAB_DATA_SECTION:          DBX Options.        (line   70)
* DBX_TYPE_DECL_STABS_CODE:              DBX Options.        (line   75)
* DBX_USE_BINCL:                         DBX Options.        (line  112)
* DCmode:                                Machine Modes.      (line  199)
* DDmode:                                Machine Modes.      (line   93)
* De Morgan's law:                       Insn Canonicalizations.
                                                             (line   67)
* dead_or_set_p:                         define_peephole.    (line   65)
* DEBUGGER_ARG_OFFSET:                   All Debuggers.      (line   35)
* DEBUGGER_AUTO_OFFSET:                  All Debuggers.      (line   27)
* debug_expr:                            Debug Information.  (line   22)
* DEBUG_EXPR_DECL:                       Declarations.       (line    6)
* debug_implicit_ptr:                    Debug Information.  (line   27)
* debug_insn:                            Insns.              (line  247)
* debug_marker:                          Debug Information.  (line   37)
* debug_parameter_ref:                   Debug Information.  (line   34)
* DEBUG_SYMS_TEXT:                       DBX Options.        (line   24)
* decimal float library:                 Decimal float library routines.
                                                             (line    6)
* declaration:                           Declarations.       (line    6)
* declarations, RTL:                     RTL Declarations.   (line    6)
* DECLARE_LIBRARY_RENAMES:               Library Calls.      (line    8)
* DECL_ALIGN:                            Declarations.       (line    6)
* DECL_ANTICIPATED:                      Functions for C++.  (line   42)
* DECL_ARGUMENTS:                        Function Basics.    (line   36)
* DECL_ARRAY_DELETE_OPERATOR_P:          Functions for C++.  (line  158)
* DECL_ARTIFICIAL:                       Working with declarations.
                                                             (line   24)
* DECL_ARTIFICIAL <1>:                   Function Basics.    (line    6)
* DECL_ARTIFICIAL <2>:                   Function Properties.
                                                             (line   47)
* DECL_ASSEMBLER_NAME:                   Function Basics.    (line    6)
* DECL_ASSEMBLER_NAME <1>:               Function Basics.    (line   19)
* DECL_ATTRIBUTES:                       Attributes.         (line   21)
* DECL_BASE_CONSTRUCTOR_P:               Functions for C++.  (line   88)
* DECL_COMPLETE_CONSTRUCTOR_P:           Functions for C++.  (line   84)
* DECL_COMPLETE_DESTRUCTOR_P:            Functions for C++.  (line   98)
* DECL_CONSTRUCTOR_P:                    Functions for C++.  (line   77)
* DECL_CONST_MEMFUNC_P:                  Functions for C++.  (line   71)
* DECL_CONTEXT:                          Namespaces.         (line   31)
* DECL_CONV_FN_P:                        Functions for C++.  (line  105)
* DECL_COPY_CONSTRUCTOR_P:               Functions for C++.  (line   92)
* DECL_DESTRUCTOR_P:                     Functions for C++.  (line   95)
* DECL_EXTERNAL:                         Declarations.       (line    6)
* DECL_EXTERNAL <1>:                     Function Properties.
                                                             (line   25)
* DECL_EXTERN_C_FUNCTION_P:              Functions for C++.  (line   46)
* DECL_FUNCTION_MEMBER_P:                Functions for C++.  (line   61)
* DECL_FUNCTION_SPECIFIC_OPTIMIZATION:   Function Basics.    (line    6)
* DECL_FUNCTION_SPECIFIC_OPTIMIZATION <1>: Function Properties.
                                                             (line   61)
* DECL_FUNCTION_SPECIFIC_TARGET:         Function Basics.    (line    6)
* DECL_FUNCTION_SPECIFIC_TARGET <1>:     Function Properties.
                                                             (line   55)
* DECL_GLOBAL_CTOR_P:                    Functions for C++.  (line  108)
* DECL_GLOBAL_DTOR_P:                    Functions for C++.  (line  112)
* DECL_INITIAL:                          Declarations.       (line    6)
* DECL_INITIAL <1>:                      Function Basics.    (line   51)
* DECL_LINKONCE_P:                       Functions for C++.  (line   50)
* DECL_LOCAL_FUNCTION_P:                 Functions for C++.  (line   38)
* DECL_MAIN_P:                           Functions for C++.  (line   34)
* DECL_NAME:                             Working with declarations.
                                                             (line    7)
* DECL_NAME <1>:                         Function Basics.    (line    6)
* DECL_NAME <2>:                         Function Basics.    (line    9)
* DECL_NAME <3>:                         Namespaces.         (line   20)
* DECL_NAMESPACE_ALIAS:                  Namespaces.         (line   35)
* DECL_NAMESPACE_STD_P:                  Namespaces.         (line   45)
* DECL_NONCONVERTING_P:                  Functions for C++.  (line   80)
* DECL_NONSTATIC_MEMBER_FUNCTION_P:      Functions for C++.  (line   68)
* DECL_NON_THUNK_FUNCTION_P:             Functions for C++.  (line  138)
* DECL_OVERLOADED_OPERATOR_P:            Functions for C++.  (line  102)
* DECL_PURE_P:                           Function Properties.
                                                             (line   40)
* DECL_RESULT:                           Function Basics.    (line   41)
* DECL_SAVED_TREE:                       Function Basics.    (line   44)
* DECL_SIZE:                             Declarations.       (line    6)
* DECL_STATIC_FUNCTION_P:                Functions for C++.  (line   65)
* DECL_STMT:                             Statements for C++. (line    6)
* DECL_STMT_DECL:                        Statements for C++. (line    6)
* DECL_THUNK_P:                          Functions for C++.  (line  116)
* DECL_VIRTUAL_P:                        Function Properties.
                                                             (line   44)
* DECL_VOLATILE_MEMFUNC_P:               Functions for C++.  (line   74)
* default:                               GTY Options.        (line   90)
* default_file_start:                    File Framework.     (line    8)
* DEFAULT_GDB_EXTENSIONS:                DBX Options.        (line   17)
* DEFAULT_INCOMING_FRAME_SP_OFFSET:      Frame Layout.       (line  199)
* DEFAULT_PCC_STRUCT_RETURN:             Aggregate Return.   (line   34)
* DEFAULT_SIGNED_CHAR:                   Type Layout.        (line  117)
* define_address_constraint:             Define Constraints. (line  113)
* define_asm_attributes:                 Tagging Insns.      (line   73)
* define_attr:                           Defining Attributes.
                                                             (line    6)
* define_automaton:                      Processor pipeline description.
                                                             (line   53)
* define_bypass:                         Processor pipeline description.
                                                             (line  196)
* define_code_attr:                      Code Iterators.     (line    6)
* define_code_iterator:                  Code Iterators.     (line    6)
* define_cond_exec:                      Conditional Execution.
                                                             (line   13)
* define_constants:                      Constant Definitions.
                                                             (line    6)
* define_constraint:                     Define Constraints. (line   45)
* define_cpu_unit:                       Processor pipeline description.
                                                             (line   68)
* define_c_enum:                         Constant Definitions.
                                                             (line   49)
* define_delay:                          Delay Slots.        (line   25)
* define_enum:                           Constant Definitions.
                                                             (line  118)
* define_enum_attr:                      Defining Attributes.
                                                             (line   83)
* define_enum_attr <1>:                  Constant Definitions.
                                                             (line  136)
* define_expand:                         Expander Definitions.
                                                             (line   11)
* define_insn:                           Patterns.           (line    6)
* define_insn example:                   Example.            (line    6)
* define_insn_and_rewrite:               Insn Splitting.     (line  236)
* define_insn_and_split:                 Insn Splitting.     (line  190)
* define_insn_reservation:               Processor pipeline description.
                                                             (line  105)
* define_int_attr:                       Int Iterators.      (line    6)
* define_int_iterator:                   Int Iterators.      (line    6)
* define_memory_constraint:              Define Constraints. (line   80)
* define_mode_attr:                      Substitutions.      (line    6)
* define_mode_iterator:                  Defining Mode Iterators.
                                                             (line    6)
* define_peephole:                       define_peephole.    (line    6)
* define_peephole2:                      define_peephole2.   (line    6)
* define_predicate:                      Defining Predicates.
                                                             (line    6)
* define_query_cpu_unit:                 Processor pipeline description.
                                                             (line   90)
* define_register_constraint:            Define Constraints. (line   26)
* define_reservation:                    Processor pipeline description.
                                                             (line  185)
* define_special_memory_constraint:      Define Constraints. (line   99)
* define_special_predicate:              Defining Predicates.
                                                             (line    6)
* define_split:                          Insn Splitting.     (line   32)
* define_subst:                          Define Subst.       (line    6)
* define_subst <1>:                      Define Subst Example.
                                                             (line    6)
* define_subst <2>:                      Define Subst Pattern Matching.
                                                             (line    6)
* define_subst <3>:                      Define Subst Output Template.
                                                             (line    6)
* define_subst <4>:                      Define Subst.       (line   14)
* define_subst <5>:                      Subst Iterators.    (line    6)
* define_subst_attr:                     Subst Iterators.    (line    6)
* define_subst_attr <1>:                 Subst Iterators.    (line   26)
* defining attributes and their values:  Defining Attributes.
                                                             (line    6)
* defining constraints:                  Define Constraints. (line    6)
* defining jump instruction patterns:    Jump Patterns.      (line    6)
* defining looping instruction patterns: Looping Patterns.   (line    6)
* defining peephole optimizers:          Peephole Definitions.
                                                             (line    6)
* defining predicates:                   Defining Predicates.
                                                             (line    6)
* defining RTL sequences for code generation: Expander Definitions.
                                                             (line    6)
* delay slots, defining:                 Delay Slots.        (line    6)
* deletable:                             GTY Options.        (line  134)
* DELETE_IF_ORDINARY:                    Filesystem.         (line   79)
* Dependent Patterns:                    Dependent Patterns. (line    6)
* desc:                                  GTY Options.        (line   90)
* descriptors for nested functions:      Trampolines.        (line    6)
* destructors, output of:                Initialization.     (line    6)
* deterministic finite state automaton:  Processor pipeline description.
                                                             (line    6)
* deterministic finite state automaton <1>: Processor pipeline description.
                                                             (line  304)
* DFmode:                                Machine Modes.      (line   76)
* diagnostics guidelines, fix-it hints:  Guidelines for Diagnostics.
                                                             (line  320)
* diagnostics, actionable:               Guidelines for Diagnostics.
                                                             (line   15)
* diagnostics, false positive:           Guidelines for Diagnostics.
                                                             (line   39)
* diagnostics, guidelines for:           Guidelines for Diagnostics.
                                                             (line    5)
* diagnostics, locations:                Guidelines for Diagnostics.
                                                             (line  159)
* diagnostics, true positive:            Guidelines for Diagnostics.
                                                             (line   39)
* digits in constraint:                  Simple Constraints. (line  128)
* DImode:                                Machine Modes.      (line   45)
* directory options .md:                 Including Patterns. (line   47)
* DIR_SEPARATOR:                         Filesystem.         (line   18)
* DIR_SEPARATOR_2:                       Filesystem.         (line   19)
* disabling certain registers:           Register Basics.    (line  116)
* dispatch table:                        Dispatch Tables.    (line    8)
* div:                                   Arithmetic.         (line  116)
* div and attributes:                    Expressions.        (line   83)
* division:                              Arithmetic.         (line  116)
* division <1>:                          Arithmetic.         (line  130)
* division <2>:                          Arithmetic.         (line  136)
* divM3 instruction pattern:             Standard Names.     (line  442)
* divmodM4 instruction pattern:          Standard Names.     (line  808)
* dollar sign:                           Multi-Alternative.  (line   57)
* DOLLARS_IN_IDENTIFIERS:                Misc.               (line  485)
* doloop_begin instruction pattern:      Standard Names.     (line 1879)
* doloop_end instruction pattern:        Standard Names.     (line 1867)
* DONE:                                  Expander Definitions.
                                                             (line   77)
* DONE <1>:                              Insn Splitting.     (line   61)
* DONE <2>:                              define_peephole2.   (line   76)
* DONT_USE_BUILTIN_SETJMP:               Exception Region Output.
                                                             (line   78)
* DOUBLE_TYPE_SIZE:                      Type Layout.        (line   52)
* DO_BODY:                               Statements for C++. (line    6)
* DO_COND:                               Statements for C++. (line    6)
* DO_STMT:                               Statements for C++. (line    6)
* DQmode:                                Machine Modes.      (line  118)
* driver:                                Driver.             (line    6)
* DRIVER_SELF_SPECS:                     Driver.             (line    8)
* dump examples:                         Dump examples.      (line    6)
* dump setup:                            Dump setup.         (line    6)
* dump types:                            Dump types.         (line    6)
* dump verbosity:                        Dump output verbosity.
                                                             (line    6)
* DUMPFILE_FORMAT:                       Filesystem.         (line   67)
* dump_basic_block:                      Dump types.         (line   29)
* dump_generic_expr:                     Dump types.         (line   31)
* dump_gimple_stmt:                      Dump types.         (line   33)
* dump_printf:                           Dump types.         (line    6)
* DWARF2_ASM_LINE_DEBUG_INFO:            DWARF.              (line   45)
* DWARF2_ASM_VIEW_DEBUG_INFO:            DWARF.              (line   51)
* DWARF2_DEBUGGING_INFO:                 DWARF.              (line    8)
* DWARF2_FRAME_INFO:                     DWARF.              (line   25)
* DWARF2_FRAME_REG_OUT:                  Frame Registers.    (line  149)
* DWARF2_UNWIND_INFO:                    Exception Region Output.
                                                             (line   39)
* DWARF_ALT_FRAME_RETURN_COLUMN:         Frame Layout.       (line  146)
* DWARF_CIE_DATA_ALIGNMENT:              Exception Region Output.
                                                             (line   90)
* DWARF_FRAME_REGISTERS:                 Frame Registers.    (line  109)
* DWARF_FRAME_REGNUM:                    Frame Registers.    (line  141)
* DWARF_LAZY_REGISTER_VALUE:             Frame Registers.    (line  170)
* DWARF_REG_TO_UNWIND_COLUMN:            Frame Registers.    (line  134)
* DWARF_ZERO_REG:                        Frame Layout.       (line  157)
* DYNAMIC_CHAIN_ADDRESS:                 Frame Layout.       (line   84)
* E in constraint:                       Simple Constraints. (line   87)
* earlyclobber operand:                  Modifiers.          (line   25)
* edge:                                  Edges.              (line    6)
* edge in the flow graph:                Edges.              (line    6)
* edge iterators:                        Edges.              (line   15)
* edge splitting:                        Maintaining the CFG.
                                                             (line  104)
* EDGE_ABNORMAL:                         Edges.              (line  127)
* EDGE_ABNORMAL, EDGE_ABNORMAL_CALL:     Edges.              (line  171)
* EDGE_ABNORMAL, EDGE_EH:                Edges.              (line   95)
* EDGE_ABNORMAL, EDGE_SIBCALL:           Edges.              (line  121)
* EDGE_FALLTHRU, force_nonfallthru:      Edges.              (line   85)
* EDOM, implicit usage:                  Library Calls.      (line   59)
* EH_FRAME_SECTION_NAME:                 Exception Region Output.
                                                             (line    9)
* EH_FRAME_THROUGH_COLLECT2:             Exception Region Output.
                                                             (line   19)
* eh_return instruction pattern:         Standard Names.     (line 2060)
* EH_RETURN_DATA_REGNO:                  Exception Handling. (line    6)
* EH_RETURN_HANDLER_RTX:                 Exception Handling. (line   38)
* EH_RETURN_STACKADJ_RTX:                Exception Handling. (line   21)
* EH_TABLES_CAN_BE_READ_ONLY:            Exception Region Output.
                                                             (line   29)
* EH_USES:                               Function Entry.     (line  162)
* ei_edge:                               Edges.              (line   43)
* ei_end_p:                              Edges.              (line   27)
* ei_last:                               Edges.              (line   23)
* ei_next:                               Edges.              (line   35)
* ei_one_before_end_p:                   Edges.              (line   31)
* ei_prev:                               Edges.              (line   39)
* ei_safe_safe:                          Edges.              (line   47)
* ei_start:                              Edges.              (line   19)
* ELIMINABLE_REGS:                       Elimination.        (line   34)
* ELSE_CLAUSE:                           Statements for C++. (line    6)
* Embedded C:                            Fixed-point fractional library routines.
                                                             (line    6)
* Empty Statements:                      Empty Statements.   (line    6)
* EMPTY_CLASS_EXPR:                      Statements for C++. (line    6)
* EMPTY_FIELD_BOUNDARY:                  Storage Layout.     (line  341)
* Emulated TLS:                          Emulated TLS.       (line    6)
* enabled:                               Disable Insn Alternatives.
                                                             (line    6)
* ENDFILE_SPEC:                          Driver.             (line  155)
* endianness:                            Portability.        (line   20)
* ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR:       Basic Blocks.       (line   10)
* entry_value:                           Debug Information.  (line   30)
* enum reg_class:                        Register Classes.   (line   70)
* ENUMERAL_TYPE:                         Types.              (line    6)
* enumerations:                          Constant Definitions.
                                                             (line   49)
* epilogue:                              Function Entry.     (line    6)
* epilogue instruction pattern:          Standard Names.     (line 2098)
* EPILOGUE_USES:                         Function Entry.     (line  156)
* eq:                                    Comparisons.        (line   52)
* eq and attributes:                     Expressions.        (line   83)
* equal:                                 Comparisons.        (line   52)
* eq_attr:                               Expressions.        (line  104)
* EQ_EXPR:                               Unary and Binary Expressions.
                                                             (line    6)
* errno, implicit usage:                 Library Calls.      (line   71)
* EXACT_DIV_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* examining SSA_NAMEs:                   SSA.                (line  182)
* exception handling:                    Edges.              (line   95)
* exception handling <1>:                Exception Handling. (line    6)
* exception_receiver instruction pattern: Standard Names.    (line 2025)
* exclamation point:                     Multi-Alternative.  (line   48)
* exclusion_set:                         Processor pipeline description.
                                                             (line  223)
* exclusive-or, bitwise:                 Arithmetic.         (line  168)
* EXIT_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* EXIT_IGNORE_STACK:                     Function Entry.     (line  144)
* exp10M2 instruction pattern:           Standard Names.     (line  995)
* exp2M2 instruction pattern:            Standard Names.     (line 1002)
* expander definitions:                  Expander Definitions.
                                                             (line    6)
* expm1M2 instruction pattern:           Standard Names.     (line  985)
* expM2 instruction pattern:             Standard Names.     (line  978)
* expression:                            Expression trees.   (line    6)
* expression codes:                      RTL Objects.        (line   47)
* EXPR_FILENAME:                         Working with declarations.
                                                             (line   14)
* EXPR_LINENO:                           Working with declarations.
                                                             (line   20)
* expr_list:                             Insns.              (line  568)
* EXPR_STMT:                             Statements for C++. (line    6)
* EXPR_STMT_EXPR:                        Statements for C++. (line    6)
* extendMN2 instruction pattern:         Standard Names.     (line 1447)
* extensible constraints:                Simple Constraints. (line  171)
* extract_last_M instruction pattern:    Standard Names.     (line  543)
* EXTRA_SPECS:                           Driver.             (line  182)
* extv instruction pattern:              Standard Names.     (line 1538)
* extvM instruction pattern:             Standard Names.     (line 1483)
* extvmisalignM instruction pattern:     Standard Names.     (line 1493)
* extzv instruction pattern:             Standard Names.     (line 1556)
* extzvM instruction pattern:            Standard Names.     (line 1507)
* extzvmisalignM instruction pattern:    Standard Names.     (line 1510)
* F in constraint:                       Simple Constraints. (line   92)
* FAIL:                                  Expander Definitions.
                                                             (line   83)
* FAIL <1>:                              Insn Splitting.     (line   68)
* FAIL <2>:                              define_peephole2.   (line   83)
* fall-thru:                             Edges.              (line   68)
* false positive:                        Guidelines for Diagnostics.
                                                             (line   39)
* FATAL_EXIT_CODE:                       Host Misc.          (line    6)
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
                                                             (line    6)
* features, optional, in system conventions: Run-time Target.
                                                             (line   59)
* ffs:                                   Arithmetic.         (line  210)
* ffsM2 instruction pattern:             Standard Names.     (line 1157)
* FIELD_DECL:                            Declarations.       (line    6)
* files and passes of the compiler:      Passes.             (line    6)
* files, generated:                      Files.              (line    6)
* file_end_indicate_exec_stack:          File Framework.     (line   39)
* final_absence_set:                     Processor pipeline description.
                                                             (line  223)
* FINAL_PRESCAN_INSN:                    Instruction Output. (line   60)
* final_presence_set:                    Processor pipeline description.
                                                             (line  223)
* final_sequence:                        Instruction Output. (line  144)
* FIND_BASE_TERM:                        Addressing Modes.   (line  117)
* finite state automaton minimization:   Processor pipeline description.
                                                             (line  304)
* FINI_ARRAY_SECTION_ASM_OP:             Sections.           (line  113)
* FINI_SECTION_ASM_OP:                   Sections.           (line   98)
* FIRST_PARM_OFFSET:                     Frame Layout.       (line   59)
* FIRST_PARM_OFFSET and virtual registers: Regs and Memory.  (line   65)
* FIRST_PSEUDO_REGISTER:                 Register Basics.    (line    8)
* FIRST_STACK_REG:                       Stack Registers.    (line   26)
* FIRST_VIRTUAL_REGISTER:                Regs and Memory.    (line   51)
* fix:                                   Conversions.        (line   66)
* fix-it hints:                          Guidelines for Diagnostics.
                                                             (line  320)
* fixed register:                        Register Basics.    (line   15)
* fixed-point fractional library:        Fixed-point fractional library routines.
                                                             (line    6)
* FIXED_CONVERT_EXPR:                    Unary and Binary Expressions.
                                                             (line    6)
* FIXED_CST:                             Constant expressions.
                                                             (line    6)
* FIXED_POINT_TYPE:                      Types.              (line    6)
* FIXED_REGISTERS:                       Register Basics.    (line   14)
* fixed_regs:                            Register Basics.    (line  102)
* fixed_size_mode:                       Machine Modes.      (line  305)
* fixMN2 instruction pattern:            Standard Names.     (line 1414)
* fixunsMN2 instruction pattern:         Standard Names.     (line 1423)
* fixuns_truncMN2 instruction pattern:   Standard Names.     (line 1438)
* fix_truncMN2 instruction pattern:      Standard Names.     (line 1434)
* FIX_TRUNC_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* flags in RTL expression:               Flags.              (line    6)
* float:                                 Conversions.        (line   58)
* floating point and cross compilation:  Floating Point.     (line    6)
* floatMN2 instruction pattern:          Standard Names.     (line 1406)
* floatunsMN2 instruction pattern:       Standard Names.     (line 1410)
* FLOAT_EXPR:                            Unary and Binary Expressions.
                                                             (line    6)
* float_extend:                          Conversions.        (line   33)
* FLOAT_LIB_COMPARE_RETURNS_BOOL:        Library Calls.      (line   32)
* FLOAT_STORE_FLAG_VALUE:                Misc.               (line  320)
* float_truncate:                        Conversions.        (line   53)
* FLOAT_TYPE_SIZE:                       Type Layout.        (line   48)
* FLOAT_WORDS_BIG_ENDIAN:                Storage Layout.     (line   41)
* FLOAT_WORDS_BIG_ENDIAN, (lack of) effect on subreg: Regs and Memory.
                                                             (line  234)
* floorM2 instruction pattern:           Standard Names.     (line 1069)
* FLOOR_DIV_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* FLOOR_MOD_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* flow-insensitive alias analysis:       Alias analysis.     (line    6)
* flow-sensitive alias analysis:         Alias analysis.     (line    6)
* fma:                                   Arithmetic.         (line  112)
* fmaM4 instruction pattern:             Standard Names.     (line  478)
* fmaxM3 instruction pattern:            Standard Names.     (line  509)
* fminM3 instruction pattern:            Standard Names.     (line  509)
* fmodM3 instruction pattern:            Standard Names.     (line  901)
* fmsM4 instruction pattern:             Standard Names.     (line  485)
* fnmaM4 instruction pattern:            Standard Names.     (line  491)
* fnmsM4 instruction pattern:            Standard Names.     (line  497)
* fold_extract_last_M instruction pattern: Standard Names.   (line  550)
* fold_left_plus_M instruction pattern:  Standard Names.     (line  558)
* FORCE_CODE_SECTION_ALIGN:              Sections.           (line  149)
* force_reg:                             Standard Names.     (line   36)
* FOR_BODY:                              Statements for C++. (line    6)
* FOR_COND:                              Statements for C++. (line    6)
* FOR_EXPR:                              Statements for C++. (line    6)
* FOR_INIT_STMT:                         Statements for C++. (line    6)
* FOR_STMT:                              Statements for C++. (line    6)
* for_user:                              GTY Options.        (line   82)
* fractional types:                      Fixed-point fractional library routines.
                                                             (line    6)
* fractMN2 instruction pattern:          Standard Names.     (line 1456)
* fractunsMN2 instruction pattern:       Standard Names.     (line 1471)
* fract_convert:                         Conversions.        (line   82)
* FRACT_TYPE_SIZE:                       Type Layout.        (line   67)
* frame layout:                          Frame Layout.       (line    6)
* FRAME_ADDR_RTX:                        Frame Layout.       (line  108)
* FRAME_GROWS_DOWNWARD:                  Frame Layout.       (line   26)
* FRAME_GROWS_DOWNWARD and virtual registers: Regs and Memory.
                                                             (line   69)
* FRAME_POINTER_CFA_OFFSET:              Frame Layout.       (line  225)
* frame_pointer_needed:                  Function Entry.     (line   42)
* FRAME_POINTER_REGNUM:                  Frame Registers.    (line   13)
* FRAME_POINTER_REGNUM and virtual registers: Regs and Memory.
                                                             (line   74)
* frame_pointer_rtx:                     Frame Registers.    (line  104)
* frame_related:                         Flags.              (line  238)
* frame_related, in insn, call_insn, jump_insn, barrier, and set: Flags.
                                                             (line  135)
* frame_related, in mem:                 Flags.              (line   74)
* frame_related, in reg:                 Flags.              (line  102)
* frame_related, in symbol_ref:          Flags.              (line  179)
* frequency, count, BB_FREQ_BASE:        Profile information.
                                                             (line   30)
* ftruncM2 instruction pattern:          Standard Names.     (line 1429)
* function:                              Functions.          (line    6)
* function <1>:                          Functions for C++.  (line    6)
* function call conventions:             Interface.          (line    6)
* function entry and exit:               Function Entry.     (line    6)
* function entry point, alternate function entry point: Edges.
                                                             (line  180)
* function properties:                   Function Properties.
                                                             (line    6)
* function-call insns:                   Calls.              (line    6)
* functions, leaf:                       Leaf Functions.     (line    6)
* FUNCTION_ARG_REGNO_P:                  Register Arguments. (line  261)
* FUNCTION_BOUNDARY:                     Storage Layout.     (line  176)
* FUNCTION_DECL:                         Functions.          (line    6)
* FUNCTION_DECL <1>:                     Functions for C++.  (line    6)
* FUNCTION_MODE:                         Misc.               (line  375)
* FUNCTION_PROFILER:                     Profiling.          (line    8)
* FUNCTION_TYPE:                         Types.              (line    6)
* FUNCTION_VALUE:                        Scalar Return.      (line   52)
* FUNCTION_VALUE_REGNO_P:                Scalar Return.      (line   78)
* fundamental type:                      Types.              (line    6)
* G in constraint:                       Simple Constraints. (line   96)
* g in constraint:                       Simple Constraints. (line  118)
* garbage collector, invocation:         Invoking the garbage collector.
                                                             (line    6)
* garbage collector, troubleshooting:    Troubleshooting.    (line    6)
* gather_loadMN instruction pattern:     Standard Names.     (line  232)
* GCC and portability:                   Portability.        (line    6)
* GCC_DRIVER_HOST_INITIALIZATION:        Host Misc.          (line   36)
* gcov_type:                             Profile information.
                                                             (line   41)
* ge:                                    Comparisons.        (line   72)
* ge and attributes:                     Expressions.        (line   83)
* gencodes:                              RTL passes.         (line   18)
* general_operand:                       Machine-Independent Predicates.
                                                             (line  104)
* GENERAL_REGS:                          Register Classes.   (line   22)
* generated files:                       Files.              (line    6)
* generating assembler output:           Output Statement.   (line    6)
* generating insns:                      RTL Template.       (line    6)
* GENERIC:                               Parsing pass.       (line    6)
* GENERIC <1>:                           GENERIC.            (line    6)
* generic predicates:                    Machine-Independent Predicates.
                                                             (line    6)
* genflags:                              RTL passes.         (line   18)
* GEN_ERRNO_RTX:                         Library Calls.      (line   71)
* get_attr:                              Expressions.        (line   99)
* get_attr_length:                       Insn Lengths.       (line   52)
* GET_CLASS_NARROWEST_MODE:              Machine Modes.      (line  430)
* GET_CODE:                              RTL Objects.        (line   47)
* get_insns:                             Insns.              (line   34)
* get_last_insn:                         Insns.              (line   34)
* GET_MODE:                              Machine Modes.      (line  377)
* GET_MODE_ALIGNMENT:                    Machine Modes.      (line  417)
* GET_MODE_BITSIZE:                      Machine Modes.      (line  401)
* GET_MODE_CLASS:                        Machine Modes.      (line  391)
* GET_MODE_FBIT:                         Machine Modes.      (line  408)
* GET_MODE_IBIT:                         Machine Modes.      (line  404)
* GET_MODE_MASK:                         Machine Modes.      (line  412)
* GET_MODE_NAME:                         Machine Modes.      (line  388)
* GET_MODE_NUNITS:                       Machine Modes.      (line  426)
* GET_MODE_SIZE:                         Machine Modes.      (line  398)
* GET_MODE_UNIT_SIZE:                    Machine Modes.      (line  420)
* GET_MODE_WIDER_MODE:                   Machine Modes.      (line  394)
* GET_RTX_CLASS:                         RTL Classes.        (line    6)
* GET_RTX_FORMAT:                        RTL Classes.        (line  136)
* GET_RTX_LENGTH:                        RTL Classes.        (line  133)
* get_thread_pointerMODE instruction pattern: Standard Names.
                                                             (line 2477)
* geu:                                   Comparisons.        (line   72)
* geu and attributes:                    Expressions.        (line   83)
* GE_EXPR:                               Unary and Binary Expressions.
                                                             (line    6)
* GGC:                                   Type Information.   (line    6)
* ggc_collect:                           Invoking the garbage collector.
                                                             (line    6)
* GIMPLE:                                Parsing pass.       (line   13)
* GIMPLE <1>:                            Gimplification pass.
                                                             (line    6)
* GIMPLE <2>:                            GIMPLE.             (line    6)
* gimple:                                Tuple representation.
                                                             (line   14)
* GIMPLE API:                            GIMPLE API.         (line    6)
* GIMPLE class hierarchy:                Class hierarchy of GIMPLE statements.
                                                             (line    6)
* GIMPLE Exception Handling:             GIMPLE Exception Handling.
                                                             (line    6)
* GIMPLE instruction set:                GIMPLE instruction set.
                                                             (line    6)
* GIMPLE sequences:                      GIMPLE sequences.   (line    6)
* GIMPLE statement iterators:            Basic Blocks.       (line   78)
* GIMPLE statement iterators <1>:        Maintaining the CFG.
                                                             (line   33)
* gimple_addresses_taken:                Manipulating GIMPLE statements.
                                                             (line   89)
* GIMPLE_ASM:                            GIMPLE_ASM.         (line    6)
* gimple_asm_clobber_op:                 GIMPLE_ASM.         (line   39)
* gimple_asm_input_op:                   GIMPLE_ASM.         (line   23)
* gimple_asm_nclobbers:                  GIMPLE_ASM.         (line   20)
* gimple_asm_ninputs:                    GIMPLE_ASM.         (line   14)
* gimple_asm_noutputs:                   GIMPLE_ASM.         (line   17)
* gimple_asm_output_op:                  GIMPLE_ASM.         (line   31)
* gimple_asm_set_clobber_op:             GIMPLE_ASM.         (line   43)
* gimple_asm_set_input_op:               GIMPLE_ASM.         (line   27)
* gimple_asm_set_output_op:              GIMPLE_ASM.         (line   35)
* gimple_asm_set_volatile:               GIMPLE_ASM.         (line   54)
* gimple_asm_string:                     GIMPLE_ASM.         (line   47)
* gimple_asm_volatile_p:                 GIMPLE_ASM.         (line   51)
* GIMPLE_ASSIGN:                         GIMPLE_ASSIGN.      (line    6)
* gimple_assign_cast_p:                  Logical Operators.  (line  158)
* gimple_assign_cast_p <1>:              GIMPLE_ASSIGN.      (line  104)
* gimple_assign_lhs:                     GIMPLE_ASSIGN.      (line   62)
* gimple_assign_lhs_ptr:                 GIMPLE_ASSIGN.      (line   65)
* gimple_assign_rhs1:                    GIMPLE_ASSIGN.      (line   68)
* gimple_assign_rhs1_ptr:                GIMPLE_ASSIGN.      (line   71)
* gimple_assign_rhs2:                    GIMPLE_ASSIGN.      (line   75)
* gimple_assign_rhs2_ptr:                GIMPLE_ASSIGN.      (line   78)
* gimple_assign_rhs3:                    GIMPLE_ASSIGN.      (line   82)
* gimple_assign_rhs3_ptr:                GIMPLE_ASSIGN.      (line   85)
* gimple_assign_rhs_class:               GIMPLE_ASSIGN.      (line   56)
* gimple_assign_rhs_code:                GIMPLE_ASSIGN.      (line   52)
* gimple_assign_set_lhs:                 GIMPLE_ASSIGN.      (line   89)
* gimple_assign_set_rhs1:                GIMPLE_ASSIGN.      (line   92)
* gimple_assign_set_rhs2:                GIMPLE_ASSIGN.      (line   96)
* gimple_assign_set_rhs3:                GIMPLE_ASSIGN.      (line  100)
* gimple_bb:                             Manipulating GIMPLE statements.
                                                             (line   17)
* GIMPLE_BIND:                           GIMPLE_BIND.        (line    6)
* gimple_bind_add_seq:                   GIMPLE_BIND.        (line   34)
* gimple_bind_add_stmt:                  GIMPLE_BIND.        (line   31)
* gimple_bind_append_vars:               GIMPLE_BIND.        (line   18)
* gimple_bind_block:                     GIMPLE_BIND.        (line   39)
* gimple_bind_body:                      GIMPLE_BIND.        (line   22)
* gimple_bind_set_block:                 GIMPLE_BIND.        (line   44)
* gimple_bind_set_body:                  GIMPLE_BIND.        (line   26)
* gimple_bind_set_vars:                  GIMPLE_BIND.        (line   14)
* gimple_bind_vars:                      GIMPLE_BIND.        (line   11)
* gimple_block:                          Manipulating GIMPLE statements.
                                                             (line   20)
* gimple_build:                          GIMPLE API.         (line   34)
* gimple_build <1>:                      GIMPLE API.         (line   36)
* gimple_build <2>:                      GIMPLE API.         (line   38)
* gimple_build <3>:                      GIMPLE API.         (line   41)
* gimple_build <4>:                      GIMPLE API.         (line   44)
* gimple_build <5>:                      GIMPLE API.         (line   47)
* gimple_build_debug_begin_stmt:         GIMPLE_DEBUG.       (line   72)
* gimple_build_debug_inline_entry:       GIMPLE_DEBUG.       (line   82)
* gimple_build_nop:                      GIMPLE_NOP.         (line    6)
* gimple_build_omp_master:               GIMPLE_OMP_MASTER.  (line    6)
* gimple_build_omp_ordered:              GIMPLE_OMP_ORDERED. (line    6)
* gimple_build_omp_return:               GIMPLE_OMP_RETURN.  (line    6)
* gimple_build_omp_section:              GIMPLE_OMP_SECTION. (line    6)
* gimple_build_omp_sections_switch:      GIMPLE_OMP_SECTIONS.
                                                             (line   13)
* gimple_build_wce:                      GIMPLE_WITH_CLEANUP_EXPR.
                                                             (line    6)
* GIMPLE_CALL:                           GIMPLE_CALL.        (line    6)
* gimple_call_arg:                       GIMPLE_CALL.        (line   67)
* gimple_call_arg_ptr:                   GIMPLE_CALL.        (line   71)
* gimple_call_chain:                     GIMPLE_CALL.        (line   58)
* gimple_call_copy_skip_args:            GIMPLE_CALL.        (line   92)
* gimple_call_fn:                        GIMPLE_CALL.        (line   39)
* gimple_call_fndecl:                    GIMPLE_CALL.        (line   47)
* gimple_call_lhs:                       GIMPLE_CALL.        (line   30)
* gimple_call_lhs_ptr:                   GIMPLE_CALL.        (line   33)
* gimple_call_noreturn_p:                GIMPLE_CALL.        (line   89)
* gimple_call_num_args:                  GIMPLE_CALL.        (line   64)
* gimple_call_return_type:               GIMPLE_CALL.        (line   55)
* gimple_call_set_arg:                   GIMPLE_CALL.        (line   76)
* gimple_call_set_chain:                 GIMPLE_CALL.        (line   61)
* gimple_call_set_fn:                    GIMPLE_CALL.        (line   43)
* gimple_call_set_fndecl:                GIMPLE_CALL.        (line   52)
* gimple_call_set_lhs:                   GIMPLE_CALL.        (line   36)
* gimple_call_set_tail:                  GIMPLE_CALL.        (line   81)
* gimple_call_tail_p:                    GIMPLE_CALL.        (line   86)
* GIMPLE_CATCH:                          GIMPLE_CATCH.       (line    6)
* gimple_catch_handler:                  GIMPLE_CATCH.       (line   19)
* gimple_catch_set_handler:              GIMPLE_CATCH.       (line   26)
* gimple_catch_set_types:                GIMPLE_CATCH.       (line   23)
* gimple_catch_types:                    GIMPLE_CATCH.       (line   12)
* gimple_catch_types_ptr:                GIMPLE_CATCH.       (line   15)
* gimple_code:                           Manipulating GIMPLE statements.
                                                             (line   14)
* GIMPLE_COND:                           GIMPLE_COND.        (line    6)
* gimple_cond_code:                      GIMPLE_COND.        (line   20)
* gimple_cond_false_label:               GIMPLE_COND.        (line   59)
* gimple_cond_lhs:                       GIMPLE_COND.        (line   29)
* gimple_cond_make_false:                GIMPLE_COND.        (line   63)
* gimple_cond_make_true:                 GIMPLE_COND.        (line   66)
* gimple_cond_rhs:                       GIMPLE_COND.        (line   37)
* gimple_cond_set_code:                  GIMPLE_COND.        (line   24)
* gimple_cond_set_false_label:           GIMPLE_COND.        (line   54)
* gimple_cond_set_lhs:                   GIMPLE_COND.        (line   33)
* gimple_cond_set_rhs:                   GIMPLE_COND.        (line   41)
* gimple_cond_set_true_label:            GIMPLE_COND.        (line   49)
* gimple_cond_true_label:                GIMPLE_COND.        (line   45)
* gimple_convert:                        GIMPLE API.         (line   50)
* gimple_copy:                           Manipulating GIMPLE statements.
                                                             (line  146)
* GIMPLE_DEBUG:                          GIMPLE_DEBUG.       (line    6)
* GIMPLE_DEBUG_BEGIN_STMT:               GIMPLE_DEBUG.       (line    6)
* GIMPLE_DEBUG_BIND:                     GIMPLE_DEBUG.       (line    6)
* gimple_debug_bind_get_value:           GIMPLE_DEBUG.       (line   46)
* gimple_debug_bind_get_value_ptr:       GIMPLE_DEBUG.       (line   50)
* gimple_debug_bind_get_var:             GIMPLE_DEBUG.       (line   43)
* gimple_debug_bind_has_value_p:         GIMPLE_DEBUG.       (line   68)
* gimple_debug_bind_p:                   Logical Operators.  (line  162)
* gimple_debug_bind_reset_value:         GIMPLE_DEBUG.       (line   64)
* gimple_debug_bind_set_value:           GIMPLE_DEBUG.       (line   59)
* gimple_debug_bind_set_var:             GIMPLE_DEBUG.       (line   55)
* GIMPLE_DEBUG_INLINE_ENTRY:             GIMPLE_DEBUG.       (line    6)
* gimple_def_ops:                        Manipulating GIMPLE statements.
                                                             (line   93)
* GIMPLE_EH_FILTER:                      GIMPLE_EH_FILTER.   (line    6)
* gimple_eh_filter_failure:              GIMPLE_EH_FILTER.   (line   18)
* gimple_eh_filter_set_failure:          GIMPLE_EH_FILTER.   (line   27)
* gimple_eh_filter_set_types:            GIMPLE_EH_FILTER.   (line   22)
* gimple_eh_filter_types:                GIMPLE_EH_FILTER.   (line   11)
* gimple_eh_filter_types_ptr:            GIMPLE_EH_FILTER.   (line   14)
* gimple_eh_must_not_throw_fndecl:       GIMPLE_EH_FILTER.   (line   32)
* gimple_eh_must_not_throw_set_fndecl:   GIMPLE_EH_FILTER.   (line   36)
* gimple_expr_code:                      Manipulating GIMPLE statements.
                                                             (line   30)
* gimple_expr_type:                      Manipulating GIMPLE statements.
                                                             (line   23)
* GIMPLE_GOTO:                           GIMPLE_GOTO.        (line    6)
* gimple_goto_dest:                      GIMPLE_GOTO.        (line    9)
* gimple_goto_set_dest:                  GIMPLE_GOTO.        (line   12)
* gimple_has_mem_ops:                    Manipulating GIMPLE statements.
                                                             (line   71)
* gimple_has_ops:                        Manipulating GIMPLE statements.
                                                             (line   68)
* gimple_has_volatile_ops:               Manipulating GIMPLE statements.
                                                             (line  133)
* GIMPLE_LABEL:                          GIMPLE_LABEL.       (line    6)
* gimple_label_label:                    GIMPLE_LABEL.       (line   10)
* gimple_label_set_label:                GIMPLE_LABEL.       (line   13)
* gimple_loaded_syms:                    Manipulating GIMPLE statements.
                                                             (line  121)
* gimple_locus:                          Manipulating GIMPLE statements.
                                                             (line   41)
* gimple_locus_empty_p:                  Manipulating GIMPLE statements.
                                                             (line   47)
* gimple_modified_p:                     Manipulating GIMPLE statements.
                                                             (line  129)
* GIMPLE_NOP:                            GIMPLE_NOP.         (line    6)
* gimple_nop_p:                          GIMPLE_NOP.         (line    9)
* gimple_no_warning_p:                   Manipulating GIMPLE statements.
                                                             (line   50)
* gimple_num_ops:                        Logical Operators.  (line   76)
* gimple_num_ops <1>:                    Manipulating GIMPLE statements.
                                                             (line   74)
* GIMPLE_OMP_ATOMIC_LOAD:                GIMPLE_OMP_ATOMIC_LOAD.
                                                             (line    6)
* gimple_omp_atomic_load_lhs:            GIMPLE_OMP_ATOMIC_LOAD.
                                                             (line   16)
* gimple_omp_atomic_load_rhs:            GIMPLE_OMP_ATOMIC_LOAD.
                                                             (line   24)
* gimple_omp_atomic_load_set_lhs:        GIMPLE_OMP_ATOMIC_LOAD.
                                                             (line   12)
* gimple_omp_atomic_load_set_rhs:        GIMPLE_OMP_ATOMIC_LOAD.
                                                             (line   20)
* GIMPLE_OMP_ATOMIC_STORE:               GIMPLE_OMP_ATOMIC_STORE.
                                                             (line    6)
* gimple_omp_atomic_store_set_val:       GIMPLE_OMP_ATOMIC_STORE.
                                                             (line   11)
* gimple_omp_atomic_store_val:           GIMPLE_OMP_ATOMIC_STORE.
                                                             (line   15)
* gimple_omp_body:                       GIMPLE_OMP_PARALLEL.
                                                             (line   23)
* GIMPLE_OMP_CONTINUE:                   GIMPLE_OMP_CONTINUE.
                                                             (line    6)
* gimple_omp_continue_control_def:       GIMPLE_OMP_CONTINUE.
                                                             (line   12)
* gimple_omp_continue_control_def_ptr:   GIMPLE_OMP_CONTINUE.
                                                             (line   17)
* gimple_omp_continue_control_use:       GIMPLE_OMP_CONTINUE.
                                                             (line   26)
* gimple_omp_continue_control_use_ptr:   GIMPLE_OMP_CONTINUE.
                                                             (line   31)
* gimple_omp_continue_set_control_def:   GIMPLE_OMP_CONTINUE.
                                                             (line   21)
* gimple_omp_continue_set_control_use:   GIMPLE_OMP_CONTINUE.
                                                             (line   35)
* GIMPLE_OMP_CRITICAL:                   GIMPLE_OMP_CRITICAL.
                                                             (line    6)
* gimple_omp_critical_name:              GIMPLE_OMP_CRITICAL.
                                                             (line   12)
* gimple_omp_critical_name_ptr:          GIMPLE_OMP_CRITICAL.
                                                             (line   16)
* gimple_omp_critical_set_name:          GIMPLE_OMP_CRITICAL.
                                                             (line   21)
* GIMPLE_OMP_FOR:                        GIMPLE_OMP_FOR.     (line    6)
* gimple_omp_for_clauses:                GIMPLE_OMP_FOR.     (line   17)
* gimple_omp_for_clauses_ptr:            GIMPLE_OMP_FOR.     (line   20)
* gimple_omp_for_cond:                   GIMPLE_OMP_FOR.     (line   80)
* gimple_omp_for_final:                  GIMPLE_OMP_FOR.     (line   48)
* gimple_omp_for_final_ptr:              GIMPLE_OMP_FOR.     (line   51)
* gimple_omp_for_incr:                   GIMPLE_OMP_FOR.     (line   58)
* gimple_omp_for_incr_ptr:               GIMPLE_OMP_FOR.     (line   61)
* gimple_omp_for_index:                  GIMPLE_OMP_FOR.     (line   28)
* gimple_omp_for_index_ptr:              GIMPLE_OMP_FOR.     (line   31)
* gimple_omp_for_initial:                GIMPLE_OMP_FOR.     (line   38)
* gimple_omp_for_initial_ptr:            GIMPLE_OMP_FOR.     (line   41)
* gimple_omp_for_pre_body:               GIMPLE_OMP_FOR.     (line   67)
* gimple_omp_for_set_clauses:            GIMPLE_OMP_FOR.     (line   23)
* gimple_omp_for_set_cond:               GIMPLE_OMP_FOR.     (line   76)
* gimple_omp_for_set_final:              GIMPLE_OMP_FOR.     (line   54)
* gimple_omp_for_set_incr:               GIMPLE_OMP_FOR.     (line   64)
* gimple_omp_for_set_index:              GIMPLE_OMP_FOR.     (line   34)
* gimple_omp_for_set_initial:            GIMPLE_OMP_FOR.     (line   44)
* gimple_omp_for_set_pre_body:           GIMPLE_OMP_FOR.     (line   71)
* GIMPLE_OMP_MASTER:                     GIMPLE_OMP_MASTER.  (line    6)
* GIMPLE_OMP_ORDERED:                    GIMPLE_OMP_ORDERED. (line    6)
* GIMPLE_OMP_PARALLEL:                   GIMPLE_OMP_PARALLEL.
                                                             (line    6)
* gimple_omp_parallel_child_fn:          GIMPLE_OMP_PARALLEL.
                                                             (line   42)
* gimple_omp_parallel_child_fn_ptr:      GIMPLE_OMP_PARALLEL.
                                                             (line   47)
* gimple_omp_parallel_clauses:           GIMPLE_OMP_PARALLEL.
                                                             (line   30)
* gimple_omp_parallel_clauses_ptr:       GIMPLE_OMP_PARALLEL.
                                                             (line   33)
* gimple_omp_parallel_combined_p:        GIMPLE_OMP_PARALLEL.
                                                             (line   15)
* gimple_omp_parallel_data_arg:          GIMPLE_OMP_PARALLEL.
                                                             (line   56)
* gimple_omp_parallel_data_arg_ptr:      GIMPLE_OMP_PARALLEL.
                                                             (line   61)
* gimple_omp_parallel_set_child_fn:      GIMPLE_OMP_PARALLEL.
                                                             (line   52)
* gimple_omp_parallel_set_clauses:       GIMPLE_OMP_PARALLEL.
                                                             (line   37)
* gimple_omp_parallel_set_combined_p:    GIMPLE_OMP_PARALLEL.
                                                             (line   19)
* gimple_omp_parallel_set_data_arg:      GIMPLE_OMP_PARALLEL.
                                                             (line   65)
* GIMPLE_OMP_RETURN:                     GIMPLE_OMP_RETURN.  (line    6)
* gimple_omp_return_nowait_p:            GIMPLE_OMP_RETURN.  (line   13)
* gimple_omp_return_set_nowait:          GIMPLE_OMP_RETURN.  (line   10)
* GIMPLE_OMP_SECTION:                    GIMPLE_OMP_SECTION. (line    6)
* GIMPLE_OMP_SECTIONS:                   GIMPLE_OMP_SECTIONS.
                                                             (line    6)
* gimple_omp_sections_clauses:           GIMPLE_OMP_SECTIONS.
                                                             (line   29)
* gimple_omp_sections_clauses_ptr:       GIMPLE_OMP_SECTIONS.
                                                             (line   32)
* gimple_omp_sections_control:           GIMPLE_OMP_SECTIONS.
                                                             (line   16)
* gimple_omp_sections_control_ptr:       GIMPLE_OMP_SECTIONS.
                                                             (line   20)
* gimple_omp_sections_set_clauses:       GIMPLE_OMP_SECTIONS.
                                                             (line   35)
* gimple_omp_sections_set_control:       GIMPLE_OMP_SECTIONS.
                                                             (line   24)
* gimple_omp_section_last_p:             GIMPLE_OMP_SECTION. (line   11)
* gimple_omp_section_set_last:           GIMPLE_OMP_SECTION. (line   15)
* gimple_omp_set_body:                   GIMPLE_OMP_PARALLEL.
                                                             (line   26)
* GIMPLE_OMP_SINGLE:                     GIMPLE_OMP_SINGLE.  (line    6)
* gimple_omp_single_clauses:             GIMPLE_OMP_SINGLE.  (line   13)
* gimple_omp_single_clauses_ptr:         GIMPLE_OMP_SINGLE.  (line   16)
* gimple_omp_single_set_clauses:         GIMPLE_OMP_SINGLE.  (line   19)
* gimple_op:                             Logical Operators.  (line   79)
* gimple_op <1>:                         Manipulating GIMPLE statements.
                                                             (line   80)
* gimple_ops:                            Logical Operators.  (line   82)
* gimple_ops <1>:                        Manipulating GIMPLE statements.
                                                             (line   77)
* gimple_op_ptr:                         Manipulating GIMPLE statements.
                                                             (line   83)
* GIMPLE_PHI:                            GIMPLE_PHI.         (line    6)
* gimple_phi_arg:                        GIMPLE_PHI.         (line   24)
* gimple_phi_arg <1>:                    SSA.                (line   62)
* gimple_phi_arg_def:                    SSA.                (line   68)
* gimple_phi_arg_edge:                   SSA.                (line   65)
* gimple_phi_capacity:                   GIMPLE_PHI.         (line    6)
* gimple_phi_num_args:                   GIMPLE_PHI.         (line   10)
* gimple_phi_num_args <1>:               SSA.                (line   58)
* gimple_phi_result:                     GIMPLE_PHI.         (line   15)
* gimple_phi_result <1>:                 SSA.                (line   55)
* gimple_phi_result_ptr:                 GIMPLE_PHI.         (line   18)
* gimple_phi_set_arg:                    GIMPLE_PHI.         (line   28)
* gimple_phi_set_result:                 GIMPLE_PHI.         (line   21)
* gimple_plf:                            Manipulating GIMPLE statements.
                                                             (line   64)
* GIMPLE_RESX:                           GIMPLE_RESX.        (line    6)
* gimple_resx_region:                    GIMPLE_RESX.        (line   12)
* gimple_resx_set_region:                GIMPLE_RESX.        (line   15)
* GIMPLE_RETURN:                         GIMPLE_RETURN.      (line    6)
* gimple_return_retval:                  GIMPLE_RETURN.      (line    9)
* gimple_return_set_retval:              GIMPLE_RETURN.      (line   12)
* gimple_seq_add_seq:                    GIMPLE sequences.   (line   30)
* gimple_seq_add_stmt:                   GIMPLE sequences.   (line   24)
* gimple_seq_alloc:                      GIMPLE sequences.   (line   61)
* gimple_seq_copy:                       GIMPLE sequences.   (line   65)
* gimple_seq_deep_copy:                  GIMPLE sequences.   (line   36)
* gimple_seq_empty_p:                    GIMPLE sequences.   (line   69)
* gimple_seq_first:                      GIMPLE sequences.   (line   43)
* gimple_seq_init:                       GIMPLE sequences.   (line   58)
* gimple_seq_last:                       GIMPLE sequences.   (line   46)
* gimple_seq_reverse:                    GIMPLE sequences.   (line   39)
* gimple_seq_set_first:                  GIMPLE sequences.   (line   53)
* gimple_seq_set_last:                   GIMPLE sequences.   (line   49)
* gimple_seq_singleton_p:                GIMPLE sequences.   (line   78)
* gimple_set_block:                      Manipulating GIMPLE statements.
                                                             (line   38)
* gimple_set_def_ops:                    Manipulating GIMPLE statements.
                                                             (line   96)
* gimple_set_has_volatile_ops:           Manipulating GIMPLE statements.
                                                             (line  136)
* gimple_set_locus:                      Manipulating GIMPLE statements.
                                                             (line   44)
* gimple_set_op:                         Manipulating GIMPLE statements.
                                                             (line   86)
* gimple_set_plf:                        Manipulating GIMPLE statements.
                                                             (line   60)
* gimple_set_use_ops:                    Manipulating GIMPLE statements.
                                                             (line  103)
* gimple_set_vdef_ops:                   Manipulating GIMPLE statements.
                                                             (line  117)
* gimple_set_visited:                    Manipulating GIMPLE statements.
                                                             (line   53)
* gimple_set_vuse_ops:                   Manipulating GIMPLE statements.
                                                             (line  110)
* gimple_simplify:                       GIMPLE API.         (line    6)
* gimple_simplify <1>:                   GIMPLE API.         (line    8)
* gimple_simplify <2>:                   GIMPLE API.         (line   10)
* gimple_simplify <3>:                   GIMPLE API.         (line   12)
* gimple_simplify <4>:                   GIMPLE API.         (line   14)
* gimple_simplify <5>:                   GIMPLE API.         (line   16)
* gimple_statement_with_ops:             Tuple representation.
                                                             (line   96)
* gimple_stored_syms:                    Manipulating GIMPLE statements.
                                                             (line  125)
* GIMPLE_SWITCH:                         GIMPLE_SWITCH.      (line    6)
* gimple_switch_default_label:           GIMPLE_SWITCH.      (line   41)
* gimple_switch_index:                   GIMPLE_SWITCH.      (line   24)
* gimple_switch_label:                   GIMPLE_SWITCH.      (line   31)
* gimple_switch_num_labels:              GIMPLE_SWITCH.      (line   14)
* gimple_switch_set_default_label:       GIMPLE_SWITCH.      (line   45)
* gimple_switch_set_index:               GIMPLE_SWITCH.      (line   27)
* gimple_switch_set_label:               GIMPLE_SWITCH.      (line   36)
* gimple_switch_set_num_labels:          GIMPLE_SWITCH.      (line   19)
* GIMPLE_TRY:                            GIMPLE_TRY.         (line    6)
* gimple_try_catch_is_cleanup:           GIMPLE_TRY.         (line   19)
* gimple_try_cleanup:                    GIMPLE_TRY.         (line   26)
* gimple_try_eval:                       GIMPLE_TRY.         (line   22)
* gimple_try_kind:                       GIMPLE_TRY.         (line   15)
* gimple_try_set_catch_is_cleanup:       GIMPLE_TRY.         (line   30)
* gimple_try_set_cleanup:                GIMPLE_TRY.         (line   38)
* gimple_try_set_eval:                   GIMPLE_TRY.         (line   34)
* gimple_use_ops:                        Manipulating GIMPLE statements.
                                                             (line  100)
* gimple_vdef_ops:                       Manipulating GIMPLE statements.
                                                             (line  114)
* gimple_visited_p:                      Manipulating GIMPLE statements.
                                                             (line   57)
* gimple_vuse_ops:                       Manipulating GIMPLE statements.
                                                             (line  107)
* gimple_wce_cleanup:                    GIMPLE_WITH_CLEANUP_EXPR.
                                                             (line   10)
* gimple_wce_cleanup_eh_only:            GIMPLE_WITH_CLEANUP_EXPR.
                                                             (line   17)
* gimple_wce_set_cleanup:                GIMPLE_WITH_CLEANUP_EXPR.
                                                             (line   13)
* gimple_wce_set_cleanup_eh_only:        GIMPLE_WITH_CLEANUP_EXPR.
                                                             (line   20)
* GIMPLE_WITH_CLEANUP_EXPR:              GIMPLE_WITH_CLEANUP_EXPR.
                                                             (line    6)
* gimplification:                        Parsing pass.       (line   13)
* gimplification <1>:                    Gimplification pass.
                                                             (line    6)
* gimplifier:                            Parsing pass.       (line   13)
* gimplify_assign:                       GIMPLE_ASSIGN.      (line   41)
* gimplify_expr:                         Gimplification pass.
                                                             (line   18)
* gimplify_function_tree:                Gimplification pass.
                                                             (line   18)
* GLOBAL_INIT_PRIORITY:                  Functions for C++.  (line  141)
* global_regs:                           Register Basics.    (line  102)
* GO_IF_LEGITIMATE_ADDRESS:              Addressing Modes.   (line   90)
* greater than:                          Comparisons.        (line   60)
* greater than <1>:                      Comparisons.        (line   64)
* greater than <2>:                      Comparisons.        (line   72)
* gsi_after_labels:                      Sequence iterators. (line   74)
* gsi_bb:                                Sequence iterators. (line   82)
* gsi_commit_edge_inserts:               Sequence iterators. (line  193)
* gsi_commit_edge_inserts <1>:           Maintaining the CFG.
                                                             (line  104)
* gsi_commit_one_edge_insert:            Sequence iterators. (line  188)
* gsi_end_p:                             Sequence iterators. (line   59)
* gsi_end_p <1>:                         Maintaining the CFG.
                                                             (line   48)
* gsi_for_stmt:                          Sequence iterators. (line  156)
* gsi_insert_after:                      Sequence iterators. (line  145)
* gsi_insert_after <1>:                  Maintaining the CFG.
                                                             (line   60)
* gsi_insert_before:                     Sequence iterators. (line  134)
* gsi_insert_before <1>:                 Maintaining the CFG.
                                                             (line   66)
* gsi_insert_on_edge:                    Sequence iterators. (line  173)
* gsi_insert_on_edge <1>:                Maintaining the CFG.
                                                             (line  104)
* gsi_insert_on_edge_immediate:          Sequence iterators. (line  183)
* gsi_insert_seq_after:                  Sequence iterators. (line  152)
* gsi_insert_seq_before:                 Sequence iterators. (line  141)
* gsi_insert_seq_on_edge:                Sequence iterators. (line  177)
* gsi_last:                              Sequence iterators. (line   49)
* gsi_last <1>:                          Maintaining the CFG.
                                                             (line   44)
* gsi_last_bb:                           Sequence iterators. (line   55)
* gsi_link_after:                        Sequence iterators. (line  113)
* gsi_link_before:                       Sequence iterators. (line  103)
* gsi_link_seq_after:                    Sequence iterators. (line  108)
* gsi_link_seq_before:                   Sequence iterators. (line   97)
* gsi_move_after:                        Sequence iterators. (line  159)
* gsi_move_before:                       Sequence iterators. (line  164)
* gsi_move_to_bb_end:                    Sequence iterators. (line  169)
* gsi_next:                              Sequence iterators. (line   65)
* gsi_next <1>:                          Maintaining the CFG.
                                                             (line   52)
* gsi_one_before_end_p:                  Sequence iterators. (line   62)
* gsi_prev:                              Sequence iterators. (line   68)
* gsi_prev <1>:                          Maintaining the CFG.
                                                             (line   56)
* gsi_remove:                            Sequence iterators. (line   88)
* gsi_remove <1>:                        Maintaining the CFG.
                                                             (line   72)
* gsi_replace:                           Sequence iterators. (line  128)
* gsi_seq:                               Sequence iterators. (line   85)
* gsi_split_seq_after:                   Sequence iterators. (line  118)
* gsi_split_seq_before:                  Sequence iterators. (line  123)
* gsi_start:                             Sequence iterators. (line   39)
* gsi_start <1>:                         Maintaining the CFG.
                                                             (line   40)
* gsi_start_bb:                          Sequence iterators. (line   45)
* gsi_stmt:                              Sequence iterators. (line   71)
* gsi_stmt_ptr:                          Sequence iterators. (line   79)
* gt:                                    Comparisons.        (line   60)
* gt and attributes:                     Expressions.        (line   83)
* gtu:                                   Comparisons.        (line   64)
* gtu and attributes:                    Expressions.        (line   83)
* GTY:                                   Type Information.   (line    6)
* GT_EXPR:                               Unary and Binary Expressions.
                                                             (line    6)
* guidelines for diagnostics:            Guidelines for Diagnostics.
                                                             (line    6)
* guidelines for options:                Guidelines for Options.
                                                             (line    6)
* guidelines, user experience:           User Experience Guidelines.
                                                             (line    6)
* H in constraint:                       Simple Constraints. (line   96)
* HAmode:                                Machine Modes.      (line  146)
* HANDLER:                               Statements for C++. (line    6)
* HANDLER_BODY:                          Statements for C++. (line    6)
* HANDLER_PARMS:                         Statements for C++. (line    6)
* HANDLE_PRAGMA_PACK_WITH_EXPANSION:     Misc.               (line  475)
* hard registers:                        Regs and Memory.    (line    9)
* HARD_FRAME_POINTER_IS_ARG_POINTER:     Frame Registers.    (line   57)
* HARD_FRAME_POINTER_IS_FRAME_POINTER:   Frame Registers.    (line   50)
* HARD_FRAME_POINTER_REGNUM:             Frame Registers.    (line   19)
* HARD_REGNO_CALLER_SAVE_MODE:           Caller Saves.       (line   10)
* HARD_REGNO_NREGS_HAS_PADDING:          Values in Registers.
                                                             (line   21)
* HARD_REGNO_NREGS_WITH_PADDING:         Values in Registers.
                                                             (line   39)
* HARD_REGNO_RENAME_OK:                  Values in Registers.
                                                             (line  113)
* HAS_INIT_SECTION:                      Macros for Initialization.
                                                             (line   18)
* HAS_LONG_COND_BRANCH:                  Misc.               (line    8)
* HAS_LONG_UNCOND_BRANCH:                Misc.               (line   17)
* HAVE_DOS_BASED_FILE_SYSTEM:            Filesystem.         (line   11)
* HAVE_POST_DECREMENT:                   Addressing Modes.   (line   11)
* HAVE_POST_INCREMENT:                   Addressing Modes.   (line   10)
* HAVE_POST_MODIFY_DISP:                 Addressing Modes.   (line   17)
* HAVE_POST_MODIFY_REG:                  Addressing Modes.   (line   23)
* HAVE_PRE_DECREMENT:                    Addressing Modes.   (line    9)
* HAVE_PRE_INCREMENT:                    Addressing Modes.   (line    8)
* HAVE_PRE_MODIFY_DISP:                  Addressing Modes.   (line   16)
* HAVE_PRE_MODIFY_REG:                   Addressing Modes.   (line   22)
* HCmode:                                Machine Modes.      (line  199)
* HFmode:                                Machine Modes.      (line   61)
* high:                                  Constants.          (line  220)
* HImode:                                Machine Modes.      (line   29)
* HImode, in insn:                       Insns.              (line  291)
* HONOR_REG_ALLOC_ORDER:                 Allocation Order.   (line   36)
* host configuration:                    Host Config.        (line    6)
* host functions:                        Host Common.        (line    6)
* host hooks:                            Host Common.        (line    6)
* host makefile fragment:                Host Fragment.      (line    6)
* HOST_BIT_BUCKET:                       Filesystem.         (line   51)
* HOST_EXECUTABLE_SUFFIX:                Filesystem.         (line   45)
* HOST_HOOKS_EXTRA_SIGNALS:              Host Common.        (line   11)
* HOST_HOOKS_GT_PCH_ALLOC_GRANULARITY:   Host Common.        (line   43)
* HOST_HOOKS_GT_PCH_GET_ADDRESS:         Host Common.        (line   15)
* HOST_HOOKS_GT_PCH_USE_ADDRESS:         Host Common.        (line   24)
* HOST_LACKS_INODE_NUMBERS:              Filesystem.         (line   89)
* HOST_LONG_FORMAT:                      Host Misc.          (line   45)
* HOST_LONG_LONG_FORMAT:                 Host Misc.          (line   41)
* HOST_OBJECT_SUFFIX:                    Filesystem.         (line   40)
* HOST_PTR_PRINTF:                       Host Misc.          (line   49)
* HOT_TEXT_SECTION_NAME:                 Sections.           (line   42)
* HQmode:                                Machine Modes.      (line  110)
* i in constraint:                       Simple Constraints. (line   68)
* I in constraint:                       Simple Constraints. (line   79)
* identifier:                            Identifiers.        (line    6)
* IDENTIFIER_LENGTH:                     Identifiers.        (line   22)
* IDENTIFIER_NODE:                       Identifiers.        (line    6)
* IDENTIFIER_OPNAME_P:                   Identifiers.        (line   27)
* IDENTIFIER_POINTER:                    Identifiers.        (line   17)
* IDENTIFIER_TYPENAME_P:                 Identifiers.        (line   33)
* IEEE 754-2008:                         Decimal float library routines.
                                                             (line    6)
* IFCVT_MACHDEP_INIT:                    Misc.               (line  601)
* IFCVT_MODIFY_CANCEL:                   Misc.               (line  595)
* IFCVT_MODIFY_FINAL:                    Misc.               (line  589)
* IFCVT_MODIFY_INSN:                     Misc.               (line  583)
* IFCVT_MODIFY_MULTIPLE_TESTS:           Misc.               (line  575)
* IFCVT_MODIFY_TESTS:                    Misc.               (line  565)
* IF_COND:                               Statements for C++. (line    6)
* IF_STMT:                               Statements for C++. (line    6)
* if_then_else:                          Comparisons.        (line   80)
* if_then_else and attributes:           Expressions.        (line   32)
* if_then_else usage:                    Side Effects.       (line   56)
* IMAGPART_EXPR:                         Unary and Binary Expressions.
                                                             (line    6)
* Immediate Uses:                        SSA Operands.       (line  258)
* immediate_operand:                     Machine-Independent Predicates.
                                                             (line   10)
* IMMEDIATE_PREFIX:                      Instruction Output. (line  153)
* include:                               Including Patterns. (line    6)
* INCLUDE_DEFAULTS:                      Driver.             (line  331)
* inclusive-or, bitwise:                 Arithmetic.         (line  163)
* INCOMING_FRAME_SP_OFFSET:              Frame Layout.       (line  188)
* INCOMING_REGNO:                        Register Basics.    (line  129)
* INCOMING_REG_PARM_STACK_SPACE:         Stack Arguments.    (line   73)
* INCOMING_RETURN_ADDR_RTX:              Frame Layout.       (line  133)
* INCOMING_STACK_BOUNDARY:               Storage Layout.     (line  171)
* INDEX_REG_CLASS:                       Register Classes.   (line  140)
* indirect_jump instruction pattern:     Standard Names.     (line 1826)
* indirect_operand:                      Machine-Independent Predicates.
                                                             (line   70)
* INDIRECT_REF:                          Storage References. (line    6)
* initialization routines:               Initialization.     (line    6)
* INITIAL_ELIMINATION_OFFSET:            Elimination.        (line   68)
* INITIAL_FRAME_ADDRESS_RTX:             Frame Layout.       (line   75)
* INIT_ARRAY_SECTION_ASM_OP:             Sections.           (line  106)
* INIT_CUMULATIVE_ARGS:                  Register Arguments. (line  158)
* INIT_CUMULATIVE_INCOMING_ARGS:         Register Arguments. (line  186)
* INIT_CUMULATIVE_LIBCALL_ARGS:          Register Arguments. (line  180)
* INIT_ENVIRONMENT:                      Driver.             (line  309)
* INIT_EXPANDERS:                        Per-Function Data.  (line   36)
* INIT_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* init_machine_status:                   Per-Function Data.  (line   42)
* init_one_libfunc:                      Library Calls.      (line   15)
* INIT_SECTION_ASM_OP:                   Sections.           (line   90)
* INIT_SECTION_ASM_OP <1>:               Macros for Initialization.
                                                             (line    9)
* inlining:                              Target Attributes.  (line  103)
* insert_insn_on_edge:                   Maintaining the CFG.
                                                             (line  104)
* insn:                                  Insns.              (line   63)
* insn and /f:                           Flags.              (line  135)
* insn and /j:                           Flags.              (line  171)
* insn and /s:                           Flags.              (line   38)
* insn and /s <1>:                       Flags.              (line  162)
* insn and /u:                           Flags.              (line   28)
* insn and /v:                           Flags.              (line   33)
* insn attributes:                       Insn Attributes.    (line    6)
* insn canonicalization:                 Insn Canonicalizations.
                                                             (line    6)
* insn includes:                         Including Patterns. (line    6)
* insn lengths, computing:               Insn Lengths.       (line    6)
* insn notes, notes:                     Basic Blocks.       (line   52)
* insn splitting:                        Insn Splitting.     (line    6)
* insn-attr.h:                           Defining Attributes.
                                                             (line   34)
* insns:                                 Insns.              (line    6)
* insns, generating:                     RTL Template.       (line    6)
* insns, recognizing:                    RTL Template.       (line    6)
* INSN_ANNULLED_BRANCH_P:                Flags.              (line   28)
* INSN_CODE:                             Insns.              (line  318)
* INSN_DELETED_P:                        Flags.              (line   33)
* INSN_FROM_TARGET_P:                    Flags.              (line   38)
* insn_list:                             Insns.              (line  568)
* INSN_REFERENCES_ARE_DELAYED:           Misc.               (line  502)
* INSN_SETS_ARE_DELAYED:                 Misc.               (line  491)
* INSN_UID:                              Insns.              (line   23)
* INSN_VAR_LOCATION:                     Insns.              (line  247)
* instruction attributes:                Insn Attributes.    (line    6)
* instruction latency time:              Processor pipeline description.
                                                             (line    6)
* instruction latency time <1>:          Processor pipeline description.
                                                             (line  105)
* instruction latency time <2>:          Processor pipeline description.
                                                             (line  196)
* instruction patterns:                  Patterns.           (line    6)
* instruction splitting:                 Insn Splitting.     (line    6)
* insv instruction pattern:              Standard Names.     (line 1562)
* insvM instruction pattern:             Standard Names.     (line 1514)
* insvmisalignM instruction pattern:     Standard Names.     (line 1524)
* int iterators in .md files:            Int Iterators.      (line    6)
* INT16_TYPE:                            Type Layout.        (line  210)
* INT32_TYPE:                            Type Layout.        (line  211)
* INT64_TYPE:                            Type Layout.        (line  212)
* INT8_TYPE:                             Type Layout.        (line  209)
* INTEGER_CST:                           Constant expressions.
                                                             (line    6)
* INTEGER_TYPE:                          Types.              (line    6)
* inter-procedural optimization passes:  IPA passes.         (line    6)
* Interdependence of Patterns:           Dependent Patterns. (line    6)
* interfacing to GCC output:             Interface.          (line    6)
* interlock delays:                      Processor pipeline description.
                                                             (line    6)
* intermediate representation lowering:  Parsing pass.       (line   13)
* INTMAX_TYPE:                           Type Layout.        (line  186)
* INTPTR_TYPE:                           Type Layout.        (line  233)
* introduction:                          Top.                (line    6)
* INT_FAST16_TYPE:                       Type Layout.        (line  226)
* INT_FAST32_TYPE:                       Type Layout.        (line  227)
* INT_FAST64_TYPE:                       Type Layout.        (line  228)
* INT_FAST8_TYPE:                        Type Layout.        (line  225)
* INT_LEAST16_TYPE:                      Type Layout.        (line  218)
* INT_LEAST32_TYPE:                      Type Layout.        (line  219)
* INT_LEAST64_TYPE:                      Type Layout.        (line  220)
* INT_LEAST8_TYPE:                       Type Layout.        (line  217)
* INT_TYPE_SIZE:                         Type Layout.        (line   11)
* INVOKE__main:                          Macros for Initialization.
                                                             (line   50)
* in_struct:                             Flags.              (line  254)
* in_struct, in code_label and note:     Flags.              (line   48)
* in_struct, in insn and jump_insn and call_insn: Flags.     (line   38)
* in_struct, in insn, call_insn, jump_insn and jump_table_data: Flags.
                                                             (line  162)
* in_struct, in subreg:                  Flags.              (line  201)
* ior:                                   Arithmetic.         (line  163)
* ior and attributes:                    Expressions.        (line   50)
* ior, canonicalization of:              Insn Canonicalizations.
                                                             (line   67)
* iorM3 instruction pattern:             Standard Names.     (line  442)
* IPA passes:                            IPA passes.         (line    6)
* IRA_HARD_REGNO_ADD_COST_MULTIPLIER:    Allocation Order.   (line   44)
* is_a:                                  Machine Modes.      (line  347)
* IS_ASM_LOGICAL_LINE_SEPARATOR:         Data Output.        (line  129)
* is_gimple_addressable:                 Logical Operators.  (line  113)
* is_gimple_asm_val:                     Logical Operators.  (line  117)
* is_gimple_assign:                      Logical Operators.  (line  149)
* is_gimple_call:                        Logical Operators.  (line  152)
* is_gimple_call_addr:                   Logical Operators.  (line  120)
* is_gimple_constant:                    Logical Operators.  (line  128)
* is_gimple_debug:                       Logical Operators.  (line  155)
* is_gimple_ip_invariant:                Logical Operators.  (line  137)
* is_gimple_ip_invariant_address:        Logical Operators.  (line  142)
* is_gimple_mem_ref_addr:                Logical Operators.  (line  124)
* is_gimple_min_invariant:               Logical Operators.  (line  131)
* is_gimple_omp:                         Logical Operators.  (line  166)
* is_gimple_val:                         Logical Operators.  (line  107)
* iterators in .md files:                Iterators.          (line    6)
* IV analysis on GIMPLE:                 Scalar evolutions.  (line    6)
* IV analysis on RTL:                    loop-iv.            (line    6)
* JMP_BUF_SIZE:                          Exception Region Output.
                                                             (line   83)
* jump:                                  Flags.              (line  295)
* jump instruction pattern:              Standard Names.     (line 1704)
* jump instruction patterns:             Jump Patterns.      (line    6)
* jump instructions and set:             Side Effects.       (line   56)
* jump, in call_insn:                    Flags.              (line  175)
* jump, in insn:                         Flags.              (line  171)
* jump, in mem:                          Flags.              (line   59)
* Jumps:                                 Jumps.              (line    6)
* JUMP_ALIGN:                            Alignment Output.   (line    8)
* jump_insn:                             Insns.              (line   73)
* jump_insn and /f:                      Flags.              (line  135)
* jump_insn and /j:                      Flags.              (line   10)
* jump_insn and /s:                      Flags.              (line   38)
* jump_insn and /s <1>:                  Flags.              (line  162)
* jump_insn and /u:                      Flags.              (line   28)
* jump_insn and /v:                      Flags.              (line   33)
* JUMP_LABEL:                            Insns.              (line   80)
* JUMP_TABLES_IN_TEXT_SECTION:           Sections.           (line  155)
* jump_table_data:                       Insns.              (line  166)
* jump_table_data and /s:                Flags.              (line  162)
* jump_table_data and /v:                Flags.              (line   33)
* LABEL_ALIGN:                           Alignment Output.   (line   42)
* LABEL_ALIGN_AFTER_BARRIER:             Alignment Output.   (line   21)
* LABEL_ALTERNATE_NAME:                  Edges.              (line  180)
* LABEL_ALT_ENTRY_P:                     Insns.              (line  146)
* LABEL_DECL:                            Declarations.       (line    6)
* LABEL_KIND:                            Insns.              (line  146)
* LABEL_NUSES:                           Insns.              (line  142)
* LABEL_PRESERVE_P:                      Flags.              (line   48)
* label_ref:                             Constants.          (line  199)
* label_ref and /v:                      Flags.              (line   54)
* label_ref, RTL sharing:                Sharing.            (line   38)
* LABEL_REF_NONLOCAL_P:                  Flags.              (line   54)
* language-dependent trees:              Language-dependent trees.
                                                             (line    6)
* language-independent intermediate representation: Parsing pass.
                                                             (line   13)
* lang_hooks.gimplify_expr:              Gimplification pass.
                                                             (line   18)
* lang_hooks.parse_file:                 Parsing pass.       (line    6)
* large return values:                   Aggregate Return.   (line    6)
* LAST_STACK_REG:                        Stack Registers.    (line   30)
* LAST_VIRTUAL_REGISTER:                 Regs and Memory.    (line   51)
* late IPA passes:                       Late IPA passes.    (line    6)
* lceilMN2:                              Standard Names.     (line 1137)
* LCSSA:                                 LCSSA.              (line    6)
* LDD_SUFFIX:                            Macros for Initialization.
                                                             (line  121)
* ldexpM3 instruction pattern:           Standard Names.     (line  922)
* LD_FINI_SWITCH:                        Macros for Initialization.
                                                             (line   28)
* LD_INIT_SWITCH:                        Macros for Initialization.
                                                             (line   24)
* le:                                    Comparisons.        (line   76)
* le and attributes:                     Expressions.        (line   83)
* leaf functions:                        Leaf Functions.     (line    6)
* leaf_function_p:                       Standard Names.     (line 1788)
* LEAF_REGISTERS:                        Leaf Functions.     (line   23)
* LEAF_REG_REMAP:                        Leaf Functions.     (line   37)
* left rotate:                           Arithmetic.         (line  195)
* left shift:                            Arithmetic.         (line  173)
* LEGITIMATE_PIC_OPERAND_P:              PIC.                (line   31)
* LEGITIMIZE_RELOAD_ADDRESS:             Addressing Modes.   (line  150)
* length:                                GTY Options.        (line   47)
* less than:                             Comparisons.        (line   68)
* less than or equal:                    Comparisons.        (line   76)
* leu:                                   Comparisons.        (line   76)
* leu and attributes:                    Expressions.        (line   83)
* LE_EXPR:                               Unary and Binary Expressions.
                                                             (line    6)
* lfloorMN2:                             Standard Names.     (line 1132)
* LIB2FUNCS_EXTRA:                       Target Fragment.    (line   11)
* LIBCALL_VALUE:                         Scalar Return.      (line   56)
* libgcc.a:                              Library Calls.      (line    6)
* LIBGCC2_CFLAGS:                        Target Fragment.    (line    8)
* LIBGCC2_GNU_PREFIX:                    Type Layout.        (line  102)
* LIBGCC2_UNWIND_ATTRIBUTE:              Misc.               (line 1047)
* LIBGCC_SPEC:                           Driver.             (line  115)
* library subroutine names:              Library Calls.      (line    6)
* LIBRARY_PATH_ENV:                      Misc.               (line  543)
* LIB_SPEC:                              Driver.             (line  107)
* LIMIT_RELOAD_CLASS:                    Register Classes.   (line  296)
* LINK_COMMAND_SPEC:                     Driver.             (line  240)
* LINK_EH_SPEC:                          Driver.             (line  142)
* LINK_GCC_C_SEQUENCE_SPEC:              Driver.             (line  232)
* LINK_LIBGCC_SPECIAL_1:                 Driver.             (line  227)
* LINK_SPEC:                             Driver.             (line  100)
* list:                                  Containers.         (line    6)
* Liveness representation:               Liveness information.
                                                             (line    6)
* load address instruction:              Simple Constraints. (line  162)
* LOAD_EXTEND_OP:                        Misc.               (line   80)
* load_multiple instruction pattern:     Standard Names.     (line  136)
* Local Register Allocator (LRA):        RTL passes.         (line  187)
* LOCAL_ALIGNMENT:                       Storage Layout.     (line  284)
* LOCAL_CLASS_P:                         Classes.            (line   70)
* LOCAL_DECL_ALIGNMENT:                  Storage Layout.     (line  321)
* LOCAL_INCLUDE_DIR:                     Driver.             (line  316)
* LOCAL_LABEL_PREFIX:                    Instruction Output. (line  151)
* LOCAL_REGNO:                           Register Basics.    (line  143)
* location information:                  Guidelines for Diagnostics.
                                                             (line  159)
* log10M2 instruction pattern:           Standard Names.     (line 1026)
* log1pM2 instruction pattern:           Standard Names.     (line 1016)
* log2M2 instruction pattern:            Standard Names.     (line 1033)
* logbM2 instruction pattern:            Standard Names.     (line 1040)
* Logical Operators:                     Logical Operators.  (line    6)
* logical-and, bitwise:                  Arithmetic.         (line  158)
* LOGICAL_OP_NON_SHORT_CIRCUIT:          Costs.              (line  294)
* logM2 instruction pattern:             Standard Names.     (line 1009)
* LOG_LINKS:                             Insns.              (line  337)
* longjmp and automatic variables:       Interface.          (line   52)
* LONG_ACCUM_TYPE_SIZE:                  Type Layout.        (line   92)
* LONG_DOUBLE_TYPE_SIZE:                 Type Layout.        (line   57)
* LONG_FRACT_TYPE_SIZE:                  Type Layout.        (line   72)
* LONG_LONG_ACCUM_TYPE_SIZE:             Type Layout.        (line   97)
* LONG_LONG_FRACT_TYPE_SIZE:             Type Layout.        (line   77)
* LONG_LONG_TYPE_SIZE:                   Type Layout.        (line   32)
* LONG_TYPE_SIZE:                        Type Layout.        (line   21)
* Loop analysis:                         Loop representation.
                                                             (line    6)
* Loop manipulation:                     Loop manipulation.  (line    6)
* Loop querying:                         Loop querying.      (line    6)
* Loop representation:                   Loop representation.
                                                             (line    6)
* Loop-closed SSA form:                  LCSSA.              (line    6)
* looping instruction patterns:          Looping Patterns.   (line    6)
* LOOP_ALIGN:                            Alignment Output.   (line   29)
* LOOP_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* lowering, language-dependent intermediate representation: Parsing pass.
                                                             (line   13)
* lo_sum:                                Arithmetic.         (line   25)
* lrintMN2:                              Standard Names.     (line 1122)
* lroundMN2:                             Standard Names.     (line 1127)
* lshiftrt:                              Arithmetic.         (line  190)
* lshiftrt and attributes:               Expressions.        (line   83)
* LSHIFT_EXPR:                           Unary and Binary Expressions.
                                                             (line    6)
* lshrM3 instruction pattern:            Standard Names.     (line  840)
* lt:                                    Comparisons.        (line   68)
* lt and attributes:                     Expressions.        (line   83)
* LTGT_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* lto:                                   LTO.                (line    6)
* ltrans:                                LTO.                (line    6)
* ltu:                                   Comparisons.        (line   68)
* LT_EXPR:                               Unary and Binary Expressions.
                                                             (line    6)
* m in constraint:                       Simple Constraints. (line   17)
* machine attributes:                    Target Attributes.  (line    6)
* machine description macros:            Target Macros.      (line    6)
* machine descriptions:                  Machine Desc.       (line    6)
* machine mode conversions:              Conversions.        (line    6)
* machine mode wrapper classes:          Machine Modes.      (line  286)
* machine modes:                         Machine Modes.      (line    6)
* machine specific constraints:          Machine Constraints.
                                                             (line    6)
* machine-independent predicates:        Machine-Independent Predicates.
                                                             (line    6)
* machine_mode:                          Machine Modes.      (line    6)
* MACH_DEP_SECTION_ASM_FLAG:             Sections.           (line  120)
* macros, target description:            Target Macros.      (line    6)
* maddMN4 instruction pattern:           Standard Names.     (line  761)
* makefile fragment:                     Fragments.          (line    6)
* makefile targets:                      Makefile.           (line    6)
* MAKE_DECL_ONE_ONLY:                    Label Output.       (line  281)
* make_safe_from:                        Expander Definitions.
                                                             (line  151)
* MALLOC_ABI_ALIGNMENT:                  Storage Layout.     (line  190)
* Manipulating GIMPLE statements:        Manipulating GIMPLE statements.
                                                             (line    6)
* marking roots:                         GGC Roots.          (line    6)
* maskloadMN instruction pattern:        Standard Names.     (line  396)
* maskstoreMN instruction pattern:       Standard Names.     (line  403)
* mask_fold_left_plus_M instruction pattern: Standard Names. (line  564)
* mask_gather_loadMN instruction pattern: Standard Names.    (line  249)
* MASK_RETURN_ADDR:                      Exception Region Output.
                                                             (line   35)
* mask_scatter_storeMN instruction pattern: Standard Names.  (line  272)
* Match and Simplify:                    Match and Simplify. (line    6)
* matching constraint:                   Simple Constraints. (line  140)
* matching operands:                     Output Template.    (line   49)
* match_dup:                             RTL Template.       (line   73)
* match_dup <1>:                         define_peephole2.   (line   28)
* match_dup and attributes:              Insn Lengths.       (line   16)
* match_operand:                         RTL Template.       (line   16)
* match_operand and attributes:          Expressions.        (line   55)
* match_operator:                        RTL Template.       (line   95)
* match_op_dup:                          RTL Template.       (line  163)
* match_parallel:                        RTL Template.       (line  172)
* match_par_dup:                         RTL Template.       (line  219)
* match_scratch:                         RTL Template.       (line   58)
* match_scratch <1>:                     define_peephole2.   (line   28)
* match_test and attributes:             Expressions.        (line   64)
* math library:                          Soft float library routines.
                                                             (line    6)
* math, in RTL:                          Arithmetic.         (line    6)
* matherr:                               Library Calls.      (line   59)
* MATH_LIBRARY:                          Misc.               (line  536)
* maxM3 instruction pattern:             Standard Names.     (line  503)
* MAX_BITSIZE_MODE_ANY_INT:              Machine Modes.      (line  444)
* MAX_BITSIZE_MODE_ANY_MODE:             Machine Modes.      (line  450)
* MAX_BITS_PER_WORD:                     Storage Layout.     (line   54)
* MAX_CONDITIONAL_EXECUTE:               Misc.               (line  558)
* MAX_FIXED_MODE_SIZE:                   Storage Layout.     (line  466)
* MAX_MOVE_MAX:                          Misc.               (line  127)
* MAX_OFILE_ALIGNMENT:                   Storage Layout.     (line  228)
* MAX_REGS_PER_ADDRESS:                  Addressing Modes.   (line   42)
* MAX_STACK_ALIGNMENT:                   Storage Layout.     (line  222)
* maybe_undef:                           GTY Options.        (line  141)
* may_trap_p, tree_could_trap_p:         Edges.              (line  114)
* mcount:                                Profiling.          (line   12)
* MD_EXEC_PREFIX:                        Driver.             (line  271)
* MD_FALLBACK_FRAME_STATE_FOR:           Exception Handling. (line   93)
* MD_HANDLE_UNWABI:                      Exception Handling. (line  112)
* MD_STARTFILE_PREFIX:                   Driver.             (line  299)
* MD_STARTFILE_PREFIX_1:                 Driver.             (line  304)
* mem:                                   Regs and Memory.    (line  396)
* mem and /c:                            Flags.              (line   70)
* mem and /f:                            Flags.              (line   74)
* mem and /j:                            Flags.              (line   59)
* mem and /u:                            Flags.              (line   78)
* mem and /v:                            Flags.              (line   65)
* mem, RTL sharing:                      Sharing.            (line   43)
* memory model:                          Memory model.       (line    6)
* memory reference, nonoffsettable:      Simple Constraints. (line  254)
* memory references in constraints:      Simple Constraints. (line   17)
* memory_barrier instruction pattern:    Standard Names.     (line 2172)
* memory_blockage instruction pattern:   Standard Names.     (line 2163)
* MEMORY_MOVE_COST:                      Costs.              (line   53)
* memory_operand:                        Machine-Independent Predicates.
                                                             (line   57)
* MEM_ADDR_SPACE:                        Special Accessors.  (line   48)
* MEM_ALIAS_SET:                         Special Accessors.  (line    9)
* MEM_ALIGN:                             Special Accessors.  (line   45)
* MEM_EXPR:                              Special Accessors.  (line   19)
* MEM_KEEP_ALIAS_SET_P:                  Flags.              (line   59)
* MEM_NOTRAP_P:                          Flags.              (line   70)
* MEM_OFFSET:                            Special Accessors.  (line   31)
* MEM_OFFSET_KNOWN_P:                    Special Accessors.  (line   27)
* MEM_POINTER:                           Flags.              (line   74)
* MEM_READONLY_P:                        Flags.              (line   78)
* MEM_REF:                               Storage References. (line    6)
* MEM_SIZE:                              Special Accessors.  (line   39)
* MEM_SIZE_KNOWN_P:                      Special Accessors.  (line   35)
* mem_thread_fence instruction pattern:  Standard Names.     (line 2462)
* MEM_VOLATILE_P:                        Flags.              (line   65)
* METHOD_TYPE:                           Types.              (line    6)
* MINIMUM_ALIGNMENT:                     Storage Layout.     (line  334)
* MINIMUM_ATOMIC_ALIGNMENT:              Storage Layout.     (line  198)
* minM3 instruction pattern:             Standard Names.     (line  503)
* minus:                                 Arithmetic.         (line   38)
* minus and attributes:                  Expressions.        (line   83)
* minus, canonicalization of:            Insn Canonicalizations.
                                                             (line   27)
* MINUS_EXPR:                            Unary and Binary Expressions.
                                                             (line    6)
* MIN_UNITS_PER_WORD:                    Storage Layout.     (line   64)
* MIPS coprocessor-definition macros:    MIPS Coprocessors.  (line    6)
* miscellaneous register hooks:          Miscellaneous Register Hooks.
                                                             (line    6)
* mnemonic attribute:                    Mnemonic Attribute. (line    6)
* mod:                                   Arithmetic.         (line  136)
* mod and attributes:                    Expressions.        (line   83)
* mode classes:                          Machine Modes.      (line  226)
* mode iterators in .md files:           Mode Iterators.     (line    6)
* mode switching:                        Mode Switching.     (line    6)
* MODE_ACCUM:                            Machine Modes.      (line  256)
* MODE_BASE_REG_CLASS:                   Register Classes.   (line  116)
* MODE_BASE_REG_REG_CLASS:               Register Classes.   (line  122)
* MODE_CC:                               Machine Modes.      (line  271)
* MODE_CC <1>:                           MODE_CC Condition Codes.
                                                             (line    6)
* MODE_CODE_BASE_REG_CLASS:              Register Classes.   (line  129)
* MODE_COMPLEX_FLOAT:                    Machine Modes.      (line  267)
* MODE_COMPLEX_INT:                      Machine Modes.      (line  264)
* MODE_DECIMAL_FLOAT:                    Machine Modes.      (line  244)
* MODE_FLOAT:                            Machine Modes.      (line  240)
* MODE_FRACT:                            Machine Modes.      (line  248)
* MODE_INT:                              Machine Modes.      (line  232)
* MODE_PARTIAL_INT:                      Machine Modes.      (line  236)
* MODE_POINTER_BOUNDS:                   Machine Modes.      (line  276)
* MODE_RANDOM:                           Machine Modes.      (line  281)
* MODE_UACCUM:                           Machine Modes.      (line  260)
* MODE_UFRACT:                           Machine Modes.      (line  252)
* modifiers in constraints:              Modifiers.          (line    6)
* MODIFY_EXPR:                           Unary and Binary Expressions.
                                                             (line    6)
* modM3 instruction pattern:             Standard Names.     (line  442)
* modulo scheduling:                     RTL passes.         (line  123)
* MOVE_MAX:                              Misc.               (line  122)
* MOVE_MAX_PIECES:                       Costs.              (line  210)
* MOVE_RATIO:                            Costs.              (line  149)
* movM instruction pattern:              Standard Names.     (line   11)
* movmemM instruction pattern:           Standard Names.     (line 1281)
* movmisalignM instruction pattern:      Standard Names.     (line  125)
* movMODEcc instruction pattern:         Standard Names.     (line 1576)
* movstr instruction pattern:            Standard Names.     (line 1317)
* movstrictM instruction pattern:        Standard Names.     (line  119)
* msubMN4 instruction pattern:           Standard Names.     (line  784)
* mulhisi3 instruction pattern:          Standard Names.     (line  737)
* mulM3 instruction pattern:             Standard Names.     (line  442)
* mulqihi3 instruction pattern:          Standard Names.     (line  741)
* mulsidi3 instruction pattern:          Standard Names.     (line  741)
* mult:                                  Arithmetic.         (line   93)
* mult and attributes:                   Expressions.        (line   83)
* mult, canonicalization of:             Insn Canonicalizations.
                                                             (line   27)
* mult, canonicalization of <1>:         Insn Canonicalizations.
                                                             (line  107)
* MULTIARCH_DIRNAME:                     Target Fragment.    (line  173)
* MULTILIB_DEFAULTS:                     Driver.             (line  256)
* MULTILIB_DIRNAMES:                     Target Fragment.    (line   44)
* MULTILIB_EXCEPTIONS:                   Target Fragment.    (line   70)
* MULTILIB_EXTRA_OPTS:                   Target Fragment.    (line  135)
* MULTILIB_MATCHES:                      Target Fragment.    (line   63)
* MULTILIB_OPTIONS:                      Target Fragment.    (line   24)
* MULTILIB_OSDIRNAMES:                   Target Fragment.    (line  142)
* MULTILIB_REQUIRED:                     Target Fragment.    (line   82)
* MULTILIB_REUSE:                        Target Fragment.    (line  103)
* multiple alternative constraints:      Multi-Alternative.  (line    6)
* MULTIPLE_SYMBOL_SPACES:                Misc.               (line  515)
* multiplication:                        Arithmetic.         (line   93)
* multiplication with signed saturation: Arithmetic.         (line   93)
* multiplication with unsigned saturation: Arithmetic.       (line   93)
* MULT_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* MULT_HIGHPART_EXPR:                    Unary and Binary Expressions.
                                                             (line    6)
* mulvM4 instruction pattern:            Standard Names.     (line  458)
* n in constraint:                       Simple Constraints. (line   73)
* name:                                  Identifiers.        (line    6)
* named address spaces:                  Named Address Spaces.
                                                             (line    6)
* named patterns and conditions:         Patterns.           (line   61)
* names, pattern:                        Standard Names.     (line    6)
* namespace, scope:                      Namespaces.         (line    6)
* NAMESPACE_DECL:                        Declarations.       (line    6)
* NAMESPACE_DECL <1>:                    Namespaces.         (line    6)
* NATIVE_SYSTEM_HEADER_COMPONENT:        Driver.             (line  326)
* ne:                                    Comparisons.        (line   56)
* ne and attributes:                     Expressions.        (line   83)
* nearbyintM2 instruction pattern:       Standard Names.     (line 1106)
* neg:                                   Arithmetic.         (line   82)
* neg and attributes:                    Expressions.        (line   83)
* neg, canonicalization of:              Insn Canonicalizations.
                                                             (line   27)
* NEGATE_EXPR:                           Unary and Binary Expressions.
                                                             (line    6)
* negation:                              Arithmetic.         (line   82)
* negation with signed saturation:       Arithmetic.         (line   82)
* negation with unsigned saturation:     Arithmetic.         (line   82)
* negM2 instruction pattern:             Standard Names.     (line  872)
* negMODEcc instruction pattern:         Standard Names.     (line 1645)
* negvM3 instruction pattern:            Standard Names.     (line  875)
* nested functions, support for:         Trampolines.        (line    6)
* nested_ptr:                            GTY Options.        (line  149)
* next_bb, prev_bb, FOR_EACH_BB, FOR_ALL_BB: Basic Blocks.   (line   25)
* NEXT_INSN:                             Insns.              (line   30)
* NEXT_OBJC_RUNTIME:                     Library Calls.      (line   86)
* NE_EXPR:                               Unary and Binary Expressions.
                                                             (line    6)
* nil:                                   RTL Objects.        (line   73)
* NM_FLAGS:                              Macros for Initialization.
                                                             (line  110)
* nondeterministic finite state automaton: Processor pipeline description.
                                                             (line  304)
* nonimmediate_operand:                  Machine-Independent Predicates.
                                                             (line  100)
* nonlocal goto handler:                 Edges.              (line  171)
* nonlocal_goto instruction pattern:     Standard Names.     (line 1998)
* nonlocal_goto_receiver instruction pattern: Standard Names.
                                                             (line 2015)
* nonmemory_operand:                     Machine-Independent Predicates.
                                                             (line   96)
* nonoffsettable memory reference:       Simple Constraints. (line  254)
* NON_LVALUE_EXPR:                       Unary and Binary Expressions.
                                                             (line    6)
* nop instruction pattern:               Standard Names.     (line 1821)
* NOP_EXPR:                              Unary and Binary Expressions.
                                                             (line    6)
* normal predicates:                     Predicates.         (line   31)
* not:                                   Arithmetic.         (line  154)
* not and attributes:                    Expressions.        (line   50)
* not equal:                             Comparisons.        (line   56)
* not, canonicalization of:              Insn Canonicalizations.
                                                             (line   27)
* note:                                  Insns.              (line  183)
* note and /i:                           Flags.              (line   48)
* note and /v:                           Flags.              (line   33)
* NOTE_INSN_BASIC_BLOCK:                 Basic Blocks.       (line   50)
* NOTE_INSN_BASIC_BLOCK <1>:             Basic Blocks.       (line   52)
* NOTE_INSN_BEGIN_STMT:                  Insns.              (line  233)
* NOTE_INSN_BLOCK_BEG:                   Insns.              (line  208)
* NOTE_INSN_BLOCK_END:                   Insns.              (line  208)
* NOTE_INSN_DELETED:                     Insns.              (line  198)
* NOTE_INSN_DELETED_LABEL:               Insns.              (line  203)
* NOTE_INSN_EH_REGION_BEG:               Insns.              (line  214)
* NOTE_INSN_EH_REGION_END:               Insns.              (line  214)
* NOTE_INSN_FUNCTION_BEG:                Insns.              (line  221)
* NOTE_INSN_INLINE_ENTRY:                Insns.              (line  238)
* NOTE_INSN_VAR_LOCATION:                Insns.              (line  225)
* NOTE_LINE_NUMBER:                      Insns.              (line  183)
* NOTE_SOURCE_FILE:                      Insns.              (line  183)
* NOTE_VAR_LOCATION:                     Insns.              (line  225)
* NOTICE_UPDATE_CC:                      CC0 Condition Codes.
                                                             (line   30)
* notMODEcc instruction pattern:         Standard Names.     (line 1652)
* NO_DBX_BNSYM_ENSYM:                    DBX Hooks.          (line   25)
* NO_DBX_FUNCTION_END:                   DBX Hooks.          (line   19)
* NO_DBX_GCC_MARKER:                     File Names and DBX. (line   27)
* NO_DBX_MAIN_SOURCE_DIRECTORY:          File Names and DBX. (line   22)
* NO_DOLLAR_IN_LABEL:                    Label Output.       (line   64)
* NO_DOT_IN_LABEL:                       Label Output.       (line   70)
* NO_FUNCTION_CSE:                       Costs.              (line  289)
* NO_PROFILE_COUNTERS:                   Profiling.          (line   27)
* NO_REGS:                               Register Classes.   (line   17)
* Number of iterations analysis:         Number of iterations.
                                                             (line    6)
* NUM_MACHINE_MODES:                     Machine Modes.      (line  383)
* NUM_MODES_FOR_MODE_SWITCHING:          Mode Switching.     (line   30)
* NUM_POLY_INT_COEFFS:                   Overview of poly_int.
                                                             (line   24)
* N_REG_CLASSES:                         Register Classes.   (line   81)
* o in constraint:                       Simple Constraints. (line   23)
* OACC_CACHE:                            OpenACC.            (line    6)
* OACC_DATA:                             OpenACC.            (line    6)
* OACC_DECLARE:                          OpenACC.            (line    6)
* OACC_ENTER_DATA:                       OpenACC.            (line    6)
* OACC_EXIT_DATA:                        OpenACC.            (line    6)
* OACC_HOST_DATA:                        OpenACC.            (line    6)
* OACC_KERNELS:                          OpenACC.            (line    6)
* OACC_LOOP:                             OpenACC.            (line    6)
* OACC_PARALLEL:                         OpenACC.            (line    6)
* OACC_SERIAL:                           OpenACC.            (line    6)
* OACC_UPDATE:                           OpenACC.            (line    6)
* OBJC_GEN_METHOD_LABEL:                 Label Output.       (line  482)
* OBJC_JBLEN:                            Misc.               (line 1042)
* OBJECT_FORMAT_COFF:                    Macros for Initialization.
                                                             (line   96)
* offsettable address:                   Simple Constraints. (line   23)
* OFFSET_TYPE:                           Types.              (line    6)
* OImode:                                Machine Modes.      (line   51)
* OMP_ATOMIC:                            OpenMP.             (line    6)
* OMP_CLAUSE:                            OpenMP.             (line    6)
* OMP_CONTINUE:                          OpenMP.             (line    6)
* OMP_CRITICAL:                          OpenMP.             (line    6)
* OMP_FOR:                               OpenMP.             (line    6)
* OMP_MASTER:                            OpenMP.             (line    6)
* OMP_ORDERED:                           OpenMP.             (line    6)
* OMP_PARALLEL:                          OpenMP.             (line    6)
* OMP_RETURN:                            OpenMP.             (line    6)
* OMP_SECTION:                           OpenMP.             (line    6)
* OMP_SECTIONS:                          OpenMP.             (line    6)
* OMP_SINGLE:                            OpenMP.             (line    6)
* one_cmplM2 instruction pattern:        Standard Names.     (line 1241)
* operand access:                        Accessors.          (line    6)
* Operand Access Routines:               SSA Operands.       (line  116)
* operand constraints:                   Constraints.        (line    6)
* Operand Iterators:                     SSA Operands.       (line  116)
* operand predicates:                    Predicates.         (line    6)
* operand substitution:                  Output Template.    (line    6)
* Operands:                              Operands.           (line    6)
* operands:                              SSA Operands.       (line    6)
* operands <1>:                          Patterns.           (line   67)
* operator predicates:                   Predicates.         (line    6)
* optc-gen.awk:                          Options.            (line    6)
* OPTGROUP_ALL:                          Optimization groups.
                                                             (line   28)
* OPTGROUP_INLINE:                       Optimization groups.
                                                             (line   15)
* OPTGROUP_IPA:                          Optimization groups.
                                                             (line    9)
* OPTGROUP_LOOP:                         Optimization groups.
                                                             (line   12)
* OPTGROUP_OMP:                          Optimization groups.
                                                             (line   18)
* OPTGROUP_OTHER:                        Optimization groups.
                                                             (line   24)
* OPTGROUP_VEC:                          Optimization groups.
                                                             (line   21)
* optimization dumps:                    Optimization info.  (line    6)
* optimization groups:                   Optimization groups.
                                                             (line    6)
* optimization info file names:          Dump files and streams.
                                                             (line    6)
* Optimization infrastructure for GIMPLE: Tree SSA.          (line    6)
* OPTIMIZE_MODE_SWITCHING:               Mode Switching.     (line    8)
* option specification files:            Options.            (line    6)
* optional hardware or system features:  Run-time Target.    (line   59)
* options, directory search:             Including Patterns. (line   47)
* options, guidelines for:               Guidelines for Options.
                                                             (line    6)
* OPTION_DEFAULT_SPECS:                  Driver.             (line   25)
* opt_mode:                              Machine Modes.      (line  322)
* order of register allocation:          Allocation Order.   (line    6)
* ordered_comparison_operator:           Machine-Independent Predicates.
                                                             (line  115)
* ORDERED_EXPR:                          Unary and Binary Expressions.
                                                             (line    6)
* Ordering of Patterns:                  Pattern Ordering.   (line    6)
* ORIGINAL_REGNO:                        Special Accessors.  (line   53)
* other register constraints:            Simple Constraints. (line  171)
* outgoing_args_size:                    Stack Arguments.    (line   48)
* OUTGOING_REGNO:                        Register Basics.    (line  136)
* OUTGOING_REG_PARM_STACK_SPACE:         Stack Arguments.    (line   79)
* output of assembler code:              File Framework.     (line    6)
* output statements:                     Output Statement.   (line    6)
* output templates:                      Output Template.    (line    6)
* output_asm_insn:                       Output Statement.   (line   52)
* OUTPUT_QUOTED_STRING:                  File Framework.     (line  105)
* OVERLAPPING_REGISTER_NAMES:            Instruction Output. (line   20)
* OVERLOAD:                              Functions for C++.  (line    6)
* OVERRIDE_ABI_FORMAT:                   Register Arguments. (line  150)
* OVL_CURRENT:                           Functions for C++.  (line    6)
* OVL_NEXT:                              Functions for C++.  (line    6)
* p in constraint:                       Simple Constraints. (line  162)
* PAD_VARARGS_DOWN:                      Register Arguments. (line  230)
* parallel:                              Side Effects.       (line  210)
* parameters, c++ abi:                   C++ ABI.            (line    6)
* parameters, d abi:                     D Language and ABI. (line    6)
* parameters, miscellaneous:             Misc.               (line    6)
* parameters, precompiled headers:       PCH Target.         (line    6)
* parity:                                Arithmetic.         (line  242)
* parityM2 instruction pattern:          Standard Names.     (line 1228)
* PARM_BOUNDARY:                         Storage Layout.     (line  150)
* PARM_DECL:                             Declarations.       (line    6)
* PARSE_LDD_OUTPUT:                      Macros for Initialization.
                                                             (line  125)
* pass dumps:                            Passes.             (line    6)
* passes and files of the compiler:      Passes.             (line    6)
* passing arguments:                     Interface.          (line   36)
* pass_duplicate_computed_gotos:         Edges.              (line  161)
* PATH_SEPARATOR:                        Filesystem.         (line   31)
* PATTERN:                               Insns.              (line  307)
* pattern conditions:                    Patterns.           (line   55)
* pattern names:                         Standard Names.     (line    6)
* Pattern Ordering:                      Pattern Ordering.   (line    6)
* patterns:                              Patterns.           (line    6)
* pc:                                    Regs and Memory.    (line  383)
* pc and attributes:                     Insn Lengths.       (line   20)
* pc, RTL sharing:                       Sharing.            (line   28)
* PCC_BITFIELD_TYPE_MATTERS:             Storage Layout.     (line  360)
* PCC_STATIC_STRUCT_RETURN:              Aggregate Return.   (line   64)
* PC_REGNUM:                             Register Basics.    (line  150)
* pc_rtx:                                Regs and Memory.    (line  388)
* PDImode:                               Machine Modes.      (line   40)
* peephole optimization, RTL representation: Side Effects.   (line  244)
* peephole optimizer definitions:        Peephole Definitions.
                                                             (line    6)
* per-function data:                     Per-Function Data.  (line    6)
* percent sign:                          Output Template.    (line    6)
* PHI nodes:                             SSA.                (line   31)
* PIC:                                   PIC.                (line    6)
* PIC_OFFSET_TABLE_REGNUM:               PIC.                (line   15)
* PIC_OFFSET_TABLE_REG_CALL_CLOBBERED:   PIC.                (line   25)
* pipeline hazard recognizer:            Processor pipeline description.
                                                             (line    6)
* pipeline hazard recognizer <1>:        Processor pipeline description.
                                                             (line   53)
* Plugins:                               Plugins.            (line    6)
* plus:                                  Arithmetic.         (line   14)
* plus and attributes:                   Expressions.        (line   83)
* plus, canonicalization of:             Insn Canonicalizations.
                                                             (line   27)
* PLUS_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* Pmode:                                 Misc.               (line  363)
* pmode_register_operand:                Machine-Independent Predicates.
                                                             (line   34)
* pointer:                               Types.              (line    6)
* POINTERS_EXTEND_UNSIGNED:              Storage Layout.     (line   76)
* POINTER_DIFF_EXPR:                     Unary and Binary Expressions.
                                                             (line    6)
* POINTER_PLUS_EXPR:                     Unary and Binary Expressions.
                                                             (line    6)
* POINTER_SIZE:                          Storage Layout.     (line   70)
* POINTER_TYPE:                          Types.              (line    6)
* polynomial integers:                   poly_int.           (line    6)
* poly_int:                              poly_int.           (line    6)
* poly_int, invariant range:             Overview of poly_int.
                                                             (line   31)
* poly_int, main typedefs:               Overview of poly_int.
                                                             (line   46)
* poly_int, runtime value:               Overview of poly_int.
                                                             (line    6)
* poly_int, template parameters:         Overview of poly_int.
                                                             (line   24)
* poly_int, use in target-independent code: Consequences of using poly_int.
                                                             (line   32)
* poly_int, use in target-specific code: Consequences of using poly_int.
                                                             (line   40)
* POLY_INT_CST:                          Constant expressions.
                                                             (line    6)
* popcount:                              Arithmetic.         (line  238)
* popcountM2 instruction pattern:        Standard Names.     (line 1216)
* pops_args:                             Function Entry.     (line  111)
* pop_operand:                           Machine-Independent Predicates.
                                                             (line   87)
* portability:                           Portability.        (line    6)
* position independent code:             PIC.                (line    6)
* POSTDECREMENT_EXPR:                    Unary and Binary Expressions.
                                                             (line    6)
* POSTINCREMENT_EXPR:                    Unary and Binary Expressions.
                                                             (line    6)
* post_dec:                              Incdec.             (line   25)
* post_inc:                              Incdec.             (line   30)
* POST_LINK_SPEC:                        Driver.             (line  236)
* post_modify:                           Incdec.             (line   33)
* post_order_compute, inverted_post_order_compute, walk_dominator_tree: Basic Blocks.
                                                             (line   34)
* POWI_MAX_MULTS:                        Misc.               (line  927)
* powM3 instruction pattern:             Standard Names.     (line 1054)
* pragma:                                Misc.               (line  420)
* PREDECREMENT_EXPR:                     Unary and Binary Expressions.
                                                             (line    6)
* predefined macros:                     Run-time Target.    (line    6)
* predicates:                            Predicates.         (line    6)
* predicates and machine modes:          Predicates.         (line   31)
* predication:                           Conditional Execution.
                                                             (line    6)
* predict.def:                           Profile information.
                                                             (line   24)
* PREFERRED_DEBUGGING_TYPE:              All Debuggers.      (line   40)
* PREFERRED_RELOAD_CLASS:                Register Classes.   (line  249)
* PREFERRED_STACK_BOUNDARY:              Storage Layout.     (line  164)
* prefetch:                              Side Effects.       (line  324)
* prefetch and /v:                       Flags.              (line   92)
* prefetch instruction pattern:          Standard Names.     (line 2140)
* PREFETCH_SCHEDULE_BARRIER_P:           Flags.              (line   92)
* PREINCREMENT_EXPR:                     Unary and Binary Expressions.
                                                             (line    6)
* presence_set:                          Processor pipeline description.
                                                             (line  223)
* preserving SSA form:                   SSA.                (line   74)
* pretend_args_size:                     Function Entry.     (line  117)
* prev_active_insn:                      define_peephole.    (line   60)
* PREV_INSN:                             Insns.              (line   26)
* pre_dec:                               Incdec.             (line    8)
* PRE_GCC3_DWARF_FRAME_REGISTERS:        Frame Registers.    (line  126)
* pre_inc:                               Incdec.             (line   22)
* pre_modify:                            Incdec.             (line   52)
* PRINT_OPERAND:                         Instruction Output. (line   95)
* PRINT_OPERAND_ADDRESS:                 Instruction Output. (line  122)
* PRINT_OPERAND_PUNCT_VALID_P:           Instruction Output. (line  115)
* probe_stack instruction pattern:       Standard Names.     (line 1990)
* probe_stack_address instruction pattern: Standard Names.   (line 1983)
* processor functional units:            Processor pipeline description.
                                                             (line    6)
* processor functional units <1>:        Processor pipeline description.
                                                             (line   68)
* processor pipeline description:        Processor pipeline description.
                                                             (line    6)
* product:                               Arithmetic.         (line   93)
* profile feedback:                      Profile information.
                                                             (line   14)
* profile representation:                Profile information.
                                                             (line    6)
* PROFILE_BEFORE_PROLOGUE:               Profiling.          (line   34)
* PROFILE_HOOK:                          Profiling.          (line   22)
* profiling, code generation:            Profiling.          (line    6)
* program counter:                       Regs and Memory.    (line  384)
* prologue:                              Function Entry.     (line    6)
* prologue instruction pattern:          Standard Names.     (line 2079)
* PROMOTE_MODE:                          Storage Layout.     (line   87)
* pseudo registers:                      Regs and Memory.    (line    9)
* PSImode:                               Machine Modes.      (line   32)
* PTRDIFF_TYPE:                          Type Layout.        (line  157)
* purge_dead_edges:                      Edges.              (line  103)
* purge_dead_edges <1>:                  Maintaining the CFG.
                                                             (line   81)
* push address instruction:              Simple Constraints. (line  162)
* pushM1 instruction pattern:            Standard Names.     (line  429)
* PUSH_ARGS:                             Stack Arguments.    (line   17)
* PUSH_ARGS_REVERSED:                    Stack Arguments.    (line   25)
* push_operand:                          Machine-Independent Predicates.
                                                             (line   80)
* push_reload:                           Addressing Modes.   (line  176)
* PUSH_ROUNDING:                         Stack Arguments.    (line   31)
* PUT_CODE:                              RTL Objects.        (line   47)
* PUT_MODE:                              Machine Modes.      (line  380)
* PUT_REG_NOTE_KIND:                     Insns.              (line  369)
* QCmode:                                Machine Modes.      (line  199)
* QFmode:                                Machine Modes.      (line   57)
* QImode:                                Machine Modes.      (line   25)
* QImode, in insn:                       Insns.              (line  291)
* QQmode:                                Machine Modes.      (line  106)
* qualified type:                        Types.              (line    6)
* qualified type <1>:                    Types for C++.      (line    6)
* querying function unit reservations:   Processor pipeline description.
                                                             (line   90)
* question mark:                         Multi-Alternative.  (line   42)
* quotient:                              Arithmetic.         (line  116)
* r in constraint:                       Simple Constraints. (line   64)
* RDIV_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* READONLY_DATA_SECTION_ASM_OP:          Sections.           (line   62)
* real operands:                         SSA Operands.       (line    6)
* REALPART_EXPR:                         Unary and Binary Expressions.
                                                             (line    6)
* REAL_CST:                              Constant expressions.
                                                             (line    6)
* REAL_LIBGCC_SPEC:                      Driver.             (line  124)
* REAL_NM_FILE_NAME:                     Macros for Initialization.
                                                             (line  105)
* REAL_TYPE:                             Types.              (line    6)
* REAL_VALUE_ABS:                        Floating Point.     (line   58)
* REAL_VALUE_ATOF:                       Floating Point.     (line   39)
* REAL_VALUE_FIX:                        Floating Point.     (line   31)
* REAL_VALUE_ISINF:                      Floating Point.     (line   49)
* REAL_VALUE_ISNAN:                      Floating Point.     (line   52)
* REAL_VALUE_NEGATE:                     Floating Point.     (line   55)
* REAL_VALUE_NEGATIVE:                   Floating Point.     (line   46)
* REAL_VALUE_TO_TARGET_DECIMAL128:       Data Output.        (line  153)
* REAL_VALUE_TO_TARGET_DECIMAL32:        Data Output.        (line  151)
* REAL_VALUE_TO_TARGET_DECIMAL64:        Data Output.        (line  152)
* REAL_VALUE_TO_TARGET_DOUBLE:           Data Output.        (line  149)
* REAL_VALUE_TO_TARGET_LONG_DOUBLE:      Data Output.        (line  150)
* REAL_VALUE_TO_TARGET_SINGLE:           Data Output.        (line  148)
* REAL_VALUE_TYPE:                       Floating Point.     (line   25)
* REAL_VALUE_UNSIGNED_FIX:               Floating Point.     (line   34)
* recognizing insns:                     RTL Template.       (line    6)
* recog_data.operand:                    Instruction Output. (line   54)
* RECORD_TYPE:                           Types.              (line    6)
* RECORD_TYPE <1>:                       Classes.            (line    6)
* redirect_edge_and_branch:              Profile information.
                                                             (line   71)
* redirect_edge_and_branch, redirect_jump: Maintaining the CFG.
                                                             (line   89)
* reduc_and_scal_M instruction pattern:  Standard Names.     (line  535)
* reduc_ior_scal_M instruction pattern:  Standard Names.     (line  536)
* reduc_plus_scal_M instruction pattern: Standard Names.     (line  530)
* reduc_smax_scal_M instruction pattern: Standard Names.     (line  520)
* reduc_smin_scal_M instruction pattern: Standard Names.     (line  520)
* reduc_umax_scal_M instruction pattern: Standard Names.     (line  525)
* reduc_umin_scal_M instruction pattern: Standard Names.     (line  525)
* reduc_xor_scal_M instruction pattern:  Standard Names.     (line  537)
* reference:                             Types.              (line    6)
* REFERENCE_TYPE:                        Types.              (line    6)
* reg:                                   Regs and Memory.    (line    9)
* reg and /f:                            Flags.              (line  102)
* reg and /i:                            Flags.              (line   97)
* reg and /v:                            Flags.              (line  106)
* reg, RTL sharing:                      Sharing.            (line   17)
* register allocation order:             Allocation Order.   (line    6)
* register class definitions:            Register Classes.   (line    6)
* register class preference constraints: Class Preferences.  (line    6)
* register pairs:                        Values in Registers.
                                                             (line   65)
* Register Transfer Language (RTL):      RTL.                (line    6)
* register usage:                        Registers.          (line    6)
* registers arguments:                   Register Arguments. (line    6)
* registers in constraints:              Simple Constraints. (line   64)
* REGISTER_MOVE_COST:                    Costs.              (line    9)
* REGISTER_NAMES:                        Instruction Output. (line    8)
* register_operand:                      Machine-Independent Predicates.
                                                             (line   29)
* REGISTER_PREFIX:                       Instruction Output. (line  150)
* REGISTER_TARGET_PRAGMAS:               Misc.               (line  420)
* REGMODE_NATURAL_SIZE:                  Regs and Memory.    (line  191)
* REGMODE_NATURAL_SIZE <1>:              Regs and Memory.    (line  268)
* REGMODE_NATURAL_SIZE <2>:              Values in Registers.
                                                             (line   46)
* REGNO_MODE_CODE_OK_FOR_BASE_P:         Register Classes.   (line  172)
* REGNO_MODE_OK_FOR_BASE_P:              Register Classes.   (line  150)
* REGNO_MODE_OK_FOR_REG_BASE_P:          Register Classes.   (line  160)
* REGNO_OK_FOR_BASE_P:                   Register Classes.   (line  146)
* REGNO_OK_FOR_INDEX_P:                  Register Classes.   (line  186)
* REGNO_REG_CLASS:                       Register Classes.   (line  105)
* regs_ever_live:                        Function Entry.     (line   29)
* regular expressions:                   Processor pipeline description.
                                                             (line    6)
* regular expressions <1>:               Processor pipeline description.
                                                             (line  105)
* regular IPA passes:                    Regular IPA passes. (line    6)
* REG_ALLOC_ORDER:                       Allocation Order.   (line    8)
* REG_BR_PRED:                           Insns.              (line  541)
* REG_BR_PROB:                           Insns.              (line  533)
* REG_BR_PROB_BASE, BB_FREQ_BASE, count: Profile information.
                                                             (line   82)
* REG_BR_PROB_BASE, EDGE_FREQUENCY:      Profile information.
                                                             (line   52)
* REG_CALL_NOCF_CHECK:                   Insns.              (line  557)
* REG_CC_SETTER:                         Insns.              (line  505)
* REG_CC_USER:                           Insns.              (line  505)
* reg_class_contents:                    Register Basics.    (line  102)
* REG_CLASS_CONTENTS:                    Register Classes.   (line   91)
* reg_class_for_constraint:              C Constraint Interface.
                                                             (line   48)
* REG_CLASS_NAMES:                       Register Classes.   (line   86)
* REG_DEAD:                              Insns.              (line  380)
* REG_DEAD, REG_UNUSED:                  Liveness information.
                                                             (line   32)
* REG_DEP_ANTI:                          Insns.              (line  527)
* REG_DEP_OUTPUT:                        Insns.              (line  523)
* REG_DEP_TRUE:                          Insns.              (line  520)
* REG_EH_REGION, EDGE_ABNORMAL_CALL:     Edges.              (line  109)
* REG_EQUAL:                             Insns.              (line  434)
* REG_EQUIV:                             Insns.              (line  434)
* REG_EXPR:                              Special Accessors.  (line   58)
* REG_FRAME_RELATED_EXPR:                Insns.              (line  547)
* REG_FUNCTION_VALUE_P:                  Flags.              (line   97)
* REG_INC:                               Insns.              (line  396)
* reg_label and /v:                      Flags.              (line   54)
* REG_LABEL_OPERAND:                     Insns.              (line  410)
* REG_LABEL_TARGET:                      Insns.              (line  419)
* reg_names:                             Register Basics.    (line  102)
* reg_names <1>:                         Instruction Output. (line  107)
* REG_NONNEG:                            Insns.              (line  402)
* REG_NOTES:                             Insns.              (line  344)
* REG_NOTE_KIND:                         Insns.              (line  369)
* REG_OFFSET:                            Special Accessors.  (line   62)
* REG_OK_STRICT:                         Addressing Modes.   (line   99)
* REG_PARM_STACK_SPACE:                  Stack Arguments.    (line   58)
* REG_PARM_STACK_SPACE, and TARGET_FUNCTION_ARG: Register Arguments.
                                                             (line   49)
* REG_POINTER:                           Flags.              (line  102)
* REG_SETJMP:                            Insns.              (line  428)
* REG_UNUSED:                            Insns.              (line  389)
* REG_USERVAR_P:                         Flags.              (line  106)
* REG_VALUE_IN_UNWIND_CONTEXT:           Frame Registers.    (line  156)
* REG_WORDS_BIG_ENDIAN:                  Storage Layout.     (line   35)
* relative costs:                        Costs.              (line    6)
* RELATIVE_PREFIX_NOT_LINKDIR:           Driver.             (line  266)
* reloading:                             RTL passes.         (line  170)
* reload_completed:                      Standard Names.     (line 1788)
* reload_in instruction pattern:         Standard Names.     (line   98)
* reload_in_progress:                    Standard Names.     (line   57)
* reload_out instruction pattern:        Standard Names.     (line   98)
* remainder:                             Arithmetic.         (line  136)
* remainderM3 instruction pattern:       Standard Names.     (line  908)
* reorder:                               GTY Options.        (line  175)
* representation of RTL:                 RTL.                (line    6)
* reservation delays:                    Processor pipeline description.
                                                             (line    6)
* restore_stack_block instruction pattern: Standard Names.   (line 1904)
* restore_stack_function instruction pattern: Standard Names.
                                                             (line 1904)
* restore_stack_nonlocal instruction pattern: Standard Names.
                                                             (line 1904)
* rest_of_decl_compilation:              Parsing pass.       (line   51)
* rest_of_type_compilation:              Parsing pass.       (line   51)
* RESULT_DECL:                           Declarations.       (line    6)
* return:                                Side Effects.       (line   72)
* return instruction pattern:            Standard Names.     (line 1762)
* return values in registers:            Scalar Return.      (line    6)
* returning aggregate values:            Aggregate Return.   (line    6)
* returning structures and unions:       Interface.          (line   10)
* RETURN_ADDRESS_POINTER_REGNUM:         Frame Registers.    (line   64)
* RETURN_ADDR_IN_PREVIOUS_FRAME:         Frame Layout.       (line  127)
* RETURN_ADDR_OFFSET:                    Exception Handling. (line   59)
* RETURN_ADDR_RTX:                       Frame Layout.       (line  116)
* RETURN_EXPR:                           Statements for C++. (line    6)
* RETURN_STMT:                           Statements for C++. (line    6)
* return_val:                            Flags.              (line  283)
* return_val, in call_insn:              Flags.              (line  120)
* return_val, in reg:                    Flags.              (line   97)
* return_val, in symbol_ref:             Flags.              (line  216)
* reverse probability:                   Profile information.
                                                             (line   66)
* REVERSE_CONDITION:                     MODE_CC Condition Codes.
                                                             (line   92)
* REVERSIBLE_CC_MODE:                    MODE_CC Condition Codes.
                                                             (line   77)
* right rotate:                          Arithmetic.         (line  195)
* right shift:                           Arithmetic.         (line  190)
* rintM2 instruction pattern:            Standard Names.     (line 1114)
* RISC:                                  Processor pipeline description.
                                                             (line    6)
* RISC <1>:                              Processor pipeline description.
                                                             (line  223)
* roots, marking:                        GGC Roots.          (line    6)
* rotate:                                Arithmetic.         (line  195)
* rotate <1>:                            Arithmetic.         (line  195)
* rotatert:                              Arithmetic.         (line  195)
* rotlM3 instruction pattern:            Standard Names.     (line  840)
* rotrM3 instruction pattern:            Standard Names.     (line  840)
* roundM2 instruction pattern:           Standard Names.     (line 1087)
* ROUND_DIV_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* ROUND_MOD_EXPR:                        Unary and Binary Expressions.
                                                             (line    6)
* ROUND_TYPE_ALIGN:                      Storage Layout.     (line  457)
* RSHIFT_EXPR:                           Unary and Binary Expressions.
                                                             (line    6)
* rsqrtM2 instruction pattern:           Standard Names.     (line  888)
* RTL addition:                          Arithmetic.         (line   14)
* RTL addition with signed saturation:   Arithmetic.         (line   14)
* RTL addition with unsigned saturation: Arithmetic.         (line   14)
* RTL classes:                           RTL Classes.        (line    6)
* RTL comparison:                        Arithmetic.         (line   46)
* RTL comparison operations:             Comparisons.        (line    6)
* RTL constant expression types:         Constants.          (line    6)
* RTL constants:                         Constants.          (line    6)
* RTL declarations:                      RTL Declarations.   (line    6)
* RTL difference:                        Arithmetic.         (line   38)
* RTL expression:                        RTL Objects.        (line    6)
* RTL expressions for arithmetic:        Arithmetic.         (line    6)
* RTL format:                            RTL Classes.        (line   73)
* RTL format characters:                 RTL Classes.        (line   78)
* RTL function-call insns:               Calls.              (line    6)
* RTL insn template:                     RTL Template.       (line    6)
* RTL integers:                          RTL Objects.        (line    6)
* RTL memory expressions:                Regs and Memory.    (line    6)
* RTL object types:                      RTL Objects.        (line    6)
* RTL postdecrement:                     Incdec.             (line    6)
* RTL postincrement:                     Incdec.             (line    6)
* RTL predecrement:                      Incdec.             (line    6)
* RTL preincrement:                      Incdec.             (line    6)
* RTL register expressions:              Regs and Memory.    (line    6)
* RTL representation:                    RTL.                (line    6)
* RTL side effect expressions:           Side Effects.       (line    6)
* RTL strings:                           RTL Objects.        (line    6)
* RTL structure sharing assumptions:     Sharing.            (line    6)
* RTL subtraction:                       Arithmetic.         (line   38)
* RTL subtraction with signed saturation: Arithmetic.        (line   38)
* RTL subtraction with unsigned saturation: Arithmetic.      (line   38)
* RTL sum:                               Arithmetic.         (line   14)
* RTL vectors:                           RTL Objects.        (line    6)
* RTL_CONST_CALL_P:                      Flags.              (line  115)
* RTL_CONST_OR_PURE_CALL_P:              Flags.              (line  125)
* RTL_LOOPING_CONST_OR_PURE_CALL_P:      Flags.              (line  129)
* RTL_PURE_CALL_P:                       Flags.              (line  120)
* RTX (See RTL):                         RTL Objects.        (line    6)
* RTX codes, classes of:                 RTL Classes.        (line    6)
* RTX_FRAME_RELATED_P:                   Flags.              (line  135)
* run-time conventions:                  Interface.          (line    6)
* run-time target specification:         Run-time Target.    (line    6)
* s in constraint:                       Simple Constraints. (line  100)
* SAD_EXPR:                              Vectors.            (line    6)
* same_type_p:                           Types.              (line   86)
* SAmode:                                Machine Modes.      (line  150)
* satfractMN2 instruction pattern:       Standard Names.     (line 1464)
* satfractunsMN2 instruction pattern:    Standard Names.     (line 1477)
* satisfies_constraint_M:                C Constraint Interface.
                                                             (line   36)
* sat_fract:                             Conversions.        (line   90)
* SAVE_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* save_stack_block instruction pattern:  Standard Names.     (line 1904)
* save_stack_function instruction pattern: Standard Names.   (line 1904)
* save_stack_nonlocal instruction pattern: Standard Names.   (line 1904)
* SBSS_SECTION_ASM_OP:                   Sections.           (line   75)
* Scalar evolutions:                     Scalar evolutions.  (line    6)
* scalars, returned as values:           Scalar Return.      (line    6)
* scalar_float_mode:                     Machine Modes.      (line  293)
* scalar_int_mode:                       Machine Modes.      (line  290)
* scalar_mode:                           Machine Modes.      (line  296)
* scalbM3 instruction pattern:           Standard Names.     (line  915)
* scatter_storeMN instruction pattern:   Standard Names.     (line  255)
* SCHED_GROUP_P:                         Flags.              (line  162)
* SCmode:                                Machine Modes.      (line  199)
* scratch:                               Regs and Memory.    (line  320)
* scratch operands:                      Regs and Memory.    (line  320)
* scratch, RTL sharing:                  Sharing.            (line   38)
* scratch_operand:                       Machine-Independent Predicates.
                                                             (line   49)
* SDATA_SECTION_ASM_OP:                  Sections.           (line   57)
* sdiv_pow2M3 instruction pattern:       Standard Names.     (line  614)
* sdiv_pow2M3 instruction pattern <1>:   Standard Names.     (line  615)
* SDmode:                                Machine Modes.      (line   88)
* sdot_prodM instruction pattern:        Standard Names.     (line  569)
* search options:                        Including Patterns. (line   47)
* SECONDARY_INPUT_RELOAD_CLASS:          Register Classes.   (line  391)
* SECONDARY_MEMORY_NEEDED_RTX:           Register Classes.   (line  457)
* SECONDARY_OUTPUT_RELOAD_CLASS:         Register Classes.   (line  392)
* SECONDARY_RELOAD_CLASS:                Register Classes.   (line  390)
* SELECT_CC_MODE:                        MODE_CC Condition Codes.
                                                             (line    6)
* sequence:                              Side Effects.       (line  259)
* Sequence iterators:                    Sequence iterators. (line    6)
* set:                                   Side Effects.       (line   15)
* set and /f:                            Flags.              (line  135)
* setmemM instruction pattern:           Standard Names.     (line 1328)
* SETUP_FRAME_ADDRESSES:                 Frame Layout.       (line   94)
* SET_ASM_OP:                            Label Output.       (line  451)
* SET_ASM_OP <1>:                        Label Output.       (line  462)
* set_attr:                              Tagging Insns.      (line   31)
* set_attr_alternative:                  Tagging Insns.      (line   49)
* set_bb_seq:                            GIMPLE sequences.   (line   75)
* SET_DEST:                              Side Effects.       (line   69)
* SET_IS_RETURN_P:                       Flags.              (line  171)
* SET_LABEL_KIND:                        Insns.              (line  146)
* set_optab_libfunc:                     Library Calls.      (line   15)
* SET_RATIO:                             Costs.              (line  237)
* SET_SRC:                               Side Effects.       (line   69)
* set_thread_pointerMODE instruction pattern: Standard Names.
                                                             (line 2477)
* SET_TYPE_STRUCTURAL_EQUALITY:          Types.              (line    6)
* SET_TYPE_STRUCTURAL_EQUALITY <1>:      Types.              (line   81)
* SFmode:                                Machine Modes.      (line   69)
* sharing of RTL components:             Sharing.            (line    6)
* shift:                                 Arithmetic.         (line  173)
* SHIFT_COUNT_TRUNCATED:                 Misc.               (line  134)
* SHLIB_SUFFIX:                          Macros for Initialization.
                                                             (line  133)
* SHORT_ACCUM_TYPE_SIZE:                 Type Layout.        (line   82)
* SHORT_FRACT_TYPE_SIZE:                 Type Layout.        (line   62)
* SHORT_IMMEDIATES_SIGN_EXTEND:          Misc.               (line  108)
* SHORT_TYPE_SIZE:                       Type Layout.        (line   15)
* shrink-wrapping separate components:   Shrink-wrapping separate components.
                                                             (line    6)
* sibcall_epilogue instruction pattern:  Standard Names.     (line 2111)
* sibling call:                          Edges.              (line  121)
* SIBLING_CALL_P:                        Flags.              (line  175)
* signal-to-noise ratio (metaphorical usage for diagnostics): Guidelines for Diagnostics.
                                                             (line   39)
* signed division:                       Arithmetic.         (line  116)
* signed division with signed saturation: Arithmetic.        (line  116)
* signed maximum:                        Arithmetic.         (line  141)
* signed minimum:                        Arithmetic.         (line  141)
* significandM2 instruction pattern:     Standard Names.     (line 1047)
* sign_extend:                           Conversions.        (line   23)
* sign_extract:                          Bit-Fields.         (line    8)
* sign_extract, canonicalization of:     Insn Canonicalizations.
                                                             (line  103)
* SIG_ATOMIC_TYPE:                       Type Layout.        (line  208)
* SImode:                                Machine Modes.      (line   37)
* simple constraints:                    Simple Constraints. (line    6)
* simple_return:                         Side Effects.       (line   86)
* simple_return instruction pattern:     Standard Names.     (line 1777)
* sincosM3 instruction pattern:          Standard Names.     (line  943)
* sinM2 instruction pattern:             Standard Names.     (line  937)
* SIZETYPE:                              Type Layout.        (line  147)
* SIZE_ASM_OP:                           Label Output.       (line   33)
* SIZE_TYPE:                             Type Layout.        (line  131)
* skip:                                  GTY Options.        (line   76)
* SLOW_BYTE_ACCESS:                      Costs.              (line  117)
* small IPA passes:                      Small IPA passes.   (line    6)
* smax:                                  Arithmetic.         (line  141)
* smin:                                  Arithmetic.         (line  141)
* sms, swing, software pipelining:       RTL passes.         (line  123)
* smulhrsM3 instruction pattern:         Standard Names.     (line  604)
* smulhsM3 instruction pattern:          Standard Names.     (line  594)
* smulM3_highpart instruction pattern:   Standard Names.     (line  753)
* soft float library:                    Soft float library routines.
                                                             (line    6)
* source code, location information:     Guidelines for Diagnostics.
                                                             (line  159)
* special:                               GTY Options.        (line  238)
* special predicates:                    Predicates.         (line   31)
* SPECS:                                 Target Fragment.    (line  194)
* speculation_barrier instruction pattern: Standard Names.   (line 2178)
* speed of instructions:                 Costs.              (line    6)
* splitting instructions:                Insn Splitting.     (line    6)
* split_block:                           Maintaining the CFG.
                                                             (line   96)
* SQmode:                                Machine Modes.      (line  114)
* sqrt:                                  Arithmetic.         (line  206)
* sqrtM2 instruction pattern:            Standard Names.     (line  882)
* square root:                           Arithmetic.         (line  206)
* SSA:                                   SSA.                (line    6)
* ssaddM3 instruction pattern:           Standard Names.     (line  442)
* ssadM instruction pattern:             Standard Names.     (line  578)
* ssashlM3 instruction pattern:          Standard Names.     (line  828)
* SSA_NAME_DEF_STMT:                     SSA.                (line  184)
* SSA_NAME_VERSION:                      SSA.                (line  189)
* ssdivM3 instruction pattern:           Standard Names.     (line  442)
* ssmaddMN4 instruction pattern:         Standard Names.     (line  776)
* ssmsubMN4 instruction pattern:         Standard Names.     (line  800)
* ssmulM3 instruction pattern:           Standard Names.     (line  442)
* ssnegM2 instruction pattern:           Standard Names.     (line  872)
* sssubM3 instruction pattern:           Standard Names.     (line  442)
* ss_abs:                                Arithmetic.         (line  200)
* ss_ashift:                             Arithmetic.         (line  173)
* ss_div:                                Arithmetic.         (line  116)
* ss_minus:                              Arithmetic.         (line   38)
* ss_mult:                               Arithmetic.         (line   93)
* ss_neg:                                Arithmetic.         (line   82)
* ss_plus:                               Arithmetic.         (line   14)
* ss_truncate:                           Conversions.        (line   43)
* stack arguments:                       Stack Arguments.    (line    6)
* stack frame layout:                    Frame Layout.       (line    6)
* stack smashing protection:             Stack Smashing Protection.
                                                             (line    6)
* STACK_ALIGNMENT_NEEDED:                Frame Layout.       (line   41)
* STACK_BOUNDARY:                        Storage Layout.     (line  156)
* STACK_CHECK_BUILTIN:                   Stack Checking.     (line   31)
* STACK_CHECK_FIXED_FRAME_SIZE:          Stack Checking.     (line   83)
* STACK_CHECK_MAX_FRAME_SIZE:            Stack Checking.     (line   74)
* STACK_CHECK_MAX_VAR_SIZE:              Stack Checking.     (line   90)
* STACK_CHECK_MOVING_SP:                 Stack Checking.     (line   53)
* STACK_CHECK_PROBE_INTERVAL_EXP:        Stack Checking.     (line   45)
* STACK_CHECK_PROTECT:                   Stack Checking.     (line   62)
* STACK_CHECK_STATIC_BUILTIN:            Stack Checking.     (line   38)
* STACK_DYNAMIC_OFFSET:                  Frame Layout.       (line   67)
* STACK_DYNAMIC_OFFSET and virtual registers: Regs and Memory.
                                                             (line   83)
* STACK_GROWS_DOWNWARD:                  Frame Layout.       (line    8)
* STACK_PARMS_IN_REG_PARM_AREA:          Stack Arguments.    (line   89)
* STACK_POINTER_OFFSET:                  Frame Layout.       (line   51)
* STACK_POINTER_OFFSET and virtual registers: Regs and Memory.
                                                             (line   93)
* STACK_POINTER_REGNUM:                  Frame Registers.    (line    8)
* STACK_POINTER_REGNUM and virtual registers: Regs and Memory.
                                                             (line   83)
* stack_pointer_rtx:                     Frame Registers.    (line  104)
* stack_protect_combined_set instruction pattern: Standard Names.
                                                             (line 2487)
* stack_protect_combined_test instruction pattern: Standard Names.
                                                             (line 2517)
* stack_protect_set instruction pattern: Standard Names.     (line 2503)
* stack_protect_test instruction pattern: Standard Names.    (line 2534)
* STACK_PUSH_CODE:                       Frame Layout.       (line   12)
* STACK_REGS:                            Stack Registers.    (line   19)
* STACK_REG_COVER_CLASS:                 Stack Registers.    (line   22)
* STACK_SAVEAREA_MODE:                   Storage Layout.     (line  473)
* STACK_SIZE_MODE:                       Storage Layout.     (line  484)
* STACK_SLOT_ALIGNMENT:                  Storage Layout.     (line  305)
* standard pattern names:                Standard Names.     (line    6)
* STANDARD_STARTFILE_PREFIX:             Driver.             (line  278)
* STANDARD_STARTFILE_PREFIX_1:           Driver.             (line  285)
* STANDARD_STARTFILE_PREFIX_2:           Driver.             (line  292)
* STARTFILE_SPEC:                        Driver.             (line  147)
* Statement and operand traversals:      Statement and operand traversals.
                                                             (line    6)
* Statement Sequences:                   Statement Sequences.
                                                             (line    6)
* Statements:                            Statements.         (line    6)
* statements:                            Function Properties.
                                                             (line    6)
* statements <1>:                        Statements for C++. (line    6)
* static analysis:                       Static Analyzer.    (line    6)
* static analyzer:                       Static Analyzer.    (line    6)
* static analyzer, debugging:            Debugging the Analyzer.
                                                             (line    5)
* static analyzer, internals:            Analyzer Internals. (line    5)
* Static profile estimation:             Profile information.
                                                             (line   24)
* static single assignment:              SSA.                (line    6)
* STATIC_CHAIN_INCOMING_REGNUM:          Frame Registers.    (line   77)
* STATIC_CHAIN_REGNUM:                   Frame Registers.    (line   76)
* stdarg.h and register arguments:       Register Arguments. (line   44)
* STDC_0_IN_SYSTEM_HEADERS:              Misc.               (line  384)
* STMT_EXPR:                             Unary and Binary Expressions.
                                                             (line    6)
* STMT_IS_FULL_EXPR_P:                   Statements for C++. (line   22)
* storage layout:                        Storage Layout.     (line    6)
* STORE_FLAG_VALUE:                      Misc.               (line  235)
* STORE_MAX_PIECES:                      Costs.              (line  215)
* store_multiple instruction pattern:    Standard Names.     (line  159)
* strcpy:                                Storage Layout.     (line  258)
* STRICT_ALIGNMENT:                      Storage Layout.     (line  355)
* strict_low_part:                       RTL Declarations.   (line    9)
* strict_memory_address_p:               Addressing Modes.   (line  186)
* STRING_CST:                            Constant expressions.
                                                             (line    6)
* STRING_POOL_ADDRESS_P:                 Flags.              (line  179)
* strlenM instruction pattern:           Standard Names.     (line 1399)
* structure value address:               Aggregate Return.   (line    6)
* structures, returning:                 Interface.          (line   10)
* STRUCTURE_SIZE_BOUNDARY:               Storage Layout.     (line  347)
* subM3 instruction pattern:             Standard Names.     (line  442)
* SUBOBJECT:                             Statements for C++. (line    6)
* SUBOBJECT_CLEANUP:                     Statements for C++. (line    6)
* subreg:                                Regs and Memory.    (line   97)
* subreg and /s:                         Flags.              (line  201)
* subreg and /u:                         Flags.              (line  194)
* subreg and /u and /v:                  Flags.              (line  184)
* subreg, in strict_low_part:            RTL Declarations.   (line    9)
* SUBREG_BYTE:                           Regs and Memory.    (line  311)
* SUBREG_PROMOTED_UNSIGNED_P:            Flags.              (line  184)
* SUBREG_PROMOTED_UNSIGNED_SET:          Flags.              (line  194)
* SUBREG_PROMOTED_VAR_P:                 Flags.              (line  201)
* SUBREG_REG:                            Regs and Memory.    (line  311)
* subst iterators in .md files:          Subst Iterators.    (line    6)
* subvM4 instruction pattern:            Standard Names.     (line  458)
* SUCCESS_EXIT_CODE:                     Host Misc.          (line   12)
* support for nested functions:          Trampolines.        (line    6)
* SUPPORTS_INIT_PRIORITY:                Macros for Initialization.
                                                             (line   57)
* SUPPORTS_ONE_ONLY:                     Label Output.       (line  290)
* SUPPORTS_WEAK:                         Label Output.       (line  264)
* SWITCHABLE_TARGET:                     Run-time Target.    (line  160)
* SWITCH_BODY:                           Statements for C++. (line    6)
* SWITCH_COND:                           Statements for C++. (line    6)
* SWITCH_STMT:                           Statements for C++. (line    6)
* symbolic label:                        Sharing.            (line   20)
* SYMBOL_FLAG_ANCHOR:                    Special Accessors.  (line  117)
* SYMBOL_FLAG_EXTERNAL:                  Special Accessors.  (line   99)
* SYMBOL_FLAG_FUNCTION:                  Special Accessors.  (line   92)
* SYMBOL_FLAG_HAS_BLOCK_INFO:            Special Accessors.  (line  113)
* SYMBOL_FLAG_LOCAL:                     Special Accessors.  (line   95)
* SYMBOL_FLAG_SMALL:                     Special Accessors.  (line  104)
* SYMBOL_FLAG_TLS_SHIFT:                 Special Accessors.  (line  108)
* symbol_ref:                            Constants.          (line  189)
* symbol_ref and /f:                     Flags.              (line  179)
* symbol_ref and /i:                     Flags.              (line  216)
* symbol_ref and /u:                     Flags.              (line   19)
* symbol_ref and /v:                     Flags.              (line  220)
* symbol_ref, RTL sharing:               Sharing.            (line   20)
* SYMBOL_REF_ANCHOR_P:                   Special Accessors.  (line  117)
* SYMBOL_REF_BLOCK:                      Special Accessors.  (line  130)
* SYMBOL_REF_BLOCK_OFFSET:               Special Accessors.  (line  135)
* SYMBOL_REF_CONSTANT:                   Special Accessors.  (line   78)
* SYMBOL_REF_DATA:                       Special Accessors.  (line   82)
* SYMBOL_REF_DECL:                       Special Accessors.  (line   67)
* SYMBOL_REF_EXTERNAL_P:                 Special Accessors.  (line   99)
* SYMBOL_REF_FLAG:                       Flags.              (line  220)
* SYMBOL_REF_FLAG, in TARGET_ENCODE_SECTION_INFO: Sections.  (line  289)
* SYMBOL_REF_FLAGS:                      Special Accessors.  (line   86)
* SYMBOL_REF_FUNCTION_P:                 Special Accessors.  (line   92)
* SYMBOL_REF_HAS_BLOCK_INFO_P:           Special Accessors.  (line  113)
* SYMBOL_REF_LOCAL_P:                    Special Accessors.  (line   95)
* SYMBOL_REF_SMALL_P:                    Special Accessors.  (line  104)
* SYMBOL_REF_TLS_MODEL:                  Special Accessors.  (line  108)
* SYMBOL_REF_USED:                       Flags.              (line  211)
* SYMBOL_REF_WEAK:                       Flags.              (line  216)
* sync_addMODE instruction pattern:      Standard Names.     (line 2232)
* sync_andMODE instruction pattern:      Standard Names.     (line 2232)
* sync_compare_and_swapMODE instruction pattern: Standard Names.
                                                             (line 2192)
* sync_iorMODE instruction pattern:      Standard Names.     (line 2232)
* sync_lock_releaseMODE instruction pattern: Standard Names. (line 2297)
* sync_lock_test_and_setMODE instruction pattern: Standard Names.
                                                             (line 2271)
* sync_nandMODE instruction pattern:     Standard Names.     (line 2232)
* sync_new_addMODE instruction pattern:  Standard Names.     (line 2264)
* sync_new_andMODE instruction pattern:  Standard Names.     (line 2264)
* sync_new_iorMODE instruction pattern:  Standard Names.     (line 2264)
* sync_new_nandMODE instruction pattern: Standard Names.     (line 2264)
* sync_new_subMODE instruction pattern:  Standard Names.     (line 2264)
* sync_new_xorMODE instruction pattern:  Standard Names.     (line 2264)
* sync_old_addMODE instruction pattern:  Standard Names.     (line 2247)
* sync_old_andMODE instruction pattern:  Standard Names.     (line 2247)
* sync_old_iorMODE instruction pattern:  Standard Names.     (line 2247)
* sync_old_nandMODE instruction pattern: Standard Names.     (line 2247)
* sync_old_subMODE instruction pattern:  Standard Names.     (line 2247)
* sync_old_xorMODE instruction pattern:  Standard Names.     (line 2247)
* sync_subMODE instruction pattern:      Standard Names.     (line 2232)
* sync_xorMODE instruction pattern:      Standard Names.     (line 2232)
* SYSROOT_HEADERS_SUFFIX_SPEC:           Driver.             (line  176)
* SYSROOT_SUFFIX_SPEC:                   Driver.             (line  171)
* SYSTEM_IMPLICIT_EXTERN_C:              Misc.               (line  415)
* t-TARGET:                              Target Fragment.    (line    6)
* table jump:                            Basic Blocks.       (line   67)
* tablejump instruction pattern:         Standard Names.     (line 1850)
* tag:                                   GTY Options.        (line   90)
* tagging insns:                         Tagging Insns.      (line    6)
* tail calls:                            Tail Calls.         (line    6)
* TAmode:                                Machine Modes.      (line  158)
* tanM2 instruction pattern:             Standard Names.     (line  954)
* target attributes:                     Target Attributes.  (line    6)
* target description macros:             Target Macros.      (line    6)
* target functions:                      Target Structure.   (line    6)
* target hooks:                          Target Structure.   (line    6)
* target makefile fragment:              Target Fragment.    (line    6)
* target specifications:                 Run-time Target.    (line    6)
* targetm:                               Target Structure.   (line    6)
* targets, makefile:                     Makefile.           (line    6)
* TARGET_ABSOLUTE_BIGGEST_ALIGNMENT:     Storage Layout.     (line  185)
* TARGET_ADDITIONAL_ALLOCNO_CLASS_P:     Register Classes.   (line  639)
* TARGET_ADDRESS_COST:                   Costs.              (line  344)
* TARGET_ADDR_SPACE_ADDRESS_MODE:        Named Address Spaces.
                                                             (line   42)
* TARGET_ADDR_SPACE_CONVERT:             Named Address Spaces.
                                                             (line   89)
* TARGET_ADDR_SPACE_DEBUG:               Named Address Spaces.
                                                             (line   99)
* TARGET_ADDR_SPACE_DIAGNOSE_USAGE:      Named Address Spaces.
                                                             (line  103)
* TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P: Named Address Spaces.
                                                             (line   59)
* TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS:  Named Address Spaces.
                                                             (line   67)
* TARGET_ADDR_SPACE_POINTER_MODE:        Named Address Spaces.
                                                             (line   36)
* TARGET_ADDR_SPACE_SUBSET_P:            Named Address Spaces.
                                                             (line   74)
* TARGET_ADDR_SPACE_VALID_POINTER_MODE:  Named Address Spaces.
                                                             (line   48)
* TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID:  Named Address Spaces.
                                                             (line   83)
* TARGET_ALIGN_ANON_BITFIELD:            Storage Layout.     (line  432)
* TARGET_ALLOCATE_INITIAL_VALUE:         Misc.               (line  807)
* TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS:  Misc.               (line 1064)
* TARGET_ALWAYS_STRIP_DOTDOT:            Driver.             (line  250)
* TARGET_ARG_PARTIAL_BYTES:              Register Arguments. (line   92)
* TARGET_ARM_EABI_UNWINDER:              Exception Region Output.
                                                             (line  133)
* TARGET_ARRAY_MODE:                     Register Arguments. (line  373)
* TARGET_ARRAY_MODE_SUPPORTED_P:         Register Arguments. (line  388)
* TARGET_ASAN_SHADOW_OFFSET:             Misc.               (line 1092)
* TARGET_ASM_ALIGNED_DI_OP:              Data Output.        (line   11)
* TARGET_ASM_ALIGNED_HI_OP:              Data Output.        (line    7)
* TARGET_ASM_ALIGNED_PDI_OP:             Data Output.        (line   10)
* TARGET_ASM_ALIGNED_PSI_OP:             Data Output.        (line    8)
* TARGET_ASM_ALIGNED_PTI_OP:             Data Output.        (line   12)
* TARGET_ASM_ALIGNED_SI_OP:              Data Output.        (line    9)
* TARGET_ASM_ALIGNED_TI_OP:              Data Output.        (line   13)
* TARGET_ASM_ASSEMBLE_UNDEFINED_DECL:    Label Output.       (line  231)
* TARGET_ASM_ASSEMBLE_VISIBILITY:        Label Output.       (line  301)
* TARGET_ASM_BYTE_OP:                    Data Output.        (line    6)
* TARGET_ASM_CAN_OUTPUT_MI_THUNK:        Function Entry.     (line  209)
* TARGET_ASM_CLOSE_PAREN:                Data Output.        (line  139)
* TARGET_ASM_CODE_END:                   File Framework.     (line   57)
* TARGET_ASM_CONSTRUCTOR:                Macros for Initialization.
                                                             (line   68)
* TARGET_ASM_DECLARE_CONSTANT_NAME:      Label Output.       (line  177)
* TARGET_ASM_DECL_END:                   Data Output.        (line   44)
* TARGET_ASM_DESTRUCTOR:                 Macros for Initialization.
                                                             (line   82)
* TARGET_ASM_ELF_FLAGS_NUMERIC:          File Framework.     (line  120)
* TARGET_ASM_EMIT_EXCEPT_PERSONALITY:    Dispatch Tables.    (line   89)
* TARGET_ASM_EMIT_EXCEPT_TABLE_LABEL:    Dispatch Tables.    (line   82)
* TARGET_ASM_EMIT_UNWIND_LABEL:          Dispatch Tables.    (line   70)
* TARGET_ASM_EXTERNAL_LIBCALL:           Label Output.       (line  337)
* TARGET_ASM_FILE_END:                   File Framework.     (line   35)
* TARGET_ASM_FILE_START:                 File Framework.     (line    8)
* TARGET_ASM_FILE_START_APP_OFF:         File Framework.     (line   16)
* TARGET_ASM_FILE_START_FILE_DIRECTIVE:  File Framework.     (line   29)
* TARGET_ASM_FINAL_POSTSCAN_INSN:        Instruction Output. (line   82)
* TARGET_ASM_FUNCTION_BEGIN_EPILOGUE:    Function Entry.     (line   67)
* TARGET_ASM_FUNCTION_END_PROLOGUE:      Function Entry.     (line   61)
* TARGET_ASM_FUNCTION_EPILOGUE:          Function Entry.     (line   73)
* TARGET_ASM_FUNCTION_PROLOGUE:          Function Entry.     (line   18)
* TARGET_ASM_FUNCTION_RODATA_SECTION:    Sections.           (line  225)
* TARGET_ASM_FUNCTION_SECTION:           File Framework.     (line  132)
* TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS: File Framework.
                                                             (line  142)
* TARGET_ASM_GENERATE_PIC_ADDR_DIFF_VEC: Sections.           (line  184)
* TARGET_ASM_GLOBALIZE_DECL_NAME:        Label Output.       (line  222)
* TARGET_ASM_GLOBALIZE_LABEL:            Label Output.       (line  213)
* TARGET_ASM_INIT_SECTIONS:              Sections.           (line  164)
* TARGET_ASM_INTEGER:                    Data Output.        (line   31)
* TARGET_ASM_INTERNAL_LABEL:             Label Output.       (line  380)
* TARGET_ASM_LTO_END:                    File Framework.     (line   52)
* TARGET_ASM_LTO_START:                  File Framework.     (line   47)
* TARGET_ASM_MARK_DECL_PRESERVED:        Label Output.       (line  343)
* TARGET_ASM_MERGEABLE_RODATA_PREFIX:    Sections.           (line  233)
* TARGET_ASM_NAMED_SECTION:              File Framework.     (line  112)
* TARGET_ASM_OPEN_PAREN:                 Data Output.        (line  138)
* TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA:    Data Output.        (line   48)
* TARGET_ASM_OUTPUT_ANCHOR:              Anchored Addresses. (line   42)
* TARGET_ASM_OUTPUT_DWARF_DTPREL:        DWARF.              (line  121)
* TARGET_ASM_OUTPUT_IDENT:               File Framework.     (line   99)
* TARGET_ASM_OUTPUT_MI_THUNK:            Function Entry.     (line  167)
* TARGET_ASM_OUTPUT_SOURCE_FILENAME:     File Framework.     (line   91)
* TARGET_ASM_POST_CFI_STARTPROC:         Dispatch Tables.    (line   61)
* TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY: Function Entry. (line    9)
* TARGET_ASM_RECORD_GCC_SWITCHES:        File Framework.     (line  173)
* TARGET_ASM_RECORD_GCC_SWITCHES_SECTION: File Framework.    (line  218)
* TARGET_ASM_RELOC_RW_MASK:              Sections.           (line  173)
* TARGET_ASM_SELECT_RTX_SECTION:         Sections.           (line  242)
* TARGET_ASM_SELECT_SECTION:             Sections.           (line  191)
* TARGET_ASM_TM_CLONE_TABLE_SECTION:     Sections.           (line  238)
* TARGET_ASM_TRAMPOLINE_TEMPLATE:        Trampolines.        (line   81)
* TARGET_ASM_TTYPE:                      Exception Region Output.
                                                             (line  127)
* TARGET_ASM_UNALIGNED_DI_OP:            Data Output.        (line   18)
* TARGET_ASM_UNALIGNED_HI_OP:            Data Output.        (line   14)
* TARGET_ASM_UNALIGNED_PDI_OP:           Data Output.        (line   17)
* TARGET_ASM_UNALIGNED_PSI_OP:           Data Output.        (line   15)
* TARGET_ASM_UNALIGNED_PTI_OP:           Data Output.        (line   19)
* TARGET_ASM_UNALIGNED_SI_OP:            Data Output.        (line   16)
* TARGET_ASM_UNALIGNED_TI_OP:            Data Output.        (line   20)
* TARGET_ASM_UNIQUE_SECTION:             Sections.           (line  213)
* TARGET_ASM_UNWIND_EMIT:                Dispatch Tables.    (line   96)
* TARGET_ASM_UNWIND_EMIT_BEFORE_INSN:    Dispatch Tables.    (line  102)
* TARGET_ATOMIC_ALIGN_FOR_MODE:          Misc.               (line 1111)
* TARGET_ATOMIC_ASSIGN_EXPAND_FENV:      Misc.               (line 1117)
* TARGET_ATOMIC_TEST_AND_SET_TRUEVAL:    Misc.               (line 1102)
* TARGET_ATTRIBUTE_TABLE:                Target Attributes.  (line   10)
* TARGET_ATTRIBUTE_TAKES_IDENTIFIER_P:   Target Attributes.  (line   17)
* TARGET_BINDS_LOCAL_P:                  Sections.           (line  320)
* TARGET_BUILD_BUILTIN_VA_LIST:          Register Arguments. (line  281)
* TARGET_BUILTIN_DECL:                   Misc.               (line  637)
* TARGET_BUILTIN_RECIPROCAL:             Addressing Modes.   (line  261)
* TARGET_BUILTIN_SETJMP_FRAME_VALUE:     Frame Layout.       (line  101)
* TARGET_CALLEE_COPIES:                  Register Arguments. (line  124)
* TARGET_CALL_ARGS:                      Varargs.            (line  123)
* TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS: Miscellaneous Register Hooks.
                                                             (line    6)
* TARGET_CANNOT_FORCE_CONST_MEM:         Addressing Modes.   (line  234)
* TARGET_CANNOT_MODIFY_JUMPS_P:          Misc.               (line  871)
* TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P:  Register Classes.   (line  610)
* TARGET_CANONICALIZE_COMPARISON:        MODE_CC Condition Codes.
                                                             (line   55)
* TARGET_CANONICAL_VA_LIST_TYPE:         Register Arguments. (line  302)
* TARGET_CAN_CHANGE_MODE_CLASS:          Register Classes.   (line  543)
* TARGET_CAN_CHANGE_MODE_CLASS and subreg semantics: Regs and Memory.
                                                             (line  294)
* TARGET_CAN_ELIMINATE:                  Elimination.        (line   58)
* TARGET_CAN_FOLLOW_JUMP:                Misc.               (line  793)
* TARGET_CAN_INLINE_P:                   Target Attributes.  (line  173)
* TARGET_CAN_USE_DOLOOP_P:               Misc.               (line  757)
* TARGET_CASE_VALUES_THRESHOLD:          Misc.               (line   46)
* TARGET_CC_MODES_COMPATIBLE:            MODE_CC Condition Codes.
                                                             (line  120)
* TARGET_CHECK_BUILTIN_CALL:             Misc.               (line  669)
vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
