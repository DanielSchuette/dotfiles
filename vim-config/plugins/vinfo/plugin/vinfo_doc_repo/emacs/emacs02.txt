     Terminate 'save-some-buffers' without any more saving.
'.'
     Save this buffer, then exit 'save-some-buffers' without even asking
     about other buffers.
'C-r'
     View the buffer that you are currently being asked about.  When you
     exit View mode, you get back to 'save-some-buffers', which asks the
     question again.
'C-f'
     Exit 'save-some-buffers' and visit the buffer that you are
     currently being asked about.
'd'
     Diff the buffer against its corresponding file, so you can see what
     changes you would be saving.  This calls the command
     'diff-buffer-with-file' (*note Comparing Files::).
'C-h'
     Display a help message about these options.

You can customize the value of 'save-some-buffers-default-predicate' to
control which buffers Emacs will ask about.

   'C-x C-c', the key sequence to exit Emacs, invokes
'save-some-buffers' and therefore asks the same questions.

   If you have changed a buffer but do not wish to save the changes, you
should take some action to prevent it.  Otherwise, each time you use
'C-x s' or 'C-x C-c', you are liable to save this buffer by mistake.
One thing you can do is type 'M-~' ('not-modified'), which clears out
the indication that the buffer is modified.  If you do this, none of the
save commands will believe that the buffer needs to be saved.  ('~' is
often used as a mathematical symbol for "not"; thus 'M-~' is "not",
metafied.)  Alternatively, you can cancel all the changes made since the
file was visited or saved, by reading the text from the file again.
This is called "reverting".  *Note Reverting::.  (You could also undo
all the changes by repeating the undo command 'C-x u' until you have
undone all the changes; but reverting is easier.)

   'M-x set-visited-file-name' alters the name of the file that the
current buffer is visiting.  It reads the new file name using the
minibuffer.  Then it marks the buffer as visiting that file name, and
changes the buffer name correspondingly.  'set-visited-file-name' does
not save the buffer in the newly visited file; it just alters the
records inside Emacs in case you do save later.  It also marks the
buffer as modified so that 'C-x C-s' in that buffer _will_ save.

   If you wish to mark the buffer as visiting a different file and save
it right away, use 'C-x C-w' ('write-file').  This is equivalent to
'set-visited-file-name' followed by 'C-x C-s', except that 'C-x C-w'
asks for confirmation if the file exists.  'C-x C-s' used on a buffer
that is not visiting a file has the same effect as 'C-x C-w'; that is,
it reads a file name, marks the buffer as visiting that file, and saves
it there.  The default file name in a buffer that is not visiting a file
is made by combining the buffer name with the buffer's default directory
(*note File Names::).

   If the new file name implies a major mode, then 'C-x C-w' switches to
that major mode, in most cases.  The command 'set-visited-file-name'
also does this.  *Note Choosing Modes::.

   If Emacs is about to save a file and sees that the date of the latest
version on disk does not match what Emacs last read or wrote, Emacs
notifies you of this fact, because it probably indicates a problem
caused by simultaneous editing and requires your immediate attention.
*Note Simultaneous Editing: Interlocking.

==============================================================================
File: emacs.info,  Node: |Backup|,  Next: |Customize_Save|,  Prev: |Save_Commands|,  Up: |Saving|
==============================================================================

                                                                        *Backup*

18.3.2 Backup Files
-------------------

On most operating systems, rewriting a file automatically destroys all
record of what the file used to contain.  Thus, saving a file from Emacs
throws away the old contents of the file--or it would, except that Emacs
carefully copies the old contents to another file, called the "backup"
file, before actually saving.

   Emacs makes a backup for a file only the first time the file is saved
from a buffer.  No matter how many times you subsequently save the file,
its backup remains unchanged.  However, if you kill the buffer and then
visit the file again, a new backup file will be made.

   For most files, the variable 'make-backup-files' determines whether
to make backup files.  On most operating systems, its default value is
't', so that Emacs does write backup files.

   For files managed by a version control system (*note Version
Control::), the variable 'vc-make-backup-files' determines whether to
make backup files.  By default it is 'nil', since backup files are
redundant when you store all the previous versions in a version control
system.  *Note General VC Options::.

   At your option, Emacs can keep either a single backup for each file,
or make a series of numbered backup files for each file that you edit.
*Note Backup Names::.

   The default value of the 'backup-enable-predicate' variable prevents
backup files being written for files in the directories used for
temporary files, specified by 'temporary-file-directory' or
'small-temporary-file-directory'.

   You can explicitly tell Emacs to make another backup file from a
buffer, even though that buffer has been saved before.  If you save the
buffer with 'C-u C-x C-s', the version thus saved will be made into a
backup file if you save the buffer again.  'C-u C-u C-x C-s' saves the
buffer, but first makes the previous file contents into a new backup
file.  'C-u C-u C-u C-x C-s' does both things: it makes a backup from
the previous contents, and arranges to make another from the newly saved
contents if you save again.

   You can customize the variable 'backup-directory-alist' to specify
that files matching certain patterns should be backed up in specific
directories.  A typical use is to add an element '("." . DIR)' to make
all backups in the directory with absolute name DIR.  Emacs modifies the
backup file names to avoid clashes between files with the same names
originating in different directories.  Alternatively, adding, '("." .
".~")' would make backups in the invisible subdirectory '.~' of the
original file's directory.  Emacs creates the directory, if necessary,
to make the backup.

MENU

* Names: Backup Names.          How backup files are named.
* Deletion: Backup Deletion.    Emacs deletes excess numbered backups.
* Copying: Backup Copying.      Backups can be made by copying or renaming.

==============================================================================
File: emacs.info,  Node: |Backup_Names|,  Next: |Backup_Deletion|,  Up: |Backup|
==============================================================================

                                                                  *Backup_Names*

18.3.2.1 Single or Numbered Backups
.....------------------------------

When Emacs makes a backup file, its name is normally constructed by
appending '~' to the file name being edited; thus, the backup file for
'eval.c' would be 'eval.c~'.

   If access control stops Emacs from writing backup files under the
usual names, it writes the backup file as '~/.emacs.d/%backup%~'.  Only
one such file can exist, so only the most recently made such backup is
available.

   Emacs can also make "numbered backup files".  Numbered backup file
names contain '.~', the number, and another '~' after the original file
name.  Thus, the backup files of 'eval.c' would be called 'eval.c.~1~',
'eval.c.~2~', and so on, all the way through names like 'eval.c.~259~'
and beyond.

   The variable 'version-control' determines whether to make single
backup files or multiple numbered backup files.  Its possible values
are:

'nil'
     Make numbered backups for files that have numbered backups already.
     Otherwise, make single backups.  This is the default.
't'
     Make numbered backups.
'never'
     Never make numbered backups; always make single backups.

The usual way to set this variable is globally, through your init file
or the customization buffer.  However, you can set 'version-control'
locally in an individual buffer to control the making of backups for
that buffer's file (*note Locals::).  You can have Emacs set
'version-control' locally whenever you visit a given file (*note File
Variables::).  Some modes, such as Rmail mode, set this variable.

   If you set the environment variable 'VERSION_CONTROL', to tell
various GNU utilities what to do with backup files, Emacs also obeys the
environment variable by setting the Lisp variable 'version-control'
accordingly at startup.  If the environment variable's value is 't' or
'numbered', then 'version-control' becomes 't'; if the value is 'nil' or
'existing', then 'version-control' becomes 'nil'; if it is 'never' or
'simple', then 'version-control' becomes 'never'.

   If you set the variable 'make-backup-file-name-function' to a
suitable Lisp function, you can override the usual way Emacs constructs
backup file names.

==============================================================================
File: emacs.info,  Node: |Backup_Deletion|,  Next: |Backup_Copying|,  Prev: |Backup_Names|,  Up: |Backup|
==============================================================================

                                                               *Backup_Deletion*

18.3.2.2 Automatic Deletion of Backups
.....---------------------------------

To prevent excessive consumption of disk space, Emacs can delete
numbered backup versions automatically.  Generally Emacs keeps the first
few backups and the latest few backups, deleting any in between.  This
happens every time a new backup is made.

   The two variables 'kept-old-versions' and 'kept-new-versions' control
this deletion.  Their values are, respectively, the number of oldest
(lowest-numbered) backups to keep and the number of newest
(highest-numbered) ones to keep, each time a new backup is made.  The
backups in the middle (excluding those oldest and newest) are the excess
middle versions--those backups are deleted.  These variables' values are
used when it is time to delete excess versions, just after a new backup
version is made; the newly made backup is included in the count in
'kept-new-versions'.  By default, both variables are 2.

   If 'delete-old-versions' is 't', Emacs deletes the excess backup
files silently.  If it is 'nil', the default, Emacs asks you whether it
should delete the excess backup versions.  If it has any other value,
then Emacs never automatically deletes backups.

   Dired's '.' (Period) command can also be used to delete old versions.
*Note Flagging Many Files::.

==============================================================================
File: emacs.info,  Node: |Backup_Copying|,  Prev: |Backup_Deletion|,  Up: |Backup|
==============================================================================

                                                                *Backup_Copying*

18.3.2.3 Copying vs. Renaming
.....------------------------

Backup files can be made by copying the old file or by renaming it.
This makes a difference when the old file has multiple names (hard
links).  If the old file is renamed into the backup file, then the
alternate names become names for the backup file.  If the old file is
copied instead, then the alternate names remain names for the file that
you are editing, and the contents accessed by those names will be the
new contents.

   The method of making a backup file may also affect the file's owner
and group.  If copying is used, these do not change.  If renaming is
used, you become the file's owner, and the file's group becomes the
default (different operating systems have different defaults for the
group).

   The choice of renaming or copying is made as follows:

   * If the variable 'backup-by-copying' is non-'nil' (the default is
     'nil'), use copying.

   * Otherwise, if the variable 'backup-by-copying-when-linked' is
     non-'nil' (the default is 'nil'), and the file has multiple names,
     use copying.

   * Otherwise, if the variable 'backup-by-copying-when-mismatch' is
     non-'nil' (the default is 't'), and renaming would change the
     file's owner or group, use copying.

     If you change 'backup-by-copying-when-mismatch' to 'nil', Emacs
     checks the numeric user-id of the file's owner and the numeric
     group-id of the file's group.  If either is no greater than
     'backup-by-copying-when-privileged-mismatch', then it behaves as
     though 'backup-by-copying-when-mismatch' is non-'nil' anyway.

   * Otherwise, renaming is the default choice.

   When a file is managed with a version control system (*note Version
Control::), Emacs does not normally make backups in the usual way for
that file.  But "committing" (a.k.a. "checking in", *note VCS
Concepts::) new versions of files is similar in some ways to making
backups.  One unfortunate similarity is that these operations typically
break hard links, disconnecting the file name you visited from any
alternate names for the same file.  This has nothing to do with
Emacs--the version control system does it.

==============================================================================
File: emacs.info,  Node: |Customize_Save|,  Next: |Interlocking|,  Prev: |Backup|,  Up: |Saving|
==============================================================================

                                                                *Customize_Save*

18.3.3 Customizing Saving of Files
----------------------------------

If the value of the variable 'require-final-newline' is 't', saving or
writing a file silently puts a newline at the end if there isn't already
one there.  If the value is 'visit', Emacs adds a newline at the end of
any file that doesn't have one, just after it visits the file.  (This
marks the buffer as modified, and you can undo it.)  If the value is
'visit-save', Emacs adds such newlines both on visiting and on saving.
If the value is 'nil', Emacs leaves the end of the file unchanged; any
other non-'nil' value means Emacs asks you whether to add a newline.
The default is 'nil'.

   Some major modes are designed for specific kinds of files that are
always supposed to end in newlines.  Such major modes set the variable
'require-final-newline' to the value of 'mode-require-final-newline',
which defaults to 't'.  By setting the latter variable, you can control
how these modes handle final newlines.

   Normally, when a program writes a file, the operating system briefly
caches the file's data in main memory before committing the data to
disk.  This can greatly improve performance; for example, when running
on laptops, it can avoid a disk spin-up each time a file is written.
However, it risks data loss if the operating system crashes before
committing the cache to disk.

   To lessen this risk, Emacs can invoke the 'fsync' system call after
saving a file.  Using 'fsync' does not eliminate the risk of data loss,
partly because many systems do not implement 'fsync' properly, and
partly because Emacs's file-saving procedure typically relies also on
directory updates that might not survive a crash even if 'fsync' works
properly.

   The 'write-region-inhibit-fsync' variable controls whether Emacs
invokes 'fsync' after saving a file.  The variable's default value is
'nil' when Emacs is interactive, and 't' when Emacs runs in batch mode
(*note Batch Mode: Initial Options.).

   Emacs never uses 'fsync' when writing auto-save files, as these files
might lose data anyway.

==============================================================================
File: emacs.info,  Node: |Interlocking|,  Next: |File_Shadowing|,  Prev: |Customize_Save|,  Up: |Saving|
==============================================================================

                                                                  *Interlocking*

18.3.4 Protection against Simultaneous Editing
----------------------------------------------

Simultaneous editing occurs when two users visit the same file, both
make changes, and then both save them.  If nobody is informed that this
is happening, whichever user saves first would later find that their
changes were lost.

   On some systems, Emacs notices immediately when the second user
starts to change the file, and issues an immediate warning.  On all
systems, Emacs checks when you save the file, and warns if you are about
to overwrite another user's changes.  You can prevent loss of the other
user's work by taking the proper corrective action instead of saving the
file.

   When you make the first modification in an Emacs buffer that is
visiting a file, Emacs records that the file is "locked" by you.  (It
does this by creating a specially-named symbolic link(1) with special
contents in the same directory.  *Note (elisp)File Locks::, for more
details.)  Emacs removes the lock when you save the changes.  The idea
is that the file is locked whenever an Emacs buffer visiting it has
unsaved changes.

   You can prevent the creation of lock files by setting the variable
'create-lockfiles' to 'nil'.  Caution: by doing so you will lose the
benefits that this feature provides.

   If you begin to modify the buffer while the visited file is locked by
someone else, this constitutes a "collision".  When Emacs detects a
collision, it asks you what to do, by calling the Lisp function
'ask-user-about-lock'.  You can redefine this function for the sake of
customization.  The standard definition of this function asks you a
question and accepts three possible answers:

's'
     Steal the lock.  Whoever was already changing the file loses the
     lock, and you gain the lock.
'p'
     Proceed.  Go ahead and edit the file despite its being locked by
     someone else.
'q'
     Quit.  This causes an error ('file-locked'), and the buffer
     contents remain unchanged--the modification you were trying to make
     does not actually take place.

   If Emacs or the operating system crashes, this may leave behind lock
files which are stale, so you may occasionally get warnings about
spurious collisions.  When you determine that the collision is spurious,
just use 'p' to tell Emacs to go ahead anyway.

   Note that locking works on the basis of a file name; if a file has
multiple names, Emacs does not prevent two users from editing it
simultaneously under different names.

   A lock file cannot be written in some circumstances, e.g., if Emacs
lacks the system permissions or cannot create lock files for some other
reason.  In these cases, Emacs can still detect the collision when you
try to save a file, by checking the file's last-modification date.  If
the file has changed since the last time Emacs visited or saved it, that
implies that changes have been made in some other way, and will be lost
if Emacs proceeds with saving.  Emacs then displays a warning message
and asks for confirmation before saving; answer 'yes' to save, and 'no'
or 'C-g' cancel the save.

   If you are notified that simultaneous editing has already taken
place, one way to compare the buffer to its file is the 'M-x
diff-buffer-with-file' command.  *Note Comparing Files::.

   ---------- Footnotes ----------

   (1) If your file system does not support symbolic links, a regular
file is used.

==============================================================================
File: emacs.info,  Node: |File_Shadowing|,  Next: |Time_Stamps|,  Prev: |Interlocking|,  Up: |Saving|
==============================================================================

                                                                *File_Shadowing*

18.3.5 Shadowing Files
----------------------

You can arrange to keep identical "shadow" copies of certain files in
more than one place--possibly on different machines.  To do this, first
you must set up a "shadow file group", which is a set of
identically-named files shared between a list of sites.  The file group
is permanent and applies to further Emacs sessions as well as the
current one.  Once the group is set up, every time you exit Emacs, it
will copy the file you edited to the other files in its group.  You can
also do the copying without exiting Emacs, by typing
'M-x shadow-copy-files'.

   A "shadow cluster" is a group of hosts that share directories, so
that copying to or from one of them is sufficient to update the file on
all of them.  Each shadow cluster has a name, and specifies the network
address of a primary host (the one we copy files to), and a regular
expression that matches the host names of all the other hosts in the
cluster.  You can define a shadow cluster with
'M-x shadow-define-cluster'.

'M-x shadow-initialize'
     Set up file shadowing.
'M-x shadow-define-literal-group'
     Declare a single file to be shared between sites.
'M-x shadow-define-regexp-group'
     Make all files that match each of a group of files be shared
     between hosts.
'M-x shadow-define-cluster <RET> NAME <RET>'
     Define a shadow file cluster NAME.
'M-x shadow-copy-files'
     Copy all pending shadow files.
'M-x shadow-cancel'
     Cancel the instruction to shadow some files.

   To set up a shadow file group, use 'M-x shadow-define-literal-group'
or 'M-x shadow-define-regexp-group'.  See their documentation strings
for further information.

   Before copying a file to its shadows, Emacs asks for confirmation.
You can answer "no" to bypass copying of this file, this time.  If you
want to cancel the shadowing permanently for a certain file, use
'M-x shadow-cancel' to eliminate or change the shadow file group.

   File Shadowing is not available on MS Windows.

==============================================================================
File: emacs.info,  Node: |Time_Stamps|,  Prev: |File_Shadowing|,  Up: |Saving|
==============================================================================

                                                                   *Time_Stamps*

18.3.6 Updating Time Stamps Automatically
-----------------------------------------

You can arrange to put a time stamp in a file, so that it is updated
automatically each time you edit and save the file.  The time stamp must
be in the first eight lines of the file, and you should insert it like
this:

     Time-stamp: <>

or like this:

     Time-stamp: " "

   Then add the function 'time-stamp' to the hook 'before-save-hook'
(*note Hooks::).  When you save the file, this function then
automatically updates the time stamp with the current date and time.
You can also use the command 'M-x time-stamp' to update the time stamp
manually.  By default the time stamp is formatted according to your
locale setting (*note Environment::) and time zone (*note (elisp)Time of
Day::).  For customizations, see the Custom group 'time-stamp'.

==============================================================================
File: emacs.info,  Node: |Reverting|,  Next: |Auto_Revert|,  Prev: |Saving|,  Up: |Files|
==============================================================================

                                                                     *Reverting*

18.4 Reverting a Buffer
=====------------------

If you have made extensive changes to a file-visiting buffer and then
change your mind, you can "revert" the changes and go back to the saved
version of the file.  To do this, type 'M-x revert-buffer'.  Since
reverting unintentionally could lose a lot of work, Emacs asks for
confirmation first.

   The 'revert-buffer' command tries to position point in such a way
that, if the file was edited only slightly, you will be at approximately
the same part of the text as before.  But if you have made major
changes, point may end up in a totally different location.

   Reverting marks the buffer as not modified.  However, it adds the
reverted changes as a single modification to the buffer's undo history
(*note Undo::).  Thus, after reverting, you can type 'C-/' or its
aliases to bring the reverted changes back, if you happen to change your
mind.

   Some kinds of buffers that are not associated with files, such as
Dired buffers, can also be reverted.  For them, reverting means
recalculating their contents.  Buffers created explicitly with 'C-x b'
cannot be reverted; 'revert-buffer' reports an error if you try.

   When you edit a file that changes automatically and frequently--for
example, a log of output from a process that continues to run--it may be
useful for Emacs to revert the file without querying you.  To request
this behavior, set the variable 'revert-without-query' to a list of
regular expressions.  When a file name matches one of these regular
expressions, 'find-file' and 'revert-buffer' will revert it
automatically if it has changed--provided the buffer itself is not
modified.  (If you have edited the text, it would be wrong to discard
your changes.)

   You can also tell Emacs to revert buffers automatically when their
visited files change on disk; *note Auto Revert::.

==============================================================================
File: emacs.info,  Node: |Auto_Revert|,  Next: |Auto_Save|,  Prev: |Reverting|,  Up: |Files|
==============================================================================

                                                                   *Auto_Revert*

18.5 Auto Revert: Keeping buffers automatically up-to-date
=====-----------------------------------------------------

A buffer can get out of sync with respect to its visited file on disk if
that file is changed by another program.  To keep it up to date, you can
enable Auto Revert mode by typing 'M-x auto-revert-mode'.  This
automatically reverts the buffer when its visited file changes on disk.
To do the same for all file buffers, type 'M-x global-auto-revert-mode'
to enable Global Auto Revert mode.

   Auto Revert will not revert a buffer if it has unsaved changes, or if
its file on disk is deleted or renamed.

   One use of Auto Revert mode is to "tail" a file such as a system log,
so that changes made to that file by other programs are continuously
displayed.  To do this, just move the point to the end of the buffer,
and it will stay there as the file contents change.  However, if you are
sure that the file will only change by growing at the end, use Auto
Revert Tail mode instead ('auto-revert-tail-mode').  It is more
efficient for this.  Auto Revert Tail mode also works for remote files.

   When a buffer is auto-reverted, a message is generated.  This can be
suppressed by setting 'auto-revert-verbose' to 'nil'.

   The Auto Revert modes do not check or revert remote files, because
that is usually too slow.  This behavior can be changed by setting the
variable 'auto-revert-remote-files' to non-'nil'.

   By default, Auto Revert mode works using "file notifications",
whereby changes in the filesystem are reported to Emacs by the OS.  You
can disable use of file notifications by customizing the variable
'auto-revert-use-notify' to a 'nil' value, then Emacs will check for
file changes by polling every five seconds.  You can change the polling
interval through the variable 'auto-revert-interval'.

   Not all systems support file notifications; where they are not
supported, 'auto-revert-use-notify' will be 'nil' by default.

   By default, Auto Revert mode will poll files for changes periodically
even when file notifications are used.  Polling is unnecessary in many
cases, and turning it off may save power by relying on notifications
only.  To do so, set the variable 'auto-revert-avoid-polling' to
non-'nil'.  However, notification is ineffective on certain file
systems; mainly network file system on Unix-like machines, where files
can be altered from other machines.  For such file systems, polling may
be necessary.  To force polling when 'auto-revert-avoid-polling' is
non-'nil', set 'auto-revert-notify-exclude-dir-regexp' to match files
that should be excluded from using notification.

   In Dired buffers (*note Dired::), Auto Revert mode refreshes the
buffer when a file is created or deleted in the buffer's directory.

   *Note VC Undo::, for commands to revert to earlier versions of files
under version control.  *Note VC Mode Line::, for Auto Revert
peculiarities when visiting files under version control.

MENU

* |Non_File_Buffers|::    Auto Reverting Non-File Buffers.

==============================================================================
File: emacs.info,  Node: |Non_File_Buffers|,  Up: |Auto_Revert|
==============================================================================

                                                              *Non_File_Buffers*

18.5.1 Auto Reverting Non-File Buffers
--------------------------------------

Global Auto Revert Mode normally only reverts file buffers.  There are
two ways to auto-revert certain non-file buffers: by enabling Auto
Revert Mode in those buffers (using 'M-x auto-revert-mode'); and by
setting 'global-auto-revert-non-file-buffers' to a non-'nil' value.  The
latter enables Auto Reverting for all types of buffers for which it is
implemented (listed in the menu below).

   Like file buffers, non-file buffers should normally not revert while
you are working on them, or while they contain information that might
get lost after reverting.  Therefore, they do not revert if they are
modified.  This can get tricky, because deciding when a non-file buffer
should be marked modified is usually more difficult than for file
buffers.

   Another tricky detail is that, for efficiency reasons, Auto Revert
often does not try to detect all possible changes in the buffer, only
changes that are major or easy to detect.  Hence, enabling
auto-reverting for a non-file buffer does not always guarantee that all
information in the buffer is up-to-date, and does not necessarily make
manual reverts useless.

   At the other extreme, certain buffers automatically revert every
'auto-revert-interval' seconds.  (This currently only applies to the
Buffer Menu.)  In this case, Auto Revert does not print any messages
while reverting, even when 'auto-revert-verbose' is non-'nil'.

   Some non-file buffers can be updated reliably by file notification on
their default directory; Dired buffers is an example.  The major mode
can indicate this by setting 'buffer-auto-revert-by-notification' to a
non-'nil' value in that buffer, allowing Auto Revert to avoid periodic
polling.  Such notification does not include changes to files in that
directory, only to the directory itself.

   The details depend on the particular types of buffers and are
explained in the corresponding sections.

MENU

* |Auto_Reverting_the_Buffer_Menu|:: Auto Revert of the Buffer Menu.
* |Auto_Reverting_Dired|::           Auto Revert of Dired buffers.

==============================================================================
File: emacs.info,  Node: |Auto_Reverting_the_Buffer_Menu|,  Next: |Auto_Reverting_Dired|,  Up: Non-File Buffers
==============================================================================

                                                *Auto_Reverting_the_Buffer_Menu*

18.5.1.1 Auto Reverting the Buffer Menu
.....----------------------------------

If auto-reverting of non-file buffers is enabled, the Buffer Menu (*note
Several Buffers::) automatically reverts every 'auto-revert-interval'
seconds, whether there is a need for it or not.  (It would probably take
longer to check whether there is a need than to actually revert.)

   If the Buffer Menu inappropriately gets marked modified, just revert
it manually using 'g' and auto-reverting will resume.  However, if you
marked certain buffers to get deleted or to be displayed, you have to be
careful, because reverting erases all marks.  The fact that adding marks
sets the buffer's modified flag prevents Auto Revert from automatically
erasing the marks.

==============================================================================
File: emacs.info,  Node: |Auto_Reverting_Dired|,  Prev: |Auto_Reverting_the_Buffer_Menu|,  Up: |Non_File_Buffers|
==============================================================================

                                                          *Auto_Reverting_Dired*

18.5.1.2 Auto Reverting Dired buffers
.....--------------------------------

Dired buffers only auto-revert when the file list of the buffer's main
directory changes (e.g., when a new file is added or deleted).  They do
not auto-revert when information about a particular file changes (e.g.,
when the size changes) or when inserted subdirectories change.  To be
sure that _all_ listed information is up to date, you have to manually
revert using 'g', _even_ if auto-reverting is enabled in the Dired
buffer.  Sometimes, you might get the impression that modifying or
saving files listed in the main directory actually does cause
auto-reverting.  This is because making changes to a file, or saving it,
very often causes changes in the directory itself; for instance, through
backup files or auto-save files.  However, this is not guaranteed.

   If the Dired buffer is marked modified and there are no changes you
want to protect, then most of the time you can make auto-reverting
resume by manually reverting the buffer using 'g'.  There is one
exception.  If you flag or mark files, you can safely revert the buffer.
This will not erase the flags or marks (unless the marked file has been
deleted, of course).  However, the buffer will stay modified, even after
reverting, and auto-reverting will not resume.  This is because, if you
flag or mark files, you may be working on the buffer and you might not
want the buffer to change without warning.  If you want auto-reverting
to resume in the presence of marks and flags, mark the buffer
non-modified using 'M-~'.  However, adding, deleting or changing marks
or flags will mark it modified again.

   Remote Dired buffers are currently not auto-reverted.  Neither are
Dired buffers for which you used shell wildcards or file arguments to
list only some of the files.  'Find' and '*Locate*' buffers do not
auto-revert either.

   Note that auto-reverting Dired buffers may not work satisfactorily on
some systems.

==============================================================================
File: emacs.info,  Node: |Auto_Save|,  Next: |File_Aliases|,  Prev: |Auto_Revert|,  Up: |Files|
==============================================================================

                                                                     *Auto_Save*

18.6 Auto-Saving: Protection Against Disasters
=====-----------------------------------------

From time to time, Emacs automatically saves each visited file in a
separate file, without altering the file you actually use.  This is
called "auto-saving".  It prevents you from losing more than a limited
amount of work if the system crashes.

   When Emacs determines that it is time for auto-saving, it considers
each buffer, and each is auto-saved if auto-saving is enabled for it and
it has been changed since the last time it was auto-saved.  When the
'auto-save-no-message' variable is set to 'nil' (the default), the
message 'Auto-saving...' is displayed in the echo area during
auto-saving, if any files are actually auto-saved; to disable these
messages, customize the variable to a non-'nil' value.  Errors occurring
during auto-saving are caught so that they do not interfere with the
execution of commands you have been typing.

MENU

* Files: Auto Save Files.       The file where auto-saved changes are
                                  actually made until you save the file.
* Control: Auto Save Control.   Controlling when and how often to auto-save.
* |Recover|::                     Recovering text from auto-save files.

==============================================================================
File: emacs.info,  Node: |Auto_Save_Files|,  Next: |Auto_Save_Control|,  Up: |Auto_Save|
==============================================================================

                                                               *Auto_Save_Files*

18.6.1 Auto-Save Files
----------------------

Auto-saving does not normally save in the files that you visited,
because it can be very undesirable to save a change that you did not
want to make permanent.  Instead, auto-saving is done in a different
file called the "auto-save file", and the visited file is changed only
when you request saving explicitly (such as with 'C-x C-s').

   Normally, the auto-save file name is made by appending '#' to the
front and rear of the visited file name.  Thus, a buffer visiting file
'foo.c' is auto-saved in a file '#foo.c#'.  Most buffers that are not
visiting files are auto-saved only if you request it explicitly; when
they are auto-saved, the auto-save file name is made by appending '#' to
the front and rear of buffer name, then adding digits and letters at the
end for uniqueness.  For example, the 'mail' buffer in which you
compose messages to be sent might be auto-saved in a file named
'#mail#704juu'.  Auto-save file names are made this way unless you
reprogram parts of Emacs to do something different (the functions
'make-auto-save-file-name' and 'auto-save-file-name-p').  The file name
to be used for auto-saving in a buffer is calculated when auto-saving is
turned on in that buffer.

   The variable 'auto-save-file-name-transforms' allows a degree of
control over the auto-save file name.  It lets you specify a series of
regular expressions and replacements to transform the auto save file
name.  The default value puts the auto-save files for remote files
(*note Remote Files::) into the temporary file directory on the local
machine.

   When you delete a substantial part of the text in a large buffer,
auto save turns off temporarily in that buffer.  This is because if you
deleted the text unintentionally, you might find the auto-save file more
useful if it contains the deleted text.  To reenable auto-saving after
this happens, save the buffer with 'C-x C-s', or use 'C-u 1 M-x
auto-save-mode'.

   If you want auto-saving to be done in the visited file rather than in
a separate auto-save file, enable the global minor mode
'auto-save-visited-mode'.  In this mode, auto-saving is identical to
explicit saving.  Note that this mode is orthogonal to the 'auto-save'
mode described above; you can enable both at the same time.  However, if
'auto-save' mode is active in some buffer and the obsolete
'auto-save-visited-file-name' variable is set to a non-'nil' value, that
buffer won't be affected by 'auto-save-visited-mode'.

   You can use the variable 'auto-save-visited-interval' to customize
the interval between auto-save operations in 'auto-save-visited-mode';
by default it's five seconds.  'auto-save-interval' and
'auto-save-timeout' have no effect on 'auto-save-visited-mode'.  *Note
Auto Save Control::, for details on these variables.

   A buffer's auto-save file is deleted when you save the buffer in its
visited file.  (You can inhibit this by setting the variable
'delete-auto-save-files' to 'nil'.)  Changing the visited file name with
'C-x C-w' or 'set-visited-file-name' renames any auto-save file to go
with the new visited name.

==============================================================================
File: emacs.info,  Node: |Auto_Save_Control|,  Next: |Recover|,  Prev: |Auto_Save_Files|,  Up: |Auto_Save|
==============================================================================

                                                             *Auto_Save_Control*

18.6.2 Controlling Auto-Saving
------------------------------

Each time you visit a file, auto-saving is turned on for that file's
buffer if the variable 'auto-save-default' is non-'nil' (but not in
batch mode; *note Initial Options::).  The default for this variable is
't', so auto-saving is the usual practice for file-visiting buffers.  To
toggle auto-saving in the current buffer, type 'M-x auto-save-mode'.
Auto Save mode acts as a buffer-local minor mode (*note Minor Modes::).

   Emacs auto-saves periodically based on how many characters you have
typed since the last auto-save.  The variable 'auto-save-interval'
specifies how many characters there are between auto-saves.  By default,
it is 300.  Emacs doesn't accept values that are too small: if you
customize 'auto-save-interval' to a value less than 20, Emacs will
behave as if the value is 20.

   Auto-saving also takes place when you stop typing for a while.  By
default, it does this after 30 seconds of idleness (at this time, Emacs
may also perform garbage collection; *note (elisp)Garbage Collection::).
To change this interval, customize the variable 'auto-save-timeout'.
The actual time period is longer if the current buffer is long; this is
a heuristic which aims to keep out of your way when you are editing long
buffers, in which auto-save takes an appreciable amount of time.
Auto-saving during idle periods accomplishes two things: first, it makes
sure all your work is saved if you go away from the terminal for a
while; second, it may avoid some auto-saving while you are actually
typing.

   When 'auto-save-visited-mode' is enabled, Emacs will auto-save
file-visiting buffers after five seconds of idle time.  You can
customize the variable 'auto-save-visited-interval' to change the idle
time interval.

   Emacs also does auto-saving whenever it gets a fatal error.  This
includes killing the Emacs job with a shell command such as 'kill
%emacs', or disconnecting a phone line or network connection.

   You can perform an auto-save explicitly with the command 'M-x
do-auto-save'.

==============================================================================
File: emacs.info,  Node: |Recover|,  Prev: |Auto_Save_Control|,  Up: |Auto_Save|
==============================================================================

                                                                       *Recover*

18.6.3 Recovering Data from Auto-Saves
--------------------------------------

You can use the contents of an auto-save file to recover from a loss of
data with the command 'M-x recover-file <RET> FILE <RET>'.  This visits
FILE and then (after your confirmation) restores the contents from its
auto-save file '#FILE#'.  You can then save with 'C-x C-s' to put the
recovered text into FILE itself.  For example, to recover file 'foo.c'
from its auto-save file '#foo.c#', do:

     M-x recover-file <RET> foo.c <RET>
     yes <RET>
     C-x C-s

   Before asking for confirmation, 'M-x recover-file' displays a
directory listing describing the specified file and the auto-save file,
so you can compare their sizes and dates.  If the auto-save file is
older, 'M-x recover-file' does not offer to read it.

   If Emacs or the computer crashes, you can recover all the files you
were editing from their auto save files with the command 'M-x
recover-session'.  This first shows you a list of recorded interrupted
sessions.  Move point to the one you choose, and type 'C-c C-c'.

   Then 'recover-session' asks about each of the files that were being
edited during that session, asking whether to recover that file.  If you
answer 'y', it calls 'recover-file', which works in its normal fashion.
It shows the dates of the original file and its auto-save file, and asks
once again whether to recover that file.

   When 'recover-session' is done, the files you've chosen to recover
are present in Emacs buffers.  You should then save them.  Only
this--saving them--updates the files themselves.

   Emacs records information about interrupted sessions in files named
'.saves-PID-HOSTNAME~' in the directory '~/.emacs.d/auto-save-list/'.
This directory is determined by the variable
'auto-save-list-file-prefix'.  If you set 'auto-save-list-file-prefix'
to 'nil', sessions are not recorded for recovery.

==============================================================================
File: emacs.info,  Node: |File_Aliases|,  Next: |Directories|,  Prev: |Auto_Save|,  Up: |Files|
==============================================================================

                                                                  *File_Aliases*

18.7 File Name Aliases
=====-----------------

Symbolic links and hard links both make it possible for several file
names to refer to the same file.  Hard links are alternate names that
refer directly to the file; all the names are equally valid, and no one
of them is preferred.  By contrast, a symbolic link is a kind of defined
alias: when 'foo' is a symbolic link to 'bar', you can use either name
to refer to the file, but 'bar' is the real name, while 'foo' is just an
alias.  More complex cases occur when symbolic links point to
directories.

   Normally, if you visit a file which Emacs is already visiting under a
different name, Emacs displays a message in the echo area and uses the
existing buffer visiting that file.  This can happen on systems that
support hard or symbolic links, or if you use a long file name on a
system that truncates long file names, or on a case-insensitive file
system.  You can suppress the message by setting the variable
'find-file-suppress-same-file-warnings' to a non-'nil' value.  You can
disable this feature entirely by setting the variable
'find-file-existing-other-name' to 'nil': then if you visit the same
file under two different names, you get a separate buffer for each file
name.

   If the variable 'find-file-visit-truename' is non-'nil', then the
file name recorded for a buffer is the file's "truename" (made by
replacing all symbolic links with their target names), rather than the
name you specify.  Setting 'find-file-visit-truename' also implies the
effect of 'find-file-existing-other-name'.

   Sometimes, a directory is ordinarily accessed through a symbolic
link, and you may want Emacs to preferentially show its linked name.  To
do this, customize 'directory-abbrev-alist'.  Each element in this list
should have the form '(FROM . TO)', which means to replace FROM with TO
whenever FROM appears in a directory name.  The FROM string is a regular
expression (*note Regexps::).  It is matched against directory names
anchored at the first character, and should start with '\`' (to support
directory names with embedded newlines, which would defeat '^').  The TO
string should be an ordinary absolute directory name pointing to the
same directory.  Do not use '~' to stand for a home directory in the TO
string; Emacs performs these substitutions separately.  Here's an
example, from a system on which '/home/fsf' is normally accessed through
a symbolic link named '/fsf':

     (("\\`/home/fsf" . "/fsf"))

==============================================================================
File: emacs.info,  Node: |Directories|,  Next: |Comparing_Files|,  Prev: |File_Aliases|,  Up: |Files|
==============================================================================

                                                                   *Directories*

18.8 File Directories
=====----------------

The file system groups files into "directories".  A "directory listing"
is a list of all the files in a directory.  Emacs provides commands to
create and delete directories, and to make directory listings in brief
format (file names only) and verbose format (sizes, dates, and other
attributes included).  Emacs also includes a directory browser feature
called Dired, which you can invoke with 'C-x d'; see *note Dired::.

'C-x C-d DIR-OR-PATTERN <RET>'
     Display a brief directory listing ('list-directory').
'C-u C-x C-d DIR-OR-PATTERN <RET>'
     Display a verbose directory listing.
'M-x make-directory <RET> DIRNAME <RET>'
     Create a new directory named DIRNAME.
'M-x delete-directory <RET> DIRNAME <RET>'
     Delete the directory named DIRNAME.  If it isn't empty, you will be
     asked whether you want to delete it recursively.

   The command to display a directory listing is 'C-x C-d'
('list-directory').  It reads using the minibuffer a file name which is
either a directory to be listed or a wildcard-containing pattern for the
files to be listed.  For example,

     C-x C-d /u2/emacs/etc <RET>

lists all the files in directory '/u2/emacs/etc'.  Here is an example of
specifying a file name pattern:

     C-x C-d /u2/emacs/src/*.c <RET>

   Normally, 'C-x C-d' displays a brief directory listing containing
just file names.  A numeric argument (regardless of value) tells it to
make a verbose listing including sizes, dates, and owners (like 'ls
-l').

   The text of a directory listing is mostly obtained by running 'ls' in
an inferior process.  Two Emacs variables control the switches passed to
'ls': 'list-directory-brief-switches' is a string giving the switches to
use in brief listings ('"-CF"' by default), and
'list-directory-verbose-switches' is a string giving the switches to use
in a verbose listing ('"-l"' by default).

   In verbose directory listings, Emacs adds information about the
amount of free space on the disk that contains the directory.

   The command 'M-x delete-directory' prompts for a directory's name
using the minibuffer, and deletes the directory if it is empty.  If the
directory is not empty, you will be asked whether you want to delete it
recursively.  On systems that have a "Trash" (or "Recycle Bin") feature,
you can make this command move the specified directory to the Trash
instead of deleting it outright, by changing the variable
'delete-by-moving-to-trash' to 't'.  *Note Misc File Ops::, for more
information about using the Trash.

==============================================================================
File: emacs.info,  Node: |Comparing_Files|,  Next: |Diff_Mode|,  Prev: |Directories|,  Up: |Files|
==============================================================================

                                                               *Comparing_Files*

18.9 Comparing Files
=====---------------

The command 'M-x diff' prompts for two file names, using the minibuffer,
and displays the differences between the two files in a buffer named
'diff'.  This works by running the 'diff' program, using options taken
from the variable 'diff-switches'.  The value of 'diff-switches' should
be a string; the default is '"-u"' to specify a unified context diff.
*Note Diff: (diffutils)Top, for more information about the 'diff'
program.

   The output of the 'diff' command is shown using a major mode called
Diff mode.  *Note Diff Mode::.

   A (much more sophisticated) alternative is 'M-x ediff' (*note Ediff:
(ediff)Top.).

   The command 'M-x diff-backup' compares a specified file with its most
recent backup.  If you specify the name of a backup file, 'diff-backup'
compares it with the source file that it is a backup of.  In all other
respects, this behaves like 'M-x diff'.

   The command 'M-x diff-buffer-with-file' compares a specified buffer
with its corresponding file.  This shows you what changes you would make
to the file if you save the buffer.

   The command 'M-x diff-buffers' compares the contents of two specified
buffers.

   The command 'M-x compare-windows' compares the text in the current
window with that in the window that was the selected window before you
selected the current one.  (For more information about windows in Emacs,
*note Windows::.)  Comparison starts at point in each window, after
pushing each initial point value on the mark ring (*note Mark Ring::) in
its respective buffer.  Then it moves point forward in each window, one
character at a time, until it reaches characters that don't match.  Then
the command exits.

   If point in the two windows is followed by non-matching text when the
command starts, 'M-x compare-windows' tries heuristically to advance up
to matching text in the two windows, and then exits.  So if you use 'M-x
compare-windows' repeatedly, each time it either skips one matching
range or finds the start of another.

   With a numeric argument, 'compare-windows' ignores changes in
whitespace.  If the variable 'compare-ignore-case' is non-'nil', the
comparison ignores differences in case as well.  If the variable
'compare-ignore-whitespace' is non-'nil', 'compare-windows' by default
ignores changes in whitespace, but a prefix argument turns that off for
that single invocation of the command.

   You can use 'M-x smerge-mode' to turn on Smerge mode, a minor mode
for editing output from the 'diff3' program.  This is typically the
result of a failed merge from a version control system update outside
VC, due to conflicting changes to a file.  Smerge mode provides commands
to resolve conflicts by selecting specific changes.

   *Note Emerge::, for the Emerge facility, which provides a powerful
interface for merging files.

==============================================================================
File: emacs.info,  Node: |Diff_Mode|,  Next: |Copying_and_Naming|,  Prev: |Comparing_Files|,  Up: |Files|
==============================================================================

                                                                     *Diff_Mode*

18.10 Diff Mode
=====----------

Diff mode is a major mode used for the output of 'M-x diff' and other
similar commands.  This kind of output is called a "patch", because it
can be passed to the 'patch' command to automatically apply the
specified changes.  To select Diff mode manually, type 'M-x diff-mode'.

   The changes specified in a patch are grouped into "hunks", which are
contiguous chunks of text that contain one or more changed lines.  Hunks
usually also include unchanged lines to provide context for the changes.
Each hunk is preceded by a "hunk header", which specifies the old and
new line numbers where the hunk's changes occur.  Diff mode highlights
each hunk header, to distinguish it from the actual contents of the
hunk.

   The first hunk in a patch is preceded by a file header, which shows
the names of the new and the old versions of the file, and their time
stamps.  If a patch shows changes for more than one file, each file has
such a header before the first hunk of that file's changes.

   You can edit a Diff mode buffer like any other buffer.  (If it is
read-only, you need to make it writable first; see *note Misc Buffer::.)
Whenever you edit a hunk, Diff mode attempts to automatically correct
the line numbers in the hunk headers, to ensure that the patch remains
correct, and could still be applied by 'patch'.  To disable automatic
line number correction, change the variable 'diff-update-on-the-fly' to
'nil'.

   Diff mode arranges for hunks to be treated as compiler error messages
by 'M-g M-n' and other commands that handle error messages (*note
Compilation Mode::).  Thus, you can use the compilation-mode commands to
visit the corresponding source locations.

   In addition, Diff mode provides the following commands to navigate,
manipulate and apply parts of patches:

'M-n'
     Move to the next hunk-start ('diff-hunk-next').  With prefix
     argument N, move forward to the Nth next hunk.

     By default, Diff mode "refines" hunks as Emacs displays them,
     highlighting their changes with better granularity.  Alternatively,
     if you set 'diff-refine' to the symbol 'navigation', Diff mode only
     refines the hunk you move to with this command or with
     'diff-hunk-prev'.

'M-p'
     Move to the previous hunk-start ('diff-hunk-prev').  With prefix
     argument N, move back to the Nth previous hunk.  Like 'M-n', this
     command refines the hunk you move to if you set 'diff-refine' to
     the symbol 'navigation'.

'M-}'
     Move to the next file-start, in a multi-file patch
     ('diff-file-next').  With prefix argument N, move forward to the
     start of the Nth next file.

'M-{'
     Move to the previous file-start, in a multi-file patch
     ('diff-file-prev').  With prefix argument N, move back to the start
     of the Nth previous file.

'M-k'
     Kill the hunk at point ('diff-hunk-kill').

'M-K'
     In a multi-file patch, kill the current file part.
     ('diff-file-kill').

'C-c C-a'
     Apply this hunk to its target file ('diff-apply-hunk').  With a
     prefix argument of 'C-u', revert this hunk, i.e. apply the reverse
     of the hunk, which changes the "new" version into the "old"
     version.  If 'diff-jump-to-old-file' is non-'nil', apply the hunk
     to the "old" version of the file instead.

'C-c C-b'
     Highlight the changes of the hunk at point with a finer granularity
     ('diff-refine-hunk').  This allows you to see exactly which parts
     of each changed line were actually changed.

     By default, Diff mode refines hunks as Emacs displays them, so you
     may find this command useful if you customize 'diff-refine' to a
     non-default value.

'C-c C-c'
     Go to the source file and line corresponding to this hunk
     ('diff-goto-source').  By default, this jumps to the "new" version
     of the file, the one shown first on the file header.  With a prefix
     argument, jump to the "old" version instead.  If
     'diff-jump-to-old-file' is non-'nil', this command by default jumps
     to the "old" file, and the meaning of the prefix argument is
     reversed.  If the prefix argument is a number greater than 8 (e.g.,
     if you type 'C-u C-u C-c C-c'), then this command also sets
     'diff-jump-to-old-file' for the next invocation.  If the source
     file is under version control (*note Version Control::), this jumps
     to the work file by default.  With a prefix argument, jump to the
     "old" revision of the file (*note Old Revisions::), when point is
     on the old line, or otherwise jump to the "new" revision.

'C-c C-e'
     Start an Ediff session with the patch ('diff-ediff-patch').  *Note
     Ediff: (ediff)Top.

'C-c C-n'
     Restrict the view to the current hunk ('diff-restrict-view').
     *Note Narrowing::.  With a prefix argument, restrict the view to
     the current file of a multiple-file patch.  To widen again, use
     'C-x n w' ('widen').

'C-c C-r'
     Reverse the direction of comparison for the entire buffer
     ('diff-reverse-direction').  With a prefix argument, reverse the
     direction only inside the current region (*note Mark::).  Reversing
     the direction means changing the hunks and the file-start headers
     to produce a patch that would change the "new" version into the
     "old" one.

'C-c C-s'
     Split the hunk at point ('diff-split-hunk') into two separate
     hunks.  This inserts a hunk header and modifies the header of the
     current hunk.  This command is useful for manually editing patches,
     and only works with the "unified diff format" produced by the '-u'
     or '--unified' options to the 'diff' program.  If you need to split
     a hunk in the "context diff format" produced by the '-c' or
     '--context' options to 'diff', first convert the buffer to the
     unified diff format with 'C-c C-u'.

'C-c C-d'
     Convert the entire buffer to the "context diff format"
     ('diff-unified->context').  With a prefix argument, convert only
     the hunks within the region.

'C-c C-u'
     Convert the entire buffer to unified diff format
     ('diff-context->unified').  With a prefix argument, convert unified
     format to context format.  When the mark is active, convert only
     the hunks within the region.

'C-c C-w'
     Re-generate the current hunk, disregarding changes in whitespace
     ('diff-ignore-whitespace-hunk').

'C-x 4 A'
     Generate a ChangeLog entry, like 'C-x 4 a' does (*note Change
     Log::), for each one of the hunks
     ('diff-add-change-log-entries-other-window').  This creates a
     skeleton of the log of changes that you can later fill with the
     actual descriptions of the changes.  'C-x 4 a' itself in Diff mode
     operates on behalf of the current hunk's file, but gets the
     function name from the patch itself.  This is useful for making log
     entries for functions that are deleted by the patch.

   Patches sometimes include trailing whitespace on modified lines, as
an unintentional and undesired change.  There are two ways to deal with
this problem.  Firstly, if you enable Whitespace mode in a Diff buffer
(*note Useless Whitespace::), it automatically highlights trailing
whitespace in modified lines.  Secondly, you can use the command 'M-x
diff-delete-trailing-whitespace', which searches for trailing whitespace
in the lines modified by the patch, and removes that whitespace in both
the patch and the patched source file(s).  This command does not save
the modifications that it makes, so you can decide whether to save the
changes (the list of modified files is displayed in the echo area).
With a prefix argument, it tries to modify the original ("old") source
files rather than the patched ("new") source files.

   If non-'nil', fragments of source in hunks are highlighted according
to the appropriate major mode.

==============================================================================
File: emacs.info,  Node: |Copying_and_Naming|,  Next: |Misc_File_Ops|,  Prev: |Diff_Mode|,  Up: |Files|
==============================================================================

                                                            *Copying_and_Naming*

18.11 Copying, Naming and Renaming Files
=====-----------------------------------

Emacs has several commands for copying, naming, and renaming files.  All
of them read two file names, OLD (or TARGET) and NEW, using the
minibuffer, and then copy or adjust a file's name accordingly; they do
not accept wildcard file names.

   In all these commands, if the argument NEW is just a directory name
(*note (elisp)Directory Names::), the real new name is in that
directory, with the same non-directory component as OLD.  For example,
the command 'M-x rename-file <RET> ~/foo <RET> /tmp/ <RET>' renames
'~/foo' to '/tmp/foo'.  On GNU and other POSIX-like systems, directory
names end in '/'.

   All these commands ask for confirmation when the new file name
already exists.

   'M-x copy-file' copies the contents of the file OLD to the file NEW.

   'M-x copy-directory' copies directories, similar to the 'cp -r' shell
command.  If NEW is a directory name, it creates a copy of the OLD
directory and puts it in NEW.  Otherwise it copies all the contents of
OLD into a new directory named NEW.

   'M-x rename-file' renames file OLD as NEW.  If the file name NEW
already exists, you must confirm with 'yes' or renaming is not done;
this is because renaming causes the old meaning of the name NEW to be
lost.  If OLD and NEW are on different file systems, the file OLD is
copied and deleted.

   If a file is under version control (*note Version Control::), you
should rename it using 'M-x vc-rename-file' instead of
'M-x rename-file'.  *Note VC Delete/Rename::.

   'M-x add-name-to-file' adds an additional name to an existing file
without removing the old name.  The new name is created as a hard link
to the existing file.  The new name must belong on the same file system
that the file is on.  On MS-Windows, this command works only if the file
resides in an NTFS file system.  On MS-DOS, and some remote system
types, it works by copying the file.

   'M-x make-symbolic-link' creates a symbolic link named NEW, which
points at TARGET.  The effect is that future attempts to open file NEW
will refer to whatever file is named TARGET at the time the opening is
done, or will get an error if the name TARGET is nonexistent at that
time.  This command does not expand the argument TARGET, so that it
allows you to specify a relative name as the target of the link.
However, this command does expand leading '~' in TARGET so that you can
easily specify home directories, and strips leading '/:' so that you can
specify relative names beginning with literal '~' or '/:'.  *Note Quoted
File Names::.  On MS-Windows, this command works only on MS Windows
Vista and later.  When NEW is remote, it works depending on the system
type.

==============================================================================
File: emacs.info,  Node: |Misc_File_Ops|,  Next: |Compressed_Files|,  Prev: |Copying_and_Naming|,  Up: |Files|
==============================================================================

                                                                 *Misc_File_Ops*

18.12 Miscellaneous File Operations
=====------------------------------

Emacs has commands for performing many other operations on files.  All
operate on one file; they do not accept wildcard file names.

   'M-x delete-file' prompts for a file and deletes it.  If you are
deleting many files in one directory, it may be more convenient to use
Dired rather than 'delete-file'.  *Note Dired Deletion::.

   'M-x move-file-to-trash' moves a file into the system "Trash" (or
"Recycle Bin").  This is a facility available on most operating systems;
files that are moved into the Trash can be brought back later if you
change your mind.  (The way to restore trashed files is
system-dependent.)

   By default, Emacs deletion commands do _not_ use the Trash.  To use
the Trash (when it is available) for common deletion commands, change
the variable 'delete-by-moving-to-trash' to 't'.  This affects the
commands 'M-x delete-file' and 'M-x delete-directory' (*note
Directories::), as well as the deletion commands in Dired (*note Dired
Deletion::).  Supplying a prefix argument to 'M-x delete-file' or 'M-x
delete-directory' makes them delete outright, instead of using the
Trash, regardless of 'delete-by-moving-to-trash'.

   If a file is under version control (*note Version Control::), you
should delete it using 'M-x vc-delete-file' instead of 'M-x
delete-file'.  *Note VC Delete/Rename::.

   'M-x insert-file' (also 'C-x i') inserts a copy of the contents of
the specified file into the current buffer at point, leaving point
unchanged before the contents.  The position after the inserted contents
is added to the mark ring, without activating the mark (*note Mark
Ring::).

   'M-x insert-file-literally' is like 'M-x insert-file', except the
file is inserted literally: it is treated as a sequence of ASCII
characters with no special encoding or conversion, similar to the 'M-x
find-file-literally' command (*note Visiting::).

   'M-x write-region' is the inverse of 'M-x insert-file'; it copies the
contents of the region into the specified file.  'M-x append-to-file'
adds the text of the region to the end of the specified file.  *Note
Accumulating Text::.  The variable 'write-region-inhibit-fsync' applies
to these commands, as well as saving files; see *note Customize Save::.

   'M-x set-file-modes' reads a file name followed by a "file mode", and
applies that file mode to the specified file.  File modes, also called
"file permissions", determine whether a file can be read, written to, or
executed, and by whom.  This command reads file modes using the same
symbolic or octal format accepted by the 'chmod' command; for instance,
'u+x' means to add execution permission for the user who owns the file.
It has no effect on operating systems that do not support file modes.
'chmod' is a convenience alias for this function.

==============================================================================
File: emacs.info,  Node: |Compressed_Files|,  Next: |File_Archives|,  Prev: |Misc_File_Ops|,  Up: |Files|
==============================================================================

                                                              *Compressed_Files*

18.13 Accessing Compressed Files
=====---------------------------

Emacs automatically uncompresses compressed files when you visit them,
and automatically recompresses them if you alter them and save them.
Emacs recognizes compressed files by their file names.  File names
ending in '.gz' indicate a file compressed with 'gzip'.  Other endings
indicate other compression programs.

   Automatic uncompression and compression apply to all the operations
in which Emacs uses the contents of a file.  This includes visiting it,
saving it, inserting its contents into a buffer, loading it, and byte
compiling it.

   To disable this feature, type the command 'M-x
auto-compression-mode'.  You can disable it permanently by customizing
the variable 'auto-compression-mode'.

==============================================================================
File: emacs.info,  Node: |File_Archives|,  Next: |Remote_Files|,  Prev: |Compressed_Files|,  Up: |Files|
==============================================================================

                                                                 *File_Archives*

18.14 File Archives
=====--------------

A file whose name ends in '.tar' is normally an "archive" made by the
'tar' program.  Emacs views these files in a special mode called Tar
mode which provides a Dired-like list of the contents (*note Dired::).
You can move around through the list just as you would in Dired, and
visit the subfiles contained in the archive.  However, not all Dired
commands are available in Tar mode.

   If Auto Compression mode is enabled (*note Compressed Files::), then
Tar mode is used also for compressed archives--files with extensions
'.tgz', '.tar.Z' and '.tar.gz'.

   The keys 'e', 'f' and <RET> all extract a component file into its own
buffer.  You can edit it there, and if you save the buffer, the edited
version will replace the version in the Tar buffer.  Clicking with the
mouse on the file name in the Tar buffer does likewise.  'v' extracts a
file into a buffer in View mode (*note View Mode::).  'o' extracts the
file and displays it in another window, so you could edit the file and
operate on the archive simultaneously.

   The 'I' key adds a new (regular) file to the archive.  The file is
initially empty, but can readily be edited using the commands above.
The command inserts the new file before the current one, so that using
it on the topmost line of the Tar buffer makes the new file the first
one in the archive, and using it at the end of the buffer makes it the
last one.

   'd' marks a file for deletion when you later use 'x', and 'u' unmarks
a file, as in Dired.  'C' copies a file from the archive to disk and 'R'
renames a file within the archive.  'g' reverts the buffer from the
archive on disk.  The keys 'M', 'G', and 'O' change the file's
permission bits, group, and owner, respectively.

   Saving the Tar buffer writes a new version of the archive to disk
with the changes you made to the components.

   You don't need the 'tar' program to use Tar mode--Emacs reads the
archives directly.  However, accessing compressed archives requires the
appropriate uncompression program.

   A separate but similar Archive mode is used for 'arc', 'jar', 'lzh',
'zip', 'rar', '7z', and 'zoo' archives, as well as 'exe' files that are
self-extracting executables.

   The key bindings of Archive mode are similar to those in Tar mode,
with the addition of the 'm' key which marks a file for subsequent
operations, and 'M-<DEL>' which unmarks all the marked files.  Also, the
'a' key toggles the display of detailed file information, for those
archive types where it won't fit in a single line.  Operations such as
renaming a subfile, or changing its mode or owner, are supported only
for some of the archive formats.

   Unlike Tar mode, Archive mode runs the archiving programs to unpack
and repack archives.  However, you don't need these programs to look at
the archive table of contents, only to extract or manipulate the
subfiles in the archive.  Details of the program names and their options
can be set in the 'Archive' Customize group (*note Customization
Groups::).

==============================================================================
File: emacs.info,  Node: |Remote_Files|,  Next: |Quoted_File_Names|,  Prev: |File_Archives|,  Up: |Files|
==============================================================================

                                                                  *Remote_Files*

18.15 Remote Files
=====-------------

You can refer to files on other machines using a special file name
syntax:

     /METHOD:HOST:FILENAME
     /METHOD:USER@HOST:FILENAME
     /METHOD:USER@HOST#PORT:FILENAME

To carry out this request, Emacs uses a remote-login program such as
'ssh'.  You must always specify in the file name which method to use--for
example, '/ssh:USER@HOST:FILENAME' uses 'ssh'.  When you specify the
pseudo method '-' in the file name, Emacs chooses the method as follows:

  1. If the host name starts with 'ftp.' (with dot), Emacs uses FTP.
  2. If the user name is 'ftp' or 'anonymous', Emacs uses FTP.
  3. If the variable 'tramp-default-method' is set to 'ftp', Emacs uses
     FTP.
  4. If 'ssh-agent' is running, Emacs uses 'scp'.
  5. Otherwise, Emacs uses 'ssh'.

You can entirely turn off the remote file name feature by setting the
variable 'tramp-mode' to 'nil'.  You can turn off the feature in
individual cases by quoting the file name with '/:' (*note Quoted File
Names::).

   Remote file access through FTP is handled by the Ange-FTP package,
which is documented in the following.  Remote file access through the
other methods is handled by the Tramp package, which has its own manual.
*Note The Tramp Manual: (tramp)Top.

   When the Ange-FTP package is used, Emacs logs in through FTP using
the name USER, if that is specified in the remote file name.  If USER is
unspecified, Emacs logs in using your user name on the local system; but
if you set the variable 'ange-ftp-default-user' to a string, that string
is used instead.  When logging in, Emacs may also ask for a password.

   For performance reasons, Emacs does not make backup files for files
accessed via FTP by default.  To make it do so, change the variable
'ange-ftp-make-backup-files' to a non-'nil' value.

   By default, auto-save files for remote files are made in the
temporary file directory on the local machine, as specified by the
variable 'auto-save-file-name-transforms'.  *Note Auto Save Files::.

   To visit files accessible by anonymous FTP, you use special user
names 'anonymous' or 'ftp'.  Passwords for these user names are handled
specially.  The variable 'ange-ftp-generate-anonymous-password' controls
what happens: if the value of this variable is a string, then that
string is used as the password; if non-'nil' (the default), then the
value of 'user-mail-address' is used; if 'nil', then Emacs prompts you
for a password as usual (*note Passwords::).

   Sometimes you may be unable to access files on a remote machine
because a "firewall" in between blocks the connection for security
reasons.  If you can log in on a "gateway" machine from which the target
files _are_ accessible, and whose FTP server supports gatewaying
features, you can still use remote file names; all you have to do is
specify the name of the gateway machine by setting the variable
'ange-ftp-gateway-host', and set 'ange-ftp-smart-gateway' to 't'.
Otherwise you may be able to make remote file names work, but the
procedure is complex.  You can read the instructions by typing 'M-x
finder-commentary <RET> ange-ftp <RET>'.

==============================================================================
File: emacs.info,  Node: |Quoted_File_Names|,  Next: |File_Name_Cache|,  Prev: |Remote_Files|,  Up: |Files|
==============================================================================

                                                             *Quoted_File_Names*

18.16 Quoted File Names
=====------------------

You can "quote" an absolute file name to prevent special characters and
syntax in it from having their special effects.  The way to do this is
to add '/:' at the beginning.

   For example, you can quote a local file name which appears remote, to
prevent it from being treated as a remote file name.  Thus, if you have
a directory named '/foo:' and a file named 'bar' in it, you can refer to
that file in Emacs as '/:/foo:/bar'.

   If you want to quote only special characters in the local part of a
remote file name, you can quote just the local part.
'/ssh:baz:/:/foo:/bar' refers to the file 'bar' of directory '/foo:' on
the host 'baz'.

   '/:' can also prevent '~' from being treated as a special character
for a user's home directory.  For example, '/:/tmp/~hack' refers to a
file whose name is '~hack' in directory '/tmp'.

   Quoting with '/:' is also a way to enter in the minibuffer a file
name that contains '$'.  In order for this to work, the '/:' must be at
the beginning of the minibuffer contents.  (You can also double each
'$'; see *note File Names with $::.)

   You can also quote wildcard characters with '/:', for visiting.  For
example, '/:/tmp/foo*bar' visits the file '/tmp/foo*bar'.

   Another method of getting the same result is to enter
'/tmp/foo[*]bar', which is a wildcard specification that matches only
'/tmp/foo*bar'.  However, in many cases there is no need to quote the
wildcard characters because even unquoted they give the right result.
For example, if the only file name in '/tmp' that starts with 'foo' and
ends with 'bar' is 'foo*bar', then specifying '/tmp/foo*bar' will visit
only '/tmp/foo*bar'.

==============================================================================
File: emacs.info,  Node: |File_Name_Cache|,  Next: |File_Conveniences|,  Prev: |Quoted_File_Names|,  Up: |Files|
==============================================================================

                                                               *File_Name_Cache*

18.17 File Name Cache
=====----------------

You can use the "file name cache" to make it easy to locate a file by
name, without having to remember exactly where it is located.  When
typing a file name in the minibuffer, 'C-<TAB>'
('file-cache-minibuffer-complete') completes it using the file name
cache.  If you repeat 'C-<TAB>', that cycles through the possible
completions of what you had originally typed.  (However, note that the
'C-<TAB>' character cannot be typed on most text terminals.)

   The file name cache does not fill up automatically.  Instead, you
load file names into the cache using these commands:

'M-x file-cache-add-directory <RET> DIRECTORY <RET>'
     Add each file name in DIRECTORY to the file name cache.
'M-x file-cache-add-directory-using-find <RET> DIRECTORY <RET>'
     Add each file name in DIRECTORY and all of its nested
     subdirectories to the file name cache.
'M-x file-cache-add-directory-using-locate <RET> DIRECTORY <RET>'
     Add each file name in DIRECTORY and all of its nested
     subdirectories to the file name cache, using 'locate' to find them
     all.
'M-x file-cache-add-directory-list <RET> VARIABLE <RET>'
     Add each file name in each directory listed in VARIABLE to the file
     name cache.  VARIABLE should be a Lisp variable whose value is a
     list of directories, like 'load-path'.
'M-x file-cache-clear-cache <RET>'
     Clear the cache; that is, remove all file names from it.

   The file name cache is not persistent: it is kept and maintained only
for the duration of the Emacs session.  You can view the contents of the
cache with the 'file-cache-display' command.

==============================================================================
File: emacs.info,  Node: |File_Conveniences|,  Next: |Image_Mode|,  Prev: |File_Name_Cache|,  Up: |Files|
==============================================================================

                                                             *File_Conveniences*

18.18 Convenience Features for Finding Files
=====---------------------------------------

In this section, we introduce some convenient facilities for finding
recently-opened files, reading file names from a buffer.

   If you enable Recentf mode, with 'M-x recentf-mode', the 'File' menu
includes a submenu containing a list of recently opened files.  'M-x
recentf-save-list' saves the current 'recentf-list' to a file, and 'M-x
recentf-edit-list' edits it.

   The 'M-x ffap' command generalizes 'find-file' with more powerful
heuristic defaults (*note FFAP::), often based on the text at point.
Partial Completion mode offers other features extending 'find-file',
which can be used with 'ffap'.  *Note Completion Options::.

==============================================================================
File: emacs.info,  Node: |Image_Mode|,  Next: |Filesets|,  Prev: |File_Conveniences|,  Up: |Files|
==============================================================================

                                                                    *Image_Mode*

18.19 Viewing Image Files
=====--------------------

Visiting image files automatically selects Image mode.  In this major
mode, you can type 'C-c C-c' ('image-toggle-display') to toggle between
displaying the file as an image in the Emacs buffer, and displaying its
underlying text (or raw byte) representation.  Additionally you can type
'C-c C-x' ('image-toggle-hex-display') to toggle between displaying the
file as an image in the Emacs buffer, and displaying it in hex
representation.  Displaying the file as an image works only if Emacs is
compiled with support for displaying such images.

   If the displayed image is wider or taller than the window in which it
is displayed, the usual point motion keys ('C-f', 'C-p', and so forth)
cause different parts of the image to be displayed.  However, by default
images are resized automatically to fit the window, so this is only
necessary if you customize the default behavior by using the options
'image-auto-resize' and 'image-auto-resize-on-window-resize'.

   To resize the image manually you can use the command
'image-transform-fit-both' bound to 's b' that fits the image to both
the window height and width.  To scale the image specifying a scale
factor, use the command 'image-transform-set-scale' bound to 's s'.  To
reset all transformations to the initial state, use
'image-transform-reset' bound to 's 0'.

   You can press 'n' ('image-next-file') and 'p' ('image-previous-file')
to visit the next image file and the previous image file in the same
directory, respectively.

   When looking through images, it's sometimes convenient to be able to
mark the files for later processing (for instance, if you want to select
a group of images to copy somewhere else).  The 'm'
('image-mode-mark-file') command will mark the current file in any Dired
buffer(s) that display the current file's directory.  If no such buffer
is open, the directory is opened in a new buffer.  To unmark files, use
the 'u' ('image-mode-mark-file') command.  Finally, if you just want to
copy the current buffers file name to the kill ring, you can use the 'w'
('image-mode-copy-file-name-as-kill') command.

   If the image can be animated, the command <RET>
('image-toggle-animation') starts or stops the animation.  Animation
plays once, unless the option 'image-animate-loop' is non-'nil'.  With
'f' ('image-next-frame') and 'b' ('image-previous-frame') you can step
through the individual frames.  Both commands accept a numeric prefix to
step through several frames at once.  You can go to a specific frame
with 'F' ('image-goto-frame').  Frames are indexed from 1.  Typing 'a +'
('image-increase-speed') increases the speed of the animation, 'a -'
('image-decrease-speed') decreases it, and 'a r' ('image-reverse-speed')
reverses it.  The command 'a 0' ('image-reset-speed') resets the speed
to the original value.

   If Emacs was compiled with support for the ImageMagick library, it
can use ImageMagick to render a wide variety of images.  The variable
'imagemagick-enabled-types' lists the image types that Emacs may render
using ImageMagick; each element in the list should be an internal
ImageMagick name for an image type, as a symbol or an equivalent string
(e.g., 'BMP' for '.bmp' images).  To enable ImageMagick for all possible
image types, change 'imagemagick-enabled-types' to 't'.  The variable
'imagemagick-types-inhibit' lists the image types which should never be
rendered using ImageMagick, regardless of the value of
'imagemagick-enabled-types' (the default list includes types like 'C'
and 'HTML', which ImageMagick can render as an image but Emacs should
not).  To disable ImageMagick entirely, change
'imagemagick-types-inhibit' to 't'.

   If Emacs doesn't have native support for the image format in
question, and 'image-use-external-converter' is non-'nil', Emacs will
try to determine whether there are external utilities that can be used
to transform the image in question to PNG before displaying.
GraphicsMagick, ImageMagick and 'ffmpeg' are currently supported for
image conversions.

   The Image-Dired package can also be used to view images as
thumbnails.  *Note Image-Dired::.

==============================================================================
File: emacs.info,  Node: |Filesets|,  Prev: |Image_Mode|,  Up: |Files|
==============================================================================

                                                                      *Filesets*

18.20 Filesets
=====---------

If you regularly edit a certain group of files, you can define them as a
"fileset".  This lets you perform certain operations, such as visiting,
'query-replace', and shell commands on all the files at once.  To make
use of filesets, you must first add the expression '(filesets-init)' to
your init file (*note Init File::).  This adds a 'Filesets' sub-menu to
the menu bar's 'File' menu.

   The simplest way to define a fileset is by adding files to it one at
a time.  To add a file to fileset NAME, visit the file and type 'M-x
filesets-add-buffer <RET> NAME <RET>'.  If there is no fileset NAME,
this creates a new one, which initially contains only the current file.
The command 'M-x filesets-remove-buffer' removes the current file from a
fileset.

   You can also edit the list of filesets directly, with 'M-x
filesets-edit' (or by choosing 'Edit Filesets' from the 'Filesets'
menu).  The editing is performed in a Customize buffer (*note Easy
Customization::).  Normally, a fileset is a simple list of files, but
you can also define a fileset as a regular expression matching file
names.  Some examples of these more complicated filesets are shown in
the Customize buffer.  Remember to select 'Save for future sessions' if
you want to use the same filesets in future Emacs sessions.

   You can use the command 'M-x filesets-open' to visit all the files in
a fileset, and 'M-x filesets-close' to close them.  Use 'M-x
filesets-run-cmd' to run a shell command on all the files in a fileset.
These commands are also available from the 'Filesets' menu, where each
existing fileset is represented by a submenu.

   *Note Version Control::, for a different concept of filesets: groups
of files bundled together for version control operations.  Filesets of
that type are unnamed, and do not persist across Emacs sessions.

==============================================================================
File: emacs.info,  Node: |Buffers|,  Next: |Windows|,  Prev: |Files|,  Up: |Top|
==============================================================================

                                                                       *Buffers*

19 Using Multiple Buffers
*****====================

The text you are editing in Emacs resides in an object called a
"buffer".  Each time you visit a file, a buffer is used to hold the
file's text.  Each time you invoke Dired, a buffer is used to hold the
directory listing.  If you send a message with 'C-x m', a buffer is used
to hold the text of the message.  When you ask for a command's
documentation, that appears in a buffer named 'Help'.

   Buffers exist as long as they are in use, and are deleted ("killed")
when no longer needed, either by you (*note Kill Buffer::) or by Emacs
(e.g., when you exit Emacs, *note Exiting::).

   Each buffer has a unique name, which can be of any length.  When a
buffer is displayed in a window, its name is shown in the mode line
(*note Mode Line::).  The distinction between upper and lower case
matters in buffer names.  Most buffers are made by visiting files, and
their names are derived from the files' names; however, you can also
create an empty buffer with any name you want.  A newly started Emacs
has several buffers, including one named 'scratch', which can be used
for evaluating Lisp expressions and is not associated with any file
(*note Lisp Interaction::).

   At any time, one and only one buffer is "selected"; we call it the
"current buffer".  We sometimes say that a command operates on "the
buffer"; this really means that it operates on the current buffer.  When
there is only one Emacs window, the buffer displayed in that window is
current.  When there are multiple windows, the buffer displayed in the
"selected window" is current.  *Note Windows::.

   A buffer's "contents" consist of a series of characters, each of
which optionally carries a set of text properties (*note Text
properties: International Chars.) that can specify more information
about that character.

   Aside from its textual contents, each buffer records several pieces
of information, such as what file it is visiting (if any), whether it is
modified, and what major mode and minor modes are in effect (*note
Modes::).  These are stored in "buffer-local variables"--variables that
can have a different value in each buffer.  *Note Locals::.

   A buffer's size cannot be larger than some maximum, which is defined
by the largest buffer position representable by "Emacs integers".  This
is because Emacs tracks buffer positions using that data type.  For
typical 64-bit machines, this maximum buffer size is 2^{61} - 2 bytes,
or about 2 EiB.  For typical 32-bit machines, the maximum is usually
2^{29} - 2 bytes, or about 512 MiB.  Buffer sizes are also limited by
the amount of memory in the system.

MENU

* |Select_Buffer|::       Creating a new buffer or reselecting an old one.
* |List_Buffers|::        Getting a list of buffers that exist.
* |Misc_Buffer|::         Renaming; changing read-only status; copying text.
* |Kill_Buffer|::         Killing buffers you no longer need.
* |Several_Buffers|::     How to go through the list of all buffers
                          and operate variously on several of them.
* |Indirect_Buffers|::    An indirect buffer shares the text of another buffer.
* |Buffer_Convenience|::  Convenience and customization features for
                          buffer handling.

==============================================================================
File: emacs.info,  Node: |Select_Buffer|,  Next: |List_Buffers|,  Up: |Buffers|
==============================================================================

                                                                 *Select_Buffer*

19.1 Creating and Selecting Buffers
=====------------------------------

'C-x b BUFFER <RET>'
     Select or create a buffer named BUFFER ('switch-to-buffer').
'C-x 4 b BUFFER <RET>'
     Similar, but select BUFFER in another window
     ('switch-to-buffer-other-window').
'C-x 5 b BUFFER <RET>'
     Similar, but select BUFFER in a separate frame
     ('switch-to-buffer-other-frame').
'C-x <LEFT>'
     Select the previous buffer in the buffer list ('previous-buffer').
'C-x <RIGHT>'
     Select the next buffer in the buffer list ('next-buffer').
'C-u M-g M-g'
'C-u M-g g'
     Read a number N and move to line N in the most recently selected
     buffer other than the current buffer, in another window.

   The 'C-x b' ('switch-to-buffer') command reads a buffer name using
the minibuffer.  Then it makes that buffer current, and displays it in
the currently-selected window.  An empty input specifies the buffer that
was current most recently among those not now displayed in any window.

   While entering the buffer name, you can use the usual completion and
history commands (*note Minibuffer::).  Note that 'C-x b', and related
commands, use "permissive completion with confirmation" for minibuffer
completion: if you type <RET> when the minibuffer text names a
nonexistent buffer, Emacs prints '[Confirm]' and you must type a second
<RET> to submit that buffer name.  *Note Completion Exit::, for details.
For other completion options and features, see *note Completion
Options::.

   If you specify a buffer that does not exist, 'C-x b' creates a new,
empty buffer that is not visiting any file, and selects it for editing.
The default value of the variable 'major-mode' determines the new
buffer's major mode; the default value is Fundamental mode.  *Note Major
Modes::.  One reason to create a new buffer is to use it for making
temporary notes.  If you try to save it, Emacs asks for the file name to
use, and the buffer's major mode is re-established taking that file name
into account (*note Choosing Modes::).

   For conveniently switching between a few buffers, use the commands
'C-x <LEFT>' and 'C-x <RIGHT>'.  'C-x <LEFT>' ('previous-buffer')
selects the previous buffer (following the order of most recent
selection in the current frame), while 'C-x <RIGHT>' ('next-buffer')
moves through buffers in the reverse direction.  Both commands support a
numeric prefix argument that serves as a repeat count.

   To select a buffer in a window other than the current one (*note
Windows::), type 'C-x 4 b' ('switch-to-buffer-other-window').  This
prompts for a buffer name using the minibuffer, displays that buffer in
another window, and selects that window.

   Similarly, 'C-x 5 b' ('switch-to-buffer-other-frame') prompts for a
buffer name, displays that buffer in another frame (*note Frames::), and
selects that frame.  If the buffer is already being shown in a window on
another frame, Emacs selects that window and frame instead of creating a
new frame.

   *Note Displaying Buffers::, for how the 'C-x 4 b' and 'C-x 5 b'
commands get the window and/or frame to display in.

   In addition, 'C-x C-f', and any other command for visiting a file,
can also be used to switch to an existing file-visiting buffer.  *Note
Visiting::.

   'C-u M-g M-g', that is 'goto-line' with a plain prefix argument,
reads a number N using the minibuffer, selects the most recently
selected buffer other than the current buffer in another window, and
then moves point to the beginning of line number N in that buffer.  This
is mainly useful in a buffer that refers to line numbers in another
buffer: if point is on or just after a number, 'goto-line' uses that
number as the default for N.  Note that prefix arguments other than just
'C-u' behave differently.  'C-u 4 M-g M-g' goes to line 4 in the
_current_ buffer, without reading a number from the minibuffer.
(Remember that 'M-g M-g' without prefix argument reads a number N and
then moves to line number N in the current buffer.  *Note Moving
Point::.)

   Emacs uses buffer names that start with a space for internal
purposes.  It treats these buffers specially in minor ways--for example,
by default they do not record undo information.  It is best to avoid
using such buffer names yourself.

==============================================================================
File: emacs.info,  Node: |List_Buffers|,  Next: |Misc_Buffer|,  Prev: |Select_Buffer|,  Up: |Buffers|
==============================================================================

                                                                  *List_Buffers*

19.2 Listing Existing Buffers
=====------------------------

'C-x C-b'
     List the existing buffers ('list-buffers').

   To display a list of existing buffers, type 'C-x C-b'.  This pops up
a buffer menu in a buffer named '*Buffer List*'.  Each line in the list
shows one buffer's name, size, major mode and visited file.  The buffers
are listed in the order that they were current; the buffers that were
current most recently come first.  This section describes how the list
of buffers is displayed and how to interpret the various indications in
the list; see *note Several Buffers::, for description of the special
mode in the '*Buffer List*' buffer and the commands available there.

   '.' in the first field of a line indicates that the buffer is
current.  '%' indicates a read-only buffer.  '*' indicates that the
buffer is modified.  If several buffers are modified, it may be time to
save some with 'C-x s' (*note Save Commands::).  Here is an example of a
buffer list:

     CRM Buffer                Size  Mode              File
     . * .emacs                3294  Emacs-Lisp        ~/.emacs
      %  Help                 101  Help
         search.c             86055  C                 ~/cvs/emacs/src/search.c
      %  src                  20959  Dired by name     ~/cvs/emacs/src/
        mail*                  42  Mail
      %  HELLO                 1607  Fundamental       ~/cvs/emacs/etc/HELLO
      %  NEWS                481184  Outline           ~/cvs/emacs/etc/NEWS
         scratch              191  Lisp Interaction
        Messages*            1554  Messages

The buffer 'Help' was made by a help request (*note Help::); it is not
visiting any file.  The buffer 'src' was made by Dired on the directory
'~/cvs/emacs/src/'.  You can list only buffers that are visiting files
by giving the command a prefix argument, as in 'C-u C-x C-b'.

   'list-buffers' omits buffers whose names begin with a space, unless
they visit files: such buffers are used internally by Emacs.

==============================================================================
File: emacs.info,  Node: |Misc_Buffer|,  Next: |Kill_Buffer|,  Prev: |List_Buffers|,  Up: |Buffers|
==============================================================================

                                                                   *Misc_Buffer*

19.3 Miscellaneous Buffer Operations
=====-------------------------------

'C-x C-q'
     Toggle read-only status of buffer ('read-only-mode').
'M-x rename-buffer <RET> BUFFER <RET>'
     Change the name of the current buffer.
'M-x rename-uniquely'
     Rename the current buffer by adding '<NUMBER>' to the end.
'M-x view-buffer <RET> BUFFER <RET>'
     Scroll through buffer BUFFER.  *Note View Mode::.

   A buffer can be "read-only", which means that commands to insert or
delete its text are not allowed.  (However, other commands, like 'C-x
<RET> f', can still mark it as modified, *note Text Coding::).  The mode
line indicates read-only buffers with '%%' or '%*' near the left margin.
*Note Mode Line::.  Read-only buffers are usually made by subsystems
such as Dired and Rmail that have special commands to operate on the
text.  Visiting a file whose access control says you cannot write it
also makes the buffer read-only.

   The command 'C-x C-q' ('read-only-mode') makes a read-only buffer
writable, and makes a writable buffer read-only.  This works by setting
the variable 'buffer-read-only', which has a local value in each buffer
and makes the buffer read-only if its value is non-'nil'.  If you change
the option 'view-read-only' to a non-'nil' value, making the buffer
read-only with 'C-x C-q' also enables View mode in the buffer (*note
View Mode::).

   'M-x rename-buffer' changes the name of the current buffer.  You
specify the new name as a minibuffer argument; there is no default.  If
you specify a name that is in use for some other buffer, an error
happens and no renaming is done.

   'M-x rename-uniquely' renames the current buffer to a similar name
with a numeric suffix added to make it both different and unique.  This
command does not need an argument.  It is useful for creating multiple
shell buffers: if you rename the 'shell' buffer, then do 'M-x shell'
again, it makes a new shell buffer named 'shell'; meanwhile, the old
shell buffer continues to exist under its new name.  This method is also
good for mail buffers, compilation buffers, and most Emacs features that
create special buffers with particular names.  (With some of these
features, such as 'M-x compile', 'M-x grep', you need to switch to some
other buffer before using the command again, otherwise it will reuse the
current buffer despite the name change.)

   The commands 'M-x append-to-buffer' and 'M-x insert-buffer' can also
be used to copy text from one buffer to another.  *Note Accumulating
Text::.

==============================================================================
File: emacs.info,  Node: |Kill_Buffer|,  Next: |Several_Buffers|,  Prev: |Misc_Buffer|,  Up: |Buffers|
==============================================================================

                                                                   *Kill_Buffer*

19.4 Killing Buffers
=====---------------

If you continue an Emacs session for a while, you may accumulate a large
number of buffers.  You may then find it convenient to "kill" the
buffers you no longer need.  (Some other editors call this operation
"close", and talk about "closing the buffer" or "closing the file"
visited in the buffer.)  On most operating systems, killing a buffer
releases the memory Emacs used for the buffer back to the operating
system so that other programs can use it.  Here are some commands for
killing buffers:

'C-x k BUFFER <RET>'
     Kill buffer BUFFER ('kill-buffer').
'M-x kill-some-buffers'
     Offer to kill each buffer, one by one.
'M-x kill-matching-buffers'
     Offer to kill all buffers matching a regular expression.

   'C-x k' ('kill-buffer') kills one buffer, whose name you specify in
the minibuffer.  The default, used if you type just <RET> in the
minibuffer, is to kill the current buffer.  If you kill the current
buffer, another buffer becomes current: one that was current in the
recent past but is not displayed in any window now.  If you ask to kill
a file-visiting buffer that is modified, then you must confirm with
'yes' before the buffer is killed.

   The command 'M-x kill-some-buffers' asks about each buffer, one by
one.  An answer of 'yes' means to kill the buffer, just like
'kill-buffer'.  This command ignores buffers whose names begin with a
space, which are used internally by Emacs.

   The command 'M-x kill-matching-buffers' prompts for a regular
expression and kills all buffers whose names match that expression.
*Note Regexps::.  Like 'kill-some-buffers', it asks for confirmation
before each kill.  This command normally ignores buffers whose names
begin with a space, which are used internally by Emacs.  To kill
internal buffers as well, call 'kill-matching-buffers' with a prefix
argument.

   The Buffer Menu feature is also convenient for killing various
buffers.  *Note Several Buffers::.

   If you want to do something special every time a buffer is killed,
you can add hook functions to the hook 'kill-buffer-hook' (*note
Hooks::).

   If you run one Emacs session for a period of days, as many people do,
it can fill up with buffers that you used several days ago.  The command
'M-x clean-buffer-list' is a convenient way to purge them; it kills all
the unmodified buffers that you have not used for a long time.  An
ordinary buffer is killed if it has not been displayed for three days;
however, you can specify certain buffers that should never be killed
automatically, and others that should be killed if they have been unused
for a mere hour.  These defaults, and other aspects of this command's
behavior, can be controlled by customizing several options described in
the doc string of 'clean-buffer-list'.

   You can also have this buffer purging done for you, once a day, by
enabling Midnight mode.  Midnight mode operates each day at midnight; at
that time, it runs 'clean-buffer-list', or whichever functions you have
placed in the normal hook 'midnight-hook' (*note Hooks::).  To enable
Midnight mode, use the Customization buffer to set the variable
'midnight-mode' to 't'.  *Note Easy Customization::.

==============================================================================
File: emacs.info,  Node: |Several_Buffers|,  Next: |Indirect_Buffers|,  Prev: |Kill_Buffer|,  Up: |Buffers|
==============================================================================

                                                               *Several_Buffers*

19.5 Operating on Several Buffers
=====----------------------------

'M-x buffer-menu'
     Begin editing a buffer listing all Emacs buffers.
'M-x buffer-menu-other-window'
     Similar, but do it in another window.

   The "Buffer Menu" opened by 'C-x C-b' (*note List Buffers::) does not
merely list buffers.  It also allows you to perform various operations
on buffers, through an interface similar to Dired (*note Dired::).  You
can save buffers, kill them (here called "deleting" them, for
consistency with Dired), or display them.

   To use the Buffer Menu, type 'C-x C-b' and switch to the window
displaying the '*Buffer List*' buffer.  You can also type 'M-x
buffer-menu' to open the Buffer Menu in the selected window.
Alternatively, the command 'M-x buffer-menu-other-window' opens the
Buffer Menu in another window, and selects that window.

   The Buffer Menu is a read-only buffer, and can be changed only
through the special commands described in this section.  The usual
cursor motion commands can be used in this buffer.  The following
commands apply to the buffer described on the current line:

'd'
     Flag the buffer for deletion (killing), then move point to the next
     line ('Buffer-menu-delete').  The deletion flag is indicated by the
     character 'D' on the line, before the buffer name.  The deletion
     occurs only when you type the 'x' command (see below).

'C-d'
     Like 'd', but move point up instead of down
     ('Buffer-menu-delete-backwards').

's'
     Flag the buffer for saving ('Buffer-menu-save').  The save flag is
     indicated by the character 'S' on the line, before the buffer name.
     The saving occurs only when you type 'x'.  You may request both
     saving and deletion for the same buffer.

'x'
     Perform all flagged deletions and saves ('Buffer-menu-execute').

'u'
     Remove all flags from the current line, and move down
     ('Buffer-menu-unmark').  With a prefix argument, moves up after
     removing the flags.

'<DEL>'
     Move to the previous line and remove all flags on that line
     ('Buffer-menu-backup-unmark').

'M-<DEL>'
     Remove a particular flag from all lines
     ('Buffer-menu-unmark-all-buffers').  This asks for a single
     character, and unmarks buffers marked with that character; typing
     <RET> removes all marks.

'U'
     Remove all flags from all the lines ('Buffer-menu-unmark-all').

The commands for removing flags, 'd' and 'C-d', accept a numeric
argument as a repeat count.

   The following commands operate immediately on the buffer listed on
the current line.  They also accept a numeric argument as a repeat
count.

'~'
     Mark the buffer as unmodified ('Buffer-menu-not-modified').  *Note
     Save Commands::.

'%'
     Toggle the buffer's read-only status
     ('Buffer-menu-toggle-read-only').  *Note Misc Buffer::.

't'
     Visit the buffer as a tags table ('Buffer-menu-visit-tags-table').
     *Note Select Tags Table::.

   The following commands are used to select another buffer or buffers:

'q'
     Quit the Buffer Menu ('quit-window').  The most recent formerly
     visible buffer is displayed in its place.

'<RET>'
'f'
     Select this line's buffer, replacing the '*Buffer List*' buffer in
     its window ('Buffer-menu-this-window').

'o'
     Select this line's buffer in another window, as if by 'C-x 4 b',
     leaving '*Buffer List*' visible ('Buffer-menu-other-window').

'C-o'
     Display this line's buffer in another window, without selecting it
     ('Buffer-menu-switch-other-window').

'1'
     Select this line's buffer in a full-frame window
     ('Buffer-menu-1-window').

'2'
     Set up two windows on the current frame, with this line's buffer
     selected in one, and a previously current buffer (aside from
     '*Buffer List*') in the other ('Buffer-menu-2-window').

'b'
     Bury this line's buffer ('Buffer-menu-bury') (i.e., move it to the
     end of the buffer list).

'm'
     Mark this line's buffer to be displayed in another window if you
     exit with the 'v' command ('Buffer-menu-mark').  The display flag
     is indicated by the character '>' at the beginning of the line.  (A
     single buffer may not have both deletion and display flags.)

'v'
     Select this line's buffer, and also display in other windows any
     buffers flagged with the 'm' command ('Buffer-menu-select').  If
     you have not flagged any buffers, this command is equivalent to
     '1'.

   The following commands affect the entire buffer list:

'S'
     Sort the Buffer Menu entries according to their values in the
     column at point.  With a numeric prefix argument N, sort according
     to the N-th column ('tabulated-list-sort').

'}'
     Widen the current column width by N (the prefix numeric argument)
     characters.

'{'
     Narrow the current column width by N (the prefix numeric argument)
     characters.

'T'
     Delete, or reinsert, lines for non-file buffers
     ('Buffer-menu-toggle-files-only').  This command toggles the
     inclusion of such buffers in the buffer list.

   Normally, the buffer '*Buffer List*' is not updated automatically
when buffers are created and killed; its contents are just text.  If you
have created, deleted or renamed buffers, the way to update '*Buffer
List*' to show what you have done is to type 'g' ('revert-buffer').  You
can make this happen regularly every 'auto-revert-interval' seconds if
you enable Auto Revert mode in this buffer, as long as it is not marked
modified.  Global Auto Revert mode applies to the '*Buffer List*' buffer
only if 'global-auto-revert-non-file-buffers' is non-'nil'.  *Note
global-auto-revert-non-file-buffers: Auto Reverting the Buffer Menu, for
details.

==============================================================================
File: emacs.info,  Node: |Indirect_Buffers|,  Next: |Buffer_Convenience|,  Prev: |Several_Buffers|,  Up: |Buffers|
==============================================================================

                                                              *Indirect_Buffers*

19.6 Indirect Buffers
=====----------------

An "indirect buffer" shares the text of some other buffer, which is
called the "base buffer" of the indirect buffer.  In some ways it is a
buffer analogue of a symbolic link between files.

'M-x make-indirect-buffer <RET> BASE-BUFFER <RET> INDIRECT-NAME <RET>'
     Create an indirect buffer named INDIRECT-NAME with base buffer
     BASE-BUFFER.
'M-x clone-indirect-buffer <RET>'
     Create an indirect buffer that is a twin copy of the current
     buffer.
'C-x 4 c'
     Create an indirect buffer that is a twin copy of the current
     buffer, and select it in another window
     ('clone-indirect-buffer-other-window').

   The text of the indirect buffer is always identical to the text of
its base buffer; changes made by editing either one are visible
immediately in the other.  But in all other respects, the indirect
buffer and its base buffer are completely separate.  They can have
different names, different values of point, different narrowing,
different markers, different major modes, and different local variables.

   An indirect buffer cannot visit a file, but its base buffer can.  If
you try to save the indirect buffer, that actually works by saving the
base buffer.  Killing the base buffer effectively kills the indirect
buffer, but killing an indirect buffer has no effect on its base buffer.

   One way to use indirect buffers is to display multiple views of an
outline.  *Note Outline Views::.

   A quick and handy way to make an indirect buffer is with the command
'M-x clone-indirect-buffer'.  It creates and selects an indirect buffer
whose base buffer is the current buffer.  With a numeric argument, it
prompts for the name of the indirect buffer; otherwise it uses the name
of the current buffer, with a '<N>' suffix added.  'C-x 4 c'
('clone-indirect-buffer-other-window') works like 'M-x
clone-indirect-buffer', but it selects the new buffer in another window.
These functions run the hook 'clone-indirect-buffer-hook' after creating
the indirect buffer.

   The more general way to make an indirect buffer is with the command
'M-x make-indirect-buffer'.  It creates an indirect buffer named
INDIRECT-NAME from a buffer BASE-BUFFER, prompting for both using the
minibuffer.

==============================================================================
File: emacs.info,  Node: |Buffer_Convenience|,  Prev: |Indirect_Buffers|,  Up: |Buffers|
==============================================================================

                                                            *Buffer_Convenience*

19.7 Convenience Features and Customization of Buffer Handling
=====---------------------------------------------------------

This section describes several modes and features that make it more
convenient to switch between buffers.

MENU

* |Uniquify|::               Making buffer names unique with directory parts.
* |Icomplete|::              Fast minibuffer selection.
* |Buffer_Menus|::           Configurable buffer menu.

==============================================================================
File: emacs.info,  Node: |Uniquify|,  Next: |Icomplete|,  Up: |Buffer_Convenience|
==============================================================================

                                                                      *Uniquify*

19.7.1 Making Buffer Names Unique
---------------------------------

When several buffers visit identically-named files, Emacs must give the
buffers distinct names.  The default method adds a suffix based on the
names of the directories that contain the files.  For example, if you
visit files '/foo/bar/mumble/name' and '/baz/quux/mumble/name' at the
same time, their buffers will be named 'name<bar/mumble>' and
'name<quux/mumble>', respectively.  Emacs adds as many directory parts
as are needed to make a unique name.

   You can choose from several different styles for constructing unique
buffer names, by customizing the option 'uniquify-buffer-name-style'.

   The 'forward' naming method includes part of the file's directory
name at the beginning of the buffer name; using this method, buffers
visiting the files '/u/rms/tmp/Makefile' and
'/usr/projects/zaphod/Makefile' would be named 'tmp/Makefile' and
'zaphod/Makefile'.

   In contrast, the 'post-forward' naming method would call the buffers
'Makefile|tmp' and 'Makefile|zaphod'.  The default method
'post-forward-angle-brackets' is like 'post-forward', except that it
encloses the unique path in angle brackets.  The 'reverse' naming method
would call them 'Makefile\tmp' and 'Makefile\zaphod'.  The nontrivial
difference between 'post-forward' and 'reverse' occurs when just one
directory name is not enough to distinguish two files; then 'reverse'
puts the directory names in reverse order, so that '/top/middle/file'
becomes 'file\middle\top', while 'post-forward' puts them in forward
order after the file name, as in 'file|top/middle'.  If
'uniquify-buffer-name-style' is set to 'nil', the buffer names simply
get '<2>', '<3>', etc. appended.

   Which rule to follow for putting the directory names in the buffer
name is not very important if you are going to _look_ at the buffer
names before you type one.  But as an experienced user, if you know the
rule, you won't have to look.  And then you may find that one rule or
another is easier for you to remember and apply quickly.

==============================================================================
File: emacs.info,  Node: |Icomplete|,  Next: |Buffer_Menus|,  Prev: |Uniquify|,  Up: |Buffer_Convenience|
==============================================================================

                                                                     *Icomplete*

19.7.2 Fast minibuffer selection
--------------------------------

Icomplete global minor mode provides a convenient way to quickly select
an element among the possible completions in a minibuffer.  When
enabled, typing in the minibuffer continuously displays a list of
possible completions that match the string you have typed.

   At any time, you can type 'C-j' to select the first completion in the
list.  So the way to select a particular completion is to make it the
first in the list.  There are two ways to do this.  You can type more of
the completion name and thus narrow down the list, excluding unwanted
completions above the desired one.  Alternatively, you can use 'C-.' and
'C-,' to rotate the list until the desired buffer is first.

   'M-<TAB>' will select the first completion in the list, like 'C-j'
but without exiting the minibuffer, so you can edit it further.  This is
typically used when entering a file name, where 'M-<TAB>' can be used a
few times to descend in the hierarchy of directories.

   To enable Icomplete mode, type 'M-x icomplete-mode', or customize the
variable 'icomplete-mode' to 't' (*note Easy Customization::).

   An alternative to Icomplete mode is Fido mode.  This is very similar
to Icomplete mode, but retains some functionality from a popular
extension called Ido mode (in fact the name is derived from "Fake Ido").
Among other things, in Fido mode, 'C-s' and 'C-r' are also used to
rotate the completions list, 'C-k' can be used to delete files and kill
buffers in-list.  Another noteworthy aspect is that 'flex' is used as
the default completion style (*note Completion Styles::).  To change
this, add the following to your initialization file (*note Init File::):

     (defun my-icomplete-styles ()
       (setq-local completion-styles '(initials flex)))
     (add-hook 'icomplete-minibuffer-setup-hook 'my-icomplete-styles)

   To enable Fido mode, type 'M-x fido-mode', or customize the variable
'fido-mode' to 't' (*note Easy Customization::).

==============================================================================
File: emacs.info,  Node: |Buffer_Menus|,  Prev: |Icomplete|,  Up: |Buffer_Convenience|
==============================================================================

                                                                  *Buffer_Menus*

19.7.3 Customizing Buffer Menus
-------------------------------

'M-x bs-show'
     Make a list of buffers similarly to 'M-x list-buffers' but
     customizable.
'M-x ibuffer'
     Make a list of buffers and operate on them in Dired-like fashion.

   'M-x bs-show' pops up a buffer list similar to the one normally
displayed by 'C-x C-b', but whose display you can customize in a more
flexible fashion.  For example, you can specify the list of buffer
attributes to show, the minimum and maximum width of buffer name column,
a regexp for names of buffers that will never be shown and those which
will always be shown, etc.  If you prefer this to the usual buffer list,
you can bind this command to 'C-x C-b'.  To customize this buffer list,
use the 'bs' Custom group (*note Easy Customization::), or invoke
'bs-customize'.

   MSB global minor mode ("MSB" stands for "mouse select buffer")
provides a different and customizable mouse buffer menu which you may
prefer.  It replaces the 'mouse-buffer-menu' commands, normally bound to
'C-Down-mouse-1' and 'C-<F10>', with its own commands, and also modifies
the menu-bar buffer menu.  You can customize the menu in the 'msb'
Custom group.

   IBuffer is a major mode for viewing a list of buffers and operating
on them in a way analogous to that of Dired (*note Dired::), including
filtering, marking, sorting in various ways, and acting on buffers.

==============================================================================
File: emacs.info,  Node: |Windows|,  Next: |Frames|,  Prev: |Buffers|,  Up: |Top|
==============================================================================

                                                                       *Windows*

20 Multiple Windows
*****==============

Emacs can split a frame into two or many windows.  Multiple windows can
display parts of different buffers, or different parts of one buffer.
Multiple frames always imply multiple windows, because each frame has
its own set of windows.  Each window belongs to one and only one frame.

MENU

* |Basic_Window|::        Introduction to Emacs windows.
* |Split_Window|::        New windows are made by splitting existing windows.
* |Other_Window|::        Moving to another window or doing something to it.
* |Pop_Up_Window|::       Finding a file or buffer in another window.
* |Change_Window|::       Deleting windows and changing their sizes.
* |Displaying_Buffers|::  How Emacs picks a window for displaying a buffer.
* |Window_Convenience|::  Convenience functions for window handling.
* |Tab_Line|::            Window tab line.

==============================================================================
File: emacs.info,  Node: |Basic_Window|,  Next: |Split_Window|,  Up: |Windows|
==============================================================================

                                                                  *Basic_Window*

20.1 Concepts of Emacs Windows
=====-------------------------

Each Emacs window displays one Emacs buffer at any time.  A single
buffer may appear in more than one window; if it does, any changes in
its text are displayed in all the windows where it appears.  But these
windows can show different parts of the buffer, because each window has
its own value of point.

   At any time, one Emacs window is the "selected window"; the buffer
this window is displaying is the current buffer.  On graphical displays,
the point is indicated by a solid blinking cursor in the selected
window, and by a hollow box in non-selected windows.  On text terminals,
the cursor is drawn only in the selected window.  *Note Cursor
Display::.

   Commands to move point affect the value of point for the selected
Emacs window only.  They do not change the value of point in other Emacs
windows, even those showing the same buffer.  The same is true for
buffer-switching commands such as 'C-x b'; they do not affect other
windows at all.  However, there are other commands such as 'C-x 4 b'
that select a different window and switch buffers in it.  Also, all
commands that display information in a window, including (for example)
'C-h f' ('describe-function') and 'C-x C-b' ('list-buffers'), usually
work by displaying buffers in a nonselected window without affecting the
selected window.

   When multiple windows show the same buffer, they can have different
regions, because they can have different values of point.  However, they
all have the same value for the mark, because each buffer has only one
mark position.

   Each window has its own mode line, which displays the buffer name,
modification status and major and minor modes of the buffer that is
displayed in the window.  The selected window's mode line appears in a
different color.  *Note Mode Line::, for details.

==============================================================================
File: emacs.info,  Node: |Split_Window|,  Next: |Other_Window|,  Prev: |Basic_Window|,  Up: |Windows|
==============================================================================

                                                                  *Split_Window*

20.2 Splitting Windows
=====-----------------

'C-x 2'
     Split the selected window into two windows, one above the other
     ('split-window-below').
'C-x 3'
     Split the selected window into two windows, positioned side by side
     ('split-window-right').
'C-mouse-2'
     In the mode line of a window, split that window.

   'C-x 2' ('split-window-below') splits the selected window into two
windows, one above the other.  After splitting, the selected window is
the upper one, and the newly split-off window is below.  Both windows
have the same value of point as before, and display the same portion of
the buffer (or as close to it as possible).  If necessary, the windows
are scrolled to keep point on-screen.  By default, the two windows each
get half the height of the original window.  A positive numeric argument
specifies how many lines to give to the top window; a negative numeric
argument specifies how many lines to give to the bottom window.

   If you change the variable 'split-window-keep-point' to 'nil', 'C-x
2' instead adjusts the portion of the buffer displayed by the two
windows, as well as the value of point in each window, in order to keep
the text on the screen as close as possible to what it was before;
furthermore, if point was in the lower half of the original window, the
bottom window is selected instead of the upper one.

   'C-x 3' ('split-window-right') splits the selected window into two
side-by-side windows.  The left window is the selected one; the right
window displays the same portion of the same buffer, and has the same
value of point.  A positive numeric argument specifies how many columns
to give the left window; a negative numeric argument specifies how many
columns to give the right window.

   When you split a window with 'C-x 3', each resulting window occupies
less than the full width of the frame.  If it becomes too narrow, the
buffer may be difficult to read if continuation lines are in use (*note
Continuation Lines::).  Therefore, Emacs automatically switches to line
truncation if the window width becomes narrower than 50 columns.  This
truncation occurs regardless of the value of the variable
'truncate-lines' (*note Line Truncation::); it is instead controlled by
the variable 'truncate-partial-width-windows'.  If the value of this
variable is a positive integer (the default is 50), that specifies the
minimum total width for a partial-width window before automatic line
truncation occurs; if the value is 'nil', automatic line truncation is
disabled; and for any other non-'nil' value, Emacs truncates lines in
every partial-width window regardless of its width.  The total width of
a window is in column units as reported by 'window-total-width' (*note
(elisp)Window Sizes::), it includes the fringes, the continuation and
truncation glyphs, the margins, and the scroll bar.

   On text terminals, side-by-side windows are separated by a vertical
divider which is drawn using the 'vertical-border' face.

   If you click 'C-mouse-2' in the mode line of a window, that splits
the window, putting a vertical divider where you click.  Depending on
how Emacs is compiled, you can also split a window by clicking
'C-mouse-2' in the scroll bar, which puts a horizontal divider where you
click (this feature does not work when Emacs uses GTK+ scroll bars).

   By default, when you split a window, Emacs gives each of the
resulting windows dimensions that are an integral multiple of the
default font size of the frame.  That might subdivide the screen estate
unevenly between the resulting windows.  If you set the variable
'window-resize-pixelwise' to a non-'nil' value, Emacs will give each
window the same number of pixels (give or take one pixel if the initial
dimension was an odd number of pixels).  Note that when a frame's pixel
size is not a multiple of the frame's character size, at least one
window may get resized pixelwise even if this option is 'nil'.

==============================================================================
File: emacs.info,  Node: |Other_Window|,  Next: |Pop_Up_Window|,  Prev: |Split_Window|,  Up: |Windows|
==============================================================================

                                                                  *Other_Window*

20.3 Using Other Windows
=====-------------------

'C-x o'
     Select another window ('other-window').
'C-M-v'
     Scroll the next window upward ('scroll-other-window').
'C-M-S-v'
     Scroll the next window downward ('scroll-other-window-down').
'mouse-1'
     'mouse-1', in the text area of a window, selects the window and
     moves point to the position clicked.  Clicking in the mode line
     selects the window without moving point in it.

   With the keyboard, you can switch windows by typing 'C-x o'
('other-window').  That is an 'o', for "other", not a zero.  When there
are more than two windows, this command moves through all the windows in
a cyclic order, generally top to bottom and left to right.  After the
rightmost and bottommost window, it goes back to the one at the upper
left corner.  A numeric argument means to move several steps in the
cyclic order of windows.  A negative argument moves around the cycle in
the opposite order.  When the minibuffer is active, the minibuffer
window is the last window in the cycle; you can switch from the
minibuffer window to one of the other windows, and later switch back and
finish supplying the minibuffer argument that is requested.  *Note
Minibuffer Edit::.

   The 'other-window' command will normally only switch to the next
window in the current frame (unless otherwise configured).  If you work
in a multi-frame environment and you want windows in all frames to be
part of the cycle, you can rebind 'C-x o' to the 'next-window-any-frame'
command.  (*Note Rebinding::, for how to rebind a command.)

   The usual scrolling commands (*note Display::) apply to the selected
window only, but there are also commands to scroll the next window.
'C-M-v' ('scroll-other-window') scrolls the window that 'C-x o' would
select.  In other respects, the command behaves like 'C-v'; both move
the buffer text upward relative to the window, and take positive and
negative arguments.  (In the minibuffer, 'C-M-v' scrolls the help window
associated with the minibuffer, if any, rather than the next window in
the standard cyclic order; *note Minibuffer Edit::.)  'C-M-S-v'
('scroll-other-window-down') scrolls the next window downward in a
similar way.

   If you set 'mouse-autoselect-window' to a non-'nil' value, moving the
mouse over a different window selects that window.  This feature is off
by default.

==============================================================================
File: emacs.info,  Node: |Pop_Up_Window|,  Next: |Change_Window|,  Prev: |Other_Window|,  Up: |Windows|
==============================================================================

                                                                 *Pop_Up_Window*

20.4 Displaying in Another Window
=====----------------------------

'C-x 4' is a prefix key for a variety of commands that switch to a
buffer in a different window--either another existing window, or a new
window created by splitting the selected window.  *Note Window Choice::,
for how Emacs picks or creates the window to use.

'C-x 4 b BUFNAME <RET>'
     Select buffer BUFNAME in another window
     ('switch-to-buffer-other-window').  *Note Select Buffer::.

'C-x 4 C-o BUFNAME <RET>'
     Display buffer BUFNAME in some window, without trying to select it
     ('display-buffer').  *Note Displaying Buffers::, for details about
     how the window is chosen.

'C-x 4 f FILENAME <RET>'
     Visit file FILENAME and select its buffer in another window
     ('find-file-other-window').  *Note Visiting::.

'C-x 4 d DIRECTORY <RET>'
     Select a Dired buffer for directory DIRECTORY in another window
     ('dired-other-window').  *Note Dired::.

'C-x 4 m'
     Start composing a mail message, similar to 'C-x m' (*note Sending
     Mail::), but in another window ('compose-mail-other-window').

'C-x 4 .'
     Find the definition of an identifier, similar to 'M-.' (*note
     Xref::), but in another window
     ('xref-find-definitions-other-window').
'C-x 4 r FILENAME <RET>'
     Visit file FILENAME read-only, and select its buffer in another
     window ('find-file-read-only-other-window').  *Note Visiting::.

==============================================================================
File: emacs.info,  Node: |Change_Window|,  Next: |Displaying_Buffers|,  Prev: |Pop_Up_Window|,  Up: |Windows|
==============================================================================

                                                                 *Change_Window*

20.5 Deleting and Resizing Windows
=====-----------------------------

'C-x 0'
     Delete the selected window ('delete-window').
'C-x 1'
     Delete all windows in the selected frame except the selected window
     ('delete-other-windows').
'C-x 4 0'
     Delete the selected window and kill the buffer that was showing in
     it ('kill-buffer-and-window').  The last character in this key
     sequence is a zero.
'M-x delete-windows-on <RET> BUFFER <RET>'
     Delete windows showing the specified BUFFER.
'C-x ^'
     Make selected window taller ('enlarge-window').
'C-x }'
     Make selected window wider ('enlarge-window-horizontally').
'C-x {'
     Make selected window narrower ('shrink-window-horizontally').
'C-x -'
     Shrink this window if its buffer doesn't need so many lines
     ('shrink-window-if-larger-than-buffer').
'C-x +'
     Make all windows the same height ('balance-windows').

   To delete the selected window, type 'C-x 0' ('delete-window').  (That
is a zero.)  Once a window is deleted, the space that it occupied is
given to an adjacent window (but not the minibuffer window, even if that
is active at the time).  Deleting the window has no effect on the buffer
it used to display; the buffer continues to exist, and you can still
switch to it with 'C-x b'.

   'C-x 4 0' ('kill-buffer-and-window') is a stronger command than 'C-x
0'; it kills the current buffer and then deletes the selected window.

   'C-x 1' ('delete-other-windows') deletes all the windows, _except_
the selected one; the selected window expands to use the whole frame.
(This command cannot be used while the minibuffer window is active;
attempting to do so signals an error.)

   'M-x delete-windows-on' deletes windows that show a specific buffer.
It prompts for the buffer, defaulting to the current buffer.  With
prefix argument of zero, 'C-u 0', this command deletes windows only on
the current display's frames.

   The command 'C-x ^' ('enlarge-window') makes the selected window one
line taller, taking space from a vertically adjacent window without
changing the height of the frame.  With a positive numeric argument,
this command increases the window height by that many lines; with a
negative argument, it reduces the height by that many lines.  If there
are no vertically adjacent windows (i.e., the window is at the full
frame height), that signals an error.  The command also signals an error
if you attempt to reduce the height of any window below a certain
minimum number of lines, specified by the variable 'window-min-height'
(the default is 4).

   Similarly, 'C-x }' ('enlarge-window-horizontally') makes the selected
window wider, and 'C-x {' ('shrink-window-horizontally') makes it
narrower.  These commands signal an error if you attempt to reduce the
width of any window below a certain minimum number of columns, specified
by the variable 'window-min-width' (the default is 10).

   Mouse clicks on the mode line (*note Mode Line Mouse::) or on window
dividers (*note Window Dividers::) provide another way to change window
heights and to split or delete windows.

   'C-x -' ('shrink-window-if-larger-than-buffer') reduces the height of
the selected window, if it is taller than necessary to show the whole
text of the buffer it is displaying.  It gives the extra lines to other
windows in the frame.

   You can also use 'C-x +' ('balance-windows') to even out the heights
of all the windows in the selected frame.

==============================================================================
File: emacs.info,  Node: |Displaying_Buffers|,  Next: |Window_Convenience|,  Prev: |Change_Window|,  Up: |Windows|
==============================================================================

                                                            *Displaying_Buffers*

20.6 Displaying a Buffer in a Window
=====-------------------------------

It is a common Emacs operation to display or pop up some buffer in
response to a user command.  There are several different ways in which
commands do this.

   Many commands, like 'C-x C-f' ('find-file'), by default display the
buffer by "taking over" the selected window, expecting that the user's
attention will be diverted to that buffer.

   Some commands try to display intelligently, trying not to take over
the selected window, e.g., by splitting off a new window and displaying
the desired buffer there.  Such commands, which include the various help
commands (*note Help::), work by calling 'display-buffer' internally.
*Note Window Choice::, for details.

   Other commands do the same as 'display-buffer', and additionally
select the displaying window so that you can begin editing its buffer.
The command 'M-g M-n' ('next-error') is one example (*note Compilation
Mode::).  Such commands work by calling the function 'pop-to-buffer'
internally.  *Note Switching to a Buffer in a Window: (elisp)Switching
Buffers.

   Commands with names ending in '-other-window' behave like
'display-buffer', except that they never display in the selected window.
Several of these commands are bound in the 'C-x 4' prefix key (*note Pop
Up Window::).

   Commands with names ending in '-other-frame' behave like
'display-buffer', except that they (i) never display in the selected
window and (ii) prefer to either create a new frame or use a window on
some other frame to display the desired buffer.  Several of these
commands are bound in the 'C-x 5' prefix key.

MENU

* |Window_Choice|::   How 'display-buffer' works.
* |Temporary_Displays|::   Displaying non-editable buffers.

==============================================================================
File: emacs.info,  Node: |Window_Choice|,  Next: |Temporary_Displays|,  Up: |Displaying_Buffers|
==============================================================================

                                                                 *Window_Choice*

20.6.1 How 'display-buffer' works
---------------------------------

The 'display-buffer' command (as well as commands that call it
internally) chooses a window to display by following the steps given
below.  *Note Choosing a Window for Displaying a Buffer: (elisp)Choosing
Window, for details about how to alter this sequence of steps.

   * If the buffer should be displayed in the selected window regardless
     of other considerations, reuse the selected window.  By default,
     this step is skipped, but you can tell Emacs not to skip it by
     adding a regular expression matching the buffer's name together
     with a reference to the 'display-buffer-same-window' action
     function (*note Action Functions for Buffer Display: (elisp)Buffer
     Display Action Functions.) to the option 'display-buffer-alist'
     (*note Choosing a Window for Displaying a Buffer: (elisp)Choosing
     Window.).  For example, to display the buffer 'scratch'
     preferably in the selected window write:

          (customize-set-variable
           'display-buffer-alist
           '("\\*scratch\\*" (display-buffer-same-window)))

     By default, 'display-buffer-alist' is 'nil'.

   * Otherwise, if the buffer is already displayed in an existing
     window, reuse that window.  Normally, only windows on the selected
     frame are considered, but windows on other frames are also reusable
     if you use the corresponding 'reusable-frames' action alist entry
     (*note Action Alists for Buffer Display: (elisp)Buffer Display
     Action Alists.).  See the next step for an example of how to do
     that.

   * Otherwise, optionally create a new frame and display the buffer
     there.  By default, this step is skipped.  To enable it, change the
     value of the option 'display-buffer-base-action' (*note Choosing a
     Window for Displaying a Buffer: (elisp)Choosing Window.) as
     follows:

          (customize-set-variable
           'display-buffer-base-action
           '((display-buffer-reuse-window display-buffer-pop-up-frame)
             (reusable-frames . 0)))

     This customization will also try to make the preceding step search
     for a reusable window on all visible or iconified frames.

   * Otherwise, try to create a new window by splitting a window on the
     selected frame, and display the buffer in that new window.

     The split can be either vertical or horizontal, depending on the
     variables 'split-height-threshold' and 'split-width-threshold'.
     These variables should have integer values.  If
     'split-height-threshold' is smaller than the chosen window's
     height, the split puts the new window below.  Otherwise, if
     'split-width-threshold' is smaller than the window's width, the
     split puts the new window on the right.  If neither condition
     holds, Emacs tries to split so that the new window is below--but
     only if the window was not split before (to avoid excessive
     splitting).

   * Otherwise, display the buffer in a window previously showing it.
     Normally, only windows on the selected frame are considered, but
     with a suitable 'reusable-frames' action alist entry (see above)
     the window may be also on another frame.

   * Otherwise, display the buffer in an existing window on the selected
     frame.

   * If all the above methods fail for whatever reason, create a new
     frame and display the buffer there.

==============================================================================
File: emacs.info,  Node: |Temporary_Displays|,  Prev: |Window_Choice|,  Up: |Displaying_Buffers|
==============================================================================

                                                            *Temporary_Displays*

20.6.2 Displaying non-editable buffers.
---------------------------------------

Some buffers are shown in windows for perusal rather than for editing.
Help commands (note Help::) typically use a buffer called 'Help*' for
that purpose, minibuffer completion (*note Completion::) uses a buffer
called 'Completions', etc.  Such buffers are usually displayed only
for a short period of time.

   Normally, Emacs chooses the window for such temporary displays via
'display-buffer', as described in the previous subsection.  The
'Completions' buffer, on the other hand, is normally displayed in a
window at the bottom of the selected frame, regardless of the number of
windows already shown on that frame.

   If you prefer Emacs to display a temporary buffer in a different
fashion, customize the variable 'display-buffer-alist' (*note Choosing a
Window for Displaying a Buffer: (elisp)Choosing Window.) appropriately.
For example, to display 'Completions' always below the selected
window, use the following form in your initialization file (*note Init
File::):

     (customize-set-variable
      'display-buffer-alist
      '(("\\*Completions\\*" display-buffer-below-selected)))

   The 'Completions' buffer is also special in the sense that Emacs
usually tries to make its window just as large as necessary to display
all of its contents.  To resize windows showing other temporary
displays, like, for example, the 'Help' buffer, turn on the minor mode
(*note Minor Modes::) 'temp-buffer-resize-mode' (*note Temporary
Displays: (elisp)Temporary Displays.).

   The maximum size of windows resized by 'temp-buffer-resize-mode' can
be controlled by customizing the options 'temp-buffer-max-height' and
'temp-buffer-max-width' (*note Temporary Displays: (elisp)Temporary
Displays.), and cannot exceed the size of the containing frame.

==============================================================================
File: emacs.info,  Node: |Window_Convenience|,  Next: |Tab_Line|,  Prev: |Displaying_Buffers|,  Up: |Windows|
==============================================================================

                                                            *Window_Convenience*

20.7 Convenience Features for Window Handling
=====----------------------------------------

Winner mode is a global minor mode that records the changes in the
window configuration (i.e., how the frames are partitioned into
windows), so that you can undo them.  You can toggle Winner mode with
'M-x winner-mode', or by customizing the variable 'winner-mode'.  When
the mode is enabled, 'C-c left' ('winner-undo') undoes the last window
configuration change.  If you change your mind while undoing, you can
redo the changes you had undone using 'C-c right' ('M-x winner-redo').
To prevent Winner mode from binding 'C-c left' and 'C-c right', you can
customize the variable 'winner-dont-bind-my-keys' to a non-'nil' value.
By default, Winner mode stores a maximum of 200 window configurations
per frame, but you can change that by modifying the variable
'winner-ring-size'.  If there are some buffers whose windows you
wouldn't want Winner mode to restore, add their names to the list
variable 'winner-boring-buffers' or to the regexp
'winner-boring-buffers-regexp'.

   Follow mode ('M-x follow-mode') synchronizes several windows on the
same buffer so that they always display adjacent sections of that
buffer.  *Note Follow Mode::.

   The Windmove package defines commands for moving directionally
between neighboring windows in a frame.  'M-x windmove-right' selects
the window immediately to the right of the currently selected one, and
similarly for the left, up, and down counterparts.
'M-x windmove-default-keybindings' binds these commands to 'S-right'
etc.; doing so disables shift selection for those keys (*note Shift
Selection::).  In the same way as keybindings can be defined for
commands that select windows directionally, you can use
'M-x windmove-display-default-keybindings' to define keybindings for
commands that specify in what direction to display the window for the
buffer that the next command is going to display.  Also there is
'M-x windmove-delete-default-keybindings' to define keybindings for
commands that delete windows directionally, and
'M-x windmove-swap-states-in-direction' that define keybindings for
commands that swap the window contents of the selected window with the
window in the specified direction.

   The command 'M-x compare-windows' lets you compare the text shown in
different windows.  *Note Comparing Files::.

   Scroll All mode ('M-x scroll-all-mode') is a global minor mode that
causes scrolling commands and point motion commands to apply to every
single window.

==============================================================================
File: emacs.info,  Node: |Tab_Line|,  Prev: |Window_Convenience|,  Up: |Windows|
==============================================================================

                                                                      *Tab_Line*

20.8 Window Tab Line
=====---------------

The command 'global-tab-line-mode' toggles the display of a "tab line"
on the top screen line of each window.  The Tab Line shows special
buttons ("tabs") for each buffer that was displayed in a window, and
allows switching to any of these buffers by clicking the corresponding
button.  Clicking on the '+' icon adds a new buffer to the window-local
tab line of buffers, and clicking on the 'x' icon of a tab deletes it.
The mouse wheel on the tab line scrolls the tabs horizontally.

   Selecting the previous window-local tab is the same as typing 'C-x
<LEFT>' ('previous-buffer'), selecting the next tab is the same as 'C-x
<RIGHT>' ('next-buffer').  Both commands support a numeric prefix
argument as a repeat count.

   You can customize the variable 'tab-line-tabs-function' to define the
preferred contents of the tab line.  By default, it displays all buffers
previously visited in the window, as described above.  But you can also
set it to display a list of buffers with the same major mode as the
current buffer, or to display buffers grouped by their major mode, where
clicking on the mode name in the first tab displays a list of all major
modes where you can select another group of buffers.

   Note that the Tab Line is different from the Tab Bar (*note Tab
Bars::).  Whereas tabs on the Tab Bar at the top of each frame are used
to switch between window configurations containing several windows with
buffers, tabs on the Tab Line at the top of each window are used to
switch between buffers in the window.

==============================================================================
File: emacs.info,  Node: |Frames|,  Next: |International|,  Prev: |Windows|,  Up: |Top|
==============================================================================

                                                                        *Frames*

21 Frames and Graphical Displays
*****===========================

When Emacs is started on a graphical display, e.g., on the X Window
System, it occupies a graphical system-level display region.  In this
manual, we call this a "frame", reserving the word "window" for the part
of the frame used for displaying a buffer.  A frame initially contains
one window, but it can be subdivided into multiple windows (*note
Windows::).  A frame normally also contains a menu bar, tool bar, and
echo area.

   You can also create additional frames (*note Creating Frames::).  All
frames created in the same Emacs session have access to the same
underlying buffers and other data.  For instance, if a buffer is being
shown in more than one frame, any changes made to it in one frame show
up immediately in the other frames too.

   Typing 'C-x C-c' closes all the frames on the current display, and
ends the Emacs session if it has no frames open on any other displays
(*note Exiting::).  To close just the selected frame, type 'C-x 5 0'
(that is zero, not 'o').

   This chapter describes Emacs features specific to graphical displays
(particularly mouse commands), and features for managing multiple
frames.  On text terminals, many of these features are unavailable.
However, it is still possible to create multiple frames on text
terminals; such frames are displayed one at a time, filling the entire
terminal screen (*note Non-Window Terminals::).  It is also possible to
use the mouse on some text terminals (*note Text-Only Mouse::, for doing
so on GNU and Unix systems; and *note MS-DOS Mouse::, for doing so on
MS-DOS). Menus are supported on all text terminals.

MENU

* |Mouse_Commands|::      Moving, cutting, and pasting, with the mouse.
* |Word_and_Line_Mouse|:: Mouse commands for selecting whole words or lines.
* |Mouse_References|::    Using the mouse to select an item from a list.
* |Menu_Mouse_Clicks|::   Mouse clicks that bring up menus.
* |Mode_Line_Mouse|::     Mouse clicks on the mode line.
* |Creating_Frames|::     Creating additional Emacs frames with various contents.
* |Frame_Commands|::      Iconifying, deleting, and switching frames.
* |Fonts|::               Changing the frame font.
* |Speedbar|::            How to make and use a speedbar frame.
* |Multiple_Displays|::   How one Emacs instance can talk to several displays.
* |Frame_Parameters|::    Changing the colors and other modes of frames.
* |Scroll_Bars|::         How to enable and disable scroll bars; how to use them.
* |Window_Dividers|::     Window separators that can be dragged with the mouse.
* |Drag_and_Drop|::       Using drag and drop to open files and insert text.
* |Menu_Bars|::           Enabling and disabling the menu bar.
* |Tool_Bars|::           Enabling and disabling the tool bar.
* |Tab_Bars|::            Enabling and disabling the tab bar.
* |Dialog_Boxes|::        Controlling use of dialog boxes.
* |Tooltips|::            Displaying information at the current mouse position.
* |Mouse_Avoidance|::     Preventing the mouse pointer from obscuring text.
* |Non_Window_Terminals|::  Multiple frames on terminals that show only one.
* |Text_Only_Mouse|::     Using the mouse in text terminals.

==============================================================================
File: emacs.info,  Node: |Mouse_Commands|,  Next: |Word_and_Line_Mouse|,  Up: |Frames|
==============================================================================

                                                                *Mouse_Commands*

21.1 Mouse Commands for Editing
=====--------------------------

'mouse-1'
     Move point to where you click ('mouse-set-point').

'Drag-mouse-1'
     Activate the region around the text selected by dragging, and put
     the text in the primary selection ('mouse-set-region').

'mouse-2'
     Move point to where you click, and insert the contents of the
     primary selection there ('mouse-yank-primary').

'mouse-3'
     If the region is active, move the nearer end of the region to the
     click position; otherwise, set mark at the current value of point
     and point at the click position.  Save the resulting region in the
     kill ring; on a second click, kill it ('mouse-save-then-kill').

'C-M-mouse-1'
     Activate a rectangular region around the text selected by dragging.
     *Note Rectangles::.

   The most basic mouse command is 'mouse-set-point', which is invoked
by clicking with the left mouse button, 'mouse-1', in the text area of a
window.  This moves point to the position where you clicked.  If that
window was not the selected window, it becomes the selected window.  You
can also activate a region by double-clicking 'mouse-1' (*note Word and
Line Mouse::).

   Normally, if the frame you clicked in was not the selected frame, it
is made the selected frame, in addition to selecting the window and
setting the cursor.  On the X Window System, you can change this by
setting the variable 'x-mouse-click-focus-ignore-position' to 't'.  In
that case, the initial click on an unselected frame just selects the
frame, without doing anything else; clicking again selects the window
and sets the cursor position.

   Holding down 'mouse-1' and dragging the mouse over a stretch of text
activates the region around that text ('mouse-set-region'), placing the
mark where you started holding down the mouse button, and point where
you release it (*note Mark::).  In addition, the text in the region
becomes the primary selection (*note Primary Selection::).

   If you change the variable 'mouse-drag-copy-region' to a non-'nil'
value, dragging the mouse over a stretch of text also adds the text to
the kill ring.  The default is 'nil'.

   If you move the mouse off the top or bottom of the window while
dragging, the window scrolls at a steady rate until you move the mouse
back into the window.  This way, you can select regions that don't fit
entirely on the screen.  The number of lines scrolled per step depends
on how far away from the window edge the mouse has gone; the variable
'mouse-scroll-min-lines' specifies a minimum step size.

   Clicking with the middle mouse button, 'mouse-2', moves point to the
position where you clicked and inserts the contents of the primary
selection ('mouse-yank-primary').  *Note Primary Selection::.  This
behavior is consistent with other X applications.  Alternatively, you
can rebind 'mouse-2' to 'mouse-yank-at-click', which performs a yank at
the position you click.

   If you change the variable 'mouse-yank-at-point' to a non-'nil'
value, 'mouse-2' does not move point; it inserts the text at point,
regardless of where you clicked or even which of the frame's windows you
clicked on.  This variable affects both 'mouse-yank-primary' and
'mouse-yank-at-click'.

   Clicking with the right mouse button, 'mouse-3', runs the command
'mouse-save-then-kill'.  This performs several actions depending on
where you click and the status of the region:

   * If no region is active, clicking 'mouse-3' activates the region,
     placing the mark where point was and point at the clicked position.

   * If a region is active, clicking 'mouse-3' adjusts the nearer end of
     the region by moving it to the clicked position.  The adjusted
     region's text is copied to the kill ring; if the text in the
     original region was already on the kill ring, it replaces it there.

   * If you originally specified the region using a double or triple
     'mouse-1', so that the region is defined to consist of entire words
     or lines (*note Word and Line Mouse::), then adjusting the region
     with 'mouse-3' also proceeds by entire words or lines.

   * If you use 'mouse-3' a second time consecutively, at the same
     place, that kills the region already selected.  Thus, the simplest
     way to kill text with the mouse is to click 'mouse-1' at one end,
     then click 'mouse-3' twice at the other end.  To copy the text into
     the kill ring without deleting it from the buffer, press 'mouse-3'
     just once--or just drag across the text with 'mouse-1'.  Then you
     can copy it elsewhere by yanking it.

   The 'mouse-save-then-kill' command also obeys the variable
'mouse-drag-copy-region' (described above).  If the value is non-'nil',
then whenever the command sets or adjusts the active region, the text in
the region is also added to the kill ring.  If the latest kill ring
entry had been added the same way, that entry is replaced rather than
making a new entry.

   Whenever you set the region using any of the mouse commands described
above, the mark will be deactivated by any subsequent unshifted cursor
motion command, in addition to the usual ways of deactivating the mark.
*Note Shift Selection::.

   Some mice have a "wheel" which can be used for scrolling.  Emacs
supports scrolling windows with the mouse wheel, by default, on most
graphical displays.  To toggle this feature, use 'M-x mouse-wheel-mode'.
The variables 'mouse-wheel-follow-mouse' and 'mouse-wheel-scroll-amount'
determine where and by how much buffers are scrolled.  The variable
'mouse-wheel-progressive-speed' determines whether the scroll speed is
linked to how fast you move the wheel.  This mode also supports
increasing or decreasing the height of the default face, by default
bound to scrolling with the <Ctrl> modifier.

   Emacs can also support horizontal scrolling if your mouse's wheel can
be tilted, or if your touchpad supports it.  This feature is off by
default; the variable 'mouse-wheel-tilt-scroll' turns it on, if you
customize it to a non-'nil' value.  By default, tilting the mouse wheel
scrolls the window's view horizontally in the direction of the tilt:
e.g., tilting to the right scrolls the window to the right, so that the
text displayed in the window moves horizontally to the left.  If you'd
like to reverse the direction of horizontal scrolling, customize the
variable 'mouse-wheel-flip-direction' to a non-'nil' value.

   When the mouse pointer is over an image in Image mode, *note Image
Mode::, scrolling the mouse wheel with the <Ctrl> modifier scales the
image under the mouse pointer.

==============================================================================
File: emacs.info,  Node: |Word_and_Line_Mouse|,  Next: |Mouse_References|,  Prev: |Mouse_Commands|,  Up: |Frames|
==============================================================================

                                                           *Word_and_Line_Mouse*

21.2 Mouse Commands for Words and Lines
=====----------------------------------

These variants of 'mouse-1' select entire words or lines at a time.
Emacs activates the region around the selected text, which is also
copied to the kill ring.

'Double-mouse-1'
     Select the text around the word or character which you click on.

     Double-clicking on a character with symbol syntax (such as
     underscore, in C mode) selects the symbol surrounding that
     character.  Double-clicking on a character with open- or
     close-parenthesis syntax selects the parenthetical grouping which
     that character starts or ends.  Double-clicking on a character with
     string-delimiter syntax (such as a single-quote or double-quote in
     C) selects the string constant (Emacs uses heuristics to figure out
     whether that character is the beginning or the end of it).

     Double-clicking on the beginning of a parenthetical grouping or
     beginning string-delimiter moves point to the end of the region,
     scrolling the buffer display forward if necessary to show the new
     location of point.  Double-clicking on the end of a parenthetical
     grouping or end string-delimiter keeps point at the end of the
     region by default, so the beginning of the region will not be
     visible if it is above the top of the window; setting the user
     option 'mouse-select-region-move-to-beginning' to non-'nil' changes
     this to move point to the beginning of the region, scrolling the
     display backward if necessary.

'Double-Drag-mouse-1'
     Select the text you drag across, in units of whole words.

'Triple-mouse-1'
     Select the line you click on.

'Triple-Drag-mouse-1'
     Select the text you drag across, in units of whole lines.

==============================================================================
File: emacs.info,  Node: |Mouse_References|,  Next: |Menu_Mouse_Clicks|,  Prev: |Word_and_Line_Mouse|,  Up: |Frames|
==============================================================================

                                                              *Mouse_References*

21.3 Following References with the Mouse
=====-----------------------------------

Some Emacs buffers include "buttons", or "hyperlinks": pieces of text
that perform some action (e.g., following a reference) when activated
(e.g., by clicking on them).  Usually, a button's text is visually
highlighted: it is underlined, or a box is drawn around it.  If you move
the mouse over a button, the shape of the mouse cursor changes and the
button lights up.  If you change the variable 'mouse-highlight' to
'nil', Emacs disables this highlighting.

   You can activate a button by moving point to it and typing <RET>, or
by clicking either 'mouse-1' or 'mouse-2' on the button.  For example,
in a Dired buffer, each file name is a button; activating it causes
Emacs to visit that file (note Dired::).  In a 'Compilation*' buffer,
each error message is a button, and activating it visits the source code
for that error (*note Compilation::).

   Although clicking 'mouse-1' on a button usually activates the button,
if you hold the mouse button down for a period of time before releasing
it (specifically, for more than 450 milliseconds), then Emacs moves
point where you clicked, without activating the button.  In this way,
you can use the mouse to move point over a button without activating it.
Dragging the mouse over or onto a button has its usual behavior of
setting the region, and does not activate the button.

   You can change how 'mouse-1' applies to buttons by customizing the
variable 'mouse-1-click-follows-link'.  If the value is a positive
integer, that determines how long you need to hold the mouse button down
for, in milliseconds, to cancel button activation; the default is 450,
as described in the previous paragraph.  If the value is 'nil',
'mouse-1' just sets point where you clicked, and does not activate
buttons.  If the value is 'double', double clicks activate buttons but
single clicks just set point.

   Normally, 'mouse-1' on a button activates the button even if it is in
a non-selected window.  If you change the variable
'mouse-1-click-in-non-selected-windows' to 'nil', 'mouse-1' on a button
in an unselected window moves point to the clicked position and selects
that window, without activating the button.

==============================================================================
File: emacs.info,  Node: |Menu_Mouse_Clicks|,  Next: |Mode_Line_Mouse|,  Prev: |Mouse_References|,  Up: |Frames|
==============================================================================

                                                             *Menu_Mouse_Clicks*

21.4 Mouse Clicks for Menus
=====----------------------

Several mouse clicks with the <Ctrl> and <SHIFT> modifiers bring up
menus.

'C-mouse-1'
     This menu is for selecting a buffer.

     The MSB ("mouse select buffer") global minor mode makes this menu
     smarter and more customizable.  *Note Buffer Menus::.

'C-mouse-2'
     This menu contains entries for examining faces and other text
     properties, and well as for setting them (the latter is mainly
     useful when editing enriched text; *note Enriched Text::).

'C-mouse-3'
     This menu is mode-specific.  For most modes if Menu-bar mode is on,
     this menu has the same items as all the mode-specific menu-bar
     menus put together.  Some modes may specify a different menu for
     this button.  If Menu Bar mode is off, this menu contains all the
     items which would be present in the menu bar--not just the
     mode-specific ones--so that you can access them without having to
     display the menu bar.

'S-mouse-1'
     This menu is for changing the default face within the window's
     buffer.  *Note Text Scale::.

   Some graphical applications use 'mouse-3' for a mode-specific menu.
If you prefer 'mouse-3' in Emacs to bring up such a menu instead of
running the 'mouse-save-then-kill' command, rebind 'mouse-3' by adding
the following line to your init file (*note Init Rebinding::):

     (global-set-key [mouse-3] 'mouse-popup-menubar-stuff)

==============================================================================
File: emacs.info,  Node: |Mode_Line_Mouse|,  Next: |Creating_Frames|,  Prev: |Menu_Mouse_Clicks|,  Up: |Frames|
==============================================================================

                                                               *Mode_Line_Mouse*

21.5 Mode Line Mouse Commands
=====------------------------

You can use mouse clicks on window mode lines to select and manipulate
windows.

   Some areas of the mode line, such as the buffer name, and major and
minor mode names, have their own special mouse bindings.  These areas
are highlighted when you hold the mouse over them, and information about
the special bindings will be displayed (*note Tooltips::).  This
section's commands do not apply in those areas.

'mouse-1'
     'mouse-1' on a mode line selects the window it belongs to.  By
     dragging 'mouse-1' on the mode line, you can move it, thus changing
     the height of the windows above and below.  Changing heights with
     the mouse in this way never deletes windows, it just refuses to
     make any window smaller than the minimum height.

'mouse-2'
     'mouse-2' on a mode line expands that window to fill its frame.

'mouse-3'
     'mouse-3' on a mode line deletes the window it belongs to.  If the
     frame has only one window, it does nothing.

'C-mouse-2'
     'C-mouse-2' on a mode line splits that window, producing two
     side-by-side windows with the boundary running through the click
     position (*note Split Window::).

   Furthermore, by clicking and dragging 'mouse-1' on the divider
between two side-by-side mode lines, you can move the vertical boundary
to the left or right.

   Note that resizing windows is affected by the value of
'window-resize-pixelwise', see *note Split Window::.

==============================================================================
File: emacs.info,  Node: |Creating_Frames|,  Next: |Frame_Commands|,  Prev: |Mode_Line_Mouse|,  Up: |Frames|
==============================================================================

                                                               *Creating_Frames*

21.6 Creating Frames
=====---------------

The prefix key 'C-x 5' is analogous to 'C-x 4'.  Whereas each 'C-x 4'
command pops up a buffer in a different window in the selected frame
(*note Pop Up Window::), the 'C-x 5' commands use a different frame.  If
an existing visible or iconified (a.k.a. "minimized", *note
(elisp)Visibility of Frames::) frame already displays the requested
buffer, that frame is raised and deiconified ("un-minimized");
otherwise, a new frame is created on the current display terminal.

   The various 'C-x 5' commands differ in how they find or create the
buffer to select:

'C-x 5 2'
     Create a new frame ('make-frame-command').
'C-x 5 b BUFNAME <RET>'
     Select buffer BUFNAME in another frame.  This runs
     'switch-to-buffer-other-frame'.
'C-x 5 f FILENAME <RET>'
     Visit file FILENAME and select its buffer in another frame.  This
     runs 'find-file-other-frame'.  *Note Visiting::.
'C-x 5 d DIRECTORY <RET>'
     Select a Dired buffer for directory DIRECTORY in another frame.
     This runs 'dired-other-frame'.  *Note Dired::.
'C-x 5 m'
     Start composing a mail message in another frame.  This runs
     'compose-mail-other-frame'.  It is the other-frame variant of 'C-x
     m'.  *Note Sending Mail::.
'C-x 5 .'
     Find the definition of an identifier in another frame.  This runs
     'xref-find-definitions-other-frame', the multiple-frame variant of
     'M-.'.  *Note Xref::.
'C-x 5 r FILENAME <RET>'
     Visit file FILENAME read-only, and select its buffer in another
     frame.  This runs 'find-file-read-only-other-frame'.  *Note
     Visiting::.

   You can control the appearance and behavior of the newly-created
frames by specifying "frame parameters".  *Note Frame Parameters::.

==============================================================================
File: emacs.info,  Node: |Frame_Commands|,  Next: |Fonts|,  Prev: |Creating_Frames|,  Up: |Frames|
==============================================================================

                                                                *Frame_Commands*

21.7 Frame Commands
=====--------------

The following commands are used to delete and operate on frames:

'C-x 5 0'
     Delete the selected frame ('delete-frame').  This signals an error
     if there is only one frame.

'C-z'
     Minimize (or iconify) the selected Emacs frame ('suspend-frame').
     *Note Exiting::.

'C-x 5 o'
     Select another frame, and raise it.  If you repeat this command, it
     cycles through all the frames on your terminal.

'C-x 5 1'
     Delete all frames on the current terminal, except the selected one.

'M-<F10>'
     Toggle the maximization state of the current frame.  When a frame
     is maximized, it fills the screen.

'<F11>'
     Toggle full-screen mode for the current frame.  (The difference
     between full-screen and maximized is normally that the former hides
     window manager decorations, giving slightly more screen space to
     Emacs itself.)

   Note that with some window managers you may have to customize the
variable 'frame-resize-pixelwise' to a non-'nil' value in order to make
a frame truly maximized or full-screen.  This variable, when set to a
non-'nil' value, in general allows resizing frames at pixel resolution,
rather than in integral multiples of lines and columns.

   The 'C-x 5 0' ('delete-frame') command deletes the selected frame.
However, it will refuse to delete the last frame in an Emacs session, to
prevent you from losing the ability to interact with the Emacs session.
Note that when Emacs is run as a daemon (*note Emacs Server::), there is
always a virtual frame that remains after all the ordinary, interactive
frames are deleted.  In this case, 'C-x 5 0' can delete the last
interactive frame; you can use 'emacsclient' to reconnect to the Emacs
session.

   The 'C-x 5 1' ('delete-other-frames') command deletes all other
frames on the current terminal (this terminal refers to either a
graphical display, or a text terminal; *note Non-Window Terminals::).
If the Emacs session has frames open on other graphical displays or text
terminals, those are not deleted.

   The 'C-x 5 o' ('other-frame') command selects the next frame on the
current terminal.  If you are using Emacs on the X Window System with a
window manager that selects (or "gives focus to") whatever frame the
mouse cursor is over, you have to change the variable
'focus-follows-mouse' to 't' in order for this command to work properly.
Then invoking 'C-x 5 o' will also warp the mouse cursor to the chosen
frame.

==============================================================================
File: emacs.info,  Node: |Fonts|,  Next: |Speedbar|,  Prev: |Frame_Commands|,  Up: |Frames|
==============================================================================

                                                                         *Fonts*

21.8 Fonts
=====-----

By default, Emacs displays text on graphical displays using a 10-point
monospace font, and the font size can be changed interactively (*note
Text Scale::).

   There are several different ways to specify a different font:

   * Click on 'Set Default Font' in the 'Options' menu.  This makes the
     selected font the default on all existing graphical frames.  To
     save this for future sessions, click on 'Save Options' in the
     'Options' menu.

   * Add a line to your init file, modifying the variable
     'default-frame-alist' to specify the 'font' parameter (*note Frame
     Parameters::), like this:

          (add-to-list 'default-frame-alist
                       '(font . "DejaVu Sans Mono-10"))

     This makes the font the default on all graphical frames created
     after restarting Emacs with that init file.

   * Add an 'emacs.font' X resource setting to your X resource file,
     like this:

          emacs.font: DejaVu Sans Mono-12

     You must restart X, or use the 'xrdb' command, for the X resources
     file to take effect.  *Note Resources::.  Do not quote font names
     in X resource files.

   * If you are running Emacs on the GNOME desktop, you can tell Emacs
     to use the default system font by setting the variable
     'font-use-system-font' to 't' (the default is 'nil').  For this to
     work, Emacs must have been compiled with support for Gsettings (or
     the older Gconf).

   * Use the command line option '-fn' (or '--font').  *Note Font X::.

   To check what font you're currently using, the 'C-u C-x =' command
can be helpful.  It describes the character at point, and names the font
that it's rendered in.

   There are four different ways to express a font name.  The first is
to use a "Fontconfig pattern".  Fontconfig patterns have the following
form:

     FONTNAME[-FONTSIZE][:NAME1=VALUES1][:NAME2=VALUES2]...

Within this format, any of the elements in brackets may be omitted.
Here, FONTNAME is the "family name" of the font, such as 'Monospace' or
'DejaVu Sans Mono'; FONTSIZE is the "point size" of the font (one
"printer's point" is about 1/72 of an inch); and the 'NAME=VALUES'
entries specify settings such as the slant and weight of the font.  Each
VALUES may be a single value, or a list of values separated by commas.
In addition, some property values are valid with only one kind of
property name, in which case the 'NAME=' part may be omitted.

   Here is a list of common font properties:

'slant'
     One of 'italic', 'oblique', or 'roman'.

'weight'
     One of 'light', 'medium', 'demibold', 'bold' or 'black'.

'style'
     Some fonts define special styles which are a combination of slant
     and weight.  For instance, 'Dejavu Sans' defines the 'book' style,
     which overrides the slant and weight properties.

'width'
     One of 'condensed', 'normal', or 'expanded'.

'spacing'
     One of 'monospace', 'proportional', 'dual-width', or 'charcell'.

Here are some examples of Fontconfig patterns:

     Monospace
     Monospace-12
     Monospace-12:bold
     DejaVu Sans Mono:bold:italic
     Monospace-12:weight=bold:slant=italic

   For a more detailed description of Fontconfig patterns, see the
Fontconfig manual, which is distributed with Fontconfig and available
online at <https://fontconfig.org/fontconfig-user.html>.

   On MS-Windows, only the subset of the form FONTNAME[-FONTSIZE] is
supported for all fonts; the full Fontconfig pattern might not work for
all of them.

   The second way to specify a font is to use a "GTK font pattern".
These have the syntax

     FONTNAME [PROPERTIES] [FONTSIZE]

where FONTNAME is the family name, PROPERTIES is a list of property
values separated by spaces, and FONTSIZE is the point size.  The
properties that you may specify for GTK font patterns are as follows:

   * Slant properties: 'Italic' or 'Oblique'.  If omitted, the default
     (roman) slant is implied.
   * Weight properties: 'Bold', 'Book', 'Light', 'Medium', 'Semi-bold',
     or 'Ultra-light'.  If omitted, 'Medium' weight is implied.
   * Width properties: 'Semi-Condensed' or 'Condensed'.  If omitted, a
     default width is used.

Here are some examples of GTK font patterns:

     Monospace 12
     Monospace Bold Italic 12

   On MS-Windows, only the subset FONTNAME is supported.

   The third way to specify a font is to use an "XLFD" ("X Logical Font
Description").  This is the traditional method for specifying fonts
under X, and is also supported on MS-Windows.  Each XLFD consists of
fourteen words or numbers, separated by dashes, like this:

     -misc-fixed-medium-r-semicondensed--13---*-c-60-iso8859-1

A wildcard character ('*') in an XLFD matches any sequence of characters
(including none), and '?' matches any single character.  However,
matching is implementation-dependent, and can be inaccurate when
wildcards match dashes in a long name.  For reliable results, supply all
14 dashes and use wildcards only within a field.  Case is insignificant
in an XLFD.  The syntax for an XLFD is as follows:

     -MAKER-FAMILY-WEIGHT-SLANT-WIDTHTYPE-STYLE...
     ...-PIXELS-HEIGHT-HORIZ-VERT-SPACING-WIDTH-REGISTRY-ENCODING

The entries have the following meanings:

MAKER
     The name of the font manufacturer.
FAMILY
     The name of the font family (e.g., 'courier').
WEIGHT
     The font weight--normally either 'bold', 'medium' or 'light'.  Some
     font names support other values.
SLANT
     The font slant--normally 'r' (roman), 'i' (italic), 'o' (oblique),
     'ri' (reverse italic), or 'ot' (other).  Some font names support
     other values.
WIDTHTYPE
     The font width--normally 'normal', 'condensed', 'semicondensed', or
     'extended'.  Some font names support other values.
STYLE
     An optional additional style name.  Usually it is empty--most XLFDs
     have two hyphens in a row at this point.  The style name can also
     specify a two-letter ISO-639 language name, like 'ja' or 'ko'; some
     fonts that support CJK scripts have that spelled out in the style
     name part.
PIXELS
     The font height, in pixels.
HEIGHT
     The font height on the screen, measured in tenths of a printer's
     point.  This is the point size of the font, times ten.  For a given
     vertical resolution, HEIGHT and PIXELS are proportional; therefore,
     it is common to specify just one of them and use '*' for the other.
HORIZ
     The horizontal resolution, in pixels per inch, of the screen for
     which the font is intended.
VERT
     The vertical resolution, in pixels per inch, of the screen for
     which the font is intended.  Normally the resolution of the fonts
     on your system is the right value for your screen; therefore, you
     normally specify '*' for this and HORIZ.
SPACING
     This is 'm' (monospace), 'p' (proportional) or 'c' (character
     cell).
WIDTH
     The average character width, in pixels, multiplied by ten.
REGISTRY
ENCODING
     The X font character set that the font depicts.  (X font character
     sets are not the same as Emacs character sets, but they are
     similar.)  You can use the 'xfontsel' program to check which
     choices you have.  Normally you should use 'iso8859' for REGISTRY
     and '1' for ENCODING.

   The fourth and final method of specifying a font is to use a font
nickname.  Certain fonts have shorter nicknames, which you can use
instead of a normal font specification.  For instance, '6x13' is
equivalent to

     -misc-fixed-medium-r-semicondensed--13---*-c-60-iso8859-1

   This form is not supported on MS-Windows.

   On X, Emacs recognizes two types of fonts: "client-side" fonts, which
are provided by the Xft and Fontconfig libraries, and "server-side"
fonts, which are provided by the X server itself.  Most client-side
fonts support advanced font features such as antialiasing and subpixel
hinting, while server-side fonts do not.  Fontconfig and GTK patterns
match only client-side fonts.

   You will probably want to use a fixed-width default font--that is, a
font in which all characters have the same width.  For Xft and
Fontconfig fonts, you can use the 'fc-list' command to list the
available fixed-width fonts, like this:

     fc-list :spacing=mono
     fc-list :spacing=charcell

For server-side X fonts, you can use the 'xlsfonts' program to list the
available fixed-width fonts, like this:

     xlsfonts -fn 'x' | grep -E '^[0-9]+x[0-9]+'
     xlsfonts -fn '--*-*-*-*-*-*-*-*-*-m*'
     xlsfonts -fn '--*-*-*-*-*-*-*-*-*-c*'

Any font with 'm' or 'c' in the SPACING field of the XLFD is a
fixed-width font.  To see what a particular font looks like, use the
'xfd' command.  For example:

     xfd -fn 6x13

displays the entire font '6x13'.

   While running Emacs, you can also set the font of a specific kind of
text (*note Faces::), or a particular frame (*note Frame Parameters::).

==============================================================================
File: emacs.info,  Node: |Speedbar|,  Next: |Multiple_Displays|,  Prev: |Fonts|,  Up: |Frames|
==============================================================================

                                                                      *Speedbar*

21.9 Speedbar Frames
=====---------------

The "speedbar" is a special frame for conveniently navigating in or
operating on another frame.  The speedbar, when it exists, is always
associated with a specific frame, called its "attached frame"; all
speedbar operations act on that frame.

   Type 'M-x speedbar' to create the speedbar and associate it with the
current frame.  To dismiss the speedbar, type 'M-x speedbar' again, or
select the speedbar and type 'q'.  (You can also delete the speedbar
frame like any other Emacs frame.)  If you wish to associate the
speedbar with a different frame, dismiss it and call 'M-x speedbar' from
that frame.

   The speedbar can operate in various modes.  Its default mode is "File
Display" mode, which shows the files in the current directory of the
selected window of the attached frame, one file per line.  Clicking on a
non-directory visits that file in the selected window of the attached
frame, and clicking on a directory shows that directory in the speedbar
(*note Mouse References::).  Each line also has a box, '[+]' or '<+>',
that you can click on to "expand" the contents of that item.  Expanding
a directory adds the contents of that directory to the speedbar display,
underneath the directory's own line.  Expanding an ordinary file adds a
list of the tags in that file to the speedbar display; you can click on
a tag name to jump to that tag in the selected window of the attached
frame.  When a file or directory is expanded, the '[+]' changes to
'[-]'; you can click on that box to "contract" the item, hiding its
contents.

   You navigate through the speedbar using the keyboard, too.  Typing
<RET> while point is on a line in the speedbar is equivalent to clicking
the item on the current line, and <SPC> expands or contracts the item.
'U' displays the parent directory of the current directory.  To copy,
delete, or rename the file on the current line, type 'C', 'D', and 'R'
respectively.  To create a new directory, type 'M'.

   Another general-purpose speedbar mode is "Buffer Display" mode; in
this mode, the speedbar displays a list of Emacs buffers.  To switch to
this mode, type 'b' in the speedbar.  To return to File Display mode,
type 'f'.  You can also change the display mode by clicking 'mouse-3'
anywhere in the speedbar window (or 'mouse-1' on the mode-line) and
selecting 'Displays' in the pop-up menu.

   Some major modes, including Rmail mode, Info, and GUD, have
specialized ways of putting useful items into the speedbar for you to
select.  For example, in Rmail mode, the speedbar shows a list of Rmail
files, and lets you move the current message to another Rmail file by
clicking on its '<M>' box.

   For more details on using and programming the speedbar, *Note
Speedbar: (speedbar)Top.

==============================================================================
File: emacs.info,  Node: |Multiple_Displays|,  Next: |Frame_Parameters|,  Prev: |Speedbar|,  Up: |Frames|
==============================================================================

                                                             *Multiple_Displays*

21.10 Multiple Displays
=====------------------

A single Emacs can talk to more than one X display.  Initially, Emacs
uses just one display--the one specified with the 'DISPLAY' environment
variable or with the '--display' option (*note Initial Options::).  To
connect to another display, use the command 'make-frame-on-display':

'M-x make-frame-on-display <RET> DISPLAY <RET>'
     Create a new frame on display DISPLAY.

   A single X server can handle more than one screen.  When you open
frames on two screens belonging to one server, Emacs knows they share a
single keyboard, and it treats all the commands arriving from these
screens as a single stream of input.

   When you open frames on different X servers, Emacs makes a separate
input stream for each server.  Each server also has its own selected
frame.  The commands you enter with a particular X server apply to that
server's selected frame.

   On multi-monitor displays it is possible to use the command
'make-frame-on-monitor':

'M-x make-frame-on-monitor <RET> MONITOR <RET>'
     Create a new frame on monitor MONITOR whose screen area is a part
     of the current display.

==============================================================================
File: emacs.info,  Node: |Frame_Parameters|,  Next: |Scroll_Bars|,  Prev: |Multiple_Displays|,  Up: |Frames|
==============================================================================

                                                              *Frame_Parameters*

21.11 Frame Parameters
=====-----------------

You can control the default appearance and behavior of all frames by
specifying a default list of "frame parameters" in the variable
'default-frame-alist'.  Its value should be a list of entries, each
specifying a parameter name and a value for that parameter.  These
entries take effect whenever Emacs creates a new frame, including the
initial frame.

   For example, you can add the following lines to your init file (*note
Init File::) to set the default frame width to 90 character columns, the
default frame height to 40 character rows, and the default font to
'Monospace-10':

     (add-to-list 'default-frame-alist '(width  . 90))
     (add-to-list 'default-frame-alist '(height . 40))
     (add-to-list 'default-frame-alist '(font . "Monospace-10"))

   For a list of frame parameters and their effects, see *note
(elisp)Frame Parameters::.

   You can also specify a list of frame parameters which apply to just
the initial frame, by customizing the variable 'initial-frame-alist'.

   If Emacs is compiled to use an X toolkit, frame parameters that
specify colors and fonts don't affect menus and the menu bar, since
those are drawn by the toolkit and not directly by Emacs.

   Frame appearance and behavior can also be customized through X
resources (*note X Resources::); these override the parameters of the
initial frame specified in your init file.

   Note that if you are using the desktop library to save and restore
your sessions, the frames to be restored are recorded in the desktop
file, together with their parameters.  When these frames are restored,
the recorded parameters take precedence over the frame parameters
specified by 'default-frame-alist' and 'initial-frame-alist' in your
init file.  *Note Saving Emacs Sessions::, for how to avoid that.

==============================================================================
File: emacs.info,  Node: |Scroll_Bars|,  Next: |Window_Dividers|,  Prev: |Frame_Parameters|,  Up: |Frames|
==============================================================================

                                                                   *Scroll_Bars*

21.12 Scroll Bars
=====------------

On graphical displays, there is a "vertical scroll bar" on the side of
each Emacs window.  Clicking 'mouse-1' on the scroll bar's up and down
buttons scrolls the window by one line at a time (but some toolkits
allow you to customize the scroll bars to not have those buttons).
Clicking 'mouse-1' above or below the scroll bar's inner box scrolls the
window by nearly the entire height of the window, like 'M-v' and 'C-v'
respectively (*note Moving Point::).  (This, too, can behave differently
with some toolkits.)  Dragging the inner box scrolls continuously.

   If Emacs is compiled on the X Window System without X toolkit
support, the scroll bar behaves differently.  Clicking 'mouse-1'
anywhere on the scroll bar scrolls forward like 'C-v', while 'mouse-3'
scrolls backward like 'M-v'.  Clicking 'mouse-2' in the scroll bar lets
you drag the inner box up and down.

   To toggle the use of vertical scroll bars, type 'M-x
scroll-bar-mode'.  This command applies to all frames, including frames
yet to be created.  To toggle vertical scroll bars for just the selected
frame, use the command 'M-x toggle-scroll-bar'.

   To control the use of vertical scroll bars at startup, customize the
variable 'scroll-bar-mode' (*note Customization::).  Its value should be
either 'right' (put scroll bars on the right side of windows), 'left'
(put them on the left), or 'nil' (disable vertical scroll bars).  By
default, Emacs puts scroll bars on the right if it was compiled with
GTK+ support on the X Window System, and on MS-Windows or macOS; Emacs
puts scroll bars on the left if compiled on the X Window System without
GTK+ support (following the old convention for X applications).

   You can also use the X resource 'verticalScrollBars' to enable or
disable the scroll bars (*note Resources::).  To control the scroll bar
width, change the 'scroll-bar-width' frame parameter (*note (elisp)Frame
Parameters::).

   If you're using Emacs on X (with GTK+ or Motif), you can customize
the variable 'scroll-bar-adjust-thumb-portion' to control
"overscrolling" of the scroll bar, i.e., dragging the thumb down even
when the end of the buffer is visible.  If its value is non-'nil', the
scroll bar can be dragged downwards even if the end of the buffer is
shown; if 'nil', the thumb will be at the bottom when the end of the
buffer is shown.  You cannot over-scroll when the entire buffer is
visible.

   The visual appearance of the scroll bars is controlled by the
'scroll-bar' face.  (Some toolkits, such as GTK+ and MS-Windows, ignore
this face; the scroll-bar appearance there can only be customized
system-wide, for GTK+ *note GTK resources::).

   On graphical frames, vertical scroll bars implicitly serve to
separate side-by-side windows visually.  When vertical scroll bars are
disabled, Emacs by default separates such windows with the help of a
one-pixel wide "vertical border".  That border occupies the first pixel
column of the window on the right and may thus overdraw the leftmost
pixels of any glyph displayed there.  If these pixels convey important
information, you can make them visible by enabling window dividers, see
*note Window Dividers::.  To replicate the look of vertical borders, set
the 'right-divider-width' parameter of frames to one and have the
'window-divider' face inherit from that of 'vertical-border', *note
Window Dividers: (elisp)Window Dividers.

   On graphical displays with toolkit support, Emacs may also supply a
"horizontal scroll bar" on the bottom of each window.  Clicking
'mouse-1' on that scroll bar's left and right buttons scrolls the window
horizontally by one column at a time.  (Note that some toolkits allow
customizations of the scroll bar that cause these buttons not to be
shown.)  Clicking 'mouse-1' on the left or right of the scroll bar's
inner box scrolls the window by four columns.  Dragging the inner box
scrolls the window continuously.

   Note that such horizontal scrolling can make the window's position of
point disappear on the left or the right.  Typing a character to insert
text or moving point with a keyboard command will usually bring it back
into view.

   To toggle the use of horizontal scroll bars, type 'M-x
horizontal-scroll-bar-mode'.  This command applies to all frames,
including frames yet to be created.  To toggle horizontal scroll bars
for just the selected frame, use the command 'M-x
toggle-horizontal-scroll-bar'.

   To control the use of horizontal scroll bars at startup, customize
the variable 'horizontal-scroll-bar-mode'.

   You can also use the X resource 'horizontalScrollBars' to enable or
disable horizontal scroll bars (*note Resources::).  To control the
scroll bar height, change the 'scroll-bar-height' frame parameter (*note
(elisp)Frame Parameters::).

==============================================================================
File: emacs.info,  Node: |Window_Dividers|,  Next: |Drag_and_Drop|,  Prev: |Scroll_Bars|,  Up: |Frames|
==============================================================================

                                                               *Window_Dividers*

21.13 Window Dividers
=====----------------

On graphical displays, you can use "window dividers" in order to
separate windows visually.  Window dividers are bars that can be dragged
with the mouse, thus allowing you to easily resize adjacent windows.

   To toggle the display of window dividers, use the command 'M-x
window-divider-mode'.

   To customize where dividers should appear, use the option
'window-divider-default-places'.  Its value should be either
'bottom-only' (to show dividers only on the bottom of windows),
'right-only' (to show dividers only on the right of windows), or 't' (to
show them on the bottom and on the right).

   To adjust the width of window dividers displayed by this mode
customize the options 'window-divider-default-bottom-width' and
'window-divider-default-right-width'.

   When vertical scroll bars are disabled, dividers can be also useful
to make the first pixel column of a window visible, which would be
otherwise covered by the vertical border used to separate side-by-side
windows (*note Scroll Bars::).

   For more details about window dividers see *note Window Dividers:
(elisp)Window Dividers.

==============================================================================
File: emacs.info,  Node: |Drag_and_Drop|,  Next: |Menu_Bars|,  Prev: |Window_Dividers|,  Up: |Frames|
==============================================================================

                                                                 *Drag_and_Drop*

21.14 Drag and Drop
=====--------------

In most graphical desktop environments, Emacs has basic support for
"drag and drop" operations.  For instance, dropping text onto an Emacs
frame inserts the text where it is dropped.  Dropping a file onto an
Emacs frame visits that file.  As a special case, dropping the file on a
Dired buffer moves or copies the file (according to the conventions of
the application it came from) into the directory displayed in that
buffer.

   Dropping a file normally visits it in the window you drop it on.  If
you prefer to visit the file in a new window in such cases, customize
the variable 'dnd-open-file-other-window'.

   The XDND and Motif drag and drop protocols, and the old KDE 1.x
protocol, are currently supported.

   Emacs can also optionally drag the region with the mouse into another
portion of this or another buffer.  To enable that, customize the
variable 'mouse-drag-and-drop-region' to a non-'nil' value.  Normally,
the text is moved, i.e.  cut and pasted, when the destination is the
same buffer as the origin; dropping the region on another buffer copies
the text instead.  If the value of this variable names a modifier key,
such as 'shift', 'control' or 'alt', then pressing that modifier key
when dropping the text will copy it instead of cutting it, even if you
drop on the same buffer as the one from which the text came.

   In order to cut text even when source and destination buffers differ,
set the option 'mouse-drag-and-drop-region-cut-when-buffers-differ' to a
non-'nil' value.  By default, on a graphic display the selected text is
shown in a tooltip and point moves together with the mouse cursor during
dragging.  To suppress such behavior, set the options
'mouse-drag-and-drop-region-show-tooltip' and/or
'mouse-drag-and-drop-region-show-cursor' to 'nil'.

==============================================================================
File: emacs.info,  Node: |Menu_Bars|,  Next: |Tool_Bars|,  Prev: |Drag_and_Drop|,  Up: |Frames|
==============================================================================

                                                                     *Menu_Bars*

21.15 Menu Bars
=====----------

You can toggle the use of menu bars with 'M-x menu-bar-mode'.  With no
argument, this command toggles Menu Bar mode, a global minor mode.  With
an argument, the command turns Menu Bar mode on if the argument is
positive, off if the argument is not positive.  To control the use of
menu bars at startup, customize the variable 'menu-bar-mode'.

   Expert users often turn off the menu bar, especially on text
terminals, where this makes one additional line available for text.  If
the menu bar is off, you can still pop up a menu of its contents with
'C-mouse-3' on a display which supports pop-up menus.  *Note Menu Mouse
Clicks::.

   *Note Menu Bar::, for information on how to invoke commands with the
menu bar.  *Note X Resources::, for how to customize the menu bar menus'
visual appearance.

==============================================================================
File: emacs.info,  Node: |Tool_Bars|,  Next: |Tab_Bars|,  Prev: |Menu_Bars|,  Up: |Frames|
==============================================================================

                                                                     *Tool_Bars*

21.16 Tool Bars
=====----------

On graphical displays, Emacs puts a "tool bar" at the top of each frame,
just below the menu bar.  This is a row of icons which you can click on
with the mouse to invoke various commands.

   The global (default) tool bar contains general commands.  Some major
modes define their own tool bars; whenever a buffer with such a major
mode is current, the mode's tool bar replaces the global tool bar.

   To toggle the use of tool bars, type 'M-x tool-bar-mode'.  This
command applies to all frames, including frames yet to be created.  To
control the use of tool bars at startup, customize the variable
'tool-bar-mode'.

   When Emacs is compiled with GTK+ support, each tool bar item can
consist of an image, or a text label, or both.  By default, Emacs
follows the Gnome desktop's tool bar style setting; if none is defined,
it displays tool bar items as just images.  To impose a specific tool
bar style, customize the variable 'tool-bar-style'.

   You can also control the placement of the tool bar for the GTK+ tool
bar with the frame parameter 'tool-bar-position'.  *Note (elisp)Frame
Parameters::.

   NS builds consider the tool bar to be a window decoration, and
therefore do not display it when a window is undecorated.  *Note
(elisp)Frame Parameters::.  On macOS the tool bar is hidden when the
frame is put into fullscreen, but can be displayed by moving the mouse
pointer to the top of the screen.

==============================================================================
File: emacs.info,  Node: |Tab_Bars|,  Next: |Dialog_Boxes|,  Prev: |Tool_Bars|,  Up: |Frames|
==============================================================================

                                                                      *Tab_Bars*

21.17 Tab Bars
=====---------

On graphical displays and on text terminals, Emacs can optionally
display a "Tab Bar" at the top of each frame, just below the menu bar.
The Tab Bar is a row of "tabs"--buttons that you can click to switch
between window configurations on that frame.

   Each tab on the Tab Bar represents a named persistent window
configuration.  Its name is composed from the list of names of buffers
visible in windows of that window configuration.  Clicking on the tab
switches to the window configuration recorded by the tab; it is a
configuration of windows and buffers which was previously used in the
frame when that tab was the current tab.

   If you are using the desktop library to save and restore your
sessions (*note Saving Emacs Sessions::), the tabs from the Tab Bar are
recorded in the desktop file, together with their associated window
configurations, and will be available after restoring the session.

   Note that the Tab Bar is different from the Tab Line (*note Tab
Line::).  Whereas tabs on the Tab Line at the top of each window are
used to switch between buffers, tabs on the Tab Bar at the top of each
frame are used to switch between window configurations containing
several windows with buffers.

   To toggle the use of tab bars, type 'M-x tab-bar-mode'.  This command
applies to all frames, including frames yet to be created.  To control
the use of tab bars at startup, customize the variable 'tab-bar-mode'.

   The variable 'tab-bar-show' controls whether the Tab Bar mode is
turned on automatically.  If the value is 't', then 'tab-bar-mode' is
enabled when using the commands that create new tabs.  The value '1'
hides the tab bar when it has only one tab, and shows it again when more
tabs are created.  The value 'nil' always keeps the tab bar hidden; in
this case it's still possible to switch between named window
configurations without the tab bar by using 'M-x tab-next', 'M-x
tab-switcher', and other commands that provide completion on tab names.
Also it's possible to create and close tabs without the tab bar by using
commands 'M-x tab-new', 'M-x tab-close', etc.

   The prefix key 'C-x t' is analogous to 'C-x 5'.  Whereas each 'C-x 5'
command pops up a buffer in a different frame (*note Creating Frames::),
the 'C-x t' commands use a different tab with a different window
configuration in the selected frame.

   The various 'C-x t' commands differ in how they find or create the
buffer to select.  The following commands can be used to select a buffer
in a new tab:

'C-x t 2'
     Add a new tab ('tab-new').  You can control the choice of the
     buffer displayed in a new tab by customizing the variable
     'tab-bar-new-tab-choice'.

'C-x t b BUFNAME <RET>'
     Select buffer BUFNAME in another tab.  This runs
     'switch-to-buffer-other-tab'.

'C-x t f FILENAME <RET>'
     Visit file FILENAME and select its buffer in another tab.  This
     runs 'find-file-other-tab'.  *Note Visiting::.

'C-x t d DIRECTORY <RET>'
     Select a Dired buffer for directory DIRECTORY in another tab.  This
     runs 'dired-other-tab'.  *Note Dired::.

   By default, a new tab starts with the buffer that was current before
calling the command that adds a new tab.  To start a new tab with other
buffers, customize the variable 'tab-bar-new-tab-choice'.

   The variable 'tab-bar-new-tab-to' defines where to place a new tab.
By default, a new tab is added on the right side of the current tab.

   The following commands can be used to delete tabs:

'C-x t 0'
     Close the selected tab ('tab-close').  It has no effect if there is
     only one tab, unless the variable 'tab-bar-close-last-tab-choice'
     is customized to a non-default value.

'C-x t 1'
     Close all tabs on the selected frame, except the selected one.

   The variable 'tab-bar-close-tab-select' defines what tab to select
after closing the current tab.  By default, it selects a recently used
tab.

   The command 'tab-undo' restores the last closed tab.

   The following commands can be used to switch between tabs:

'C-x t o'
'C-<TAB>'
     Switch to the next tab.  If you repeat this command, it cycles
     through all the tabs on the selected frame.  With a positive
     numeric argument N, it switches to the next Nth tab; with a
     negative argument -N, it switches back to the previous Nth tab.

'S-C-<TAB>'
     Switch to the previous tab.  With a positive numeric argument N, it
     switches to the previous Nth tab; with a negative argument -N, it
     switches back to the next Nth tab.

'C-x t <RET> TABNAME <RET>'
     Switch to the tab by its name, with completion on all tab names.
     Default values are tab names sorted by recency, so you can use
     'M-n' ('next-history-element') to get the name of the last visited
     tab, the second last, and so on.

'MODIFIER-TABNUMBER'
     Switch to the tab by its number.  After customizing the variable
     'tab-bar-select-tab-modifiers' to specify a MODIFIER key, you can
     select a tab by its ordinal number using the specified modifier in
     combination with the tab number to select.  To display the tab
     number alongside the tab name, you can customize another variable
     'tab-bar-tab-hints'.  This will help you to decide what key to
     press to select the tab by its number.

'MODIFIER-0'
     Switch to the recent tab.  The key combination is the modifier key
     defined by 'tab-bar-select-tab-modifiers' and the key '0'.  With a
     numeric argument N, switch to the Nth recent tab.

   The following commands can be used to operate on tabs:

'C-x t r TABNAME <RET>'
     Rename the current tab to TABNAME.  You can control the
     programmatic name given to a tab by default by customizing the
     variable 'tab-bar-tab-name-function'.

'C-x t m'
     Move the current tab N positions to the right with a positive
     numeric argument N.  With a negative argument -N, move the current
     tab N positions to the left.

   You can enable 'tab-bar-history-mode' to remember window
configurations used in every tab, and restore them.

'tab-bar-history-back'
     Restore a previous window configuration used in the current tab.
     This navigates back in the history of window configurations.

'tab-bar-history-forward'
     Cancel restoration of the previous window configuration.  This
     navigates forward in the history of window configurations.

==============================================================================
File: emacs.info,  Node: |Dialog_Boxes|,  Next: |Tooltips|,  Prev: |Tab_Bars|,  Up: |Frames|
==============================================================================

                                                                  *Dialog_Boxes*

21.18 Using Dialog Boxes
=====-------------------

A dialog box is a special kind of menu for asking you a yes-or-no
question or some other special question.  Many Emacs commands use a
dialog box to ask a yes-or-no question, if you used the mouse to invoke
the command that led to the question.

   To disable the use of dialog boxes, change the variable
'use-dialog-box' to 'nil'.  In that case, Emacs always performs
yes-or-no prompts using the echo area and keyboard input.  This variable
also controls whether to use file selection windows (but those are not
supported on all platforms).

   A file selection window is a special kind of dialog box for asking
for file names.  You can customize the variable 'use-file-dialog' to
suppress the use of file selection windows, even if you still want other
kinds of dialogs.  This variable has no effect if you have suppressed
all dialog boxes with the variable 'use-dialog-box'.

   When Emacs is compiled with GTK+ support, it uses the GTK+ file
chooser dialog.  Emacs adds an additional toggle button to this dialog,
which you can use to enable or disable the display of hidden files
(files starting with a dot) in that dialog.  If you want this toggle to
be activated by default, change the variable 'x-gtk-show-hidden-files'
to 't'.  In addition, Emacs adds help text to the GTK+ file chooser
dialog; to disable this help text, change the variable
'x-gtk-file-dialog-help-text' to 'nil'.

==============================================================================
File: emacs.info,  Node: |Tooltips|,  Next: |Mouse_Avoidance|,  Prev: |Dialog_Boxes|,  Up: |Frames|
==============================================================================

                                                                      *Tooltips*

21.19 Tooltips
=====---------

"Tooltips" are small special frames that display text information at the
current mouse position.  They activate when there is a pause in mouse
movement over some significant piece of text in a window, or the mode
line, or some other part of the Emacs frame such as a tool bar button or
menu item.

   You can toggle the use of tooltips with the command 'M-x
tooltip-mode'.  When Tooltip mode is disabled, the help text is
displayed in the echo area instead.  To control the use of tooltips at
startup, customize the variable 'tooltip-mode'.

   The following variables provide customization options for tooltip
display:

'tooltip-delay'
     This variable specifies how long Emacs should wait before
     displaying the first tooltip.  The value is in seconds.

'tooltip-short-delay'
     This variable specifies how long Emacs should wait before
     displaying subsequent tooltips on different items, having already
     displayed the first tooltip.  The value is in seconds.

'tooltip-hide-delay'
     The number of seconds since displaying a tooltip to hide it, if the
     mouse doesn't move.

'tooltip-x-offset'
'tooltip-y-offset'
     The X and Y offsets, in pixels, of the left top corner of the
     tooltip from the mouse pointer position.  Note that these are
     ignored if 'tooltip-frame-parameters' was customized to include,
     respectively, the 'left' and 'top' parameters.  The values of the
     offsets should be chosen so that the tooltip doesn't cover the
     mouse pointer's hot spot, or it might interfere with clicking the
     mouse.

'tooltip-frame-parameters'
     The frame parameters used for displaying tooltips.  *Note
     (elisp)Frame Parameters::, and also *note (elisp)Tooltips::.

   For additional customization options for displaying tooltips, use
'M-x customize-group <RET> tooltip <RET>'.

   If Emacs is built with GTK+ support, it displays tooltips via GTK+,
using the default appearance of GTK+ tooltips.  To disable this, change
the variable 'x-gtk-use-system-tooltips' to 'nil'.  If you do this, or
if Emacs is built without GTK+ support, most attributes of the tooltip
text are specified by the 'tooltip' face, and by X resources (*note X
Resources::).

   "GUD tooltips" are special tooltips that show the values of variables
when debugging a program with GUD.  *Note Debugger Operation::.

==============================================================================
File: emacs.info,  Node: |Mouse_Avoidance|,  Next: |Non_Window_Terminals|,  Prev: |Tooltips|,  Up: |Frames|
==============================================================================

                                                               *Mouse_Avoidance*

21.20 Mouse Avoidance
=====----------------

On graphical terminals, the mouse pointer may obscure the text in the
Emacs frame.  Emacs provides two methods to avoid this problem.

   Firstly, Emacs hides the mouse pointer each time you type a
self-inserting character, if the pointer lies inside an Emacs frame;
moving the mouse pointer makes it visible again.  To disable this
feature, set the variable 'make-pointer-invisible' to 'nil'.  *Note
Display Custom::.

   Secondly, you can use Mouse Avoidance mode, a minor mode, to keep the
mouse pointer away from point.  To use Mouse Avoidance mode, customize
the variable 'mouse-avoidance-mode'.  You can set this to various values
to move the mouse in several ways:

'banish'
     Move the pointer to a corner of the frame on any key-press.  You
     can customize the variable 'mouse-avoidance-banish-position' to
     specify where the pointer goes when it is banished.
'exile'
     Banish the pointer only if the cursor gets too close, and allow it
     to return once the cursor is out of the way.
'jump'
     If the cursor gets too close to the pointer, displace the pointer
     by a random distance and direction.
'animate'
     As 'jump', but shows steps along the way for illusion of motion.
'cat-and-mouse'
     The same as 'animate'.
'proteus'
     As 'animate', but changes the shape of the mouse pointer too.

   You can also use the command 'M-x mouse-avoidance-mode' to enable the
mode.  Whenever Mouse Avoidance mode moves the mouse, it also raises the
frame.

==============================================================================
File: emacs.info,  Node: |Non_Window_Terminals|,  Next: |Text_Only_Mouse|,  Prev: |Mouse_Avoidance|,  Up: |Frames|
==============================================================================

                                                          *Non_Window_Terminals*

21.21 Non-Window Terminals
=====---------------------

On a text terminal, Emacs can display only one Emacs frame at a time.
However, you can still create multiple Emacs frames, and switch between
them.  Switching frames on these terminals is much like switching
between different window configurations.

   Use 'C-x 5 2' to create a new frame and switch to it; use 'C-x 5 o'
to cycle through the existing frames; use 'C-x 5 0' to delete the
current frame.

   Each frame has a number to distinguish it.  If your terminal can
display only one frame at a time, the selected frame's number N appears
near the beginning of the mode line, in the form 'FN'.

   'FN' is in fact the frame's initial name.  You can give frames more
meaningful names if you wish, and you can select a frame by its name.
Use the command 'M-x set-frame-name <RET> NAME <RET>' to specify a new
name for the selected frame, and use 'M-x select-frame-by-name <RET>
NAME <RET>' to select a frame according to its name.  The name you
specify appears in the mode line when the frame is selected.

==============================================================================
File: emacs.info,  Node: |Text_Only_Mouse|,  Prev: |Non_Window_Terminals|,  Up: |Frames|
==============================================================================

                                                               *Text_Only_Mouse*

21.22 Using a Mouse in Text Terminals
=====--------------------------------

Some text terminals support mouse clicks in the terminal window.

   In a terminal emulator which is compatible with 'xterm', you can use
'M-x xterm-mouse-mode' to give Emacs control over simple uses of the
mouse--basically, only non-modified single clicks are supported.  Newer
versions of 'xterm' also support mouse-tracking.  The normal 'xterm'
mouse functionality for such clicks is still available by holding down
the <SHIFT> key when you press the mouse button.  Xterm Mouse mode is a
global minor mode (*note Minor Modes::).  Repeating the command turns
the mode off again.

   In the console on GNU/Linux, you can use 'M-x gpm-mouse-mode' to
enable mouse support.  You must have the gpm server installed and
running on your system in order for this to work.  Note that when this
mode is enabled, you cannot use the mouse to transfer text between Emacs
and other programs which use GPM.  This is due to limitations in GPM and
the Linux kernel.

   *Note MS-DOS Mouse::, for information about mouse support on MS-DOS.

==============================================================================
File: emacs.info,  Node: |International|,  Next: |Modes|,  Prev: |Frames|,  Up: |Top|
==============================================================================

                                                                 *International*

22 International Character Set Support
*****=================================

Emacs supports a wide variety of international character sets, including
European and Vietnamese variants of the Latin alphabet, as well as
Arabic scripts, Brahmic scripts (for languages such as Bengali, Hindi,
and Thai), Cyrillic, Ethiopic, Georgian, Greek, Han (for Chinese and
Japanese), Hangul (for Korean), Hebrew and IPA.  Emacs also supports
various encodings of these characters that are used by other
internationalized software, such as word processors and mailers.

   Emacs allows editing text with international characters by supporting
all the related activities:

   * You can visit files with non-ASCII characters, save non-ASCII text,
     and pass non-ASCII text between Emacs and programs it invokes (such
     as compilers, spell-checkers, and mailers).  Setting your language
     environment (*note Language Environments::) takes care of setting
     up the coding systems and other options for a specific language or
     culture.  Alternatively, you can specify how Emacs should encode or
     decode text for each command; see *note Text Coding::.

   * You can display non-ASCII characters encoded by the various
     scripts.  This works by using appropriate fonts on graphics
     displays (*note Defining Fontsets::), and by sending special codes
     to text displays (*note Terminal Coding::).  If some characters are
     displayed incorrectly, refer to *note Undisplayable Characters::,
     which describes possible problems and explains how to solve them.

   * Characters from scripts whose natural ordering of text is from
     right to left are reordered for display (*note Bidirectional
     Editing::).  These scripts include Arabic, Hebrew, Syriac, Thaana,
     and a few others.

   * You can insert non-ASCII characters or search for them.  To do
     that, you can specify an input method (*note Select Input Method::)
     suitable for your language, or use the default input method set up
     when you choose your language environment.  If your keyboard can
     produce non-ASCII characters, you can select an appropriate
     keyboard coding system (*note Terminal Coding::), and Emacs will
     accept those characters.  Latin-1 characters can also be input by
     using the 'C-x 8' prefix, see *note Unibyte Mode::.

     With the X Window System, your locale should be set to an
     appropriate value to make sure Emacs interprets keyboard input
     correctly; see *note locales: Language Environments.

   The rest of this chapter describes these issues in detail.

MENU

* |International_Chars|::     Basic concepts of multibyte characters.
* |Language_Environments|::   Setting things up for the language you use.
* |Input_Methods|::           Entering text characters not on your keyboard.
* |Select_Input_Method|::     Specifying your choice of input methods.
* |Coding_Systems|::          Character set conversion when you read and
                              write files, and so on.
* |Recognize_Coding|::        How Emacs figures out which conversion to use.
* |Specify_Coding|::          Specifying a file's coding system explicitly.
* |Output_Coding|::           Choosing coding systems for output.
* |Text_Coding|::             Choosing conversion to use for file text.
* |Communication_Coding|::    Coding systems for interprocess communication.
* |File_Name_Coding|::        Coding systems for file _names_.
* |Terminal_Coding|::         Specifying coding systems for converting
                              terminal input and output.
* |Fontsets|::                Fontsets are collections of fonts
                              that cover the whole spectrum of characters.
* |Defining_Fontsets|::       Defining a new fontset.
* |Modifying_Fontsets|::      Modifying an existing fontset.
* |Undisplayable_Characters|:: When characters don't display.
* |Unibyte_Mode|::            You can pick one European character set
                              to use without multibyte characters.
* |Charsets|::                How Emacs groups its internal character codes.
* |Bidirectional_Editing|::   Support for right-to-left scripts.

==============================================================================
File: emacs.info,  Node: |International_Chars|,  Next: |Language_Environments|,  Up: |International|
==============================================================================

                                                           *International_Chars*

22.1 Introduction to International Character Sets
=====--------------------------------------------

The users of international character sets and scripts have established
many more-or-less standard coding systems for storing files.  These
coding systems are typically "multibyte", meaning that sequences of two
or more bytes are used to represent individual non-ASCII characters.

   Internally, Emacs uses its own multibyte character encoding, which is
a superset of the "Unicode" standard.  This internal encoding allows
characters from almost every known script to be intermixed in a single
buffer or string.  Emacs translates between the multibyte character
encoding and various other coding systems when reading and writing
files, and when exchanging data with subprocesses.

   The command 'C-h h' ('view-hello-file') displays the file
'etc/HELLO', which illustrates various scripts by showing how to say
"hello" in many languages.  If some characters can't be displayed on
your terminal, they appear as '?' or as hollow boxes (*note
Undisplayable Characters::).

   Keyboards, even in the countries where these character sets are used,
generally don't have keys for all the characters in them.  You can
insert characters that your keyboard does not support, using 'C-x 8
<RET>' ('insert-char').  *Note Inserting Text::.  Shorthands are
available for some common characters; for example, you can insert a left
single quotation mark ' by typing 'C-x 8 [', or in Electric Quote mode,
usually by simply typing '`'.  *Note Quotation Marks::.  Emacs also
supports various "input methods", typically one for each script or
language, which make it easier to type characters in the script.  *Note
Input Methods::.

   The prefix key 'C-x <RET>' is used for commands that pertain to
multibyte characters, coding systems, and input methods.

   The command 'C-x =' ('what-cursor-position') shows information about
the character at point.  In addition to the character position, which
was described in *note Position Info::, this command displays how the
character is encoded.  For instance, it displays the following line in
the echo area for the character 'c':

     Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53

   The four values after 'Char:' describe the character that follows
point, first by showing it and then by giving its character code in
decimal, octal and hex.  For a non-ASCII multibyte character, these are
followed by 'file' and the character's representation, in hex, in the
buffer's coding system, if that coding system encodes the character
safely and with a single byte (*note Coding Systems::).  If the
character's encoding is longer than one byte, Emacs shows 'file ...'.

   On rare occasions, Emacs encounters "raw bytes": single bytes whose
values are in the range 128 (0200 octal) through 255 (0377 octal), which
Emacs cannot interpret as part of a known encoding of some non-ASCII
character.  Such raw bytes are treated as if they belonged to a special
character set 'eight-bit'; Emacs displays them as escaped octal codes
(this can be customized; *note Display Custom::).  In this case, 'C-x ='
shows 'raw-byte' instead of 'file'.  In addition, 'C-x =' shows the
character codes of raw bytes as if they were in the range
'#x3FFF80..#x3FFFFF', which is where Emacs maps them to distinguish them
from Unicode characters in the range '#x0080..#x00FF'.

   With a prefix argument ('C-u C-x ='), this command displays a
detailed description of the character in a window:

   * The character set name, and the codes that identify the character
     within that character set; ASCII characters are identified as
     belonging to the 'ascii' character set.

   * The character's script, syntax and categories.

   * What keys to type to input the character in the current input
     method (if it supports the character).

   * The character's encodings, both internally in the buffer, and
     externally if you were to save the buffer to a file.

   * If you are running Emacs on a graphical display, the font name and
     glyph code for the character.  If you are running Emacs on a text
     terminal, the code(s) sent to the terminal.

   * If the character was composed on display with any following
     characters to form one or more grapheme clusters, the composition
     information: the font glyphs if the frame is on a graphical
     display, else the characters that were composed.

   * The character's text properties (*note (elisp)Text Properties::),
     including any non-default faces used to display the character, and
     any overlays containing it (*note (elisp)Overlays::).

   Here's an example, with some lines folded to fit into this manual:

                  position: 1 of 1 (0%), column: 0
                 character: e^ (displayed as e^) (codepoint 234, #o352, #xea)
         preferred charset: unicode (Unicode (ISO10646))
     code point in charset: 0xEA
                    script: latin
                    syntax: w        which means: word
                  category: .:Base, L:Left-to-right (strong), c:Chinese,
                            j:Japanese, l:Latin, v:Viet
                  to input: type "C-x 8 RET ea" or
                            "C-x 8 RET LATIN SMALL LETTER E WITH CIRCUMFLEX"
               buffer code: #xC3 #xAA
                 file code: #xC3 #xAA (encoded by coding system utf-8-unix)
                   display: by this font (glyph code)
         xft:-PfEd-DejaVu Sans Mono-normal-normal-
             normal--15--*-*-m-0-iso10646-1 (#xAC)

     Character code properties: customize what to show
       name: LATIN SMALL LETTER E WITH CIRCUMFLEX
       old-name: LATIN SMALL LETTER E CIRCUMFLEX
       general-category: Ll (Letter, Lowercase)
       decomposition: (101 770) ('e' '^')

==============================================================================
File: emacs.info,  Node: |Language_Environments|,  Next: |Input_Methods|,  Prev: |International_Chars|,  Up: |International|
==============================================================================

                                                         *Language_Environments*

22.2 Language Environments
=====---------------------

All supported character sets are supported in Emacs buffers whenever
multibyte characters are enabled; there is no need to select a
particular language in order to display its characters.  However, it is
important to select a "language environment" in order to set various
defaults.  Roughly speaking, the language environment represents a
choice of preferred script rather than a choice of language.

   The language environment controls which coding systems to recognize
when reading text (*note Recognize Coding::).  This applies to files,
incoming mail, and any other text you read into Emacs.  It may also
specify the default coding system to use when you create a file.  Each
language environment also specifies a default input method.

   To select a language environment, customize
'current-language-environment' or use the command 'M-x
set-language-environment'.  It makes no difference which buffer is
current when you use this command, because the effects apply globally to
the Emacs session.  See the variable 'language-info-alist' for the list
of supported language environments, and use the command 'C-h L LANG-ENV
<RET>' ('describe-language-environment') for more information about the
language environment LANG-ENV.  Supported language environments include:

     ASCII, Arabic, Belarusian, Bengali, Brazilian Portuguese,
     Bulgarian, Burmese, Cham, Chinese-BIG5, Chinese-CNS,
     Chinese-EUC-TW, Chinese-GB, Chinese-GB18030, Chinese-GBK, Croatian,
     Cyrillic-ALT, Cyrillic-ISO, Cyrillic-KOI8, Czech, Devanagari,
     Dutch, English, Esperanto, Ethiopic, French, Georgian, German,
     Greek, Gujarati, Hebrew, IPA, Italian, Japanese, Kannada, Khmer,
     Korean, Lao, Latin-1, Latin-2, Latin-3, Latin-4, Latin-5, Latin-6,
     Latin-7, Latin-8, Latin-9, Latvian, Lithuanian, Malayalam, Oriya,
     Persian, Polish, Punjabi, Romanian, Russian, Sinhala, Slovak,
     Slovenian, Spanish, Swedish, TaiViet, Tajik, Tamil, Telugu, Thai,
     Tibetan, Turkish, UTF-8, Ukrainian, Vietnamese, Welsh, and
     Windows-1255.

   To display the script(s) used by your language environment on a
graphical display, you need to have suitable fonts.  *Note Fontsets::,
for more details about setting up your fonts.

   Some operating systems let you specify the character-set locale you
are using by setting the locale environment variables 'LC_ALL',
'LC_CTYPE', or 'LANG'.  (If more than one of these is set, the first one
that is nonempty specifies your locale for this purpose.)  During
startup, Emacs looks up your character-set locale's name in the system
locale alias table, matches its canonical name against entries in the
value of the variables 'locale-charset-language-names' and
'locale-language-names' (the former overrides the latter), and selects
the corresponding language environment if a match is found.  It also
adjusts the display table and terminal coding system, the locale coding
system, the preferred coding system as needed for the locale, and--last
but not least--the way Emacs decodes non-ASCII characters sent by your
keyboard.

   If you modify the 'LC_ALL', 'LC_CTYPE', or 'LANG' environment
variables while running Emacs (by using 'M-x setenv'), you may want to
invoke the 'set-locale-environment' command afterwards to readjust the
language environment from the new locale.

   The 'set-locale-environment' function normally uses the preferred
coding system established by the language environment to decode system
messages.  But if your locale matches an entry in the variable
'locale-preferred-coding-systems', Emacs uses the corresponding coding
system instead.  For example, if the locale 'ja_JP.PCK' matches
'japanese-shift-jis' in 'locale-preferred-coding-systems', Emacs uses
that encoding even though it might normally use 'utf-8'.

   You can override the language environment chosen at startup with
explicit use of the command 'set-language-environment', or with
customization of 'current-language-environment' in your init file.

   To display information about the effects of a certain language
environment LANG-ENV, use the command 'C-h L LANG-ENV <RET>'
('describe-language-environment').  This tells you which languages this
language environment is useful for, and lists the character sets, coding
systems, and input methods that go with it.  It also shows some sample
text to illustrate scripts used in this language environment.  If you
give an empty input for LANG-ENV, this command describes the chosen
language environment.

   You can customize any language environment with the normal hook
'set-language-environment-hook'.  The command 'set-language-environment'
runs that hook after setting up the new language environment.  The hook
functions can test for a specific language environment by checking the
variable 'current-language-environment'.  This hook is where you should
put non-default settings for specific language environments, such as
coding systems for keyboard input and terminal output, the default input
method, etc.

   Before it starts to set up the new language environment,
'set-language-environment' first runs the hook
'exit-language-environment-hook'.  This hook is useful for undoing
customizations that were made with 'set-language-environment-hook'.  For
instance, if you set up a special key binding in a specific language
environment using 'set-language-environment-hook', you should set up
'exit-language-environment-hook' to restore the normal binding for that
key.

==============================================================================
File: emacs.info,  Node: |Input_Methods|,  Next: |Select_Input_Method|,  Prev: |Language_Environments|,  Up: |International|
==============================================================================

                                                                 *Input_Methods*

22.3 Input Methods
=====-------------

An "input method" is a kind of character conversion designed
specifically for interactive input.  In Emacs, typically each language
has its own input method; sometimes several languages that use the same
characters can share one input method.  A few languages support several
input methods.

   The simplest kind of input method works by mapping ASCII letters into
another alphabet; this allows you to use one other alphabet instead of
ASCII.  The Greek and Russian input methods work this way.

   A more powerful technique is composition: converting sequences of
characters into one letter.  Many European input methods use composition
to produce a single non-ASCII letter from a sequence that consists of a
letter followed by accent characters (or vice versa).  For example, some
methods convert the sequence 'o ^' into a single accented letter.  These
input methods have no special commands of their own; all they do is
compose sequences of printing characters.

   The input methods for syllabic scripts typically use mapping followed
by composition.  The input methods for Thai and Korean work this way.
First, letters are mapped into symbols for particular sounds or tone
marks; then, sequences of these that make up a whole syllable are mapped
into one syllable sign.

   Chinese and Japanese require more complex methods.  In Chinese input
methods, first you enter the phonetic spelling of a Chinese word (in
input method 'chinese-py', among others), or a sequence of portions of
the character (input methods 'chinese-4corner' and 'chinese-sw', and
others).  One input sequence typically corresponds to many possible
Chinese characters.  You select the one you mean using keys such as
'C-f', 'C-b', 'C-n', 'C-p' (or the arrow keys), and digits, which have
special meanings in this situation.

   The possible characters are conceptually arranged in several rows,
with each row holding up to 10 alternatives.  Normally, Emacs displays
just one row at a time, in the echo area; '(I/J)' appears at the
beginning, to indicate that this is the Ith row out of a total of J
rows.  Type 'C-n' or 'C-p' to display the next row or the previous row.

   Type 'C-f' and 'C-b' to move forward and backward among the
alternatives in the current row.  As you do this, Emacs highlights the
current alternative with a special color; type 'C-<SPC>' to select the
current alternative and use it as input.  The alternatives in the row
are also numbered; the number appears before the alternative.  Typing a
number selects the associated alternative of the current row and uses it
as input.

   <TAB> in these Chinese input methods displays a buffer showing all
the possible characters at once; then clicking 'mouse-2' on one of them
selects that alternative.  The keys 'C-f', 'C-b', 'C-n', 'C-p', and
digits continue to work as usual, but they do the highlighting in the
buffer showing the possible characters, rather than in the echo area.

   To enter characters according to the "p??ny??n" transliteration method
instead, use the 'chinese-sisheng' input method.  This is a composition
based method, where e.g.  'pi1' results in 'p??'.

   In Japanese input methods, first you input a whole word using
phonetic spelling; then, after the word is in the buffer, Emacs converts
it into one or more characters using a large dictionary.  One phonetic
spelling corresponds to a number of different Japanese words; to select
one of them, use 'C-n' and 'C-p' to cycle through the alternatives.

   Sometimes it is useful to cut off input method processing so that the
characters you have just entered will not combine with subsequent
characters.  For example, in input method 'latin-1-postfix', the
sequence 'o ^' combines to form an 'o' with an accent.  What if you want
to enter them as separate characters?

   One way is to type the accent twice; this is a special feature for
entering the separate letter and accent.  For example, 'o ^ ^' gives you
the two characters 'o^'.  Another way is to type another letter after
the 'o'--something that won't combine with that--and immediately delete
it.  For example, you could type 'o o <DEL> ^' to get separate 'o' and
'^'.  Another method, more general but not quite as easy to type, is to
use 'C-\ C-\' between two characters to stop them from combining.  This
is the command 'C-\' ('toggle-input-method') used twice.  *Note Select
Input Method::.

   'C-\ C-\' is especially useful inside an incremental search, because
it stops waiting for more characters to combine, and starts searching
for what you have already entered.

   To find out how to input the character after point using the current
input method, type 'C-u C-x ='.  *Note Position Info::.

   The variables 'input-method-highlight-flag' and
'input-method-verbose-flag' control how input methods explain what is
happening.  If 'input-method-highlight-flag' is non-'nil', the partial
sequence is highlighted in the buffer (for most input methods--some
disable this feature).  If 'input-method-verbose-flag' is non-'nil', the
list of possible characters to type next is displayed in the echo area
(but not when you are in the minibuffer).

   You can modify how an input method works by making your changes in a
function that you add to the hook variable 'quail-activate-hook'.  *Note
Hooks::.  For example, you can redefine some of the input method's keys
by defining key bindings in the keymap returned by the function
'quail-translation-keymap', using 'define-key'.  *Note Init Rebinding::.

   Another facility for typing characters not on your keyboard is by
using 'C-x 8 <RET>' ('insert-char') to insert a single character based
on its Unicode name or code-point; see *note Inserting Text::.

==============================================================================
File: emacs.info,  Node: |Select_Input_Method|,  Next: |Coding_Systems|,  Prev: |Input_Methods|,  Up: |International|
==============================================================================

                                                           *Select_Input_Method*

22.4 Selecting an Input Method
=====-------------------------

'C-\'
     Enable or disable use of the selected input method
     ('toggle-input-method').

'C-x <RET> C-\ METHOD <RET>'
     Select a new input method for the current buffer
     ('set-input-method').

'C-h I METHOD <RET>'
'C-h C-\ METHOD <RET>'
     Describe the input method METHOD ('describe-input-method').  By
     default, it describes the current input method (if any).  This
     description should give you the full details of how to use any
     particular input method.

'M-x list-input-methods'
     Display a list of all the supported input methods.

   To choose an input method for the current buffer, use 'C-x <RET> C-\'
('set-input-method').  This command reads the input method name from the
minibuffer; the name normally starts with the language environment that
it is meant to be used with.  The variable 'current-input-method'
records which input method is selected.

   Input methods use various sequences of ASCII characters to stand for
non-ASCII characters.  Sometimes it is useful to turn off the input
method temporarily.  To do this, type 'C-\' ('toggle-input-method').  To
reenable the input method, type 'C-\' again.

   If you type 'C-\' and you have not yet selected an input method, it
prompts you to specify one.  This has the same effect as using 'C-x
<RET> C-\' to specify an input method.

   When invoked with a numeric argument, as in 'C-u C-\',
'toggle-input-method' always prompts you for an input method, suggesting
the most recently selected one as the default.

   Selecting a language environment specifies a default input method for
use in various buffers.  When you have a default input method, you can
select it in the current buffer by typing 'C-\'.  The variable
'default-input-method' specifies the default input method ('nil' means
there is none).

   In some language environments, which support several different input
methods, you might want to use an input method different from the
default chosen by 'set-language-environment'.  You can instruct Emacs to
select a different default input method for a certain language
environment, if you wish, by using 'set-language-environment-hook'
(*note set-language-environment-hook: Language Environments.).  For
example:

     (defun my-chinese-setup ()
       "Set up my private Chinese environment."
       (if (equal current-language-environment "Chinese-GB")
           (setq default-input-method "chinese-tonepy")))
     (add-hook 'set-language-environment-hook 'my-chinese-setup)

This sets the default input method to be 'chinese-tonepy' whenever you
choose a Chinese-GB language environment.

   You can instruct Emacs to activate a certain input method
automatically.  For example:

     (add-hook 'text-mode-hook
       (lambda () (set-input-method "german-prefix")))

This automatically activates the input method 'german-prefix' in Text
mode.

   Some input methods for alphabetic scripts work by (in effect)
remapping the keyboard to emulate various keyboard layouts commonly used
for those scripts.  How to do this remapping properly depends on your
actual keyboard layout.  To specify which layout your keyboard has, use
the command 'M-x quail-set-keyboard-layout'.

   You can use the command 'M-x quail-show-key' to show what key (or key
sequence) to type in order to input the character following point, using
the selected keyboard layout.  The command 'C-u C-x =' also shows that
information, in addition to other information about the character.

   'M-x list-input-methods' displays a list of all the supported input
methods.  The list gives information about each input method, including
the string that stands for it in the mode line.

==============================================================================
File: emacs.info,  Node: |Coding_Systems|,  Next: |Recognize_Coding|,  Prev: |Select_Input_Method|,  Up: |International|
==============================================================================

                                                                *Coding_Systems*

22.5 Coding Systems
=====--------------

Users of various languages have established many more-or-less standard
coding systems for representing them.  Emacs does not use these coding
systems internally; instead, it converts from various coding systems to
its own system when reading data, and converts the internal coding
system to other coding systems when writing data.  Conversion is
possible in reading or writing files, in sending or receiving from the
terminal, and in exchanging data with subprocesses.

   Emacs assigns a name to each coding system.  Most coding systems are
used for one language, and the name of the coding system starts with the
language name.  Some coding systems are used for several languages;
their names usually start with 'iso'.  There are also special coding
systems, such as 'no-conversion', 'raw-text', and 'emacs-internal'.

   A special class of coding systems, collectively known as "codepages",
is designed to support text encoded by MS-Windows and MS-DOS software.
The names of these coding systems are 'cpNNNN', where NNNN is a 3- or
4-digit number of the codepage.  You can use these encodings just like
any other coding system; for example, to visit a file encoded in
codepage 850, type 'C-x <RET> c cp850 <RET> C-x C-f FILENAME <RET>'.

   In addition to converting various representations of non-ASCII
characters, a coding system can perform end-of-line conversion.  Emacs
handles three different conventions for how to separate lines in a file:
newline (Unix), carriage return followed by linefeed (DOS), and just
carriage return (Mac).

'C-h C CODING <RET>'
     Describe coding system CODING ('describe-coding-system').

'C-h C <RET>'
     Describe the coding systems currently in use
     ('describe-coding-system').

'M-x list-coding-systems'
     Display a list of all the supported coding systems.

   The command 'C-h C' ('describe-coding-system') displays information
about particular coding systems, including the end-of-line conversion
specified by those coding systems.  You can specify a coding system name
as the argument; alternatively, with an empty argument, it describes the
coding systems currently selected for various purposes, both in the
current buffer and as the defaults, and the priority list for
recognizing coding systems (*note Recognize Coding::).

   To display a list of all the supported coding systems, type 'M-x
list-coding-systems'.  The list gives information about each coding
system, including the letter that stands for it in the mode line (*note
Mode Line::).

   Each of the coding systems that appear in this list--except for
'no-conversion', which means no conversion of any kind--specifies how and
whether to convert printing characters, but leaves the choice of
end-of-line conversion to be decided based on the contents of each file.
For example, if the file appears to use the sequence carriage return and
linefeed to separate lines, DOS end-of-line conversion will be used.

   Each of the listed coding systems has three variants, which specify
exactly what to do for end-of-line conversion:

'...-unix'
     Don't do any end-of-line conversion; assume the file uses newline
     to separate lines.  (This is the convention normally used on Unix
     and GNU systems, and macOS.)

'...-dos'
     Assume the file uses carriage return followed by linefeed to
     separate lines, and do the appropriate conversion.  (This is the
     convention normally used on Microsoft systems.(1))

'...-mac'
     Assume the file uses carriage return to separate lines, and do the
     appropriate conversion.  (This was the convention used in Classic
     Mac OS.)

   These variant coding systems are omitted from the
'list-coding-systems' display for brevity, since they are entirely
predictable.  For example, the coding system 'iso-latin-1' has variants
'iso-latin-1-unix', 'iso-latin-1-dos' and 'iso-latin-1-mac'.

   The coding systems 'unix', 'dos', and 'mac' are aliases for
'undecided-unix', 'undecided-dos', and 'undecided-mac', respectively.
These coding systems specify only the end-of-line conversion, and leave
the character code conversion to be deduced from the text itself.

   The coding system 'raw-text' is good for a file which is mainly ASCII
text, but may contain byte values above 127 that are not meant to encode
non-ASCII characters.  With 'raw-text', Emacs copies those byte values
unchanged, and sets 'enable-multibyte-characters' to 'nil' in the
current buffer so that they will be interpreted properly.  'raw-text'
handles end-of-line conversion in the usual way, based on the data
encountered, and has the usual three variants to specify the kind of
end-of-line conversion to use.

   In contrast, the coding system 'no-conversion' specifies no character
code conversion at all--none for non-ASCII byte values and none for end
of line.  This is useful for reading or writing binary files, tar files,
and other files that must be examined verbatim.  It, too, sets
'enable-multibyte-characters' to 'nil'.

   The easiest way to edit a file with no conversion of any kind is with
the 'M-x find-file-literally' command.  This uses 'no-conversion', and
also suppresses other Emacs features that might convert the file
contents before you see them.  *Note Visiting::.

   The coding system 'emacs-internal' (or 'utf-8-emacs', which is
equivalent) means that the file contains non-ASCII characters stored
with the internal Emacs encoding.  This coding system handles
end-of-line conversion based on the data encountered, and has the usual
three variants to specify the kind of end-of-line conversion.

   ---------- Footnotes ----------

   (1) It is also specified for MIME 'text/*' bodies and in other
network transport contexts.  It is different from the SGML reference
syntax record-start/record-end format, which Emacs doesn't support
directly.

==============================================================================
File: emacs.info,  Node: |Recognize_Coding|,  Next: |Specify_Coding|,  Prev: |Coding_Systems|,  Up: |International|
==============================================================================

                                                              *Recognize_Coding*

22.6 Recognizing Coding Systems
=====--------------------------

Whenever Emacs reads a given piece of text, it tries to recognize which
coding system to use.  This applies to files being read, output from
subprocesses, text from X selections, etc.  Emacs can select the right
coding system automatically most of the time--once you have specified
your preferences.

   Some coding systems can be recognized or distinguished by which byte
sequences appear in the data.  However, there are coding systems that
cannot be distinguished, not even potentially.  For example, there is no
way to distinguish between Latin-1 and Latin-2; they use the same byte
values with different meanings.

   Emacs handles this situation by means of a priority list of coding
systems.  Whenever Emacs reads a file, if you do not specify the coding
system to use, Emacs checks the data against each coding system,
starting with the first in priority and working down the list, until it
finds a coding system that fits the data.  Then it converts the file
contents assuming that they are represented in this coding system.

   The priority list of coding systems depends on the selected language
environment (*note Language Environments::).  For example, if you use
French, you probably want Emacs to prefer Latin-1 to Latin-2; if you use
Czech, you probably want Latin-2 to be preferred.  This is one of the
reasons to specify a language environment.

   However, you can alter the coding system priority list in detail with
the command 'M-x prefer-coding-system'.  This command reads the name of
a coding system from the minibuffer, and adds it to the front of the
priority list, so that it is preferred to all others.  If you use this
command several times, each use adds one element to the front of the
priority list.

   If you use a coding system that specifies the end-of-line conversion
type, such as 'iso-8859-1-dos', what this means is that Emacs should
attempt to recognize 'iso-8859-1' with priority, and should use DOS
end-of-line conversion when it does recognize 'iso-8859-1'.

   Sometimes a file name indicates which coding system to use for the
file.  The variable 'file-coding-system-alist' specifies this
correspondence.  There is a special function
'modify-coding-system-alist' for adding elements to this list.  For
example, to read and write all '.txt' files using the coding system
'chinese-iso-8bit', you can execute this Lisp expression:

     (modify-coding-system-alist 'file "\\.txt\\'" 'chinese-iso-8bit)

The first argument should be 'file', the second argument should be a
regular expression that determines which files this applies to, and the
third argument says which coding system to use for these files.

   Emacs recognizes which kind of end-of-line conversion to use based on
the contents of the file: if it sees only carriage returns, or only
carriage return followed by linefeed sequences, then it chooses the
end-of-line conversion accordingly.  You can inhibit the automatic use
of end-of-line conversion by setting the variable
'inhibit-eol-conversion' to non-'nil'.  If you do that, DOS-style files
will be displayed with the '^M' characters visible in the buffer; some
people prefer this to the more subtle '(DOS)' end-of-line type
indication near the left edge of the mode line (*note eol-mnemonic: Mode
Line.).

   By default, the automatic detection of the coding system is sensitive
to escape sequences.  If Emacs sees a sequence of characters that begin
with an escape character, and the sequence is valid as an ISO-2022 code,
that tells Emacs to use one of the ISO-2022 encodings to decode the
file.

   However, there may be cases that you want to read escape sequences in
a file as is.  In such a case, you can set the variable
'inhibit-iso-escape-detection' to non-'nil'.  Then the code detection
ignores any escape sequences, and never uses an ISO-2022 encoding.  The
result is that all escape sequences become visible in the buffer.

   The default value of 'inhibit-iso-escape-detection' is 'nil'.  We
recommend that you not change it permanently, only for one specific
operation.  That's because some Emacs Lisp source files in the Emacs
distribution contain non-ASCII characters encoded in the coding system
'iso-2022-7bit', and they won't be decoded correctly when you visit
those files if you suppress the escape sequence detection.

   The variables 'auto-coding-alist' and 'auto-coding-regexp-alist' are
the strongest way to specify the coding system for certain patterns of
file names, or for files containing certain patterns, respectively.
These variables even override '--coding:--' tags in the file itself
(*note Specify Coding::).  For example, Emacs uses 'auto-coding-alist'
for tar and archive files, to prevent it from being confused by a
'--coding:--' tag in a member of the archive and thinking it applies
to the archive file as a whole.

   Another way to specify a coding system is with the variable
'auto-coding-functions'.  For example, one of the builtin
'auto-coding-functions' detects the encoding for XML files.  Unlike the
previous two, this variable does not override any '--coding:--' tag.

==============================================================================
File: emacs.info,  Node: |Specify_Coding|,  Next: |Output_Coding|,  Prev: |Recognize_Coding|,  Up: |International|
==============================================================================

                                                                *Specify_Coding*

22.7 Specifying a File's Coding System
=====---------------------------------

If Emacs recognizes the encoding of a file incorrectly, you can reread
the file using the correct coding system with 'C-x <RET> r'
('revert-buffer-with-coding-system').  This command prompts for the
coding system to use.  To see what coding system Emacs actually used to
decode the file, look at the coding system mnemonic letter near the left
edge of the mode line (*note Mode Line::), or type 'C-h C'
('describe-coding-system').

   You can specify the coding system for a particular file in the file
itself, using the '--...--' construct at the beginning, or a local
variables list at the end (*note File Variables::).  You do this by
defining a value for the "variable" named 'coding'.  Emacs does not
really have a variable 'coding'; instead of setting a variable, this
uses the specified coding system for the file.  For example,
'-*-mode: C; coding: latin-1; -*-' specifies use of the Latin-1 coding
system, as well as C mode.  When you specify the coding explicitly in
the file, that overrides 'file-coding-system-alist'.

==============================================================================
File: emacs.info,  Node: |Output_Coding|,  Next: |Text_Coding|,  Prev: |Specify_Coding|,  Up: |International|
==============================================================================

                                                                 *Output_Coding*

22.8 Choosing Coding Systems for Output
=====----------------------------------

Once Emacs has chosen a coding system for a buffer, it stores that
coding system in 'buffer-file-coding-system'.  That makes it the default
for operations that write from this buffer into a file, such as
'save-buffer' and 'write-region'.  You can specify a different coding
system for further file output from the buffer using
'set-buffer-file-coding-system' (*note Text Coding::).

   You can insert any character Emacs supports into any Emacs buffer,
but most coding systems can only handle a subset of these characters.
Therefore, it's possible that the characters you insert cannot be
encoded with the coding system that will be used to save the buffer.
For example, you could visit a text file in Polish, encoded in
'iso-8859-2', and add some Russian words to it.  When you save that
buffer, Emacs cannot use the current value of
'buffer-file-coding-system', because the characters you added cannot be
encoded by that coding system.

   When that happens, Emacs tries the most-preferred coding system (set
by 'M-x prefer-coding-system' or 'M-x set-language-environment').  If
that coding system can safely encode all of the characters in the
buffer, Emacs uses it, and stores its value in
'buffer-file-coding-system'.  Otherwise, Emacs displays a list of coding
systems suitable for encoding the buffer's contents, and asks you to
choose one of those coding systems.

   If you insert the unsuitable characters in a mail message, Emacs
behaves a bit differently.  It additionally checks whether the
most-preferred coding system is recommended for use in MIME messages; if
not, it informs you of this fact and prompts you for another coding
system.  This is so you won't inadvertently send a message encoded in a
way that your recipient's mail software will have difficulty decoding.
(You can still use an unsuitable coding system if you enter its name at
the prompt.)

   When you send a mail message (*note Sending Mail::), Emacs has four
different ways to determine the coding system to use for encoding the
message text.  It first tries the buffer's own value of
'buffer-file-coding-system', if that is non-'nil'.  Otherwise, it uses
the value of 'sendmail-coding-system', if that is non-'nil'.  Thirdly,
it uses the value of 'default-sendmail-coding-system'.  If all of these
three values are 'nil', Emacs encodes outgoing mail using the default
coding system for new files (i.e., the default value of
'buffer-file-coding-system'), which is controlled by your choice of
language environment.

==============================================================================
File: emacs.info,  Node: |Text_Coding|,  Next: |Communication_Coding|,  Prev: |Output_Coding|,  Up: |International|
==============================================================================

                                                                   *Text_Coding*

22.9 Specifying a Coding System for File Text
=====----------------------------------------

In cases where Emacs does not automatically choose the right coding
system for a file's contents, you can use these commands to specify one:

'C-x <RET> f CODING <RET>'
     Use coding system CODING to save or revisit the file in the current
     buffer ('set-buffer-file-coding-system').

'C-x <RET> c CODING <RET>'
     Specify coding system CODING for the immediately following command
     ('universal-coding-system-argument').

'C-x <RET> r CODING <RET>'
     Revisit the current file using the coding system CODING
     ('revert-buffer-with-coding-system').

'M-x recode-region <RET> RIGHT <RET> WRONG <RET>'
     Convert a region that was decoded using coding system WRONG,
     decoding it using coding system RIGHT instead.

   The command 'C-x <RET> f' ('set-buffer-file-coding-system') sets the
file coding system for the current buffer (i.e., the coding system to
use when saving or reverting the file).  You specify which coding system
using the minibuffer.  You can also invoke this command by clicking with
'mouse-3' on the coding system indicator in the mode line (*note Mode
Line::).

   If you specify a coding system that cannot handle all the characters
in the buffer, Emacs will warn you about the troublesome characters, and
ask you to choose another coding system, when you try to save the buffer
(*note Output Coding::).

vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
