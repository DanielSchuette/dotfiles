E.6 C Dialect
=============

The C part of Emacs is portable to C99 or later: C11-specific features
such as '<stdalign.h>' and '_Noreturn' are not used without a check,
typically at configuration time, and the Emacs build procedure provides
a substitute implementation if necessary.  Some C11 features, such as
anonymous structures and unions, are too difficult to emulate, so they
are avoided entirely.

   At some point in the future the base C dialect will no doubt change
to C11.

==============================================================================
File: elisp.info,  Node: |Writing_Emacs_Primitives|,  Next: |Writing_Dynamic_Modules|,  Prev: |C_Dialect|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                      *Writing_Emacs_Primitives*

E.7 Writing Emacs Primitives
----------------------------

Lisp primitives are Lisp functions implemented in C.  The details of
interfacing the C function so that Lisp can call it are handled by a few
C macros.  The only way to really understand how to write new C code is
to read the source, but we can explain some things here.

   An example of a special form is the definition of 'or', from
'eval.c'.  (An ordinary function would have the same general
appearance.)

     DEFUN ("or", For, Sor, 0, UNEVALLED, 0,
            doc: /* Eval args until one of them yields non-nil,
     then return that value.
     The remaining args are not evalled at all.
     If all args return nil, return nil.
     usage: (or CONDITIONS...)  */)
       (Lisp_Object args)
     {
       Lisp_Object val = Qnil;

       while (CONSP (args))
         {
           val = eval_sub (XCAR (args));
           if (!NILP (val))
             break;
           args = XCDR (args);
           maybe_quit ();
         }

       return val;
     }

   Let's start with a precise explanation of the arguments to the
'DEFUN' macro.  Here is a template for them:

     DEFUN (LNAME, FNAME, SNAME, MIN, MAX, INTERACTIVE, DOC)

LNAME
     This is the name of the Lisp symbol to define as the function name;
     in the example above, it is 'or'.

FNAME
     This is the C function name for this function.  This is the name
     that is used in C code for calling the function.  The name is, by
     convention, 'F' prepended to the Lisp name, with all dashes ('-')
     in the Lisp name changed to underscores.  Thus, to call this
     function from C code, call 'For'.

SNAME
     This is a C variable name to use for a structure that holds the
     data for the subr object that represents the function in Lisp.
     This structure conveys the Lisp symbol name to the initialization
     routine that will create the symbol and store the subr object as
     its definition.  By convention, this name is always FNAME with 'F'
     replaced with 'S'.

MIN
     This is the minimum number of arguments that the function requires.
     The function 'or' allows a minimum of zero arguments.

MAX
     This is the maximum number of arguments that the function accepts,
     if there is a fixed maximum.  Alternatively, it can be 'UNEVALLED',
     indicating a special form that receives unevaluated arguments, or
     'MANY', indicating an unlimited number of evaluated arguments (the
     equivalent of '&rest').  Both 'UNEVALLED' and 'MANY' are macros.
     If MAX is a number, it must be more than MIN but less than 8.

INTERACTIVE
     This is an interactive specification, a string such as might be
     used as the argument of 'interactive' in a Lisp function (*note
     Using Interactive::).  In the case of 'or', it is '0' (a null
     pointer), indicating that 'or' cannot be called interactively.  A
     value of '""' indicates a function that should receive no arguments
     when called interactively.  If the value begins with a '"(', the
     string is evaluated as a Lisp form.  For example:

          DEFUN ("foo", Ffoo, Sfoo, 0, 3,
                 "(list (read-char-by-name \"Insert character: \")\
                        (prefix-numeric-value current-prefix-arg)\
                        t)",
                 doc: /* ... */)

DOC
     This is the documentation string.  It uses C comment syntax rather
     than C string syntax because comment syntax requires nothing
     special to include multiple lines.  The 'doc:' identifies the
     comment that follows as the documentation string.  The '/*' and
     '*/' delimiters that begin and end the comment are not part of the
     documentation string.

     If the last line of the documentation string begins with the
     keyword 'usage:', the rest of the line is treated as the argument
     list for documentation purposes.  This way, you can use different
     argument names in the documentation string from the ones used in
     the C code.  'usage:' is required if the function has an unlimited
     number of arguments.

     Some primitives have multiple definitions, one per platform (e.g.,
     'x-create-frame').  In such cases, rather than writing the same
     documentation string in each definition, only one definition has
     the actual documentation.  The others have placeholders beginning
     with 'SKIP', which are ignored by the function that parses the
     'DOC' file.

     All the usual rules for documentation strings in Lisp code (*note
     Documentation Tips::) apply to C code documentation strings too.

     The documentation string can be followed by a list of C function
     attributes for the C function that implements the primitive, like
     this:

          DEFUN ("bar", Fbar, Sbar, 0, UNEVALLED, 0
                 doc: /* ... */
                 attributes: ATTR1 ATTR2 ...)

     You can specify more than a single attribute, one after the other.
     Currently, only the following attributes are recognized:

     'noreturn'
          Declares the C function as one that never returns.  This
          corresponds to the C11 keyword '_Noreturn' and to
          '__attribute__ ((__noreturn__))' attribute of GCC (*note
          (gcc)Function Attributes::).

     'const'
          Declares that the function does not examine any values except
          its arguments, and has no effects except the return value.
          This corresponds to '__attribute__ ((__const__))' attribute of
          GCC.

     'noinline'
          This corresponds to '__attribute__ ((__noinline__))' attribute
          of GCC, which prevents the function from being considered for
          inlining.  This might be needed, e.g., to countermand effects
          of link-time optimizations on stack-based variables.

   After the call to the 'DEFUN' macro, you must write the argument list
for the C function, including the types for the arguments.  If the
primitive accepts a fixed maximum number of Lisp arguments, there must
be one C argument for each Lisp argument, and each argument must be of
type 'Lisp_Object'.  (Various macros and functions for creating values
of type 'Lisp_Object' are declared in the file 'lisp.h'.)  If the
primitive is a special form, it must accept a Lisp list containing its
unevaluated Lisp arguments as a single argument of type 'Lisp_Object'.
If the primitive has no upper limit on the number of evaluated Lisp
arguments, it must have exactly two C arguments: the first is the number
of Lisp arguments, and the second is the address of a block containing
their values.  These have types 'ptrdiff_t' and 'Lisp_Object *',
respectively.  Since 'Lisp_Object' can hold any Lisp object of any data
type, you can determine the actual data type only at run time; so if you
want a primitive to accept only a certain type of argument, you must
check the type explicitly using a suitable predicate (*note Type
Predicates::).

   Within the function 'For' itself, the local variable 'args' refers to
objects controlled by Emacs's stack-marking garbage collector.  Although
the garbage collector does not reclaim objects reachable from C
'Lisp_Object' stack variables, it may move some of the components of an
object, such as the contents of a string or the text of a buffer.
Therefore, functions that access these components must take care to
refetch their addresses after performing Lisp evaluation.  This means
that instead of keeping C pointers to string contents or buffer text,
the code should keep the buffer or string position, and recompute the C
pointer from the position after performing Lisp evaluation.  Lisp
evaluation can occur via calls to 'eval_sub' or 'Feval', either directly
or indirectly.

   Note the call to 'maybe_quit' inside the loop: this function checks
whether the user pressed 'C-g', and if so, aborts the processing.  You
should do that in any loop that can potentially require a large number
of iterations; in this case, the list of arguments could be very long.
This increases Emacs responsiveness and improves user experience.

   You must not use C initializers for static or global variables unless
the variables are never written once Emacs is dumped.  These variables
with initializers are allocated in an area of memory that becomes
read-only (on certain operating systems) as a result of dumping Emacs.
*Note Pure Storage::.

   Defining the C function is not enough to make a Lisp primitive
available; you must also create the Lisp symbol for the primitive and
store a suitable subr object in its function cell.  The code looks like
this:

     defsubr (&SNAME);

Here SNAME is the name you used as the third argument to 'DEFUN'.

   If you add a new primitive to a file that already has Lisp primitives
defined in it, find the function (near the end of the file) named
'syms_of_SOMETHING', and add the call to 'defsubr' there.  If the file
doesn't have this function, or if you create a new file, add to it a
'syms_of_FILENAME' (e.g., 'syms_of_myfile').  Then find the spot in
'emacs.c' where all of these functions are called, and add a call to
'syms_of_FILENAME' there.

   The function 'syms_of_FILENAME' is also the place to define any C
variables that are to be visible as Lisp variables.  'DEFVAR_LISP' makes
a C variable of type 'Lisp_Object' visible in Lisp.  'DEFVAR_INT' makes
a C variable of type 'int' visible in Lisp with a value that is always
an integer.  'DEFVAR_BOOL' makes a C variable of type 'int' visible in
Lisp with a value that is either 't' or 'nil'.  Note that variables
defined with 'DEFVAR_BOOL' are automatically added to the list
'byte-boolean-vars' used by the byte compiler.

   These macros all expect three arguments:

'lname'
     The name of the variable to be used by Lisp programs.
'vname'
     The name of the variable in the C sources.
'doc'
     The documentation for the variable, as a C comment.  *Note
     Documentation Basics::, for more details.

   By convention, when defining variables of a "native" type ('int' and
'bool'), the name of the C variable is the name of the Lisp variable
with '-' replaced by '_'.  When the variable has type 'Lisp_Object', the
convention is to also prefix the C variable name with 'V'.  i.e.

     DEFVAR_INT ("my-int-variable", my_int_variable,
                doc: /* An integer variable.  */);

     DEFVAR_LISP ("my-lisp-variable", Vmy_lisp_variable,
                doc: /* A Lisp variable.  */);

   There are situations in Lisp where you need to refer to the symbol
itself rather than the value of that symbol.  One such case is when
temporarily overriding the value of a variable, which in Lisp is done
with 'let'.  In C sources, this is done by defining a corresponding,
constant symbol, and using 'specbind'.  By convention,
'Qmy_lisp_variable' corresponds to 'Vmy_lisp_variable'; to define it,
use the 'DEFSYM' macro.  i.e.

     DEFSYM (Qmy_lisp_variable, "my-lisp-variable");

   To perform the actual binding:

     specbind (Qmy_lisp_variable, Qt);

   In Lisp symbols sometimes need to be quoted, to achieve the same
effect in C you again use the corresponding constant symbol
'Qmy_lisp_variable'.  For example, when creating a buffer-local variable
(*note Buffer-Local Variables::) in Lisp you would write:

     (make-variable-buffer-local 'my-lisp-variable)

   In C the corresponding code uses 'Fmake_variable_buffer_local' in
combination with 'DEFSYM', i.e.

     DEFSYM (Qmy_lisp_variable, "my-lisp-variable");
     Fmake_variable_buffer_local (Qmy_lisp_variable);

   If you want to make a Lisp variable that is defined in C behave like
one declared with 'defcustom', add an appropriate entry to
'cus-start.el'.  *Note Variable Definitions::, for a description of the
format to use.

   If you directly define a file-scope C variable of type 'Lisp_Object',
you must protect it from garbage-collection by calling 'staticpro' in
'syms_of_FILENAME', like this:

     staticpro (&VARIABLE);

   Here is another example function, with more complicated arguments.
This comes from the code in 'window.c', and it demonstrates the use of
macros and functions to manipulate Lisp objects.

     DEFUN ("coordinates-in-window-p", Fcoordinates_in_window_p,
            Scoordinates_in_window_p, 2, 2, 0,
            doc: /* Return non-nil if COORDINATES are in WINDOW.
       ...
       or `right-margin' is returned.  */)
       (register Lisp_Object coordinates, Lisp_Object window)
     {
       struct window *w;
       struct frame *f;
       int x, y;
       Lisp_Object lx, ly;

       w = decode_live_window (window);
       f = XFRAME (w->frame);
       CHECK_CONS (coordinates);
       lx = Fcar (coordinates);
       ly = Fcdr (coordinates);
       CHECK_NUMBER (lx);
       CHECK_NUMBER (ly);
       x = FRAME_PIXEL_X_FROM_CANON_X (f, lx) + FRAME_INTERNAL_BORDER_WIDTH (f);
       y = FRAME_PIXEL_Y_FROM_CANON_Y (f, ly) + FRAME_INTERNAL_BORDER_WIDTH (f);

       switch (coordinates_in_window (w, x, y))
         {
         case ON_NOTHING:            /* NOT in window at all.  */
           return Qnil;

         ...

         case ON_MODE_LINE:          /* In mode line of window.  */
           return Qmode_line;

         ...

         case ON_SCROLL_BAR:         /* On scroll-bar of window.  */
           /* Historically we are supposed to return nil in this case.  */
           return Qnil;

         default:
           emacs_abort ();
         }
     }

   Note that C code cannot call functions by name unless they are
defined in C.  The way to call a function written in Lisp is to use
'Ffuncall', which embodies the Lisp function 'funcall'.  Since the Lisp
function 'funcall' accepts an unlimited number of arguments, in C it
takes two: the number of Lisp-level arguments, and a one-dimensional
array containing their values.  The first Lisp-level argument is the
Lisp function to call, and the rest are the arguments to pass to it.

   The C functions 'call0', 'call1', 'call2', and so on, provide handy
ways to call a Lisp function conveniently with a fixed number of
arguments.  They work by calling 'Ffuncall'.

   'eval.c' is a very good file to look through for examples; 'lisp.h'
contains the definitions for some important macros and functions.

   If you define a function which is side-effect free or pure, give it a
non-'nil' 'side-effect-free' or 'pure' property, respectively (*note
Standard Properties::).

==============================================================================
File: elisp.info,  Node: |Writing_Dynamic_Modules|,  Next: |Object_Internals|,  Prev: |Writing_Emacs_Primitives|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                       *Writing_Dynamic_Modules*

E.8 Writing Dynamically-Loaded Modules
--------------------------------------

This section describes the Emacs module API and how to use it as part of
writing extension modules for Emacs.  The module API is defined in the C
programming language, therefore the description and the examples in this
section assume the module is written in C.  For other programming
languages, you will need to use the appropriate bindings, interfaces and
facilities for calling C code.  Emacs C code requires a C99 or later
compiler (*note C Dialect::), and so the code examples in this section
also follow that standard.

   Writing a module and integrating it into Emacs comprises the
following tasks:

   * Writing initialization code for the module.

   * Writing one or more module functions.

   * Communicating values and objects between Emacs and your module
     functions.

   * Handling of error conditions and nonlocal exits.

The following subsections describe these tasks and the API itself in
more detail.

   Once your module is written, compile it to produce a shared library,
according to the conventions of the underlying platform.  Then place the
shared library in a directory mentioned in 'load-path' (*note Library
Search::), where Emacs will find it.

   If you wish to verify the conformance of a module to the Emacs
dynamic module API, invoke Emacs with the '--module-assertions' option.
*Note (emacs)Initial Options::.

MENU

* |Module_Initialization|::
* |Module_Functions|::
* |Module_Values|::
* |Module_Misc|::
* |Module_Nonlocal|::

==============================================================================
File: elisp.info,  Node: |Module_Initialization|,  Next: |Module_Functions|,  Up: |Writing_Dynamic_Modules|
==============================================================================

                                                         *Module_Initialization*

E.8.1 Module Initialization Code
--------------------------------

Begin your module by including the header file 'emacs-module.h' and
defining the GPL compatibility symbol:

     #include <emacs-module.h>

     int plugin_is_GPL_compatible;

   The 'emacs-module.h' file is installed into your system's include
tree as part of the Emacs installation.  Alternatively, you can find it
in the Emacs source tree.

   Next, write an initialization function for the module.

 -- Function: int emacs_module_init (struct emacs_runtime *RUNTIME)
     Emacs calls this function when it loads a module.  If a module does
     not export a function named 'emacs_module_init', trying to load the
     module will signal an error.  The initialization function should
     return zero if the initialization succeeds, non-zero otherwise.  In
     the latter case, Emacs will signal an error, and the loading of the
     module will fail.  If the user presses 'C-g' during the
     initialization, Emacs ignores the return value of the
     initialization function and quits (*note Quitting::).  (If needed,
     you can catch user quitting inside the initialization function,
     *note should_quit::.)

     The argument RUNTIME is a pointer to a C 'struct' that includes 2
     public fields: 'size', which provides the size of the structure in
     bytes; and 'get_environment', which provides a pointer to a
     function that allows the module initialization function access to
     the Emacs environment object and its interfaces.

     The initialization function should perform whatever initialization
     is required for the module.  In addition, it can perform the
     following tasks:

     Compatibility verification
          A module can verify that the Emacs executable which loads the
          module is compatible with the module, by comparing the 'size'
          member of the RUNTIME structure with the value compiled into
          the module:

               int
               emacs_module_init (struct emacs_runtime *ert)
               {
                 if (ert->size < sizeof (*ert))
                   return 1;
               }

          If the size of the runtime object passed to the module is
          smaller than what it expects, it means the module was compiled
          for an Emacs version newer (later) than the one which attempts
          to load it, i.e. the module might be incompatible with the
          Emacs binary.

          In addition, a module can verify the compatibility of the
          module API with what the module expects.  The following sample
          code assumes it is part of the 'emacs_module_init' function
          shown above:

                 emacs_env *env = ert->get_environment (ert);
                 if (env->size < sizeof (*env))
                   return 2;

          This calls the 'get_environment' function using the pointer
          provided in the 'runtime' structure to retrieve a pointer to
          the API's "environment", a C 'struct' which also has a 'size'
          field holding the size of the structure in bytes.

          Finally, you can write a module that will work with older
          versions of Emacs, by comparing the size of the environment
          passed by Emacs with known sizes, like this:

                 emacs_env *env = ert->get_environment (ert);
                 if (env->size >= sizeof (struct emacs_env_26))
                   emacs_version = 26;  /* Emacs 26 or later.  */
                 else if (env->size >= sizeof (struct emacs_env_25))
                   emacs_version = 25;
                 else
                   return 2; /* Unknown or unsupported version.  */

          This works because later Emacs versions always _add_ members
          to the environment, never _remove_ any members, so the size
          can only grow with new Emacs releases.  Given the version of
          Emacs, the module can use only the parts of the module API
          that existed in that version, since those parts are identical
          in later versions.

          'emacs-module.h' defines a preprocessor macro
          'EMACS_MAJOR_VERSION'.  It expands to an integer literal which
          is the latest major version of Emacs supported by the header.
          *Note Version Info::.  Note that the value of
          'EMACS_MAJOR_VERSION' is a compile-time constant and does not
          represent the version of Emacs that is currently running and
          has loaded your module.  If you want your module to be
          compatible with various versions of 'emacs-module.h' as well
          as various versions of Emacs, you can use conditional
          compilation based on 'EMACS_MAJOR_VERSION'.

          We recommend that modules always perform the compatibility
          verification, unless they do their job entirely in the
          initialization function, and don't access any Lisp objects or
          use any Emacs functions accessible through the environment
          structure.

     Binding module functions to Lisp symbols
          This gives the module functions names so that Lisp code could
          call it by that name.  We describe how to do this in *note
          Module Functions:: below.

==============================================================================
File: elisp.info,  Node: |Module_Functions|,  Next: |Module_Values|,  Prev: |Module_Initialization|,  Up: |Writing_Dynamic_Modules|
==============================================================================

                                                              *Module_Functions*

E.8.2 Writing Module Functions
------------------------------

The main reason for writing an Emacs module is to make additional
functions available to Lisp programs that load the module.  This
subsection describes how to write such "module functions".

   A module function has the following general form and signature:

 -- Function: emacs_value module_func (emacs_env *ENV, ptrdiff_t NARGS,
          emacs_value *ARGS, void *DATA)
     The ENV argument provides a pointer to the API environment, needed
     to access Emacs objects and functions.  The NARGS argument is the
     required number of arguments, which can be zero (see
     'make_function' below for more flexible specification of the
     argument number), and ARGS is a pointer to the array of the
     function arguments.  The argument DATA points to additional data
     required by the function, which was arranged when 'make_function'
     (see below) was called to create an Emacs function from
     'module_func'.

     Module functions use the type 'emacs_value' to communicate Lisp
     objects between Emacs and the module (*note Module Values::).  The
     API, described below and in the following subsections, provides
     facilities for conversion between basic C data types and the
     corresponding 'emacs_value' objects.

     A module function always returns a value.  If the function returns
     normally, the Lisp code which called it will see the Lisp object
     corresponding to the 'emacs_value' value the function returned.
     However, if the user typed 'C-g', or if the module function or its
     callees signaled an error or exited nonlocally (*note Module
     Nonlocal::), Emacs will ignore the returned value and quit or throw
     as it does when Lisp code encounters the same situations.

   After writing your C code for a module function, you should make a
Lisp function object from it using the 'make_function' function, whose
pointer is provided in the environment (recall that the pointer to the
environment is returned by 'get_environment').  This is normally done in
the module initialization function (*note module initialization
function::), after verifying the API compatibility.

 -- Function: emacs_value make_function (emacs_env *ENV, ptrdiff_t
          MIN_ARITY, ptrdiff_t MAX_ARITY, subr FUNC, const char
          *DOCSTRING, void *DATA)
     This returns an Emacs function created from the C function FUNC,
     whose signature is as described for 'module_func' above (assumed
     here to be 'typedef''ed as 'subr').  The arguments MIN_ARITY and
     MAX_ARITY specify the minimum and maximum number of arguments that
     FUNC can accept.  The MAX_ARITY argument can have the special value
     'emacs_variadic_function', which makes the function accept an
     unlimited number of arguments, like the '&rest' keyword in Lisp
     (*note Argument List::).

     The argument DATA is a way to arrange for arbitrary additional data
     to be passed to FUNC when it is called.  Whatever pointer is passed
     to 'make_function' will be passed unaltered to FUNC.

     The argument DOCSTRING specifies the documentation string for the
     function.  It should be either an ASCII string, or a UTF-8 encoded
     non-ASCII string, or a 'NULL' pointer; in the latter case the
     function will have no documentation.  The documentation string can
     end with a line that specifies the advertised calling convention,
     see *note Function Documentation::.

     Since every module function must accept the pointer to the
     environment as its first argument, the call to 'make_function'
     could be made from any module function, but you will normally want
     to do that from the module initialization function, so that all the
     module functions are known to Emacs once the module is loaded.

   Finally, you should bind the Lisp function to a symbol, so that Lisp
code could call your function by name.  For that, use the module API
function 'intern' (*note intern::) whose pointer is also provided in the
environment that module functions can access.

   Combining the above steps, code that arranges for a C function
'module_func' to be callable as 'module-func' from Lisp will look like
this, as part of the module initialization function:

      emacs_env *env = ert->get_environment (ert);
      emacs_value func = env->make_function (env, min_arity, max_arity,
                                             module_func, docstring, data);
      emacs_value symbol = env->intern (env, "module-func");
      emacs_value args[] = {symbol, func};
      env->funcall (env, env->intern (env, "defalias"), 2, args);

This makes the symbol 'module-func' known to Emacs by calling
'env->intern', then invokes 'defalias' from Emacs to bind the function
to that symbol.  Note that it is possible to use 'fset' instead of
'defalias'; the differences are described in *note defalias: Defining
Functions.

   Module functions including the 'emacs_module_init' function (*note
module initialization function::) may only interact with Emacs by
calling environment functions from some live 'emacs_env' pointer while
being called directly or indirectly from Emacs.  In other words, if a
module function wants to call Lisp functions or Emacs primitives,
convert 'emacs_value' objects to and from C datatypes (*note Module
Values::), or interact with Emacs in any other way, some call from Emacs
to 'emacs_module_init' or to a module function must be in the call
stack.  Module function may not interact with Emacs while garbage
collection is running; *note Garbage Collection::.  They may only
interact with Emacs from Lisp interpreter threads (including the main
thread) created by Emacs; *note Threads::.  The '--module-assertions'
command-line option can detect some violations of the above
requirements.  *Note (emacs)Initial Options::.

   Using the module API, it is possible to define more complex function
and data types: interactive functions, inline functions, macros, etc.
However, the resulting C code will be cumbersome and hard to read.
Therefore, we recommend that you limit the module code which creates
functions and data structures to the absolute minimum, and leave the
rest for a Lisp package that will accompany your module, because doing
these additional tasks in Lisp is much easier, and will produce a much
more readable code.  For example, given a module function 'module-func'
defined as above, one way of making an interactive command 'module-cmd'
based on it is with the following simple Lisp wrapper:

     (defun module-cmd (&rest args)
       "Documentation string for the command."
       (interactive SPEC)
       (apply 'module-func args))

   The Lisp package which goes with your module could then load the
module using the 'load' primitive (*note Dynamic Modules::) when the
package is loaded into Emacs.

==============================================================================
File: elisp.info,  Node: |Module_Values|,  Next: |Module_Misc|,  Prev: |Module_Functions|,  Up: |Writing_Dynamic_Modules|
==============================================================================

                                                                 *Module_Values*

E.8.3 Conversion Between Lisp and Module Values
-----------------------------------------------

With very few exceptions, most modules need to exchange data with Lisp
programs that call them: accept arguments to module functions and return
values from module functions.  For this purpose, the module API provides
the 'emacs_value' type, which represents Emacs Lisp objects communicated
via the API; it is the functional equivalent of the 'Lisp_Object' type
used in Emacs C primitives (*note Writing Emacs Primitives::).  This
section describes the parts of the module API that allow to create
'emacs_value' objects corresponding to basic Lisp data types, and how to
access from C data in 'emacs_value' objects that correspond to Lisp
objects.

   All of the functions described below are actually _function pointers_
provided via the pointer to the environment which every module function
accepts.  Therefore, module code should call these functions through the
environment pointer, like this:

     emacs_env *env;  /* the environment pointer */
     env->some_function (arguments...);

The 'emacs_env' pointer will usually come from the first argument to the
module function, or from the call to 'get_environment' if you need the
environment in the module initialization function.

   Most of the functions described below became available in Emacs 25,
the first Emacs release that supported dynamic modules.  For the few
functions that became available in later Emacs releases, we mention the
first Emacs version that supported them.

   The following API functions extract values of various C data types
from 'emacs_value' objects.  They all raise the 'wrong-type-argument'
error condition (*note Type Predicates::) if the argument 'emacs_value'
object is not of the type expected by the function.  *Note Module
Nonlocal::, for details of how signaling errors works in Emacs modules,
and how to catch error conditions inside the module before they are
reported to Emacs.  The API function 'type_of' (*note type_of: Module
Misc.) can be used to obtain the type of a 'emacs_value' object.

 -- Function: intmax_t extract_integer (emacs_env *ENV, emacs_value ARG)
     This function returns the value of a Lisp integer specified by ARG.
     The C data type of the return value, 'intmax_t', is the widest
     integer data type supported by the C compiler, typically
     'long long'.  If the value of ARG doesn't fit into an 'intmax_t',
     the function signals an error using the error symbol
     'overflow-error'.

 -- Function: bool extract_big_integer (emacs_env *ENV, emacs_value ARG,
          int *SIGN, ptrdiff_t *COUNT, emacs_limb_t *MAGNITUDE)
     This function, which is available since Emacs 27, extracts the
     integer value of ARG.  The value of ARG must be an integer (fixnum
     or bignum).  If SIGN is not 'NULL', it stores the sign of ARG (-1,
     0, or +1) into '*sign'.  The magnitude is stored into MAGNITUDE as
     follows.  If COUNT and MAGNITUDE are both non-'NULL', then
     MAGNITUDE must point to an array of at least '*count' 'unsigned
     long' elements.  If MAGNITUDE is large enough to hold the magnitude
     of ARG, then this function writes the magnitude into the MAGNITUDE
     array in little-endian form, stores the number of array elements
     written into '*count', and returns 'true'.  If MAGNITUDE is not
     large enough, it stores the required array size into '*count',
     signals an error, and returns 'false'.  If COUNT is not 'NULL' and
     MAGNITUDE is 'NULL', then the function stores the required array
     size into '*count' and returns 'true'.

     Emacs guarantees that the maximum required value of '*count' never
     exceeds 'min (PTRDIFF_MAX, SIZE_MAX) / sizeof (emacs_limb_t)', so
     you can use 'malloc (*count * sizeof *magnitude)' to allocate the
     'magnitude' array without worrying about integer overflow in the
     size calculation.

 -- Type alias: emacs_limb_t
     This is an unsigned integer type, used as the element type for the
     magnitude arrays for the big integer conversion functions.  The
     type is guaranteed to have unique object representations, i.e., no
     padding bits.

 -- Macro: EMACS_LIMB_MAX
     This macro expands to a constant expression specifying the maximum
     possible value for an 'emacs_limb_t' object.  The expression is
     suitable for use in '#if'.

 -- Function: double extract_float (emacs_env *ENV, emacs_value ARG)
     This function returns the value of a Lisp float specified by ARG,
     as a C 'double' value.

 -- Function: struct timespec extract_time (emacs_env *ENV, emacs_value
          TIME)
     This function, which is available since Emacs 27, interprets TIME
     as an Emacs Lisp time value and returns the corresponding 'struct
     timespec'.  *Note Time of Day::.  'struct timespec' represents a
     timestamp with nanosecond precision.  It has the following members:

     'time_t tv_sec'
          Whole number of seconds.
     'long tv_nsec'
          Fractional seconds as a number of nanoseconds.  For timestamps
          returned by 'extract_time', this is always nonnegative and
          less than one billion.  (Although POSIX requires the type of
          'tv_nsec' to be 'long', the type is 'long long' on some
          nonstandard platforms.)

     *Note (libc)Elapsed Time::.

     If TIME has higher precision than nanoseconds, then this function
     truncates it to nanosecond precision towards negative infinity.
     This function signals an error if TIME (truncated to nanoseconds)
     cannot be represented by 'struct timespec'.  For example, if
     'time_t' is a 32-bit integer type, then a TIME value of ten billion
     seconds would signal an error, but a TIME value of 600 picoseconds
     would get truncated to zero.

     If you need to deal with time values that are not representable by
     'struct timespec', or if you want higher precision, call the Lisp
     function 'encode-time' and work with its return value.  *Note Time
     Conversion::.

 -- Function: bool copy_string_contents (emacs_env *ENV, emacs_value
          ARG, char *BUF, ptrdiff_t *LEN)
     This function stores the UTF-8 encoded text of a Lisp string
     specified by ARG in the array of 'char' pointed by BUF, which
     should have enough space to hold at least '*LEN' bytes, including
     the terminating null byte.  The argument LEN must not be a 'NULL'
     pointer, and, when the function is called, it should point to a
     value that specifies the size of BUF in bytes.

     If the buffer size specified by '*LEN' is large enough to hold the
     string's text, the function stores in '*LEN' the actual number of
     bytes copied to BUF, including the terminating null byte, and
     returns 'true'.  If the buffer is too small, the function raises
     the 'args-out-of-range' error condition, stores the required number
     of bytes in '*LEN', and returns 'false'.  *Note Module Nonlocal::,
     for how to handle pending error conditions.

     The argument BUF can be a 'NULL' pointer, in which case the
     function stores in '*LEN' the number of bytes required for storing
     the contents of ARG, and returns 'true'.  This is how you can
     determine the size of BUF needed to store a particular string:
     first call 'copy_string_contents' with 'NULL' as BUF, then allocate
     enough memory to hold the number of bytes stored by the function in
     '*LEN', and call the function again with non-'NULL' BUF to actually
     perform the text copying.

 -- Function: emacs_value vec_get (emacs_env *ENV, emacs_value VECTOR,
          ptrdiff_t INDEX)
     This function returns the element of VECTOR at INDEX.  The INDEX of
     the first vector element is zero.  The function raises the
     'args-out-of-range' error condition if the value of INDEX is
     invalid.  To extract C data from the value the function returns,
     use the other extraction functions described here, as appropriate
     for the Lisp data type stored in that element of the vector.

 -- Function: ptrdiff_t vec_size (emacs_env *ENV, emacs_value VECTOR)
     This function returns the number of elements in VECTOR.

 -- Function: void vec_set (emacs_env *ENV, emacs_value VECTOR,
          ptrdiff_t INDEX, emacs_value VALUE)
     This function stores VALUE in the element of VECTOR whose index is
     INDEX.  It raises the 'args-out-of-range' error condition if the
     value of INDEX is invalid.

   The following API functions create 'emacs_value' objects from basic C
data types.  They all return the created 'emacs_value' object.

 -- Function: emacs_value make_integer (emacs_env *ENV, intmax_t N)
     This function takes an integer argument N and returns the
     corresponding 'emacs_value' object.  It returns either a fixnum or
     a bignum depending on whether the value of N is inside the limits
     set by 'most-negative-fixnum' and 'most-positive-fixnum' (*note
     Integer Basics::).

 -- Function: emacs_value make_big_integer (emacs_env *ENV, int sign,
          ptrdiff_t count, const emacs_limb_t *magnitude)
     This function, which is available since Emacs 27, takes an
     arbitrary-sized integer argument and returns a corresponding
     'emacs_value' object.  The SIGN argument gives the sign of the
     return value.  If SIGN is nonzero, then MAGNITUDE must point to an
     array of at least COUNT elements specifying the little-endian
     magnitude of the return value.

   The following example uses the GNU Multiprecision Library (GMP) to
calculate the next probable prime after a given integer.  *Note
(gmp)Top::, for a general overview of GMP, and *note (gmp)Integer Import
and Export:: for how to convert the 'magnitude' array to and from GMP
'mpz_t' values.

     #include <emacs-module.h>
     int plugin_is_GPL_compatible;

     #include <assert.h>
     #include <limits.h>
     #include <stdint.h>
     #include <stdlib.h>
     #include <string.h>

     #include <gmp.h>

     static void
     memory_full (emacs_env *env)
     {
       static const char message[] = "Memory exhausted";
       emacs_value data = env->make_string (env, message,
                                            strlen (message));
       env->non_local_exit_signal
         (env, env->intern (env, "error"),
          env->funcall (env, env->intern (env, "list"), 1, &data));
     }

     enum
     {
       order = -1, endian = 0, nails = 0,
       limb_size = sizeof (emacs_limb_t),
       max_nlimbs = ((SIZE_MAX < PTRDIFF_MAX ? SIZE_MAX : PTRDIFF_MAX)
                     / limb_size)
     };

     static bool
     extract_big_integer (emacs_env *env, emacs_value arg, mpz_t result)
     {
       ptrdiff_t nlimbs;
       bool ok = env->extract_big_integer (env, arg, NULL, &nlimbs, NULL);
       if (!ok)
         return false;
       assert (0 < nlimbs && nlimbs <= max_nlimbs);
       emacs_limb_t *magnitude = malloc (nlimbs * limb_size);
       if (magnitude == NULL)
         {
           memory_full (env);
           return false;
         }
       int sign;
       ok = env->extract_big_integer (env, arg, &sign, &nlimbs, magnitude);
       assert (ok);
       mpz_import (result, nlimbs, order, limb_size, endian, nails, magnitude);
       free (magnitude);
       if (sign < 0)
         mpz_neg (result, result);
       return true;
     }

     static emacs_value
     make_big_integer (emacs_env *env, const mpz_t value)
     {
       size_t nbits = mpz_sizeinbase (value, 2);
       int bitsperlimb = CHAR_BIT * limb_size - nails;
       size_t nlimbs = nbits / bitsperlimb + (nbits % bitsperlimb != 0);
       emacs_limb_t *magnitude
         = nlimbs <= max_nlimbs ? malloc (nlimbs * limb_size) : NULL;
       if (magnitude == NULL)
         {
           memory_full (env);
           return NULL;
         }
       size_t written;
       mpz_export (magnitude, &written, order, limb_size, endian, nails, value);
       assert (written == nlimbs);
       assert (nlimbs <= PTRDIFF_MAX);
       emacs_value result = env->make_big_integer (env, mpz_sgn (value),
                                                   nlimbs, magnitude);
       free (magnitude);
       return result;
     }

     static emacs_value
     next_prime (emacs_env *env, ptrdiff_t nargs, emacs_value *args,
                 void *data)
     {
       assert (nargs == 1);
       mpz_t p;
       mpz_init (p);
       extract_big_integer (env, args[0], p);
       mpz_nextprime (p, p);
       emacs_value result = make_big_integer (env, p);
       mpz_clear (p);
       return result;
     }

     int
     emacs_module_init (struct emacs_runtime *ert)
     {
       emacs_env *env = ert->get_environment (ert);
       emacs_value symbol = env->intern (env, "next-prime");
       emacs_value func
         = env->make_function (env, 1, 1, next_prime, NULL, NULL);
       emacs_value args[] = {symbol, func};
       env->funcall (env, env->intern (env, "defalias"), 2, args);
       return 0;
     }

 -- Function: emacs_value make_float (emacs_env *ENV, double D)
     This function takes a 'double' argument D and returns the
     corresponding Emacs floating-point value.

 -- Function: emacs_value make_time (emacs_env *ENV, struct timespec
          TIME)
     This function, which is available since Emacs 27, takes a 'struct
     timespec' argument TIME and returns the corresponding Emacs
     timestamp as a pair '(TICKS . HZ)'.  *Note Time of Day::.  The
     return value represents exactly the same timestamp as TIME: all
     input values are representable, and there is never a loss of
     precision.  'TIME.tv_sec' and 'TIME.tv_nsec' can be arbitrary
     values.  In particular, there's no requirement that TIME be
     normalized.  This means that 'TIME.tv_nsec' can be negative or
     larger than 999,999,999.

 -- Function: emacs_value make_string (emacs_env *ENV, const char *STR,
          ptrdiff_t STRLEN)
     This function creates an Emacs string from C text string pointed by
     STR whose length in bytes, not including the terminating null byte,
     is STRLEN.  The original string in STR can be either an ASCII
     string or a UTF-8 encoded non-ASCII string; it can include embedded
     null bytes, and doesn't have to end in a terminating null byte at
     'STR[STRLEN]'.  The function raises the 'overflow-error' error
     condition if STRLEN is negative or exceeds the maximum length of an
     Emacs string.

   The API does not provide functions to manipulate Lisp data
structures, for example, create lists with 'cons' and 'list' (*note
Building Lists::), extract list members with 'car' and 'cdr' (*note List
Elements::), create vectors with 'vector' (*note Vector Functions::),
etc.  For these, use 'intern' and 'funcall', described in the next
subsection, to call the corresponding Lisp functions.

   Normally, 'emacs_value' objects have a rather short lifetime: it ends
when the 'emacs_env' pointer used for their creation goes out of scope.
Occasionally, you may need to create "global references": 'emacs_value'
objects that live as long as you wish.  Use the following two functions
to manage such objects.

 -- Function: emacs_value make_global_ref (emacs_env *ENV, emacs_value
          VALUE)
     This function returns a global reference for VALUE.

 -- Function: void free_global_ref (emacs_env *ENV, emacs_value
          GLOBAL_VALUE)
     This function frees the GLOBAL_VALUE previously created by
     'make_global_ref'.  The GLOBAL_VALUE is no longer valid after the
     call.  Your module code should pair each call to 'make_global_ref'
     with the corresponding 'free_global_ref'.

   An alternative to keeping around C data structures that need to be
passed to module functions later is to create "user pointer" objects.  A
user pointer, or 'user-ptr', object is a Lisp object that encapsulates a
C pointer and can have an associated finalizer function, which is called
when the object is garbage-collected (*note Garbage Collection::).  The
module API provides functions to create and access 'user-ptr' objects.
These functions raise the 'wrong-type-argument' error condition if they
are called on 'emacs_value' that doesn't represent a 'user-ptr' object.

 -- Function: emacs_value make_user_ptr (emacs_env *ENV, emacs_finalizer
          FIN, void *PTR)
     This function creates and returns a 'user-ptr' object which wraps
     the C pointer PTR.  The finalizer function FIN can be a 'NULL'
     pointer (meaning no finalizer), or it can be a function of the
     following signature:

          typedef void (*emacs_finalizer) (void *PTR);

     If FIN is not a 'NULL' pointer, it will be called with the PTR as
     the argument when the 'user-ptr' object is garbage-collected.
     Don't run any expensive code in a finalizer, because GC must finish
     quickly to keep Emacs responsive.

 -- Function: void *get_user_ptr (emacs_env *ENV, emacs_value val)
     This function extracts the C pointer from the Lisp object
     represented by VAL.

 -- Function: void set_user_ptr (emacs_env *ENV, emacs_value VALUE, void
          *PTR)
     This function sets the C pointer embedded in the 'user-ptr' object
     represented by VALUE to PTR.

 -- Function: emacs_finalizer get_user_finalizer (emacs_env *ENV,
          emacs_value val)
     This function returns the finalizer of the 'user-ptr' object
     represented by VAL, or 'NULL' if it doesn't have a finalizer.

 -- Function: void set_user_finalizer (emacs_env *ENV, emacs_value VAL,
          emacs_finalizer FIN)
     This function changes the finalizer of the 'user-ptr' object
     represented by VAL to be FIN.  If FIN is a 'NULL' pointer, the
     'user-ptr' object will have no finalizer.

==============================================================================
File: elisp.info,  Node: |Module_Misc|,  Next: |Module_Nonlocal|,  Prev: |Module_Values|,  Up: |Writing_Dynamic_Modules|
==============================================================================

                                                                   *Module_Misc*

E.8.4 Miscellaneous Convenience Functions for Modules
-----------------------------------------------------

This subsection describes a few convenience functions provided by the
module API.  Like the functions described in previous subsections, all
of them are actually function pointers, and need to be called via the
'emacs_env' pointer.  Description of functions that were introduced
after Emacs 25 calls out the first version where they became available.

 -- Function: bool eq (emacs_env *ENV, emacs_value VAL1, emacs_value
          VAL2)
     This function returns 'true' if the Lisp objects represented by
     VAL1 and VAL2 are identical, 'false' otherwise.  This is the same
     as the Lisp function 'eq' (*note Equality Predicates::), but avoids
     the need to intern the objects represented by the arguments.

     There are no API functions for other equality predicates, so you
     will need to use 'intern' and 'funcall', described below, to
     perform more complex equality tests.

 -- Function: bool is_not_nil (emacs_env *ENV, emacs_value VAL)
     This function tests whether the Lisp object represented by VAL is
     non-'nil'; it returns 'true' or 'false' accordingly.

     Note that you could implement an equivalent test by using 'intern'
     to get an 'emacs_value' representing 'nil', then use 'eq',
     described above, to test for equality.  But using this function is
     more convenient.

 -- Function: emacs_value type_of (emacs_env *ENV, emacs_value 'object')
     This function returns the type of OBJECT as a value that represents
     a symbol: 'string' for a string, 'integer' for an integer,
     'process' for a process, etc.  *Note Type Predicates::.  You can
     use 'intern' and 'eq' to compare against known type symbols, if
     your code needs to depend on the object type.

 -- Function: emacs_value intern (emacs_env *ENV, const char *name)
     This function returns an interned Emacs symbol whose name is NAME,
     which should be an ASCII null-terminated string.  It creates a new
     symbol if one does not already exist.

     Together with 'funcall', described below, this function provides a
     means for invoking any Lisp-callable Emacs function, provided that
     its name is a pure ASCII string.  For example, here's how to intern
     a symbol whose name 'name_str' is non-ASCII, by calling the more
     powerful Emacs 'intern' function (*note Creating Symbols::):

          emacs_value fintern = env->intern (env, "intern");
          emacs_value sym_name =
            env->make_string (env, name_str, strlen (name_str));
          emacs_value intern_args[] = { sym_name, env->intern (env, "nil") };
          emacs_value symbol = env->funcall (env, fintern, 2, intern_args);

 -- Function: emacs_value funcall (emacs_env *ENV, emacs_value FUNC,
          ptrdiff_t NARGS, emacs_value *ARGS)
     This function calls the specified FUNC passing it NARGS arguments
     from the array pointed to by ARGS.  The argument FUNC can be a
     function symbol (e.g., returned by 'intern' described above), a
     module function returned by 'make_function' (*note Module
     Functions::), a subroutine written in C, etc.  If NARGS is zero,
     ARGS can be a 'NULL' pointer.

     The function returns the value that FUNC returned.

   If your module includes potentially long-running code, it is a good
idea to check from time to time in that code whether the user wants to
quit, e.g., by typing 'C-g' (*note Quitting::).  The following function,
which is available since Emacs 26.1, is provided for that purpose.

 -- Function: bool should_quit (emacs_env *ENV)
     This function returns 'true' if the user wants to quit.  In that
     case, we recommend that your module function aborts any on-going
     processing and returns as soon as possible.  In most cases, use
     'process_input' instead.

   To process input events in addition to checking whether the user
wants to quit, use the following function, which is available since
Emacs 27.1.

 -- Function: enum emacs_process_input_result process_input (emacs_env
          *ENV)
     This function processes pending input events.  It returns
     'emacs_process_input_quit' if the user wants to quit or an error
     occurred while processing signals.  In that case, we recommend that
     your module function aborts any on-going processing and returns as
     soon as possible.  If the module code may continue running,
     'process_input' returns 'emacs_process_input_continue'.  The return
     value is 'emacs_process_input_continue' if and only if there is no
     pending nonlocal exit in 'env'.  If the module continues after
     calling 'process_input', global state such as variable values and
     buffer content may have been modified in arbitrary ways.

==============================================================================
File: elisp.info,  Node: |Module_Nonlocal|,  Prev: |Module_Misc|,  Up: |Writing_Dynamic_Modules|
==============================================================================

                                                               *Module_Nonlocal*

E.8.5 Nonlocal Exits in Modules
-------------------------------

Emacs Lisp supports nonlocal exits, whereby program control is
transfered from one point in a program to another remote point.  *Note
Nonlocal Exits::.  Thus, Lisp functions called by your module might exit
nonlocally by calling 'signal' or 'throw', and your module functions
must handle such nonlocal exits properly.  Such handling is needed
because C programs will not automatically release resources and perform
other cleanups in these cases; your module code must itself do it.  The
module API provides facilities for that, described in this subsection.
They are generally available since Emacs 25; those of them that became
available in later releases explicitly call out the first Emacs version
where they became part of the API.

   When some Lisp code called by a module function signals an error or
throws, the nonlocal exit is trapped, and the pending exit and its
associated data are stored in the environment.  Whenever a nonlocal exit
is pending in the environment, any module API function called with a
pointer to that environment will return immediately without any
processing (the functions 'non_local_exit_check', 'non_local_exit_get',
and 'non_local_exit_clear' are exceptions from this rule).  If your
module function then does nothing and returns to Emacs, a pending
nonlocal exit will cause Emacs to act on it: signal an error or throw to
the corresponding 'catch'.

   So the simplest "handling" of nonlocal exits in module functions is
to do nothing special and let the rest of your code to run as if nothing
happened.  However, this can cause two classes of problems:

   - Your module function might use uninitialized or undefined values,
     since API functions return immediately without producing the
     expected results.

   - Your module might leak resources, because it might not have the
     opportunity to release them.

   Therefore, we recommend that your module functions check for nonlocal
exit conditions and recover from them, using the functions described
below.

 -- Function: enum emacs_funcall_exit non_local_exit_check (emacs_env
          *ENV)
     This function returns the kind of nonlocal exit condition stored in
     ENV.  The possible values are:

     'emacs_funcall_exit_return'
          The last API function exited normally.
     'emacs_funcall_exit_signal'
          The last API function signaled an error.
     'emacs_funcall_exit_throw'
          The last API function exited via 'throw'.

 -- Function: enum emacs_funcall_exit non_local_exit_get (emacs_env
          *ENV, emacs_value *SYMBOL, emacs_value *DATA)
     This function returns the kind of nonlocal exit condition stored in
     ENV, like 'non_local_exit_check' does, but it also returns the full
     information about the nonlocal exit, if any.  If the return value
     is 'emacs_funcall_exit_signal', the function stores the error
     symbol in '*SYMBOL' and the error data in '*DATA' (*note Signaling
     Errors::).  If the return value is 'emacs_funcall_exit_throw', the
     function stores the 'catch' tag symbol in '*SYMBOL' and the 'throw'
     value in '*DATA'.  The function doesn't store anything in memory
     pointed by these arguments when the return value is
     'emacs_funcall_exit_return'.

   You should check nonlocal exit conditions where it matters: before
you allocated some resource or after you allocated a resource that might
need freeing, or where a failure means further processing is impossible
or infeasible.

   Once your module function detected that a nonlocal exit is pending,
it can either return to Emacs (after performing the necessary local
cleanup), or it can attempt to recover from the nonlocal exit.  The
following API functions will help with these tasks.

 -- Function: void non_local_exit_clear (emacs_env *ENV)
     This function clears the pending nonlocal exit conditions and data
     from ENV.  After calling it, the module API functions will work
     normally.  Use this function if your module function can recover
     from nonlocal exits of the Lisp functions it calls and continue,
     and also before calling any of the following two functions (or any
     other API functions, if you want them to perform their intended
     processing when a nonlocal exit is pending).

 -- Function: void non_local_exit_throw (emacs_env *ENV, emacs_value
          TAG, emacs_value VALUE)
     This function throws to the Lisp 'catch' symbol represented by TAG,
     passing it VALUE as the value to return.  Your module function
     should in general return soon after calling this function.  One use
     of this function is when you want to re-throw a non-local exit from
     one of the called API or Lisp functions.

 -- Function: void non_local_exit_signal (emacs_env *ENV, emacs_value
          ERROR, emacs_value DATA)
     This function signals the error represented by ERROR with the
     specified error data DATA.  The module function should return soon
     after calling this function.  This function could be useful, e.g.,
     for signaling errors from module functions to Emacs.

==============================================================================
File: elisp.info,  Node: |Object_Internals|,  Next: |C_Integer_Types|,  Prev: |Writing_Dynamic_Modules|,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                              *Object_Internals*

E.9 Object Internals
--------------------

Emacs Lisp provides a rich set of the data types.  Some of them, like
cons cells, integers and strings, are common to nearly all Lisp
dialects.  Some others, like markers and buffers, are quite special and
needed to provide the basic support to write editor commands in Lisp.
To implement such a variety of object types and provide an efficient way
to pass objects between the subsystems of an interpreter, there is a set
of C data structures and a special type to represent the pointers to all
of them, which is known as "tagged pointer".

   In C, the tagged pointer is an object of type 'Lisp_Object'.  Any
initialized variable of such a type always holds the value of one of the
following basic data types: integer, symbol, string, cons cell, float,
or vectorlike object.  Each of these data types has the corresponding
tag value.  All tags are enumerated by 'enum Lisp_Type' and placed into
a 3-bit bitfield of the 'Lisp_Object'.  The rest of the bits is the
value itself.  Integers are immediate, i.e., directly represented by
those "value bits", and all other objects are represented by the C
pointers to a corresponding object allocated from the heap.  Width of
the 'Lisp_Object' is platform- and configuration-dependent: usually it's
equal to the width of an underlying platform pointer (i.e., 32-bit on a
32-bit machine and 64-bit on a 64-bit one), but also there is a special
configuration where 'Lisp_Object' is 64-bit but all pointers are 32-bit.
The latter trick was designed to overcome the limited range of values
for Lisp integers on a 32-bit system by using 64-bit 'long long' type
for 'Lisp_Object'.

   The following C data structures are defined in 'lisp.h' to represent
the basic data types beyond integers:

'struct Lisp_Cons'
     Cons cell, an object used to construct lists.

'struct Lisp_String'
     String, the basic object to represent a sequence of characters.

'struct Lisp_Vector'
     Array, a fixed-size set of Lisp objects which may be accessed by an
     index.

'struct Lisp_Symbol'
     Symbol, the unique-named entity commonly used as an identifier.

'struct Lisp_Float'
     Floating-point value.

   These types are the first-class citizens of an internal type system.
Since the tag space is limited, all other types are the subtypes of
'Lisp_Vectorlike'.  Vector subtypes are enumerated by 'enum pvec_type',
and nearly all complex objects like windows, buffers, frames, and
processes fall into this category.

   Below there is a description of a few subtypes of 'Lisp_Vectorlike'.
Buffer object represents the text to display and edit.  Window is the
part of display structure which shows the buffer or is used as a
container to recursively place other windows on the same frame.  (Do not
confuse Emacs Lisp window object with the window as an entity managed by
the user interface system like X; in Emacs terminology, the latter is
called frame.)  Finally, process object is used to manage the
subprocesses.

MENU

* |Buffer_Internals|::    Components of a buffer structure.
* |Window_Internals|::    Components of a window structure.
* |Process_Internals|::   Components of a process structure.

==============================================================================
File: elisp.info,  Node: |Buffer_Internals|,  Next: |Window_Internals|,  Up: |Object_Internals|
==============================================================================

                                                              *Buffer_Internals*

E.9.1 Buffer Internals
----------------------

Two structures (see 'buffer.h') are used to represent buffers in C.  The
'buffer_text' structure contains fields describing the text of a buffer;
the 'buffer' structure holds other fields.  In the case of indirect
buffers, two or more 'buffer' structures reference the same
'buffer_text' structure.

   Here are some of the fields in 'struct buffer_text':

'beg'
     The address of the buffer contents.  The buffer contents is a
     linear C array of 'char', with the gap somewhere in its midst.

'gpt'
'gpt_byte'
     The character and byte positions of the buffer gap.  *Note Buffer
     Gap::.

'z'
'z_byte'
     The character and byte positions of the end of the buffer text.

'gap_size'
     The size of buffer's gap.  *Note Buffer Gap::.

'modiff'
'save_modiff'
'chars_modiff'
'overlay_modiff'
     These fields count the number of buffer-modification events
     performed in this buffer.  'modiff' is incremented after each
     buffer-modification event, and is never otherwise changed;
     'save_modiff' contains the value of 'modiff' the last time the
     buffer was visited or saved; 'chars_modiff' counts only
     modifications to the characters in the buffer, ignoring all other
     kinds of changes (such as text properties); and 'overlay_modiff'
     counts only modifications to the buffer's overlays.

'beg_unchanged'
'end_unchanged'
     The number of characters at the start and end of the text that are
     known to be unchanged since the last complete redisplay.

'unchanged_modified'
'overlay_unchanged_modified'
     The values of 'modiff' and 'overlay_modiff', respectively, after
     the last complete redisplay.  If their current values match
     'modiff' or 'overlay_modiff', that means 'beg_unchanged' and
     'end_unchanged' contain no useful information.

'markers'
     The markers that refer to this buffer.  This is actually a single
     marker, and successive elements in its marker "chain" (a linked
     list) are the other markers referring to this buffer text.

'intervals'
     The interval tree which records the text properties of this buffer.

   Some of the fields of 'struct buffer' are:

'header'
     A header of type 'union vectorlike_header' is common to all
     vectorlike objects.

'own_text'
     A 'struct buffer_text' structure that ordinarily holds the buffer
     contents.  In indirect buffers, this field is not used.

'text'
     A pointer to the 'buffer_text' structure for this buffer.  In an
     ordinary buffer, this is the 'own_text' field above.  In an
     indirect buffer, this is the 'own_text' field of the base buffer.

'next'
     A pointer to the next buffer, in the chain of all buffers,
     including killed buffers.  This chain is used only for allocation
     and garbage collection, in order to collect killed buffers
     properly.

'pt'
'pt_byte'
     The character and byte positions of point in a buffer.

'begv'
'begv_byte'
     The character and byte positions of the beginning of the accessible
     range of text in the buffer.

'zv'
'zv_byte'
     The character and byte positions of the end of the accessible range
     of text in the buffer.

'base_buffer'
     In an indirect buffer, this points to the base buffer.  In an
     ordinary buffer, it is null.

'local_flags'
     This field contains flags indicating that certain variables are
     local in this buffer.  Such variables are declared in the C code
     using 'DEFVAR_PER_BUFFER', and their buffer-local bindings are
     stored in fields in the buffer structure itself.  (Some of these
     fields are described in this table.)

'modtime'
     The modification time of the visited file.  It is set when the file
     is written or read.  Before writing the buffer into a file, this
     field is compared to the modification time of the file to see if
     the file has changed on disk.  *Note Buffer Modification::.

'auto_save_modified'
     The time when the buffer was last auto-saved.

'last_window_start'
     The 'window-start' position in the buffer as of the last time the
     buffer was displayed in a window.

'clip_changed'
     This flag indicates that narrowing has changed in the buffer.
     *Note Narrowing::.

'prevent_redisplay_optimizations_p'
     This flag indicates that redisplay optimizations should not be used
     to display this buffer.

'overlay_center'
     This field holds the current overlay center position.  *Note
     Managing Overlays::.

'overlays_before'
'overlays_after'
     These fields hold, respectively, a list of overlays that end at or
     before the current overlay center, and a list of overlays that end
     after the current overlay center.  *Note Managing Overlays::.
     'overlays_before' is sorted in order of decreasing end position,
     and 'overlays_after' is sorted in order of increasing beginning
     position.

'name'
     A Lisp string that names the buffer.  It is guaranteed to be
     unique.  *Note Buffer Names::.  This and the following fields have
     their names in the C struct definition end in a '_' to indicate
     that they should not be accessed directly, but via the 'BVAR'
     macro, like this:

            Lisp_Object buf_name = BVAR (buffer, name);

'save_length'
     The length of the file this buffer is visiting, when last read or
     saved.  It can have 2 special values: -1 means auto-saving was
     turned off in this buffer, and -2 means don't turn off auto-saving
     if buffer text shrinks a lot.  This and other fields concerned with
     saving are not kept in the 'buffer_text' structure because indirect
     buffers are never saved.

'directory'
     The directory for expanding relative file names.  This is the value
     of the buffer-local variable 'default-directory' (*note File Name
     Expansion::).

'filename'
     The name of the file visited in this buffer, or 'nil'.  This is the
     value of the buffer-local variable 'buffer-file-name' (*note Buffer
     File Name::).

'undo_list'
'backed_up'
'auto_save_file_name'
'auto_save_file_format'
'read_only'
'file_format'
'file_truename'
'invisibility_spec'
'display_count'
'display_time'
     These fields store the values of Lisp variables that are
     automatically buffer-local (*note Buffer-Local Variables::), whose
     corresponding variable names have the additional prefix 'buffer-'
     and have underscores replaced with dashes.  For instance,
     'undo_list' stores the value of 'buffer-undo-list'.

'mark'
     The mark for the buffer.  The mark is a marker, hence it is also
     included on the list 'markers'.  *Note The Mark::.

'local_var_alist'
     The association list describing the buffer-local variable bindings
     of this buffer, not including the built-in buffer-local bindings
     that have special slots in the buffer object.  (Those slots are
     omitted from this table.)  *Note Buffer-Local Variables::.

'major_mode'
     Symbol naming the major mode of this buffer, e.g., 'lisp-mode'.

'mode_name'
     Pretty name of the major mode, e.g., '"Lisp"'.

'keymap'
'abbrev_table'
'syntax_table'
'category_table'
'display_table'
     These fields store the buffer's local keymap (*note Keymaps::),
     abbrev table (*note Abbrev Tables::), syntax table (*note Syntax
     Tables::), category table (*note Categories::), and display table
     (*note Display Tables::).

'downcase_table'
'upcase_table'
'case_canon_table'
     These fields store the conversion tables for converting text to
     lower case, upper case, and for canonicalizing text for case-fold
     search.  *Note Case Tables::.

'minor_modes'
     An alist of the minor modes of this buffer.

'pt_marker'
'begv_marker'
'zv_marker'
     These fields are only used in an indirect buffer, or in a buffer
     that is the base of an indirect buffer.  Each holds a marker that
     records 'pt', 'begv', and 'zv' respectively, for this buffer when
     the buffer is not current.

'mode_line_format'
'header_line_format'
'case_fold_search'
'tab_width'
'fill_column'
'left_margin'
'auto_fill_function'
'truncate_lines'
'word_wrap'
'ctl_arrow'
'bidi_display_reordering'
'bidi_paragraph_direction'
'selective_display'
'selective_display_ellipses'
'overwrite_mode'
'abbrev_mode'
'mark_active'
'enable_multibyte_characters'
'buffer_file_coding_system'
'cache_long_line_scans'
'point_before_scroll'
'left_fringe_width'
'right_fringe_width'
'fringes_outside_margins'
'scroll_bar_width'
'indicate_empty_lines'
'indicate_buffer_boundaries'
'fringe_indicator_alist'
'fringe_cursor_alist'
'scroll_up_aggressively'
'scroll_down_aggressively'
'cursor_type'
'cursor_in_non_selected_windows'
     These fields store the values of Lisp variables that are
     automatically buffer-local (*note Buffer-Local Variables::), whose
     corresponding variable names have underscores replaced with dashes.
     For instance, 'mode_line_format' stores the value of
     'mode-line-format'.

'last_selected_window'
     This is the last window that was selected with this buffer in it,
     or 'nil' if that window no longer displays this buffer.

==============================================================================
File: elisp.info,  Node: |Window_Internals|,  Next: |Process_Internals|,  Prev: |Buffer_Internals|,  Up: |Object_Internals|
==============================================================================

                                                              *Window_Internals*

E.9.2 Window Internals
----------------------

The fields of a window (for a complete list, see the definition of
'struct window' in 'window.h') include:

'frame'
     The frame that this window is on, as a Lisp object.

'mini'
     Non-zero if this window is a minibuffer window, a window showing
     the minibuffer or the echo area.

'pseudo_window_p'
     Non-zero if this window is a "pseudo window".  A pseudo window is
     either a window used to display the menu bar or the tool bar (when
     Emacs uses toolkits that don't display their own menu bar and tool
     bar) or the tab bar or a window showing a tooltip on a tooltip
     frame.  Pseudo windows are in general not accessible from Lisp
     code.

'parent'
     Internally, Emacs arranges windows in a tree; each group of
     siblings has a parent window whose area includes all the siblings.
     This field points to the window's parent in that tree, as a Lisp
     object.  For the root window of the tree and a minibuffer window
     this is always 'nil'.

     Parent windows do not display buffers, and play little role in
     display except to shape their child windows.  Emacs Lisp programs
     cannot directly manipulate parent windows; they operate on the
     windows at the leaves of the tree, which actually display buffers.

'contents'
     For a leaf window and windows showing a tooltip, this is the
     buffer, as a Lisp object, that the window is displaying.  For an
     internal ("parent") window, this is its first child window.  For a
     pseudo window showing a menu or tool bar this is 'nil'.  It is also
     'nil' for a window that has been deleted.

'next'
'prev'
     The next and previous sibling of this window as Lisp objects.
     'next' is 'nil' if the window is the right-most or bottom-most in
     its group; 'prev' is 'nil' if it is the left-most or top-most in
     its group.  Whether the sibling is left/right or up/down is
     determined by the 'horizontal' field of the sibling's parent: if
     it's non-zero, the siblings are arranged horizontally.

     As a special case, 'next' of a frame's root window points to the
     frame's minibuffer window, provided this is not a minibuffer-only
     or minibuffer-less frame.  On such frames 'prev' of the minibuffer
     window points to that frame's root window.  In any other case, the
     root window's 'next' and the minibuffer window's (if present)
     'prev' fields are 'nil'.

'left_col'
     The left-hand edge of the window, measured in columns, relative to
     the leftmost column (column 0) of the window's native frame.

'top_line'
     The top edge of the window, measured in lines, relative to the
     topmost line (line 0) of the window's native frame.

'pixel_left'
'pixel_top'
     The left-hand and top edges of this window, measured in pixels,
     relative to the top-left corner (0, 0) of the window's native
     frame.

'total_cols'
'total_lines'
     The total width and height of the window, measured in columns and
     lines respectively.  The values include scroll bars and fringes,
     dividers and/or the separator line on the right of the window (if
     any).

'pixel_width;'
'pixel_height;'
     The total width and height of the window measured in pixels.

'start'
     A marker pointing to the position in the buffer that is the first
     character (in the logical order, *note Bidirectional Display::)
     displayed in the window.

'pointm'
     This is the value of point in the current buffer when this window
     is selected; when it is not selected, it retains its previous
     value.

'old_pointm'
     The value of 'pointm' at the last redisplay time.

'force_start'
     If this flag is non-'nil', it says that the window has been
     scrolled explicitly by the Lisp program, and the value of the
     window's 'start' was set for redisplay to honor.  This affects what
     the next redisplay does if point is off the screen: instead of
     scrolling the window to show the text around point, it moves point
     to a location that is on the screen.

'optional_new_start'
     This is similar to 'force_start', but the next redisplay will only
     obey it if point stays visible.

'start_at_line_beg'
     Non-'nil' means current value of 'start' was the beginning of a
     line when it was chosen.

'use_time'
     This is the last time that the window was selected.  The function
     'get-lru-window' uses this field.

'sequence_number'
     A unique number assigned to this window when it was created.

'last_modified'
     The 'modiff' field of the window's buffer, as of the last time a
     redisplay completed in this window.

'last_overlay_modified'
     The 'overlay_modiff' field of the window's buffer, as of the last
     time a redisplay completed in this window.

'last_point'
     The buffer's value of point, as of the last time a redisplay
     completed in this window.

'last_had_star'
     A non-zero value means the window's buffer was modified when the
     window was last updated.

'vertical_scroll_bar_type'
'horizontal_scroll_bar_type'
     The types of this window's vertical and horizontal scroll bars.

'scroll_bar_width'
'scroll_bar_height'
     The width of this window's vertical scroll bar and the height of
     this window's horizontal scroll bar, in pixels.

'left_margin_cols'
'right_margin_cols'
     The widths of the left and right margins in this window.  A value
     of zero means no margin.

'left_fringe_width'
'right_fringe_width'
     The pixel widths of the left and right fringes in this window.  A
     value of -1 means use the values of the frame.

'fringes_outside_margins'
     A non-zero value means the fringes outside the display margins;
     othersize they are between the margin and the text.

'window_end_pos'
     This is computed as 'z' minus the buffer position of the last glyph
     in the current matrix of the window.  The value is only valid if
     'window_end_valid' is non-zero.

'window_end_bytepos'
     The byte position corresponding to 'window_end_pos'.

'window_end_vpos'
     The window-relative vertical position of the line containing
     'window_end_pos'.

'window_end_valid'
     This field is set to a non-zero value if 'window_end_pos' and
     'window_end_vpos' are truly valid.  This is zero if nontrivial
     redisplay is pre-empted, since in that case the display that
     'window_end_pos' was computed for did not get onto the screen.

'cursor'
     A structure describing where the cursor is in this window.

'last_cursor_vpos'
     The window-relative vertical position of the line showing the
     cursor as of the last redisplay that finished.

'phys_cursor'
     A structure describing where the cursor of this window physically
     is.

'phys_cursor_type'
'phys_cursor_height'
'phys_cursor_width'
     The type, height, and width of the cursor that was last displayed
     on this window.

'phys_cursor_on_p'
     This field is non-zero if the cursor is physically on.

'cursor_off_p'
     Non-zero means the cursor in this window is logically off.  This is
     used for blinking the cursor.

'last_cursor_off_p'
     This field contains the value of 'cursor_off_p' as of the time of
     the last redisplay.

'must_be_updated_p'
     This is set to 1 during redisplay when this window must be updated.

'hscroll'
     This is the number of columns that the display in the window is
     scrolled horizontally to the left.  Normally, this is 0.  When only
     the current line is hscrolled, this describes how much the current
     line is scrolled.

'min_hscroll'
     Minimum value of 'hscroll', set by the user via
     'set-window-hscroll' (*note Horizontal Scrolling::).  When only the
     current line is hscrolled, this describes the horizontal scrolling
     of lines other than the current one.

'vscroll'
     Vertical scroll amount, in pixels.  Normally, this is 0.

'dedicated'
     Non-'nil' if this window is dedicated to its buffer.

'combination_limit'
     This window's combination limit, meaningful only for a parent
     window.  If this is 't', then it is not allowed to delete this
     window and recombine its child windows with other siblings of this
     window.

'window_parameters'
     The alist of this window's parameters.

'display_table'
     The window's display table, or 'nil' if none is specified for it.

'update_mode_line'
     Non-zero means this window's mode line needs to be updated.

'mode_line_height'
'header_line_height'
     The height in pixels of the mode line and the header line, or -1 if
     not known.

'base_line_number'
     The line number of a certain position in the buffer, or zero.  This
     is used for displaying the line number of point in the mode line.

'base_line_pos'
     The position in the buffer for which the line number is known, or
     zero meaning none is known.  If it is -1, don't display the line
     number as long as the window shows that buffer.

'column_number_displayed'
     The column number currently displayed in this window's mode line,
     or -1 if column numbers are not being displayed.

'current_matrix'
'desired_matrix'
     Glyph matrices describing the current and desired display of this
     window.

==============================================================================
File: elisp.info,  Node: |Process_Internals|,  Prev: |Window_Internals|,  Up: |Object_Internals|
==============================================================================

                                                             *Process_Internals*

E.9.3 Process Internals
-----------------------

The fields of a process (for a complete list, see the definition of
'struct Lisp_Process' in 'process.h') include:

'name'
     A Lisp string, the name of the process.

'command'
     A list containing the command arguments that were used to start
     this process.  For a network or serial process, it is 'nil' if the
     process is running or 't' if the process is stopped.

'filter'
     A Lisp function used to accept output from the process.

'sentinel'
     A Lisp function called whenever the state of the process changes.

'buffer'
     The associated buffer of the process.

'pid'
     An integer, the operating system's process ID.  Pseudo-processes
     such as network or serial connections use a value of 0.

'childp'
     A flag, 't' if this is really a child process.  For a network or
     serial connection, it is a plist based on the arguments to
     'make-network-process' or 'make-serial-process'.

'mark'
     A marker indicating the position of the end of the last output from
     this process inserted into the buffer.  This is often but not
     always the end of the buffer.

'kill_without_query'
     If this is non-zero, killing Emacs while this process is still
     running does not ask for confirmation about killing the process.

'raw_status'
     The raw process status, as returned by the 'wait' system call.

'status'
     The process status, as 'process-status' should return it.  This is
     a Lisp symbol, a cons cell, or a list.

'tick'
'update_tick'
     If these two fields are not equal, a change in the status of the
     process needs to be reported, either by running the sentinel or by
     inserting a message in the process buffer.

'pty_flag'
     Non-zero if communication with the subprocess uses a pty; zero if
     it uses a pipe.

'infd'
     The file descriptor for input from the process.

'outfd'
     The file descriptor for output to the process.

'tty_name'
     The name of the terminal that the subprocess is using, or 'nil' if
     it is using pipes.

'decode_coding_system'
     Coding-system for decoding the input from this process.

'decoding_buf'
     A working buffer for decoding.

'decoding_carryover'
     Size of carryover in decoding.

'encode_coding_system'
     Coding-system for encoding the output to this process.

'encoding_buf'
     A working buffer for encoding.

'inherit_coding_system_flag'
     Flag to set 'coding-system' of the process buffer from the coding
     system used to decode process output.

'type'
     Symbol indicating the type of process: 'real', 'network', 'serial'.

==============================================================================
File: elisp.info,  Node: |C_Integer_Types|,  Prev: Object Internals,  Up: |GNU_Emacs_Internals|
==============================================================================

                                                               *C_Integer_Types*

E.10 C Integer Types
--------------------

Here are some guidelines for use of integer types in the Emacs C source
code.  These guidelines sometimes give competing advice; common sense is
advised.

   * Avoid arbitrary limits.  For example, avoid 'int len = strlen (s);'
     unless the length of 's' is required for other reasons to fit in
     'int' range.

   * Do not assume that signed integer arithmetic wraps around on
     overflow.  This is no longer true of Emacs porting targets: signed
     integer overflow has undefined behavior in practice, and can dump
     core or even cause earlier or later code to behave illogically.
     Unsigned overflow does wrap around reliably, modulo a power of two.

   * Prefer signed types to unsigned, as code gets confusing when signed
     and unsigned types are combined.  Many other guidelines assume that
     types are signed; in the rarer cases where unsigned types are
     needed, similar advice may apply to the unsigned counterparts
     (e.g., 'size_t' instead of 'ptrdiff_t', or 'uintptr_t' instead of
     'intptr_t').

   * Prefer 'int' for Emacs character codes, in the range 0 .. 0x3FFFFF.
     More generally, prefer 'int' for integers known to be in 'int'
     range, e.g., screen column counts.

   * Prefer 'ptrdiff_t' for sizes, i.e., for integers bounded by the
     maximum size of any individual C object or by the maximum number of
     elements in any C array.  This is part of Emacs's general
     preference for signed types.  Using 'ptrdiff_t' limits objects to
     'PTRDIFF_MAX' bytes, but larger objects would cause trouble anyway
     since they would break pointer subtraction, so this does not impose
     an arbitrary limit.

   * Avoid 'ssize_t' except when communicating to low-level APIs that
     have 'ssize_t'-related limitations.  Although it's equivalent to
     'ptrdiff_t' on typical platforms, 'ssize_t' is occasionally
     narrower, so using it for size-related calculations could overflow.
     Also, 'ptrdiff_t' is more ubiquitous and better-standardized, has
     standard 'printf' formats, and is the basis for Emacs's internal
     size-overflow checking.  When using 'ssize_t', please note that
     POSIX requires support only for values in the range -1 ..
     'SSIZE_MAX'.

   * Normally, prefer 'intptr_t' for internal representations of
     pointers, or for integers bounded only by the number of objects
     that can exist at any given time or by the total number of bytes
     that can be allocated.  However, prefer 'uintptr_t' to represent
     pointer arithmetic that could cross page boundaries.  For example,
     on a machine with a 32-bit address space an array could cross the
     0x7fffffff/0x80000000 boundary, which would cause an integer
     overflow when adding 1 to '(intptr_t) 0x7fffffff'.

   * Prefer the Emacs-defined type 'EMACS_INT' for representing values
     converted to or from Emacs Lisp fixnums, as fixnum arithmetic is
     based on 'EMACS_INT'.

   * When representing a system value (such as a file size or a count of
     seconds since the Epoch), prefer the corresponding system type
     (e.g., 'off_t', 'time_t').  Do not assume that a system type is
     signed, unless this assumption is known to be safe.  For example,
     although 'off_t' is always signed, 'time_t' need not be.

   * Prefer 'intmax_t' for representing values that might be any signed
     integer value.  A 'printf'-family function can print such a value
     via a format like '"%"PRIdMAX'.

   * Prefer 'bool', 'false' and 'true' for booleans.  Using 'bool' can
     make programs easier to read and a bit faster than using 'int'.
     Although it is also OK to use 'int', '0' and '1', this older style
     is gradually being phased out.  When using 'bool', respect the
     limitations of the replacement implementation of 'bool', as
     documented in the source file 'lib/stdbool.in.h'.  In particular,
     boolean bitfields should be of type 'bool_bf', not 'bool', so that
     they work correctly even when compiling Objective C with standard
     GCC.

   * In bitfields, prefer 'unsigned int' or 'signed int' to 'int', as
     'int' is less portable: it might be signed, and might not be.
     Single-bit bit fields should be 'unsigned int' or 'bool_bf' so that
     their values are 0 or 1.

==============================================================================
File: elisp.info,  Node: |Standard_Errors|,  Next: |Standard_Keymaps|,  Prev: |GNU_Emacs_Internals|,  Up: |Top|
==============================================================================

                                                               *Standard_Errors*

Appendix F Standard Errors
==========================

Here is a list of the more important error symbols in standard Emacs,
grouped by concept.  The list includes each symbol's message and a cross
reference to a description of how the error can occur.

   Each error symbol has a set of parent error conditions that is a list
of symbols.  Normally this list includes the error symbol itself and the
symbol 'error'.  Occasionally it includes additional symbols, which are
intermediate classifications, narrower than 'error' but broader than a
single error symbol.  For example, all the errors in accessing files
have the condition 'file-error'.  If we do not say here that a certain
error symbol has additional error conditions, that means it has none.

   As a special exception, the error symbol 'quit' does not have the
condition 'error', because quitting is not considered an error.

   Most of these error symbols are defined in C (mainly 'data.c'), but
some are defined in Lisp.  For example, the file 'userlock.el' defines
the 'file-locked' and 'file-supersession' errors.  Several of the
specialized Lisp libraries distributed with Emacs define their own error
symbols.  We do not attempt to list of all those here.

   *Note Errors::, for an explanation of how errors are generated and
handled.

'error'
     The message is 'error'.  *Note Errors::.

'quit'
     The message is 'Quit'.  *Note Quitting::.

'args-out-of-range'
     The message is 'Args out of range'.  This happens when trying to
     access an element beyond the range of a sequence, buffer, or other
     container-like object.  *Note Sequences Arrays Vectors::, and see
     *note Text::.

'arith-error'
     The message is 'Arithmetic error'.  This occurs when trying to
     perform integer division by zero.  *Note Numeric Conversions::, and
     see *note Arithmetic Operations::.

'beginning-of-buffer'
     The message is 'Beginning of buffer'.  *Note Character Motion::.

'buffer-read-only'
     The message is 'Buffer is read-only'.  *Note Read Only Buffers::.

'circular-list'
     The message is 'List contains a loop'.  This happens when a
     circular structure is encountered.  *Note Circular Objects::.

'cl-assertion-failed'
     The message is 'Assertion failed'.  This happens when the
     'cl-assert' macro fails a test.  *Note (cl)Assertions::.

'coding-system-error'
     The message is 'Invalid coding system'.  *Note Lisp and Coding
     Systems::.

'cyclic-function-indirection'
     The message is 'Symbol's chain of function indirections contains a
     loop'.  *Note Function Indirection::.

'cyclic-variable-indirection'
     The message is 'Symbol's chain of variable indirections contains a
     loop'.  *Note Variable Aliases::.

'dbus-error'
     The message is 'D-Bus error'.  *Note (dbus)Errors and Events::.

'end-of-buffer'
     The message is 'End of buffer'.  *Note Character Motion::.

'end-of-file'
     The message is 'End of file during parsing'.  Note that this is not
     a subcategory of 'file-error', because it pertains to the Lisp
     reader, not to file I/O.  *Note Input Functions::.

'file-already-exists'
     This is a subcategory of 'file-error'.  *Note Writing to Files::.

'file-date-error'
     This is a subcategory of 'file-error'.  It occurs when 'copy-file'
     tries and fails to set the last-modification time of the output
     file.  *Note Changing Files::.

'file-error'
     We do not list the error-strings of this error and its
     subcategories, because the error message is normally constructed
     from the data items alone when the error condition 'file-error' is
     present.  Thus, the error-strings are not very relevant.  However,
     these error symbols do have 'error-message' properties, and if no
     data is provided, the 'error-message' property _is_ used.  *Note
     Files::.

'file-missing'
     This is a subcategory of 'file-error'.  It occurs when an operation
     attempts to act on a file that is missing.  *Note Changing Files::.

'compression-error'
     This is a subcategory of 'file-error', which results from problems
     handling a compressed file.  *Note How Programs Do Loading::.

'file-locked'
     This is a subcategory of 'file-error'.  *Note File Locks::.

'file-supersession'
     This is a subcategory of 'file-error'.  *Note Modification Time::.

'file-notify-error'
     This is a subcategory of 'file-error'.  It happens, when a file
     could not be watched for changes.  *Note File Notifications::.

'ftp-error'
     This is a subcategory of 'file-error', which results from problems
     in accessing a remote file using ftp.  *Note (emacs)Remote Files::.

'invalid-function'
     The message is 'Invalid function'.  *Note Function Indirection::.

'invalid-read-syntax'
     The message is usually 'Invalid read syntax'.  *Note Printed
     Representation::.  This error can also be raised by commands like
     'eval-expression' when there's text following an expression.  In
     that case, the message is 'Trailing garbage following expression'.

'invalid-regexp'
     The message is 'Invalid regexp'.  *Note Regular Expressions::.

'mark-inactive'
     The message is 'The mark is not active now'.  *Note The Mark::.

'no-catch'
     The message is 'No catch for tag'.  *Note Catch and Throw::.

'range-error'
     The message is 'Arithmetic range error'.

'overflow-error'
     The message is 'Arithmetic overflow error'.  This is a subcategory
     of 'range-error'.  This can happen with integers exceeding the
     'integer-width' limit.  *Note Integer Basics::.

'scan-error'
     The message is 'Scan error'.  This happens when certain
     syntax-parsing functions find invalid syntax or mismatched
     parentheses.  Conventionally raised with three argument: a
     human-readable error message, the start of the obstacle that cannot
     be moved over, and the end of the obstacle.  *Note List Motion::,
     and see *note Parsing Expressions::.

'search-failed'
     The message is 'Search failed'.  *Note Searching and Matching::.

'setting-constant'
     The message is 'Attempt to set a constant symbol'.  This happens
     when attempting to assign values to 'nil', 't',
     'most-positive-fixnum', 'most-negative-fixnum', and keyword
     symbols.  It also happens when attempting to assign values to
     'enable-multibyte-characters' and some other symbols whose direct
     assignment is not allowed for some reason.  *Note Constant
     Variables::.

'text-read-only'
     The message is 'Text is read-only'.  This is a subcategory of
     'buffer-read-only'.  *Note Special Properties::.

'undefined-color'
     The message is 'Undefined color'.  *Note Color Names::.

'user-error'
     The message is the empty string.  *Note Signaling Errors::.

'user-search-failed'
     This is like 'search-failed', but doesn't trigger the debugger,
     like 'user-error'.  *Note Signaling Errors::, and see *note
     Searching and Matching::.  This is used for searching in Info
     files, see *note (info)Search Text::.

'void-function'
     The message is 'Symbol's function definition is void'.  *Note
     Function Cells::.

'void-variable'
     The message is 'Symbol's value as variable is void'.  *Note
     Accessing Variables::.

'wrong-number-of-arguments'
     The message is 'Wrong number of arguments'.  *Note Argument List::.

'wrong-type-argument'
     The message is 'Wrong type argument'.  *Note Type Predicates::.

'unknown-image-type'
     The message is 'Cannot determine image type'.  *Note Images::.

==============================================================================
File: elisp.info,  Node: |Standard_Keymaps|,  Next: |Standard_Hooks|,  Prev: |Standard_Errors|,  Up: |Top|
==============================================================================

                                                              *Standard_Keymaps*

Appendix G Standard Keymaps
===========================

In this section we list some of the more general keymaps.  Many of these
exist when Emacs is first started, but some are loaded only when the
respective feature is accessed.

   There are many other, more specialized, maps than these; in
particular those associated with major and minor modes.  The minibuffer
uses several keymaps (*note Completion Commands::).  For more details on
keymaps, *note Keymaps::.

'2C-mode-map'
     A sparse keymap for subcommands of the prefix 'C-x 6'.
     *Note Two-Column Editing: (emacs)Two-Column.

'abbrev-map'
     A sparse keymap for subcommands of the prefix 'C-x a'.
     *Note (emacs)Defining Abbrevs::.

'button-buffer-map'
     A sparse keymap useful for buffers containing buffers.
     You may want to use this as a parent keymap.  *Note Buttons::.

'button-map'
     A sparse keymap used by buttons.

'ctl-x-4-map'
     A sparse keymap for subcommands of the prefix 'C-x 4'.

'ctl-x-5-map'
     A sparse keymap for subcommands of the prefix 'C-x 5'.

'ctl-x-map'
     A full keymap for 'C-x' commands.

'ctl-x-r-map'
     A sparse keymap for subcommands of the prefix 'C-x r'.
     *Note (emacs)Registers::.

'esc-map'
     A full keymap for <ESC> (or <Meta>) commands.

'facemenu-keymap'
     A sparse keymap used for the 'M-o' prefix key.

'function-key-map'
     The parent keymap of all 'local-function-key-map' (q.v.) instances.

'global-map'
     The full keymap containing default global key bindings.
     Modes should not modify the Global map.

'goto-map'
     A sparse keymap used for the 'M-g' prefix key.

'help-map'
     A sparse keymap for the keys following the help character 'C-h'.
     *Note Help Functions::.

'Helper-help-map'
     A full keymap used by the help utility package.
     It has the same keymap in its value cell and in its function cell.

'input-decode-map'
     The keymap for translating keypad and function keys.
     If there are none, then it contains an empty sparse keymap.  *Note
     Translation Keymaps::.

'key-translation-map'
     A keymap for translating keys.  This one overrides ordinary key
     bindings, unlike 'local-function-key-map'.  *Note Translation
     Keymaps::.

'kmacro-keymap'
     A sparse keymap for keys that follows the 'C-x C-k' prefix search.
     *Note (emacs)Keyboard Macros::.

'local-function-key-map'
     The keymap for translating key sequences to preferred alternatives.
     If there are none, then it contains an empty sparse keymap.  *Note
     Translation Keymaps::.

'menu-bar-file-menu'
'menu-bar-edit-menu'
'menu-bar-options-menu'
'global-buffers-menu-map'
'menu-bar-tools-menu'
'menu-bar-help-menu'
     These keymaps display the main, top-level menus in the menu bar.
     Some of them contain sub-menus.  For example, the Edit menu
     contains 'menu-bar-search-menu', etc.  *Note Menu Bar::.

'minibuffer-inactive-mode-map'
     A full keymap used in the minibuffer when it is not active.
     *Note Editing in the Minibuffer: (emacs)Minibuffer Edit.

'mode-line-coding-system-map'
'mode-line-input-method-map'
'mode-line-column-line-number-mode-map'
     These keymaps control various areas of the mode line.
     *Note Mode Line Format::.

'mode-specific-map'
     The keymap for characters following 'C-c'.  Note, this is in the
     global map.  This map is not actually mode-specific: its name was
     chosen to be informative in 'C-h b' ('display-bindings'), where it
     describes the main use of the 'C-c' prefix key.

'mouse-appearance-menu-map'
     A sparse keymap used for the 'S-mouse-1' key.

'mule-keymap'
     The global keymap used for the 'C-x <RET>' prefix key.

'narrow-map'
     A sparse keymap for subcommands of the prefix 'C-x n'.

'prog-mode-map'
     The keymap used by Prog mode.
     *Note Basic Major Modes::.

'query-replace-map'
'multi-query-replace-map'
     A sparse keymap used for responses in 'query-replace' and related
     commands; also for 'y-or-n-p' and 'map-y-or-n-p'.  The functions
     that use this map do not support prefix keys; they look up one
     event at a time.  'multi-query-replace-map' extends
     'query-replace-map' for multi-buffer replacements.  *Note
     query-replace-map: Search and Replace.

'search-map'
     A sparse keymap that provides global bindings for search-related
     commands.

'special-mode-map'
     The keymap used by Special mode.
     *Note Basic Major Modes::.

'tab-prefix-map'
     The global keymap used for the 'C-x t' prefix key for tab-bar
     related commands.
     *Note (emacs)Tab Bars::.

'tab-bar-map'
     The keymap defining the contents of the tab bar.
     *Note (emacs)Tab Bars::.

'tool-bar-map'
     The keymap defining the contents of the tool bar.
     *Note Tool Bar::.

'universal-argument-map'
     A sparse keymap used while processing 'C-u'.
     *Note Prefix Command Arguments::.

'vc-prefix-map'
     The global keymap used for the 'C-x v' prefix key.

'x-alternatives-map'
     A sparse keymap used to map certain keys under graphical frames.
     The function 'x-setup-function-keys' uses this.

==============================================================================
File: elisp.info,  Node: |Standard_Hooks|,  Next: |Index|,  Prev: |Standard_Keymaps|,  Up: |Top|
==============================================================================

                                                                *Standard_Hooks*

Appendix H Standard Hooks
=========================

The following is a list of some hook variables that let you provide
functions to be called from within Emacs on suitable occasions.

   Most of these variables have names ending with '-hook'.  They are
"normal hooks", run by means of 'run-hooks'.  The value of such a hook
is a list of functions; the functions are called with no arguments and
their values are completely ignored.  The recommended way to put a new
function on such a hook is to call 'add-hook'.  *Note Hooks::, for more
information about using hooks.

   The variables whose names end in '-functions' are usually "abnormal
hooks" (some old code may also use the deprecated '-hooks' suffix);
their values are lists of functions, but these functions are called in a
special way (they are passed arguments, or their return values are
used).  The variables whose names end in '-function' have single
functions as their values.

   This is not an exhaustive list, it only covers the more general
hooks.  For example, every major mode defines a hook named
'MODENAME-mode-hook'.  The major mode command runs this normal hook with
'run-mode-hooks' as the very last thing it does.  *Note Mode Hooks::.
Most minor modes have mode hooks too.

   A special feature allows you to specify expressions to evaluate if
and when a file is loaded (*note Hooks for Loading::).  That feature is
not exactly a hook, but does a similar job.

'activate-mark-hook'
'deactivate-mark-hook'
     *Note The Mark::.

'after-change-functions'
'before-change-functions'
'first-change-hook'
     *Note Change Hooks::.

'after-change-major-mode-hook'
'change-major-mode-after-body-hook'
     *Note Mode Hooks::.

'after-init-hook'
'before-init-hook'
'emacs-startup-hook'
'window-setup-hook'
     *Note Init File::.

'after-insert-file-functions'
'write-region-annotate-functions'
'write-region-post-annotation-function'
     *Note Format Conversion::.

'after-make-frame-functions'
'before-make-frame-hook'
'server-after-make-frame-hook'
     *Note Creating Frames::.

'after-save-hook'
'before-save-hook'
'write-contents-functions'
'write-file-functions'
     *Note Saving Buffers::.

'after-setting-font-hook'
     Hook run after a frame's font changes.

'auto-save-hook'
     *Note Auto-Saving::.

'before-hack-local-variables-hook'
'hack-local-variables-hook'
     *Note File Local Variables::.

'buffer-access-fontify-functions'
     *Note Lazy Properties::.

'buffer-list-update-hook'
     Hook run when the buffer list changes (*note Buffer List::).

'buffer-quit-function'
     Function to call to quit the current buffer.

'change-major-mode-hook'
     *Note Creating Buffer-Local::.

'comint-password-function'
     This abnormal hook permits a derived mode to supply a password for
     the underlying command interpreter without prompting the user.

'command-line-functions'
     *Note Command-Line Arguments::.

'delayed-warnings-hook'
     The command loop runs this soon after 'post-command-hook' (q.v.).

'focus-in-hook'
'focus-out-hook'
     *Note Input Focus::.

'delete-frame-functions'
'after-delete-frame-functions'
     *Note Deleting Frames::.

'delete-terminal-functions'
     *Note Multiple Terminals::.

'pop-up-frame-function'
'split-window-preferred-function'
     *Note Choosing Window Options::.

'echo-area-clear-hook'
     *Note Echo Area Customization::.

'find-file-hook'
'find-file-not-found-functions'
     *Note Visiting Functions::.

'font-lock-extend-after-change-region-function'
     *Note Region to Refontify::.

'font-lock-extend-region-functions'
     *Note Multiline Font Lock::.

'font-lock-fontify-buffer-function'
'font-lock-fontify-region-function'
'font-lock-mark-block-function'
'font-lock-unfontify-buffer-function'
'font-lock-unfontify-region-function'
     *Note Other Font Lock Variables::.

'fontification-functions'
     *Note Automatic Face Assignment: Auto Faces.

'frame-auto-hide-function'
     *Note Quitting Windows::.

'quit-window-hook'
     *Note Quitting Windows::.

'kill-buffer-hook'
'kill-buffer-query-functions'
     *Note Killing Buffers::.

'kill-emacs-hook'
'kill-emacs-query-functions'
     *Note Killing Emacs::.

'menu-bar-update-hook'
     *Note Menu Bar::.

'minibuffer-setup-hook'
'minibuffer-exit-hook'
     *Note Minibuffer Misc::.

'mouse-leave-buffer-hook'
     Hook run when about to switch windows with a mouse command.

'mouse-position-function'
     *Note Mouse Position::.

'prefix-command-echo-keystrokes-functions'
     An abnormal hook run by prefix commands (such as 'C-u') which
     should return a string describing the current prefix state.  For
     example, 'C-u' produces 'C-u-' and 'C-u 1 2 3-'.  Each hook
     function is called with no arguments and should return a string
     describing the current prefix state, or 'nil' if there's no prefix
     state.  *Note Prefix Command Arguments::.

'prefix-command-preserve-state-hook'
     Hook run when a prefix command needs to preserve the prefix by
     passing the current prefix command state to the next command.  For
     example, 'C-u' needs to pass the state to the next command when the
     user types 'C-u -' or follows 'C-u' with a digit.

'pre-redisplay-functions'
     Hook run in each window just before redisplaying it.  *Note Forcing
     Redisplay::.

'post-command-hook'
'pre-command-hook'
     *Note Command Overview::.

'post-gc-hook'
     *Note Garbage Collection::.

'post-self-insert-hook'
     *Note Keymaps and Minor Modes::.

'suspend-hook'
'suspend-resume-hook'
'suspend-tty-functions'
'resume-tty-functions'
     *Note Suspending Emacs::.

'syntax-begin-function'
'syntax-propertize-extend-region-functions'
'syntax-propertize-function'
'font-lock-syntactic-face-function'
     *Note Syntactic Font Lock::.  *Note Syntax Properties::.

'temp-buffer-setup-hook'
'temp-buffer-show-function'
'temp-buffer-show-hook'
     *Note Temporary Displays::.

'tty-setup-hook'
     *Note Terminal-Specific::.

'window-configuration-change-hook'
'window-scroll-functions'
'window-size-change-functions'
     *Note Window Hooks::.

==============================================================================
File: elisp.info,  Node: |Index|,  Prev: Standard Hooks,  Up: Top
==============================================================================

                                                                         *Index*

Index
=====


MENU

* " in printing:                         Output Functions.    (line   9)
* " in strings:                          Syntax for Strings.  (line   6)
* ## read syntax:                        Symbol Type.         (line  57)
* #$:                                    Docs and Compilation.
                                                              (line  37)
* #' syntax:                             Anonymous Functions. (line  57)
* #( read syntax:                        Text Props and Strings.
                                                              (line   6)
* #@COUNT:                               Docs and Compilation.
                                                              (line  37)
* #COLON read syntax:                    Symbol Type.         (line  57)
* #N# read syntax:                       Circular Objects.    (line   6)
* #N= read syntax:                       Circular Objects.    (line   6)
* #^ read syntax:                        Char-Table Type.     (line  14)
* $ in display:                          Truncation.          (line   6)
* $ in regexp:                           Regexp Special.      (line 188)
* %:                                     Arithmetic Operations.
                                                              (line 106)
* % in format:                           Formatting Strings.  (line  41)
* & in replacement:                      Replacing Match.     (line  41)
* &optional:                             Argument List.       (line  18)
* &rest:                                 Argument List.       (line  18)
* ' for quoting:                         Quoting.             (line  17)
* ( in regexp:                           Regexp Backslash.    (line  45)
* (?: in regexp:                         Regexp Backslash.    (line  67)
* (...) in lists:                        Cons Cell Type.      (line  25)
* ) in regexp:                           Regexp Backslash.    (line  45)
* *:                                     Arithmetic Operations.
                                                              (line  62)
* * in interactive:                      Using Interactive.   (line  67)
* * in regexp:                           Regexp Special.      (line  16)
* * in rx:                               Rx Constructs.       (line  69)
* ** in rx:                              Rx Constructs.       (line 102)
* *? in rx:                              Rx Constructs.       (line  81)
* *get_user_ptr:                         Module Values.       (line 368)
* scratch:                             Auto Major Mode.     (line  79)
* +:                                     Arithmetic Operations.
                                                              (line  37)
* + in regexp:                           Regexp Special.      (line  48)
* + in rx:                               Rx Constructs.       (line  73)
* +? in rx:                              Rx Constructs.       (line  85)
* , (with backquote):                    Backquote.           (line  16)
* ,@ (with backquote):                   Backquote.           (line  29)
* -:                                     Arithmetic Operations.
                                                              (line  48)
* --disable-build-details option to configure: Building Emacs.
                                                              (line  74)
* --enable-locallisppath option to configure: Building Emacs. (line 117)
* --temacs option, and dumping method:   Building Emacs.      (line  23)
* -enable-profiling option of configure: Profiling.           (line  55)
* . in lists:                            Dotted Pair Notation.
                                                              (line   6)
* . in regexp:                           Regexp Special.      (line  10)
* .#, lock file names:                   File Locks.          (line   6)
* .emacs:                                Init File.           (line   6)
* /:                                     Arithmetic Operations.
                                                              (line  73)
* /=:                                    Comparison of Numbers.
                                                              (line  53)
* /dev/tty:                              Serial Ports.        (line   6)
* 0+ in rx:                              Rx Constructs.       (line  54)
* 1+:                                    Arithmetic Operations.
                                                              (line  13)
* 1+ in rx:                              Rx Constructs.       (line  59)
* 1-:                                    Arithmetic Operations.
                                                              (line  34)
* 1value:                                Test Coverage.       (line  25)
* 2C-mode-map:                           Prefix Keys.         (line  38)
* 2D box:                                Face Attributes.     (line 117)
* 3D box:                                Face Attributes.     (line 117)
* : in rx:                               Rx Constructs.       (line  27)
* :deferred, JSONRPC keyword:            JSONRPC deferred requests.
                                                              (line  16)
* :notification-dispatcher:              JSONRPC Overview.    (line  20)
* :request-dispatcher:                   JSONRPC Overview.    (line  20)
* ; for commenting:                      Comments.            (line   6)
* <:                                     Comparison of Numbers.
                                                              (line  57)
* <=:                                    Comparison of Numbers.
                                                              (line  61)
* =:                                     Comparison of Numbers.
                                                              (line  42)
* = in rx:                               Rx Constructs.       (line  93)
* >:                                     Comparison of Numbers.
                                                              (line  65)
* >=:                                    Comparison of Numbers.
                                                              (line  69)
* >= in rx:                              Rx Constructs.       (line  98)
* ? in character constant:               Basic Char Syntax.   (line   6)
* ? in minibuffer:                       Text from Minibuffer.
                                                              (line 250)
* ? in regexp:                           Regexp Special.      (line  54)
* ? in rx:                               Rx Constructs.       (line  77)
* ?? in rx:                              Rx Constructs.       (line  89)
* @ in interactive:                      Using Interactive.   (line  70)
* [ in regexp:                           Regexp Special.      (line  72)
* [...] (Edebug):                        Specification List.  (line 134)
* \ in character constant:               General Escape Syntax.
                                                              (line  10)
* \ in display:                          Truncation.          (line   6)
* \ in printing:                         Output Functions.    (line   9)
* \ in regexp:                           Regexp Special.      (line 199)
* \ in replacement:                      Replacing Match.     (line  50)
* \ in strings:                          Syntax for Strings.  (line   6)
* \ in symbols:                          Symbol Type.         (line  23)
* \' in regexp:                          Regexp Backslash.    (line 163)
* \( in strings:                         List Motion.         (line  81)
* \< in regexp:                          Regexp Backslash.    (line 184)
* \= in regexp:                          Regexp Backslash.    (line 167)
* \> in regexp:                          Regexp Backslash.    (line 189)
* \a:                                    Basic Char Syntax.   (line  27)
* \b:                                    Basic Char Syntax.   (line  27)
* \b in regexp:                          Regexp Backslash.    (line 171)
* \B in regexp:                          Regexp Backslash.    (line 180)
* \e:                                    Basic Char Syntax.   (line  27)
* \f:                                    Basic Char Syntax.   (line  27)
* \n:                                    Basic Char Syntax.   (line  27)
* \n in print:                           Output Variables.    (line  17)
* \N in replacement:                     Replacing Match.     (line  44)
* \r:                                    Basic Char Syntax.   (line  27)
* \s:                                    Basic Char Syntax.   (line  27)
* \s in regexp:                          Regexp Backslash.    (line 130)
* \S in regexp:                          Regexp Backslash.    (line 138)
* \t:                                    Basic Char Syntax.   (line  27)
* \v:                                    Basic Char Syntax.   (line  27)
* \w in regexp:                          Regexp Backslash.    (line 123)
* \W in regexp:                          Regexp Backslash.    (line 127)
* \_< in regexp:                         Regexp Backslash.    (line 194)
* \_> in regexp:                         Regexp Backslash.    (line 200)
* \` in regexp:                          Regexp Backslash.    (line 159)
* ] in regexp:                           Regexp Special.      (line  72)
* ^ in interactive:                      Using Interactive.   (line  75)
* ^ in regexp:                           Regexp Special.      (line 157)
* `:                                     Backquote.           (line   6)
* ' (list substitution):                 Backquote.           (line   6)
* | in regexp:                           Regexp Backslash.    (line  12)
* | in rx:                               Rx Constructs.       (line  34)
* abbrev:                                Abbrevs.             (line   6)
* abbrev properties:                     Abbrev Properties.   (line   6)
* abbrev table properties:               Abbrev Table Properties.
                                                              (line   6)
* abbrev tables:                         Abbrev Tables.       (line   6)
* abbrev tables in modes:                Major Mode Conventions.
                                                              (line 126)
* abbrev-all-caps:                       Abbrev Expansion.    (line  59)
* abbrev-expand-function:                Abbrev Expansion.    (line  97)
* abbrev-expansion:                      Abbrev Expansion.    (line  18)
* abbrev-file-name:                      Abbrev Files.        (line  16)
* abbrev-get:                            Abbrev Properties.   (line  13)
* abbrev-insert:                         Abbrev Expansion.    (line  39)
* abbrev-map:                            Standard Keymaps.    (line  20)
* abbrev-minor-mode-table-alist:         Standard Abbrev Tables.
                                                              (line  20)
* abbrev-prefix-mark:                    Abbrev Expansion.    (line  48)
* abbrev-put:                            Abbrev Properties.   (line  10)
* abbrev-start-location:                 Abbrev Expansion.    (line  65)
* abbrev-start-location-buffer:          Abbrev Expansion.    (line  73)
* abbrev-symbol:                         Abbrev Expansion.    (line  11)
* abbrev-table-get:                      Abbrev Table Properties.
                                                              (line  13)
* abbrev-table-name-list:                Abbrev Tables.       (line  45)
* abbrev-table-p:                        Abbrev Tables.       (line  14)
* abbrev-table-put:                      Abbrev Table Properties.
                                                              (line  10)
* abbreviate-file-name:                  Directory Names.     (line  83)
* abbreviated file names:                Directory Names.     (line  83)
* abbrevs, looking up and expanding:     Abbrev Expansion.    (line   6)
* abbrevs-changed:                       Abbrev Files.        (line  36)
* abnormal hook:                         Hooks.               (line  33)
* abort-recursive-edit:                  Recursive Editing.   (line  92)
* aborting:                              Recursive Editing.   (line  32)
* abs:                                   Comparison of Numbers.
                                                              (line  89)
* absolute edges:                        Frame Layout.        (line 229)
* absolute file name:                    Relative File Names. (line   6)
* absolute frame edges:                  Frame Layout.        (line 229)
* absolute frame position:               Frame Layout.        (line 229)
* absolute position:                     Frame Layout.        (line 229)
* accept input from processes:           Accepting Output.    (line   6)
* accept-change-group:                   Atomic Changes.      (line  48)
* accept-process-output:                 Accepting Output.    (line  12)
* access control list:                   Extended Attributes. (line  14)
* access minibuffer contents:            Minibuffer Contents. (line   6)
* access-file:                           Testing Accessibility.
                                                              (line  69)
* accessibility of a file:               Testing Accessibility.
                                                              (line   6)
* accessible portion (of a buffer):      Narrowing.           (line   6)
* accessible-keymaps:                    Scanning Keymaps.    (line   9)
* accessing documentation strings:       Accessing Documentation.
                                                              (line   6)
* accessing hash tables:                 Hash Access.         (line   6)
* accessing plist properties:            Plist Access.        (line   6)
* ACL entries:                           Extended Attributes. (line  14)
* acos:                                  Math Functions.      (line  20)
* action (button property):              Button Properties.   (line  12)
* action alist for buffer display:       Buffer Display Action Alists.
                                                              (line   6)
* action function, for buffer display:   Buffer Display Action Functions.
                                                              (line   6)
* action, customization keyword:         Type Keywords.       (line  63)
* activate-change-group:                 Atomic Changes.      (line  39)
* activate-mark-hook:                    The Mark.            (line 174)
* active display table:                  Active Display Table.
                                                              (line   6)
* active keymap:                         Active Keymaps.      (line   6)
* active keymap, controlling:            Controlling Active Maps.
                                                              (line   6)
* active-minibuffer-window:              Minibuffer Windows.  (line  34)
* ad-activate:                           Porting Old Advice.  (line   6)
* adaptive-fill-first-line-regexp:       Adaptive Fill.       (line  62)
* adaptive-fill-function:                Adaptive Fill.       (line  75)
* adaptive-fill-mode:                    Adaptive Fill.       (line  12)
* adaptive-fill-regexp:                  Adaptive Fill.       (line  53)
* add-face-text-property:                Changing Properties. (line  89)
* add-function:                          Core Advising Primitives.
                                                              (line   6)
* add-hook:                              Setting Hooks.       (line  22)
* add-name-to-file:                      Changing Files.      (line  38)
* add-text-properties:                   Changing Properties. (line  23)
* add-to-history:                        Minibuffer History.  (line  57)
* add-to-invisibility-spec:              Invisible Text.      (line  63)
* add-to-list:                           List Variables.      (line  34)
* add-to-ordered-list:                   List Variables.      (line  72)
* add-variable-watcher:                  Watching Variables.  (line  15)
* address field of register:             Cons Cell Type.      (line   6)
* adjust-window-trailing-edge:           Resizing Windows.    (line  70)
* adjusting point:                       Adjusting Point.     (line   6)
* advertised binding:                    Keys in Documentation.
                                                              (line  67)
* advice, add and remove:                Core Advising Primitives.
                                                              (line   6)
* advice-add:                            Advising Named Functions.
                                                              (line  63)
* advice-eval-interactive-spec:          Core Advising Primitives.
                                                              (line  96)
* advice-function-mapc:                  Core Advising Primitives.
                                                              (line  91)
* advice-function-member-p:              Core Advising Primitives.
                                                              (line  86)
* advice-mapc:                           Advising Named Functions.
                                                              (line  77)
* advice-member-p:                       Advising Named Functions.
                                                              (line  72)
* advice-remove:                         Advising Named Functions.
                                                              (line  68)
* advices, porting from defadvice:       Porting Old Advice.  (line   6)
* advising functions:                    Advising Functions.  (line   6)
* advising named functions:              Advising Named Functions.
                                                              (line   6)
* AEAD cipher:                           GnuTLS Cryptography. (line   6)
* after-change-functions:                Change Hooks.        (line  23)
* after-change-major-mode-hook:          Mode Hooks.          (line  55)
* after-delete-frame-functions:          Deleting Frames.     (line  12)
* after-find-file:                       Subroutines of Visiting.
                                                              (line  32)
* after-focus-change-function:           Input Focus.         (line 166)
* after-init-hook:                       Init File.           (line  64)
* after-init-time:                       Startup Summary.     (line  93)
* after-insert-file-functions:           Format Conversion Piecemeal.
                                                              (line  78)
* after-load-functions:                  Hooks for Loading.   (line   9)
* after-make-frame-functions:            Creating Frames.     (line  45)
* after-revert-hook:                     Reverting.           (line  87)
* after-save-hook:                       Saving Buffers.      (line 148)
* after-setting-font-hook:               Standard Hooks.      (line  69)
* after-string (overlay property):       Overlay Properties.  (line 203)
* alias, for coding systems:             Coding System Basics.
                                                              (line  91)
* alias, for faces:                      Face Functions.      (line  33)
* alias, for functions:                  Defining Functions.  (line  54)
* alias, for variables:                  Variable Aliases.    (line   6)
* alist:                                 Association Lists.   (line   6)
* alist vs. plist:                       Plists and Alists.   (line   6)
* alist-get:                             Association Lists.   (line 124)
* all-completions:                       Basic Completion.    (line  96)
* all-threads:                           Basic Thread Functions.
                                                              (line  72)
* allow-no-window, a buffer display action alist entry: Buffer Display Action Alists.
                                                              (line 213)
* alnum character class, regexp:         Char Classes.        (line   6)
* alpha character class, regexp:         Char Classes.        (line   6)
* alpha, a frame parameter:              Font and Color Parameters.
                                                              (line  65)
* alt characters:                        Other Char Bits.     (line  16)
* alternatives, defining:                Generic Commands.    (line   6)
* amalgamating commands, and undo:       Undo.                (line  98)
* amalgamating-undo-limit:               Undo.                (line  98)
* and:                                   Combining Conditions.
                                                              (line  17)
* and in rx:                             Rx Constructs.       (line  28)
* animation:                             Multi-Frame Images.  (line   6)
* anonymous face:                        Faces.               (line  11)
* anonymous function:                    Anonymous Functions. (line   6)
* any in rx:                             Rx Constructs.       (line 123)
* anychar in rx:                         Rx Constructs.       (line 155)
* anything in rx:                        Rx Constructs.       (line 155)
* apostrophe for quoting:                Quoting.             (line  17)
* append:                                Building Lists.      (line  61)
* append-to-file:                        Writing to Files.    (line  11)
* apply:                                 Calling Functions.   (line  56)
* apply, and debugging:                  Internals of Debugger.
                                                              (line  86)
* apply-partially:                       Calling Functions.   (line  91)
* applying customizations:               Applying Customizations.
                                                              (line   6)
* apropos:                               Help Functions.      (line  11)
* archive web server:                    Archive Web Server.  (line   6)
* aref:                                  Array Functions.     (line  20)
* args, customization keyword:           Composite Types.     (line 289)
* argument:                              What Is a Function.  (line   6)
* argument binding:                      Argument List.       (line   6)
* argument lists, features:              Argument List.       (line   6)
* arguments for shell commands:          Shell Arguments.     (line   6)
* arguments, interactive entry:          Using Interactive.   (line   6)
* arguments, reading:                    Minibuffers.         (line   6)
* argv:                                  Command-Line Arguments.
                                                              (line  69)
* arith-error example:                   Handling Errors.     (line 155)
* arith-error in division:               Arithmetic Operations.
                                                              (line 101)
* arithmetic operations:                 Arithmetic Operations.
                                                              (line   6)
* arithmetic shift:                      Bitwise Operations.  (line  17)
* array:                                 Arrays.              (line   6)
* array elements:                        Array Functions.     (line  21)
* arrayp:                                Array Functions.     (line   9)
* ascii character class, regexp:         Char Classes.        (line   6)
* ASCII character codes:                 Character Type.      (line   6)
* ASCII control characters:              Usual Display.       (line  22)
* ascii-case-table:                      Case Tables.         (line  90)
* aset:                                  Array Functions.     (line  33)
* ash:                                   Bitwise Operations.  (line  16)
* asin:                                  Math Functions.      (line  15)
* ask-user-about-lock:                   File Locks.          (line  57)
* ask-user-about-supersession-threat:    Modification Time.   (line  73)
* asking the user questions:             Yes-or-No Queries.   (line   6)
* assoc:                                 Association Lists.   (line  58)
* assoc-default:                         Association Lists.   (line 170)
* assoc-delete-all:                      Association Lists.   (line 241)
* assoc-string:                          Text Comparison.     (line 241)
* association list:                      Association Lists.   (line   6)
* assq:                                  Association Lists.   (line  99)
* assq-delete-all:                       Association Lists.   (line 226)
* asynchronous subprocess:               Asynchronous Processes.
                                                              (line   6)
* atan:                                  Math Functions.      (line  25)
* atom:                                  List-related Predicates.
                                                              (line  15)
* atomic changes:                        Atomic Changes.      (line   6)
* atomic windows:                        Atomic Windows.      (line   6)
* atoms:                                 Cons Cell Type.      (line  22)
* attributes of text:                    Text Properties.     (line   6)
* Auto Fill mode:                        Auto Filling.        (line   6)
* auto-coding-alist:                     Default Coding Systems.
                                                              (line  51)
* auto-coding-functions:                 Default Coding Systems.
                                                              (line  97)
* auto-coding-regexp-alist:              Default Coding Systems.
                                                              (line  17)
* auto-fill-chars:                       Auto Filling.        (line  31)
* auto-fill-function:                    Auto Filling.        (line  15)
* auto-hide-function, a frame parameter: Frame Interaction Parameters.
                                                              (line  29)
* auto-hscroll-mode:                     Horizontal Scrolling.
                                                              (line  40)
* auto-lower, a frame parameter:         Management Parameters.
                                                              (line  19)
* auto-mode-alist:                       Auto Major Mode.     (line 103)
* auto-raise, a frame parameter:         Management Parameters.
                                                              (line  15)
* auto-raise-tool-bar-buttons:           Tool Bar.            (line 154)
* auto-resize-tool-bars:                 Tool Bar.            (line 142)
* auto-save-default:                     Auto-Saving.         (line 135)
* auto-save-file-name-p:                 Auto-Saving.         (line  32)
* auto-save-hook:                        Auto-Saving.         (line 132)
* auto-save-interval:                    Auto-Saving.         (line 113)
* auto-save-list-file-name:              Auto-Saving.         (line 190)
* auto-save-list-file-prefix:            Auto-Saving.         (line 207)
* auto-save-mode:                        Auto-Saving.         (line  22)
* auto-save-timeout:                     Auto-Saving.         (line 120)
* auto-save-visited-file-name:           Auto-Saving.         (line  86)
* auto-selection of window:              Mouse Window Auto-selection.
                                                              (line   6)
* auto-window-vscroll:                   Vertical Scrolling.  (line  52)
* autoload:                              Autoload.            (line  30)
* autoload <1>:                          Autoload.            (line   6)
* autoload by prefix:                    Autoload by Prefix.  (line   6)
* autoload cookie:                       Autoload.            (line 109)
* autoload cookie, and safe values of variable: File Local Variables.
                                                              (line 104)
* autoload errors:                       Autoload.            (line  95)
* autoload object:                       What Is a Function.  (line  88)
* autoload, when to use:                 When to Autoload.    (line   6)
* autoload-compute-prefixes:             Autoload by Prefix.  (line   6)
* autoload-do-load:                      Autoload.            (line 204)
* autoloadp:                             Autoload.            (line  88)
* automatic face assignment:             Auto Faces.          (line   6)
* automatically buffer-local:            Intro to Buffer-Local.
                                                              (line  39)
* back-to-indentation:                   Motion by Indent.    (line   9)
* background-color, a frame parameter:   Font and Color Parameters.
                                                              (line 100)
* background-mode, a frame parameter:    Font and Color Parameters.
                                                              (line  29)
* backing store:                         Display Feature Testing.
                                                              (line 116)
* backquote (list substitution):         Backquote.           (line   6)
* backquote-style patterns:              Backquote Patterns.  (line   6)
* backref in rx:                         Rx Constructs.       (line 373)
* backslash in character constants:      General Escape Syntax.
                                                              (line  10)
* backslash in regular expressions:      Regexp Backslash.    (line   6)
* backslash in strings:                  Syntax for Strings.  (line   6)
* backslash in symbols:                  Symbol Type.         (line  23)
* backspace:                             Basic Char Syntax.   (line  27)
* backtrace:                             Internals of Debugger.
                                                              (line  20)
* backtrace buffer:                      Backtraces.          (line   6)
* backtrace from emacsclient's --eval:   Error Debugging.     (line  74)
* backtrace of thread:                   The Thread List.     (line  21)
* backtrace-debug:                       Internals of Debugger.
                                                              (line  92)
* backtrace-frame:                       Internals of Debugger.
                                                              (line 114)
* backtracking:                          Backtracking.        (line   6)
* backtracking and POSIX regular expressions: POSIX Regexps.  (line   6)
* backtracking and regular expressions:  Regexp Special.      (line  25)
* backup file:                           Backup Files.        (line   6)
* backup files, rename or copy:          Rename or Copy.      (line   6)
* backup-buffer:                         Making Backups.      (line   6)
* backup-by-copying:                     Rename or Copy.      (line  29)
* backup-by-copying-when-linked:         Rename or Copy.      (line  37)
* backup-by-copying-when-mismatch:       Rename or Copy.      (line  44)
* backup-by-copying-when-privileged-mismatch: Rename or Copy. (line  57)
* backup-directory-alist:                Making Backups.      (line  67)
* backup-enable-predicate:               Making Backups.      (line  43)
* backup-file-name-p:                    Backup Names.        (line  10)
* backup-inhibited:                      Making Backups.      (line  55)
* backups and auto-saving:               Backups and Auto-Saving.
                                                              (line   6)
* backward-button:                       Button Buffer Commands.
                                                              (line  42)
* backward-char:                         Character Motion.    (line  36)
* backward-delete-char-untabify:         Deletion.            (line  68)
* backward-delete-char-untabify-method:  Deletion.            (line  87)
* backward-list:                         List Motion.         (line  19)
* backward-prefix-chars:                 Motion and Syntax.   (line  34)
* backward-sexp:                         List Motion.         (line  60)
* backward-to-indentation:               Motion by Indent.    (line  14)
* backward-up-list:                      List Motion.         (line  34)
* backward-word:                         Word Motion.         (line  38)
* backward-word-strictly:                Word Motion.         (line  75)
* balance-windows:                       Resizing Windows.    (line 209)
* balance-windows-area:                  Resizing Windows.    (line 216)
* balanced parenthesis motion:           List Motion.         (line   6)
* balancing parentheses:                 Blinking.            (line   6)
* balancing window sizes:                Resizing Windows.    (line 209)
* barf-if-buffer-read-only:              Read Only Buffers.   (line  66)
* base 64 encoding:                      Base 64.             (line   6)
* base buffer:                           Indirect Buffers.    (line   6)
* base coding system:                    Coding System Basics.
                                                              (line  45)
* base direction of a paragraph:         Bidirectional Display.
                                                              (line  78)
* base for reading an integer:           Integer Basics.      (line  16)
* base location, package archive:        Package Archives.    (line  12)
* base remapping, faces:                 Face Remapping.      (line  46)
* base64-decode-region:                  Base 64.             (line  51)
* base64-decode-string:                  Base 64.             (line  62)
* base64-encode-region:                  Base 64.             (line  11)
* base64-encode-string:                  Base 64.             (line  32)
* base64url-encode-region:               Base 64.             (line  23)
* base64url-encode-string:               Base 64.             (line  43)
* basic code (of input character):       Keyboard Events.     (line  13)
* basic faces:                           Basic Faces.         (line   6)
* batch mode:                            Batch Mode.          (line   6)
* batch-byte-compile:                    Compilation Functions.
                                                              (line 125)
* baud, in serial connections:           Serial Ports.        (line 116)
* baud-rate:                             Terminal Output.     (line  10)
* beep:                                  Beeping.             (line  17)
* before point, insertion:               Insertion.           (line   6)
* before-change-functions:               Change Hooks.        (line  16)
* before-hack-local-variables-hook:      File Local Variables.
                                                              (line  83)
* before-init-hook:                      Init File.           (line  59)
* before-init-time:                      Startup Summary.     (line  22)
* before-make-frame-hook:                Creating Frames.     (line  42)
* before-revert-hook:                    Reverting.           (line  82)
* before-save-hook:                      Saving Buffers.      (line 141)
* before-string (overlay property):      Overlay Properties.  (line 198)
* beginning of line:                     Text Lines.          (line  54)
* beginning of line in regexp:           Regexp Special.      (line 175)
* beginning-of-buffer:                   Buffer End Motion.   (line  18)
* beginning-of-defun:                    List Motion.         (line  64)
* beginning-of-defun-function:           List Motion.         (line  88)
* beginning-of-line:                     Text Lines.          (line  14)
* bell:                                  Beeping.             (line   6)
* bell character:                        Basic Char Syntax.   (line  27)
* benchmark.el:                          Profiling.           (line  50)
* benchmarking:                          Profiling.           (line  50)
* best practices:                        Tips.                (line   6)
* bidi-display-reordering:               Bidirectional Display.
                                                              (line  32)
* bidi-find-overridden-directionality:   Bidirectional Display.
                                                              (line 238)
* bidi-paragraph-direction:              Bidirectional Display.
                                                              (line 118)
* bidi-paragraph-separate-re:            Bidirectional Display.
                                                              (line  98)
* bidi-paragraph-start-re:               Bidirectional Display.
                                                              (line  92)
* bidi-string-mark-left-to-right:        Bidirectional Display.
                                                              (line 188)
* bidirectional class of characters:     Character Properties.
                                                              (line  57)
* bidirectional display:                 Bidirectional Display.
                                                              (line   6)
* bidirectional reordering:              Bidirectional Display.
                                                              (line  17)
* big endian:                            Bindat Spec.         (line  13)
* bignum range:                          Integer Basics.      (line  96)
* bignump:                               Predicates on Numbers.
                                                              (line  13)
* binary coding system:                  Coding System Basics.
                                                              (line  62)
* binary I/O in batch mode:              Input Functions.     (line  60)
* bindat-get-field:                      Bindat Functions.    (line  19)
* bindat-ip-to-string:                   Bindat Functions.    (line  53)
* bindat-length:                         Bindat Functions.    (line  38)
* bindat-pack:                           Bindat Functions.    (line  42)
* bindat-unpack:                         Bindat Functions.    (line  10)
* binding arguments:                     Argument List.       (line   6)
* binding local variables:               Local Variables.     (line   6)
* binding of a key:                      Keymap Basics.       (line   6)
* bitmap-spec-p:                         Face Attributes.     (line 229)
* bitmaps, fringe:                       Fringe Bitmaps.      (line   6)
* bitwise arithmetic:                    Bitwise Operations.  (line   6)
* blink-cursor-alist:                    Cursor Parameters.   (line  56)
* blink-matching-delay:                  Blinking.            (line  22)
* blink-matching-open:                   Blinking.            (line  27)
* blink-matching-paren:                  Blinking.            (line  15)
* blink-matching-paren-distance:         Blinking.            (line  18)
* blink-paren-function:                  Blinking.            (line   9)
* blinking parentheses:                  Blinking.            (line   6)
* bobp:                                  Near Point.          (line  61)
* body height of a window:               Window Sizes.        (line 144)
* body of a window:                      Window Sizes.        (line  23)
* body of function:                      Lambda Components.   (line  37)
* body size of a window:                 Window Sizes.        (line 185)
* body width of a window:                Window Sizes.        (line 162)
* bol in rx:                             Rx Constructs.       (line 312)
* bolp:                                  Near Point.          (line  72)
* bool-vector:                           Bool-Vectors.        (line  21)
* bool-vector length:                    Sequence Functions.  (line  14)
* bool-vector-count-consecutive:         Bool-Vectors.        (line  61)
* bool-vector-count-population:          Bool-Vectors.        (line  66)
* bool-vector-exclusive-or:              Bool-Vectors.        (line  31)
* bool-vector-intersection:              Bool-Vectors.        (line  41)
* bool-vector-not:                       Bool-Vectors.        (line  51)
* bool-vector-p:                         Bool-Vectors.        (line  25)
* bool-vector-set-difference:            Bool-Vectors.        (line  46)
* bool-vector-subsetp:                   Bool-Vectors.        (line  56)
* bool-vector-union:                     Bool-Vectors.        (line  36)
* Bool-vectors:                          Bool-Vectors.        (line   6)
* boolean:                               nil and t.           (line   6)
* booleanp:                              nil and t.           (line  36)
* bootstrapping Emacs:                   Building Emacs.      (line  44)
* border-color, a frame parameter:       Font and Color Parameters.
                                                              (line 112)
* border-width, a frame parameter:       Layout Parameters.   (line   9)
* bos in rx:                             Rx Constructs.       (line 320)
* bot in rx:                             Rx Constructs.       (line 320)
* bottom dividers:                       Window Dividers.     (line   6)
* bottom-divider-width, a frame parameter: Layout Parameters. (line  51)
* bottom-visible, a frame parameter:     Mouse Dragging Parameters.
                                                              (line  44)
* boundp:                                Void Variables.      (line  56)
* bow in rx:                             Rx Constructs.       (line 332)
* box diagrams, for lists:               Box Diagrams.        (line   6)
* break:                                 Debugger.            (line   6)
* breakpoints (Edebug):                  Breakpoints.         (line   6)
* bucket (in obarray):                   Creating Symbols.    (line  11)
* buffer:                                Buffers.             (line   6)
* buffer boundaries, indicating:         Fringe Indicators.   (line  16)
* buffer contents:                       Text.                (line  23)
* buffer display:                        Displaying Buffers.  (line   6)
* buffer display action alist:           Buffer Display Action Alists.
                                                              (line   6)
* buffer display action function:        Buffer Display Action Functions.
                                                              (line   6)
* buffer display action functions, precedence: Precedence of Action Functions.
                                                              (line   6)
* buffer display conventions:            The Zen of Buffer Display.
                                                              (line   6)
* buffer display display action:         Choosing Window.     (line  12)
* buffer file name:                      Buffer File Name.    (line   6)
* buffer gap:                            Buffer Gap.          (line   6)
* buffer input stream:                   Input Streams.       (line  11)
* buffer internals:                      Buffer Internals.    (line   6)
* buffer list:                           Buffer List.         (line   6)
* buffer modification:                   Buffer Modification. (line   6)
* buffer names:                          Buffer Names.        (line   6)
* buffer output stream:                  Output Streams.      (line  11)
* buffer portion as string:              Buffer Contents.     (line   6)
* buffer position:                       Positions.           (line   6)
* buffer text notation:                  Buffer Text Notation.
                                                              (line   6)
* buffer, read-only:                     Read Only Buffers.   (line   6)
* buffer-access-fontified-property:      Lazy Properties.     (line  29)
* buffer-access-fontify-functions:       Lazy Properties.     (line  14)
* buffer-auto-save-file-format:          Format Conversion Round-Trip.
                                                              (line 153)
* buffer-auto-save-file-name:            Auto-Saving.         (line  14)
* buffer-backed-up:                      Making Backups.      (line  22)
* buffer-base-buffer:                    Indirect Buffers.    (line  60)
* buffer-chars-modified-tick:            Buffer Modification. (line  55)
* buffer-disable-undo:                   Maintaining Undo.    (line  26)
* buffer-display-count:                  Buffers and Windows. (line  42)
* buffer-display-table:                  Active Display Table.
                                                              (line  24)
* buffer-display-time:                   Buffers and Windows. (line  47)
* buffer-enable-undo:                    Maintaining Undo.    (line  16)
* buffer-end:                            Point.               (line  50)
* buffer-end in rx:                      Rx Constructs.       (line 324)
* buffer-file-coding-system:             Encoding and I/O.    (line  20)
* buffer-file-format:                    Format Conversion Round-Trip.
                                                              (line 107)
* buffer-file-name:                      Buffer File Name.    (line  22)
* buffer-file-name <1>:                  Buffer File Name.    (line  13)
* buffer-file-number:                    Buffer File Name.    (line  43)
* buffer-file-truename:                  Buffer File Name.    (line  37)
* buffer-hash:                           Checksum/Hash.       (line  64)
* buffer-invisibility-spec:              Invisible Text.      (line  34)
* buffer-list:                           Buffer List.         (line  28)
* buffer-list, a frame parameter:        Buffer Parameters.   (line  38)
* buffer-list-update-hook:               Buffer List.         (line 139)
* buffer-list-update-hook <1>:           Standard Hooks.      (line  82)
* buffer-live-p:                         Killing Buffers.     (line  98)
* buffer-local variables:                Buffer-Local Variables.
                                                              (line   6)
* buffer-local variables in modes:       Major Mode Conventions.
                                                              (line 156)
* buffer-local-value:                    Creating Buffer-Local.
                                                              (line 111)
* buffer-local-variables:                Creating Buffer-Local.
                                                              (line 117)
* buffer-modified-p:                     Buffer Modification. (line  22)
* buffer-modified-tick:                  Buffer Modification. (line  50)
* buffer-name:                           Buffer Names.        (line  18)
* buffer-name-history:                   Minibuffer History.  (line 102)
* buffer-narrowed-p:                     Narrowing.           (line  53)
* buffer-offer-save:                     Killing Buffers.     (line  80)
* buffer-predicate, a frame parameter:   Buffer Parameters.   (line  30)
* buffer-quit-function:                  Standard Hooks.      (line  85)
* buffer-read-only:                      Read Only Buffers.   (line  27)
* buffer-save-without-query:             Killing Buffers.     (line  92)
* buffer-saved-size:                     Auto-Saving.         (line 173)
* buffer-size:                           Point.               (line  54)
* buffer-stale-function:                 Reverting.           (line  99)
* buffer-start in rx:                    Rx Constructs.       (line 320)
* buffer-string:                         Buffer Contents.     (line  43)
* buffer-substring:                      Buffer Contents.     (line   9)
* buffer-substring-filters:              Buffer Contents.     (line 106)
* buffer-substring-no-properties:        Buffer Contents.     (line  38)
* buffer-substring-with-bidi-context:    Bidirectional Display.
                                                              (line 273)
* buffer-swap-text:                      Swapping Text.       (line  26)
* buffer-undo-list:                      Undo.                (line  15)
* bufferp:                               Buffer Basics.       (line  40)
* bufferpos-to-filepos:                  Text Representations.
                                                              (line  82)
* buffers to display on frame:           Buffer Parameters.   (line   6)
* buffers without undo information:      Buffer Names.        (line  12)
* buffers, controlled in windows:        Buffers and Windows. (line   6)
* buffers, creating:                     Creating Buffers.    (line   6)
* buffers, killing:                      Killing Buffers.     (line   6)
* bugs:                                  Caveats.             (line  27)
* bugs in this manual:                   Caveats.             (line   6)
* build details:                         Building Emacs.      (line  74)
* building Emacs:                        Building Emacs.      (line   6)
* building lists:                        Building Lists.      (line   6)
* built-in function:                     What Is a Function.  (line  37)
* bury-buffer:                           Buffer List.         (line 101)
* butlast:                               List Elements.       (line 153)
* button (button property):              Button Properties.   (line  57)
* button buffer commands:                Button Buffer Commands.
                                                              (line   6)
* button properties:                     Button Properties.   (line   6)
* button types:                          Button Types.        (line   6)
* button-activate:                       Manipulating Buttons.
                                                              (line  28)
* button-at:                             Manipulating Buttons.
                                                              (line  47)
* button-down event:                     Button-Down Events.  (line   6)
* button-end:                            Manipulating Buttons.
                                                              (line  19)
* button-face, customization keyword:    Type Keywords.       (line  66)
* button-get:                            Manipulating Buttons.
                                                              (line  22)
* button-has-type-p:                     Manipulating Buttons.
                                                              (line  43)
* button-label:                          Manipulating Buttons.
                                                              (line  37)
* button-prefix, customization keyword:  Type Keywords.       (line  71)
* button-put:                            Manipulating Buttons.
                                                              (line  25)
* button-start:                          Manipulating Buttons.
                                                              (line  16)
* button-suffix, customization keyword:  Type Keywords.       (line  71)
* button-type:                           Manipulating Buttons.
                                                              (line  40)
* button-type-get:                       Manipulating Buttons.
                                                              (line  55)
* button-type-put:                       Manipulating Buttons.
                                                              (line  52)
* button-type-subtype-p:                 Manipulating Buttons.
                                                              (line  58)
* buttons in buffers:                    Buttons.             (line   6)
* byte compilation:                      Byte Compilation.    (line   6)
* byte compiler warnings, how to avoid:  Warning Tips.        (line   6)
* byte packing and unpacking:            Byte Packing.        (line   6)
* byte to string:                        Converting Representations.
                                                              (line  59)
* byte-boolean-vars:                     Variables with Restricted Values.
                                                              (line  22)
* byte-boolean-vars <1>:                 Writing Emacs Primitives.
                                                              (line 202)
* byte-code:                             Byte Compilation.    (line   6)
* byte-code function:                    Byte-Code Objects.   (line   6)
* byte-code object:                      Byte-Code Objects.   (line   6)
* byte-code-function-p:                  What Is a Function.  (line 136)
* byte-compile:                          Compilation Functions.
                                                              (line  34)
* byte-compile-debug:                    Compilation Functions.
                                                              (line  11)
* byte-compile-dynamic:                  Dynamic Loading.     (line  48)
* byte-compile-dynamic-docstrings:       Docs and Compilation.
                                                              (line  23)
* byte-compile-error-on-warn:            Compiler Errors.     (line  87)
* byte-compile-file:                     Compilation Functions.
                                                              (line  75)
* byte-compiler errors:                  Compiler Errors.     (line   6)
* byte-compiler warnings:                Compiler Errors.     (line  21)
* byte-compiling macros:                 Compiling Macros.    (line   6)
* byte-compiling require:                Named Features.      (line  51)
* byte-recompile-directory:              Compilation Functions.
                                                              (line 105)
* byte-to-position:                      Text Representations.
                                                              (line  68)
* byte-to-string:                        Converting Representations.
                                                              (line  58)
* bytes:                                 Strings and Characters.
                                                              (line   6)
* bytesize, in serial connections:       Serial Ports.        (line 116)
* C programming language:                C Dialect.           (line   6)
* C-c:                                   Prefix Keys.         (line  21)
* C-g:                                   Quitting.            (line   6)
* C-h:                                   Prefix Keys.         (line  19)
* C-M-x:                                 Instrumenting.       (line  10)
* C-x:                                   Prefix Keys.         (line  27)
* C-x 4:                                 Prefix Keys.         (line  34)
* C-x 5:                                 Prefix Keys.         (line  36)
* C-x 6:                                 Prefix Keys.         (line  38)
* C-x C-a C-m:                           Edebug Execution Modes.
                                                              (line  67)
* C-x <RET>:                             Prefix Keys.         (line  31)
* C-x t:                                 Prefix Keys.         (line  40)
* C-x v:                                 Prefix Keys.         (line  43)
* C-x X =:                               Coverage Testing.    (line  23)
* caaaar:                                List Elements.       (line 146)
* caaadr:                                List Elements.       (line 146)
* caaar:                                 List Elements.       (line 146)
* caadar:                                List Elements.       (line 146)
* caaddr:                                List Elements.       (line 146)
* caadr:                                 List Elements.       (line 146)
* caar:                                  List Elements.       (line 133)
* cadaar:                                List Elements.       (line 146)
* cadadr:                                List Elements.       (line 146)
* cadar:                                 List Elements.       (line 146)
* caddar:                                List Elements.       (line 146)
* cadddr:                                List Elements.       (line 146)
* caddr:                                 List Elements.       (line 146)
* cadr:                                  List Elements.       (line 136)
* calendrical computations:              Time Calculations.   (line   6)
* calendrical information:               Time Conversion.     (line   6)
* call stack:                            Internals of Debugger.
                                                              (line  21)
* call-interactively:                    Interactive Call.    (line  37)
* call-process:                          Synchronous Processes.
                                                              (line  29)
* call-process, command-line arguments from minibuffer: Shell Arguments.
                                                              (line  40)
* call-process-region:                   Synchronous Processes.
                                                              (line 192)
* call-process-shell-command:            Synchronous Processes.
                                                              (line 241)
* call-shell-region:                     Synchronous Processes.
                                                              (line 258)
* called-interactively-p:                Distinguish Interactive.
                                                              (line  26)
* calling a function:                    Calling Functions.   (line   6)
* cancel-change-group:                   Atomic Changes.      (line  52)
* cancel-debug-on-entry:                 Function Debugging.  (line  51)
* cancel-debug-on-variable-change:       Variable Debugging.  (line  20)
* cancel-timer:                          Timers.              (line 135)
* canonical character height:            Frame Font.          (line  12)
* canonical character width:             Frame Font.          (line  12)
* capitalization:                        Case Conversion.     (line  54)
* capitalize:                            Case Conversion.     (line  53)
* capitalize-region:                     Case Changes.        (line  12)
* capitalize-word:                       Case Changes.        (line  49)
* caption bar:                           Frame Layout.        (line 100)
* car:                                   List Elements.       (line   6)
* car-safe:                              List Elements.       (line  34)
* case conversion in buffers:            Case Changes.        (line   6)
* case conversion in Lisp:               Case Conversion.     (line   6)
* case in replacements:                  Replacing Match.     (line   9)
* case-fold-search:                      Searching and Case.  (line  25)
* case-replace:                          Searching and Case.  (line  30)
* case-table-p:                          Case Tables.         (line  59)
* catch:                                 Catch and Throw.     (line  60)
* categories of characters:              Categories.          (line   6)
* category (overlay property):           Overlay Properties.  (line  83)
* category (text property):              Special Properties.  (line  15)
* category in rx:                        Rx Constructs.       (line 252)
* category set:                          Categories.          (line  23)
* category table:                        Categories.          (line  12)
* category, regexp search for:           Regexp Backslash.    (line 140)
* category-docstring:                    Categories.          (line  63)
* category-set-mnemonics:                Categories.          (line 122)
* category-table:                        Categories.          (line  77)
* category-table-p:                      Categories.          (line  80)
* cdaaar:                                List Elements.       (line 146)
* cdaadr:                                List Elements.       (line 146)
* cdaar:                                 List Elements.       (line 146)
* cdadar:                                List Elements.       (line 146)
* cdaddr:                                List Elements.       (line 146)
* cdadr:                                 List Elements.       (line 146)
* cdar:                                  List Elements.       (line 139)
* cddaar:                                List Elements.       (line 146)
* cddadr:                                List Elements.       (line 146)
* cddar:                                 List Elements.       (line 146)
* cdddar:                                List Elements.       (line 146)
* cddddr:                                List Elements.       (line 146)
* cdddr:                                 List Elements.       (line 146)
* cddr:                                  List Elements.       (line 142)
* cdr:                                   List Elements.       (line  20)
* cdr-safe:                              List Elements.       (line  47)
* ceiling:                               Numeric Conversions. (line  53)
* centering point:                       Textual Scrolling.   (line 195)
* change hooks:                          Change Hooks.        (line   6)
* change hooks for a character:          Special Properties.  (line 290)
* change load-path at configure time:    Building Emacs.      (line 117)
* change-major-mode-after-body-hook:     Mode Hooks.          (line  51)
* change-major-mode-hook:                Creating Buffer-Local.
                                                              (line 189)
* changing key bindings:                 Changing Key Bindings.
                                                              (line   6)
* changing text properties:              Changing Properties. (line   6)
* changing to another buffer:            Current Buffer.      (line   6)
* changing window size:                  Resizing Windows.    (line   6)
* char in rx:                            Rx Constructs.       (line 124)
* char-after:                            Near Point.          (line  13)
* char-before:                           Near Point.          (line  26)
* char-category-set:                     Categories.          (line 112)
* char-charset:                          Character Sets.      (line  38)
* char-code-property-description:        Character Properties.
                                                              (line 212)
* char-displayable-p:                    Fontsets.            (line 136)
* char-equal:                            Text Comparison.     (line   6)
* char-from-name:                        Character Codes.     (line  41)
* char-or-string-p:                      Predicates for Strings.
                                                              (line  16)
* char-property-alias-alist:             Examining Properties.
                                                              (line  56)
* char-script-table:                     Character Properties.
                                                              (line 232)
* char-syntax:                           Syntax Table Functions.
                                                              (line  66)
* char-table length:                     Sequence Functions.  (line  14)
* char-table-extra-slot:                 Char-Tables.         (line  72)
* char-table-p:                          Char-Tables.         (line  55)
* char-table-parent:                     Char-Tables.         (line  65)
* char-table-range:                      Char-Tables.         (line  84)
* char-table-subtype:                    Char-Tables.         (line  59)
* char-tables:                           Char-Tables.         (line   6)
* char-to-string:                        String Conversion.   (line  65)
* char-width:                            Size of Displayed Text.
                                                              (line  10)
* char-width-table:                      Character Properties.
                                                              (line 240)
* character alternative (in regexp):     Regexp Special.      (line  72)
* character arrays:                      Strings and Characters.
                                                              (line   6)
* character case:                        Case Conversion.     (line   6)
* character categories:                  Categories.          (line   6)
* character class in rx:                 Rx Constructs.       (line 125)
* character class in rx <1>:             Rx Constructs.       (line 159)
* character classes in regexp:           Char Classes.        (line   6)
* character code conversion:             Coding System Basics.
                                                              (line   6)
* character codepoint:                   Text Representations.
                                                              (line  10)
* character codes:                       Character Codes.     (line   6)
* character event:                       Keyboard Events.     (line   6)
* character insertion:                   Commands for Insertion.
                                                              (line  17)
* character printing:                    Describing Characters.
                                                              (line  29)
* character properties:                  Character Properties.
                                                              (line   6)
* character set, searching:              Scanning Charsets.   (line   6)
* character sets:                        Character Sets.      (line   6)
* character to string:                   String Conversion.   (line  66)
* character translation tables:          Translation of Characters.
                                                              (line   6)
* character width on display:            Size of Displayed Text.
                                                              (line   6)
* characterp:                            Character Codes.     (line  21)
* characters:                            Strings and Characters.
                                                              (line   6)
* characters for interactive codes:      Interactive Codes.   (line   6)
* characters, multi-byte:                Non-ASCII Characters.
                                                              (line   6)
* characters, representation in buffers and strings: Text Representations.
                                                              (line  20)
* charset:                               Character Sets.      (line   6)
* charset, coding systems to encode:     Lisp and Coding Systems.
                                                              (line  80)
* charset, text property:                Explicit Encoding.   (line 110)
* charset-after:                         Scanning Charsets.   (line  12)
* charset-list:                          Character Sets.      (line  27)
* charset-plist:                         Character Sets.      (line  48)
* charset-priority-list:                 Character Sets.      (line  30)
* charsetp:                              Character Sets.      (line  23)
* charsets supported by a coding system: Lisp and Coding Systems.
                                                              (line 137)
* check-coding-system:                   Lisp and Coding Systems.
                                                              (line  18)
* check-coding-systems-region:           Lisp and Coding Systems.
                                                              (line  84)
* checkdoc:                              Tips.                (line  11)
* checkdoc-current-buffer:               Tips.                (line  11)
* checkdoc-file:                         Tips.                (line  11)
* checkdoc-minor-mode:                   Documentation Tips.  (line   6)
* checkdoc-package-keywords:             Library Headers.     (line  84)
* checkdoc-package-keywords-flag:        Library Headers.     (line  84)
* child frames:                          Child Frames.        (line   6)
* child process:                         Processes.           (line   6)
* child window:                          Windows and Frames.  (line  51)
* child-frame-parameters, a buffer display action alist entry: Buffer Display Action Alists.
                                                              (line 180)
* choice, customization types:           Splicing into Lists. (line  27)
* cipher, AEAD:                          GnuTLS Cryptography. (line   6)
* cipher, symmetric:                     GnuTLS Cryptography. (line   6)
* circular list:                         Cons Cells.          (line  34)
* circular structure, read syntax:       Circular Objects.    (line   6)
* cl:                                    Lisp History.        (line  28)
* CL note--allocate more storage:         Garbage Collection.  (line  51)
* CL note--case of letters:               Symbol Type.         (line  38)
* CL note--default optional arg:          Argument List.       (line  46)
* CL note--interning existing symbol:     Creating Symbols.    (line 116)
* CL note--lack union, intersection:      Sets And Lists.      (line  13)
* CL note--no continuable errors:         Signaling Errors.    (line  98)
* CL note--no setf functions:             Adding Generalized Variables.
                                                              (line  80)
* CL note--only throw in Emacs:           Catch and Throw.     (line  54)
* CL note--rplaca vs setcar:              Modifying Lists.     (line  14)
* CL note--special forms compared:        Special Forms.       (line  96)
* CL note--symbol in obarrays:            Creating Symbols.    (line  65)
* cl-call-next-method:                   Generic Functions.   (line 208)
* cl-defgeneric:                         Generic Functions.   (line  49)
* cl-defmethod:                          Generic Functions.   (line  71)
* cl-next-method-p:                      Generic Functions.   (line 216)
* cl-old-struct-compat-mode:             Backward Compatibility.
                                                              (line  12)
* classification of file types:          Kinds of Files.      (line   6)
* classifying events:                    Classifying Events.  (line   6)
* cleanup forms:                         Cleanups.            (line  13)
* clear-abbrev-table:                    Abbrev Tables.       (line  18)
* clear-image-cache:                     Image Cache.         (line  39)
* clear-message-function:                Displaying Messages. (line  72)
* clear-string:                          Modifying Strings.   (line  29)
* clear-this-command-keys:               Command Loop Info.   (line  94)
* clear-visited-file-modtime:            Modification Time.   (line  33)
* click event:                           Click Events.        (line   6)
* clickable buttons in buffers:          Buttons.             (line   6)
* clickable text:                        Clickable Text.      (line   6)
* clipboard:                             Window System Selections.
                                                              (line   6)
* clipboard support (for MS-Windows):    Window System Selections.
                                                              (line  57)
* clone-indirect-buffer:                 Indirect Buffers.    (line  48)
* clone-of, a window parameter:          Window Parameters.   (line 104)
* CLOS:                                  Generic Functions.   (line  20)
* closepath:                             SVG Images.          (line 190)
* closure:                               Closures.            (line  13)
* closures, example of using:            Lexical Binding.     (line  50)
* clrhash:                               Hash Access.         (line  28)
* coded character set:                   Character Sets.      (line   6)
* codepoint, largest value:              Character Codes.     (line  32)
* codes, interactive, description of:    Interactive Codes.   (line   6)
* codespace:                             Text Representations.
                                                              (line  10)
* coding conventions in Emacs Lisp:      Coding Conventions.  (line   6)
* coding standards:                      Tips.                (line   6)
* coding system:                         Coding Systems.      (line   6)
* coding system for operation:           Specifying Coding Systems.
                                                              (line   6)
* coding system, automatically determined: Default Coding Systems.
                                                              (line   6)
* coding system, validity check:         Lisp and Coding Systems.
                                                              (line  18)
* coding systems for encoding a string:  Lisp and Coding Systems.
                                                              (line  73)
* coding systems for encoding region:    Lisp and Coding Systems.
                                                              (line  64)
* coding systems, priority:              Specifying Coding Systems.
                                                              (line  67)
* coding-system-aliases:                 Coding System Basics.
                                                              (line  91)
* coding-system-change-eol-conversion:   Lisp and Coding Systems.
                                                              (line  47)
* coding-system-change-text-conversion:  Lisp and Coding Systems.
                                                              (line  57)
* coding-system-charset-list:            Lisp and Coding Systems.
                                                              (line 137)
* coding-system-eol-type:                Lisp and Coding Systems.
                                                              (line  25)
* coding-system-for-read:                Specifying Coding Systems.
                                                              (line   9)
* coding-system-for-write:               Specifying Coding Systems.
                                                              (line  34)
* coding-system-get:                     Coding System Basics.
                                                              (line  74)
* coding-system-list:                    Lisp and Coding Systems.
                                                              (line   8)
* coding-system-p:                       Lisp and Coding Systems.
                                                              (line  14)
* coding-system-priority-list:           Specifying Coding Systems.
                                                              (line  73)
* coding-system-require-warning:         Specifying Coding Systems.
                                                              (line  45)
* collapse-delayed-warnings:             Delayed Warnings.    (line  39)
* color names:                           Color Names.         (line   6)
* color-defined-p:                       Color Names.         (line  25)
* color-gray-p:                          Color Names.         (line  61)
* color-supported-p:                     Color Names.         (line  49)
* color-values:                          Color Names.         (line  67)
* colors on text terminals:              Text Terminal Colors.
                                                              (line   6)
* column width:                          Frame Font.          (line  12)
* columns:                               Columns.             (line   6)
* COM1:                                  Serial Ports.        (line   6)
* combine-after-change-calls:            Change Hooks.        (line  56)
* combine-and-quote-strings:             Shell Arguments.     (line  67)
* combine-change-calls:                  Change Hooks.        (line  78)
* combining conditions:                  Combining Conditions.
                                                              (line   6)
* command:                               What Is a Function.  (line  64)
* command descriptions:                  A Sample Function Description.
                                                              (line   6)
* command history:                       Command History.     (line   6)
* command in keymap:                     Key Lookup.          (line  42)
* command loop:                          Command Loop.        (line   6)
* command loop variables:                Command Loop Info.   (line   6)
* command loop, recursive:               Recursive Editing.   (line   6)
* command-debug-status:                  Internals of Debugger.
                                                              (line 101)
* command-error-function:                Processing of Errors.
                                                              (line  22)
* command-execute:                       Interactive Call.    (line  79)
* command-history:                       Command History.     (line  14)
* command-line:                          Command-Line Arguments.
                                                              (line  14)
* command-line arguments:                Command-Line Arguments.
                                                              (line   6)
* command-line options:                  Command-Line Arguments.
                                                              (line  29)
* command-line-args:                     Command-Line Arguments.
                                                              (line  64)
* command-line-args-left:                Command-Line Arguments.
                                                              (line  68)
* command-line-functions:                Command-Line Arguments.
                                                              (line  72)
* command-line-processed:                Command-Line Arguments.
                                                              (line  19)
* command-remapping:                     Remapping Commands.  (line  42)
* command-switch-alist:                  Command-Line Arguments.
                                                              (line  28)
* commandp:                              Interactive Call.    (line  17)
* commandp example:                      High-Level Completion.
                                                              (line  97)
* commands, defining:                    Defining Commands.   (line   6)
* comment style:                         Syntax Flags.        (line  46)
* comment syntax:                        Syntax Class Table.  (line 110)
* comment-auto-fill-only-comments:       Auto Filling.        (line  36)
* comment-end-can-be-escaped:            Control Parsing.     (line  20)
* commentary, in a Lisp library:         Library Headers.     (line 140)
* comments:                              Comments.            (line   6)
* comments, Lisp convention for:         Comment Tips.        (line   6)
* Common Lisp:                           Lisp History.        (line  11)
* compare-buffer-substrings:             Comparing Text.      (line   9)
* compare-strings:                       Text Comparison.     (line 199)
* compare-window-configurations:         Window Configurations.
                                                              (line  70)
* comparing buffer text:                 Comparing Text.      (line   6)
* comparing file modification time:      Modification Time.   (line   6)
* comparing numbers:                     Comparison of Numbers.
                                                              (line   6)
* comparing time values:                 Time Calculations.   (line   6)
* compatibility, between modules and Emacs: Module Initialization.
                                                              (line  41)
* compilation (Emacs Lisp):              Byte Compilation.    (line   6)
* compilation functions:                 Compilation Functions.
                                                              (line   6)
* compile-defun:                         Compilation Functions.
                                                              (line  65)
* compile-time constant:                 Eval During Compile. (line  42)
* compiled function:                     Byte-Code Objects.   (line   6)
* compiler errors:                       Compiler Errors.     (line   6)
* complete key:                          Keymap Basics.       (line   6)
* completing-read:                       Minibuffer Completion.
                                                              (line   9)
* completing-read-function:              Minibuffer Completion.
                                                              (line  99)
* completion:                            Completion.          (line   6)
* completion styles:                     Completion Variables.
                                                              (line   9)
* completion table:                      Basic Completion.    (line  14)
* completion table, modifying:           Basic Completion.    (line 187)
* completion tables, combining:          Basic Completion.    (line 187)
* completion, file name:                 File Name Completion.
                                                              (line   6)
* completion-at-point:                   Completion in Buffers.
                                                              (line   6)
* completion-at-point-functions:         Completion in Buffers.
                                                              (line  13)
* completion-auto-help:                  Completion Commands. (line  86)
* completion-boundaries:                 Basic Completion.    (line 139)
* completion-category-overrides:         Completion Variables.
                                                              (line  49)
* completion-extra-properties:           Completion Variables.
                                                              (line  69)
* completion-ignore-case:                Basic Completion.    (line 160)
* completion-ignored-extensions:         File Name Completion.
                                                              (line  61)
* completion-in-region:                  Completion in Buffers.
                                                              (line  92)
* completion-regexp-list:                Basic Completion.    (line 168)
* completion-styles:                     Completion Variables.
                                                              (line   9)
* completion-styles-alist:               Completion Variables.
                                                              (line  15)
* completion-table-case-fold:            Basic Completion.    (line 187)
* completion-table-dynamic:              Programmed Completion.
                                                              (line  92)
* completion-table-in-turn:              Basic Completion.    (line 187)
* completion-table-merge:                Basic Completion.    (line 187)
* completion-table-subvert:              Basic Completion.    (line 187)
* completion-table-with-cache:           Programmed Completion.
                                                              (line 116)
* completion-table-with-predicate:       Basic Completion.    (line 187)
* completion-table-with-quoting:         Basic Completion.    (line 187)
* completion-table-with-terminator:      Basic Completion.    (line 187)
* complex arguments:                     Minibuffers.         (line   6)
* complex command:                       Command History.     (line   6)
* composite types (customization):       Composite Types.     (line   6)
* composition (text property):           Special Properties.  (line 376)
* composition property, and point display: Adjusting Point.   (line   6)
* compute-motion:                        Screen Lines.        (line 110)
* concat:                                Creating Strings.    (line 105)
* concatenating bidirectional strings:   Bidirectional Display.
                                                              (line 158)
* concatenating lists:                   Rearrangement.       (line  16)
* concatenating strings:                 Creating Strings.    (line 106)
* concurrency:                           Threads.             (line   6)
* cond:                                  Conditionals.        (line  52)
* condition name:                        Error Symbols.       (line   6)
* condition-case:                        Handling Errors.     (line  92)
* condition-case-unless-debug:           Handling Errors.     (line  67)
* condition-mutex:                       Condition Variables. (line  65)
* condition-name:                        Condition Variables. (line  62)
* condition-notify:                      Condition Variables. (line  52)
* condition-variable-p:                  Condition Variables. (line  36)
* condition-wait:                        Condition Variables. (line  40)
* conditional evaluation:                Conditionals.        (line   6)
* conditional selection of windows:      Cyclic Window Ordering.
                                                              (line 146)
* confirm-kill-processes:                Query Before Exit.   (line  27)
* connection local variables:            Connection Local Variables.
                                                              (line   6)
* connection-local-criteria-alist:       Connection Local Variables.
                                                              (line  78)
* connection-local-profile-alist:        Connection Local Variables.
                                                              (line  37)
* connection-local-set-profile-variables: Connection Local Variables.
                                                              (line  10)
* connection-local-set-profiles:         Connection Local Variables.
                                                              (line  42)
* cons:                                  Building Lists.      (line  11)
* cons cells:                            Building Lists.      (line   6)
* cons-cells-consed:                     Memory Usage.        (line  13)
* consing:                               Building Lists.      (line  25)
* consp:                                 List-related Predicates.
                                                              (line  11)
* constant variables:                    Constant Variables.  (line   6)
* constant variables <1>:                Defining Variables.  (line  85)
* constrain-to-field:                    Fields.              (line  68)
* content directory, package:            Packaging Basics.    (line  47)
* continuation lines:                    Truncation.          (line   6)
* continue-process:                      Signals to Processes.
                                                              (line  85)
* control character key constants:       Changing Key Bindings.
                                                              (line  20)
* control character printing:            Describing Characters.
                                                              (line  29)
* control characters:                    Ctl-Char Syntax.     (line   6)
* control characters in display:         Usual Display.       (line  66)
* control characters, reading:           Quoted Character Input.
                                                              (line  12)
* control structures:                    Control Structures.  (line   6)
* Control-X-prefix:                      Prefix Keys.         (line  27)
* controller part, model/view/controller: Abstract Display Example.
                                                              (line  63)
* controlling terminal:                  Suspending Emacs.    (line  13)
* controlling-tty-p:                     Suspending Emacs.    (line 107)
* conventions for writing major modes:   Major Mode Conventions.
                                                              (line   6)
* conventions for writing minor modes:   Minor Mode Conventions.
                                                              (line   6)
* conversion of strings:                 String Conversion.   (line   6)
* convert buffer position to file byte:  Text Representations.
                                                              (line  79)
* convert file byte to buffer position:  Text Representations.
                                                              (line  79)
* convert sequence to another type:      Sequence Functions.  (line 591)
* convert-standard-filename:             Standard File Names. (line  42)
* converting file names from/to MS-Windows syntax: File Names.
                                                              (line  19)
* converting numbers:                    Numeric Conversions. (line   6)
* coordinate, relative to frame:         Coordinates and Windows.
                                                              (line   6)
* coordinates-in-window-p:               Coordinates and Windows.
                                                              (line  70)
* copy-abbrev-table:                     Abbrev Tables.       (line  22)
* copy-alist:                            Association Lists.   (line 187)
* copy-category-table:                   Categories.          (line  87)
* copy-directory:                        Create/Delete Dirs.  (line  23)
* copy-file:                             Changing Files.      (line 116)
* copy-hash-table:                       Other Hash.          (line  11)
* copy-keymap:                           Creating Keymaps.    (line  39)
* copy-marker:                           Creating Markers.    (line  52)
* copy-overlay:                          Managing Overlays.   (line  85)
* copy-region-as-kill:                   Kill Functions.      (line  43)
* copy-sequence:                         Sequence Functions.  (line  65)
* copy-syntax-table:                     Syntax Table Functions.
                                                              (line  18)
* copy-tree:                             Building Lists.      (line 149)
* copying alists:                        Association Lists.   (line 188)
* copying bidirectional text, preserve visual order: Bidirectional Display.
                                                              (line 260)
* copying files:                         Changing Files.      (line   6)
* copying lists:                         Building Lists.      (line  62)
* copying sequences:                     Sequence Functions.  (line  66)
* copying strings:                       Creating Strings.    (line 106)
* copying vectors:                       Vector Functions.    (line  33)
* copysign:                              Float Basics.        (line  78)
* copy_string_contents:                  Module Values.       (line 122)
* cos:                                   Math Functions.      (line  10)
* count-lines:                           Text Lines.          (line  75)
* count-loop:                            A Sample Function Description.
                                                              (line  66)
* count-screen-lines:                    Screen Lines.        (line  58)
* count-words:                           Text Lines.          (line  83)
* counting columns:                      Columns.             (line   6)
* counting set bits:                     Bitwise Operations.  (line 173)
* coverage testing:                      Test Coverage.       (line   6)
* coverage testing (Edebug):             Coverage Testing.    (line   6)
* create subprocess:                     Subprocess Creation. (line   6)
* create-file-buffer:                    Subroutines of Visiting.
                                                              (line  10)
* create-fontset-from-fontset-spec:      Fontsets.            (line  13)
* create-image:                          Defining Images.     (line   9)
* create-lockfiles:                      File Locks.          (line  54)
* creating buffers:                      Creating Buffers.    (line   6)
* creating hash tables:                  Creating Hash.       (line   6)
* creating keymaps:                      Creating Keymaps.    (line   6)
* creating markers:                      Creating Markers.    (line   6)
* creating strings:                      Creating Strings.    (line   6)
* creating, copying and deleting directories: Create/Delete Dirs.
                                                              (line   6)
* cryptographic hash:                    Checksum/Hash.       (line   6)
* cryptographic hash <1>:                GnuTLS Cryptography. (line   6)
* ctl-arrow:                             Usual Display.       (line  65)
* ctl-x-4-map:                           Prefix Keys.         (line  34)
* ctl-x-5-map:                           Prefix Keys.         (line  36)
* ctl-x-map:                             Prefix Keys.         (line  27)
* ctl-x-r-map:                           Standard Keymaps.    (line  40)
* curly quotes:                          Keys in Documentation.
                                                              (line  47)
* curly quotes <1>:                      Text Quoting Style.  (line  30)
* curly quotes <2>:                      Documentation Tips.  (line  95)
* curly quotes, in formatted messages:   Formatting Strings.  (line  32)
* current binding:                       Local Variables.     (line  29)
* current buffer:                        Current Buffer.      (line   6)
* current buffer mark:                   The Mark.            (line  53)
* current buffer point and mark (Edebug): Edebug Display Update.
                                                              (line  22)
* current buffer position:               Point.               (line  32)
* current command:                       Command Loop Info.   (line  34)
* current stack frame:                   Backtraces.          (line  17)
* current-active-maps:                   Active Keymaps.      (line  58)
* current-bidi-paragraph-direction:      Bidirectional Display.
                                                              (line 129)
* current-buffer:                        Current Buffer.      (line  17)
* current-case-table:                    Case Tables.         (line  69)
* current-column:                        Columns.             (line  22)
* current-fill-column:                   Margins.             (line  50)
* current-frame-configuration:           Frame Configurations.
                                                              (line  10)
* current-global-map:                    Controlling Active Maps.
                                                              (line  16)
* current-idle-time:                     Idle Timers.         (line  61)
* current-indentation:                   Primitive Indent.    (line  10)
* current-input-method:                  Input Methods.       (line  17)
* current-input-mode:                    Input Modes.         (line  34)
* current-justification:                 Filling.             (line 123)
* current-kill:                          Low-Level Kill Ring. (line  11)
* current-left-margin:                   Margins.             (line  43)
* current-local-map:                     Controlling Active Maps.
                                                              (line  27)
* current-message:                       Displaying Messages. (line 135)
* current-minor-mode-maps:               Controlling Active Maps.
                                                              (line  47)
* current-prefix-arg:                    Prefix Command Arguments.
                                                              (line  85)
* current-thread:                        Basic Thread Functions.
                                                              (line  69)
* current-time:                          Time of Day.         (line  74)
* current-time-string:                   Time of Day.         (line  54)
* current-time-zone:                     Time Zone Rules.     (line  34)
* current-window-configuration:          Window Configurations.
                                                              (line  19)
* current-word:                          Buffer Contents.     (line 115)
* currying:                              Calling Functions.   (line  82)
* cursor:                                Window Point.        (line  25)
* cursor (text property):                Special Properties.  (line 211)
* cursor position for display properties and overlays: Special Properties.
                                                              (line 236)
* cursor, and frame parameters:          Cursor Parameters.   (line   6)
* cursor, fringe:                        Fringe Cursors.      (line   6)
* cursor-color, a frame parameter:       Font and Color Parameters.
                                                              (line 108)
* cursor-in-echo-area:                   Echo Area Customization.
                                                              (line   8)
* cursor-in-non-selected-windows:        Cursor Parameters.   (line  36)
* cursor-intangible (text property):     Special Properties.  (line 196)
* cursor-intangible-mode:                Special Properties.  (line 196)
* cursor-sensor-functions (text property): Special Properties.
                                                              (line 364)
* cursor-sensor-inhibit:                 Special Properties.  (line 200)
* cursor-sensor-mode:                    Special Properties.  (line 364)
* cursor-type:                           Cursor Parameters.   (line  26)
* cursor-type <1>:                       Cursor Parameters.   (line  29)
* cursor-type, a frame parameter:        Cursor Parameters.   (line   8)
* curved quotes:                         Keys in Documentation.
                                                              (line  47)
* curved quotes <1>:                     Text Quoting Style.  (line  30)
* curved quotes <2>:                     Documentation Tips.  (line  95)
* curved quotes, in formatted messages:  Formatting Strings.  (line  32)
* curveto:                               SVG Images.          (line 224)
* cust-print:                            Printing in Edebug.  (line   6)
* custom %-sequence in format:           Custom Format Strings.
                                                              (line   6)
* custom format string:                  Custom Format Strings.
                                                              (line   6)
* custom themes:                         Custom Themes.       (line   6)
* custom-add-frequent-value:             Variable Definitions.
                                                              (line 182)
* custom-group property:                 Group Definitions.   (line  51)
* custom-initialize-delay:               Building Emacs.      (line 137)
* custom-known-themes:                   Custom Themes.       (line  74)
* custom-reevaluate-setting:             Variable Definitions.
                                                              (line 198)
* custom-set-faces:                      Applying Customizations.
                                                              (line  36)
* custom-set-variables:                  Applying Customizations.
                                                              (line  13)
* custom-theme-p:                        Custom Themes.       (line  68)
* custom-theme-set-faces:                Custom Themes.       (line  47)
* custom-theme-set-variables:            Custom Themes.       (line  37)
* custom-unlispify-remove-prefixes:      Group Definitions.   (line  57)
* custom-variable-history:               Minibuffer History.  (line 120)
* custom-variable-p:                     Variable Definitions.
                                                              (line 211)
* customizable variables, how to define: Variable Definitions.
                                                              (line   6)
* customization groups, defining:        Group Definitions.   (line   6)
* customization item:                    Customization.       (line   6)
* customization keywords:                Common Keywords.     (line   6)
* customization types:                   Customization Types. (line   6)
* customization types, define new:       Defining New Types.  (line   6)
* customize-package-emacs-version-alist: Common Keywords.     (line 128)
* cyclic ordering of windows:            Cyclic Window Ordering.
                                                              (line   6)
* cygwin-convert-file-name-from-windows: File Names.          (line  19)
* cygwin-convert-file-name-to-windows:   File Names.          (line  19)
* data type:                             Lisp Data Types.     (line   6)
* data-directory:                        Help Functions.      (line 121)
* datagrams:                             Datagrams.           (line   6)
* date-days-in-month:                    Time Calculations.   (line  49)
* date-leap-year-p:                      Time Calculations.   (line  46)
* date-ordinal-to-time:                  Time Calculations.   (line  53)
* date-to-time:                          Time Parsing.        (line  10)
* deactivate-mark:                       The Mark.            (line 147)
* deactivate-mark <1>:                   The Mark.            (line 162)
* deactivate-mark-hook:                  The Mark.            (line 175)
* debug:                                 Invoking the Debugger.
                                                              (line   9)
* debug-ignored-errors:                  Error Debugging.     (line  39)
* debug-on-entry:                        Function Debugging.  (line  13)
* debug-on-error:                        Error Debugging.     (line  17)
* debug-on-error use:                    Processing of Errors.
                                                              (line  31)
* debug-on-event:                        Error Debugging.     (line  85)
* debug-on-message:                      Error Debugging.     (line  93)
* debug-on-next-call:                    Internals of Debugger.
                                                              (line  85)
* debug-on-quit:                         Infinite Loops.      (line  21)
* debug-on-signal:                       Error Debugging.     (line  63)
* debug-on-variable-change:              Variable Debugging.  (line  10)
* debugger:                              Internals of Debugger.
                                                              (line   9)
* debugger command list:                 Debugger Commands.   (line   6)
* debugger for Emacs Lisp:               Debugger.            (line   6)
* debugger, explicit entry:              Explicit Debug.      (line   6)
* debugger-bury-or-kill:                 Using Debugger.      (line  13)
* debugger-stack-frame-as-list:          Internals of Debugger.
                                                              (line  61)
* debugging changes to variables:        Variable Debugging.  (line   6)
* debugging errors:                      Error Debugging.     (line   6)
* debugging invalid Lisp syntax:         Syntax Errors.       (line   6)
* debugging lisp programs:               Debugging.           (line   6)
* debugging specific functions:          Function Debugging.  (line   6)
* declare:                               Declare Form.        (line   6)
* declare <1>:                           Declare Form.        (line  10)
* declare-function:                      Declaring Functions. (line   6)
* declare-function <1>:                  Declaring Functions. (line  38)
* declaring functions:                   Declaring Functions. (line   6)
* decode process output:                 Decoding Output.     (line   6)
* decode-char:                           Character Sets.      (line  70)
* decode-coding-inserted-region:         Explicit Encoding.   (line 117)
* decode-coding-region:                  Explicit Encoding.   (line  69)
* decode-coding-string:                  Explicit Encoding.   (line  93)
* decode-time:                           Time Conversion.     (line  62)
* decoded-time-add:                      Time Conversion.     (line 132)
* decoding file formats:                 Format Conversion.   (line   6)
* decoding in coding systems:            Explicit Encoding.   (line   6)
* decrement field of register:           Cons Cell Type.      (line   6)
* dedicated window:                      Dedicated Windows.   (line   6)
* dedicated, a buffer display action alist entry: Buffer Display Action Alists.
                                                              (line 154)
* def-edebug-spec:                       Instrumenting Macro Calls.
                                                              (line  44)
* defadvice:                             Porting Old Advice.  (line   6)
* defalias:                              Defining Functions.  (line  54)
* defalias-fset-function property:       Defining Functions.  (line  62)
* default argument string:               Interactive Codes.   (line  20)
* default character height:              Frame Font.          (line   6)
* default character size:                Frame Font.          (line   6)
* default character width:               Frame Font.          (line   6)
* default coding system:                 Default Coding Systems.
                                                              (line   6)
* default coding system, functions to determine: Default Coding Systems.
                                                              (line  97)
* default filter function of a process:  Filter Functions.    (line   6)
* default font:                          Frame Font.          (line   6)
* default height of character:           Frame Font.          (line   6)
* default init file:                     Init File.           (line  31)
* default key binding:                   Format of Keymaps.   (line  32)
* default sentinel function of a process: Sentinels.          (line  14)
* default value:                         Default Value.       (line   6)
* default value of char-table:           Char-Tables.         (line  34)
* default width of character:            Frame Font.          (line   6)
* default-boundp:                        Default Value.       (line  27)
* default-directory:                     File Name Expansion. (line  81)
* default-file-modes:                    Changing Files.      (line 240)
* default-font-height:                   Low-Level Font.      (line 295)
* default-font-width:                    Low-Level Font.      (line 290)
* default-frame-alist:                   Initial Parameters.  (line  47)
* default-input-method:                  Input Methods.       (line  23)
* default-justification:                 Filling.             (line 117)
* default-minibuffer-frame:              Minibuffers and Frames.
                                                              (line  27)
* default-process-coding-system:         Default Coding Systems.
                                                              (line  88)
* default-text-properties:               Examining Properties.
                                                              (line  69)
* default-toplevel-value:                Default Value.       (line  92)
* default-value:                         Default Value.       (line  21)
* default.el:                            Startup Summary.     (line  86)
* defconst:                              Defining Variables.  (line  85)
* defcustom:                             Variable Definitions.
                                                              (line  14)
* deferred evaluation:                   Deferred Eval.       (line   6)
* defface:                               Defining Faces.      (line  21)
* defgroup:                              Group Definitions.   (line  22)
* defimage:                              Defining Images.     (line  29)
* define customization group:            Group Definitions.   (line   6)
* define customization options:          Variable Definitions.
                                                              (line   6)
* define hash comparisons:               Defining Hash.       (line   6)
* define image:                          Defining Images.     (line   6)
* define new customization types:        Defining New Types.  (line   6)
* define-abbrev:                         Defining Abbrevs.    (line  15)
* define-abbrev-table:                   Abbrev Tables.       (line  27)
* define-advice:                         Advising Named Functions.
                                                              (line  56)
* define-alternatives:                   Generic Commands.    (line  10)
* define-button-type:                    Button Types.        (line  11)
* define-category:                       Categories.          (line  33)
* define-derived-mode:                   Derived Modes.       (line  13)
* define-error:                          Error Symbols.       (line   6)
* define-error <1>:                      Error Symbols.       (line  20)
* define-fringe-bitmap:                  Customizing Bitmaps. (line   6)
* define-generic-mode:                   Generic Modes.       (line  11)
* define-globalized-minor-mode:          Defining Minor Modes.
                                                              (line 153)
* define-hash-table-test:                Defining Hash.       (line  26)
* define-inline:                         Inline Functions.    (line  53)
* define-key:                            Changing Key Bindings.
                                                              (line  45)
* define-key-after:                      Modifying Menus.     (line  11)
* define-minor-mode:                     Defining Minor Modes.
                                                              (line   9)
* define-obsolete-face-alias:            Face Functions.      (line  40)
* define-obsolete-function-alias:        Obsolete Functions.  (line  39)
* define-obsolete-variable-alias:        Variable Aliases.    (line  52)
* define-package:                        Multi-file Packages. (line  27)
* define-prefix-command:                 Prefix Keys.         (line  90)
* defined-colors:                        Color Names.         (line  41)
* defining a function:                   Defining Functions.  (line   6)
* defining abbrevs:                      Defining Abbrevs.    (line   6)
* defining commands:                     Defining Commands.   (line   6)
* defining customization variables in C: Writing Emacs Primitives.
                                                              (line 259)
* defining faces:                        Defining Faces.      (line   6)
* defining Lisp variables in C:          Writing Emacs Primitives.
                                                              (line 202)
* defining macros:                       Defining Macros.     (line   6)
* defining menus:                        Defining Menus.      (line   6)
* defining tokens, SMIE:                 SMIE Lexer.          (line   6)
* defining-kbd-macro:                    Keyboard Macros.     (line  44)
* definition-prefixes:                   Autoload by Prefix.  (line   6)
* definitions of symbols:                Definitions.         (line   6)
* defmacro:                              Defining Macros.     (line  16)
* defsubr, Lisp symbol for a primitive:  Writing Emacs Primitives.
                                                              (line 185)
* defsubst:                              Inline Functions.    (line  15)
* deftheme:                              Custom Themes.       (line  17)
* defun:                                 Defining Functions.  (line  10)
* DEFUN, C macro to define Lisp primitives: Writing Emacs Primitives.
                                                              (line  37)
* defun-prompt-regexp:                   List Motion.         (line  74)
* defvar:                                Defining Variables.  (line  27)
* defvar-local:                          Creating Buffer-Local.
                                                              (line  94)
* defvaralias:                           Variable Aliases.    (line  14)
* DEFVAR_INT, DEFVAR_LISP, DEFVAR_BOOL, DEFSYM: Writing Emacs Primitives.
                                                              (line 202)
* delay-mode-hooks:                      Mode Hooks.          (line  42)
* delay-warning:                         Delayed Warnings.    (line  10)
* delayed warnings:                      Delayed Warnings.    (line   6)
* delayed-warnings-hook:                 Delayed Warnings.    (line  30)
* delayed-warnings-hook <1>:             Standard Hooks.      (line  98)
* delayed-warnings-list:                 Delayed Warnings.    (line  15)
* delete:                                Sets And Lists.      (line 125)
* delete-and-extract-region:             Deletion.            (line  33)
* delete-auto-save-file-if-necessary:    Auto-Saving.         (line 152)
* delete-auto-save-files:                Auto-Saving.         (line 161)
* delete-backward-char:                  Deletion.            (line  55)
* delete-before, a frame parameter:      Frame Interaction Parameters.
                                                              (line  13)
* delete-blank-lines:                    User-Level Deletion. (line 106)
* delete-by-moving-to-trash:             Changing Files.      (line 170)
* delete-by-moving-to-trash <1>:         Create/Delete Dirs.  (line  45)
* delete-char:                           Deletion.            (line  42)
* delete-directory:                      Create/Delete Dirs.  (line  45)
* delete-dups:                           Sets And Lists.      (line 179)
* delete-exited-processes:               Deleting Processes.  (line  21)
* delete-field:                          Fields.              (line  65)
* delete-file:                           Changing Files.      (line 170)
* delete-frame:                          Deleting Frames.     (line  11)
* delete-frame event:                    Misc Events.         (line   8)
* delete-frame-functions:                Deleting Frames.     (line  12)
* delete-horizontal-space:               User-Level Deletion. (line   9)
* delete-indentation:                    User-Level Deletion. (line  37)
* delete-minibuffer-contents:            Minibuffer Contents. (line  32)
* delete-old-versions:                   Numbered Backups.    (line  44)
* delete-other-frames:                   Deleting Frames.     (line  44)
* delete-other-windows:                  Deleting Windows.    (line  41)
* delete-other-windows, a window parameter: Window Parameters.
                                                              (line  84)
* delete-overlay:                        Managing Overlays.   (line  50)
* delete-process:                        Deleting Processes.  (line  27)
* delete-region:                         Deletion.            (line  27)
* delete-selection, symbol property:     The Mark.            (line 210)
* delete-selection-helper:               The Mark.            (line 210)
* delete-selection-pre-hook:             The Mark.            (line 210)
* delete-terminal:                       Multiple Terminals.  (line  47)
* delete-terminal-functions:             Multiple Terminals.  (line  62)
* delete-to-left-margin:                 Margins.             (line  65)
* delete-trailing-whitespace:            User-Level Deletion. (line 117)
* delete-window:                         Deleting Windows.    (line  15)
* delete-window, a window parameter:     Window Parameters.   (line  80)
* delete-windows-on:                     Deleting Windows.    (line  62)
* deleting files:                        Changing Files.      (line   6)
* deleting frames:                       Deleting Frames.     (line   6)
* deleting list elements:                Sets And Lists.      (line  31)
* deleting previous char:                Deletion.            (line  56)
* deleting processes:                    Deleting Processes.  (line   6)
* deleting text vs killing:              Deletion.            (line   6)
* deleting whitespace:                   User-Level Deletion. (line  10)
* deleting windows:                      Deleting Windows.    (line   6)
* delq:                                  Sets And Lists.      (line  30)
* dependencies:                          Packaging Basics.    (line   6)
* derived mode:                          Derived Modes.       (line   6)
* derived-mode-p:                        Derived Modes.       (line 117)
* describe characters and events:        Describing Characters.
                                                              (line   6)
* describe-bindings:                     Scanning Keymaps.    (line 123)
* describe-buffer-case-table:            Case Tables.         (line 111)
* describe-categories:                   Categories.          (line 140)
* describe-current-display-table:        Display Tables.      (line  94)
* describe-display-table:                Display Tables.      (line  90)
* describe-mode:                         Mode Help.           (line  11)
* describe-prefix-bindings:              Help Functions.      (line  97)
* describe-syntax:                       Syntax Table Functions.
                                                              (line  99)
* description for interactive codes:     Interactive Codes.   (line   6)
* description format:                    Format of Descriptions.
                                                              (line   6)
* deserializing:                         Byte Packing.        (line  13)
* desktop notifications:                 Desktop Notifications.
                                                              (line   6)
* desktop save mode:                     Desktop Save Mode.   (line   6)
* desktop-buffer-mode-handlers:          Desktop Save Mode.   (line  31)
* desktop-save-buffer:                   Desktop Save Mode.   (line  16)
* destroy-fringe-bitmap:                 Customizing Bitmaps. (line  33)
* destructive list operations:           Modifying Lists.     (line   6)
* destructuring with pcase patterns:     Destructuring with pcase Patterns.
                                                              (line   6)
* detect-coding-region:                  Lisp and Coding Systems.
                                                              (line  98)
* detect-coding-string:                  Lisp and Coding Systems.
                                                              (line 118)
* deterministic build:                   Building Emacs.      (line  74)
* diagrams, boxed, for lists:            Box Diagrams.        (line   6)
* dialog boxes:                          Dialog Boxes.        (line   6)
* digit-argument:                        Prefix Command Arguments.
                                                              (line 107)
* ding:                                  Beeping.             (line  12)
* dir-locals-class-alist:                Directory Local Variables.
                                                              (line  87)
* dir-locals-directory-cache:            Directory Local Variables.
                                                              (line  91)
* dir-locals-file:                       Directory Local Variables.
                                                              (line  16)
* dir-locals-set-class-variables:        Directory Local Variables.
                                                              (line  52)
* dir-locals-set-directory-class:        Directory Local Variables.
                                                              (line  72)
* direction, a buffer display action alist entry: Buffer Display Action Alists.
                                                              (line 200)
* directional overrides:                 Bidirectional Display.
                                                              (line 215)
* directory file name:                   Directory Names.     (line   6)
* directory local variables:             Directory Local Variables.
                                                              (line   6)
* directory name:                        Directory Names.     (line   6)
* directory part (of file name):         File Name Components.
                                                              (line   6)
* directory-abbrev-alist:                Directory Names.     (line  83)
* directory-file-name:                   Directory Names.     (line  41)
* directory-files:                       Contents of Directories.
                                                              (line  14)
* directory-files-and-attributes:        Contents of Directories.
                                                              (line  86)
* directory-files-recursively:           Contents of Directories.
                                                              (line  44)
* directory-name-p:                      Directory Names.     (line  35)
* directory-oriented functions:          Contents of Directories.
                                                              (line   6)
* dired-kept-versions:                   Numbered Backups.    (line  50)
* disable-command:                       Disabling Commands.  (line  36)
* disable-point-adjustment:              Adjusting Point.     (line  16)
* disable-theme:                         Custom Themes.       (line  98)
* disabled:                              Disabling Commands.  (line  11)
* disabled command:                      Disabling Commands.  (line   6)
* disabled-command-function:             Disabling Commands.  (line  41)
* disabling multibyte:                   Disabling Multibyte. (line   6)
* disabling undo:                        Maintaining Undo.    (line  27)
* disassemble:                           Disassembly.         (line  20)
* disassembled byte-code:                Disassembly.         (line   6)
* discard-input:                         Event Input Misc.    (line 100)
* discarding input:                      Event Input Misc.    (line 101)
* dispatch of methods for generic function: Generic Functions.
                                                              (line 186)
* display (overlay property):            Overlay Properties.  (line 117)
* display (text property):               Display Property.    (line   6)
* display action:                        Choosing Window.     (line  12)
* display area:                          Frame Layout.        (line 202)
* display feature testing:               Display Feature Testing.
                                                              (line   6)
* display margins:                       Display Margins.     (line   6)
* display message in echo area:          Displaying Messages. (line   6)
* display name on X:                     Multiple Terminals.  (line  87)
* display origin:                        Frame Layout.        (line 229)
* display properties, and bidi reordering of text: Bidirectional Display.
                                                              (line  65)
* display property, and point display:   Adjusting Point.     (line   6)
* display property, unsafe evaluation:   Display Property.    (line  18)
* display specification:                 Display Property.    (line   6)
* display table:                         Display Tables.      (line   6)
* display, a frame parameter:            Basic Parameters.    (line   9)
* display, abstract:                     Abstract Display.    (line   6)
* display, arbitrary objects:            Abstract Display.    (line   6)
* display-backing-store:                 Display Feature Testing.
                                                              (line 116)
* display-buffer:                        Choosing Window.     (line  30)
* display-buffer-alist:                  Choosing Window.     (line 105)
* display-buffer-at-bottom:              Buffer Display Action Functions.
                                                              (line 185)
* display-buffer-base-action:            Choosing Window.     (line 115)
* display-buffer-below-selected:         Buffer Display Action Functions.
                                                              (line 164)
* display-buffer-fallback-action:        Choosing Window.     (line 120)
* display-buffer-in-atom-window:         Atomic Windows.      (line  62)
* display-buffer-in-child-frame:         Buffer Display Action Functions.
                                                              (line 201)
* display-buffer-in-direction:           Buffer Display Action Functions.
                                                              (line 107)
* display-buffer-in-previous-window:     Buffer Display Action Functions.
                                                              (line  70)
* display-buffer-in-side-window:         Displaying Buffers in Side Windows.
                                                              (line  10)
* display-buffer-no-window:              Buffer Display Action Functions.
                                                              (line 236)
* display-buffer-overriding-action:      Choosing Window.     (line  99)
* display-buffer-pop-up-frame:           Buffer Display Action Functions.
                                                              (line 193)
* display-buffer-pop-up-window:          Buffer Display Action Functions.
                                                              (line  50)
* display-buffer-reuse-mode-window:      Buffer Display Action Functions.
                                                              (line  36)
* display-buffer-reuse-window:           Buffer Display Action Functions.
                                                              (line  20)
* display-buffer-same-window:            Buffer Display Action Functions.
                                                              (line  14)
* display-buffer-use-some-frame:         Buffer Display Action Functions.
                                                              (line 220)
* display-buffer-use-some-window:        Buffer Display Action Functions.
                                                              (line 101)
* display-color-cells:                   Display Feature Testing.
                                                              (line 144)
* display-color-p:                       Display Feature Testing.
                                                              (line  35)
* display-completion-list:               Completion Commands. (line  67)
* display-delayed-warnings:              Delayed Warnings.    (line  39)
* display-graphic-p:                     Display Feature Testing.
                                                              (line  25)
* display-grayscale-p:                   Display Feature Testing.
                                                              (line  40)
* display-images-p:                      Display Feature Testing.
                                                              (line  69)
* display-message-or-buffer:             Displaying Messages. (line 115)
* display-mm-dimensions-alist:           Display Feature Testing.
                                                              (line 111)
* display-mm-height:                     Display Feature Testing.
                                                              (line  95)
* display-mm-width:                      Display Feature Testing.
                                                              (line 103)
* display-monitor-attributes-list:       Multiple Terminals.  (line 152)
* display-mouse-p:                       Display Feature Testing.
                                                              (line  31)
* display-pixel-height:                  Display Feature Testing.
                                                              (line  79)
* display-pixel-width:                   Display Feature Testing.
                                                              (line  87)
* display-planes:                        Display Feature Testing.
                                                              (line 131)
* display-popup-menus-p:                 Display Feature Testing.
                                                              (line  19)
* display-save-under:                    Display Feature Testing.
                                                              (line 126)
* display-screens:                       Display Feature Testing.
                                                              (line  75)
* display-selections-p:                  Display Feature Testing.
                                                              (line  64)
* display-start position:                Window Start and End.
                                                              (line   6)
* display-supports-face-attributes-p:    Display Feature Testing.
                                                              (line  44)
* display-table-slot:                    Display Tables.      (line  77)
* display-type, a frame parameter:       Basic Parameters.    (line  15)
* display-visual-class:                  Display Feature Testing.
                                                              (line 136)
* display-warning:                       Warning Basics.      (line  39)
* displaying a buffer:                   Displaying Buffers.  (line   6)
* displaying faces:                      Displaying Faces.    (line   6)
* displays, multiple:                    Multiple Terminals.  (line   6)
* distance between strings:              Text Comparison.     (line 223)
* distinguish interactive calls:         Distinguish Interactive.
                                                              (line   6)
* dnd-protocol-alist:                    Drag and Drop.       (line  20)
* do-auto-save:                          Auto-Saving.         (line 139)
* DOC (documentation) file:              Documentation Basics.
                                                              (line  23)
* doc, customization keyword:            Type Keywords.       (line  88)
* doc-directory:                         Accessing Documentation.
                                                              (line 156)
* Document Object Model:                 Document Object Model.
                                                              (line   6)
* documentation:                         Accessing Documentation.
                                                              (line  35)
* documentation conventions:             Documentation Basics.
                                                              (line   6)
* documentation for major mode:          Mode Help.           (line   6)
* documentation notation:                Evaluation Notation. (line   6)
* documentation string of function:      Function Documentation.
                                                              (line   6)
* documentation strings:                 Documentation.       (line   6)
* documentation strings, conventions and tips: Documentation Tips.
                                                              (line   6)
* documentation, keys in:                Keys in Documentation.
                                                              (line   6)
* documentation-property:                Accessing Documentation.
                                                              (line   6)
* dolist:                                Iteration.           (line  51)
* dolist-with-progress-reporter:         Progress.            (line 131)
* DOM:                                   Document Object Model.
                                                              (line   6)
* dom-node:                              Document Object Model.
                                                              (line  18)
* dotimes:                               Iteration.           (line  63)
* dotimes-with-progress-reporter:        Progress.            (line 105)
* dotted list:                           Cons Cells.          (line  34)
* dotted lists (Edebug):                 Specification List.  (line 150)
* dotted pair notation:                  Dotted Pair Notation.
                                                              (line   6)
* double-click events:                   Repeat Events.       (line   6)
* double-click-fuzz:                     Repeat Events.       (line  70)
* double-click-time:                     Repeat Events.       (line  80)
* double-quote in strings:               Syntax for Strings.  (line   6)
* down-list:                             List Motion.         (line  38)
* downcase:                              Case Conversion.     (line  19)
* downcase-region:                       Case Changes.        (line  35)
* downcase-word:                         Case Changes.        (line  63)
* downcasing in lookup-key:              Key Sequence Input.  (line  73)
* drag and drop:                         Drag and Drop.       (line   6)
* drag event:                            Drag Events.         (line   6)
* drag-internal-border, a frame parameter: Mouse Dragging Parameters.
                                                              (line  15)
* drag-n-drop event:                     Misc Events.         (line  41)
* drag-with-header-line, a frame parameter: Mouse Dragging Parameters.
                                                              (line  19)
* drag-with-mode-line, a frame parameter: Mouse Dragging Parameters.
                                                              (line  23)
* dribble file:                          Recording Input.     (line  25)
* dump file:                             Building Emacs.      (line  34)
* dump-emacs:                            Building Emacs.      (line 164)
* dump-emacs-portable:                   Building Emacs.      (line 148)
* dumping Emacs:                         Building Emacs.      (line  23)
* dynamic binding:                       Variable Scoping.    (line  15)
* dynamic extent:                        Variable Scoping.    (line  15)
* dynamic libraries:                     Dynamic Libraries.   (line   6)
* dynamic loading of documentation:      Docs and Compilation.
                                                              (line   6)
* dynamic loading of functions:          Dynamic Loading.     (line   6)
* dynamic modules:                       Dynamic Modules.     (line   6)
* dynamic modules, writing:              Writing Dynamic Modules.
                                                              (line   6)
* dynamic scope:                         Variable Scoping.    (line  15)
* dynamic-library-alist:                 Dynamic Libraries.   (line  10)
* eager macro expansion:                 How Programs Do Loading.
                                                              (line  79)
* early init file:                       Init File.           (line  21)
* early-init.el:                         Init File.           (line   6)
* easy-menu-define:                      Easy Menu.           (line   9)
* easy-mmode-define-minor-mode:          Defining Minor Modes.
                                                              (line 108)
* echo area:                             The Echo Area.       (line   6)
* echo area customization:               Echo Area Customization.
                                                              (line   6)
* echo-area-clear-hook:                  Echo Area Customization.
                                                              (line  17)
* echo-keystrokes:                       Echo Area Customization.
                                                              (line  21)
* edebug:                                Source Breakpoints.  (line   6)
* Edebug debugging facility:             Edebug.              (line   6)
* Edebug execution modes:                Edebug Execution Modes.
                                                              (line   6)
* Edebug specification list:             Specification List.  (line   6)
* edebug, failure to instrument:         Instrumenting.       (line  52)
* edebug-after-instrumentation-function: Edebug Options.      (line 171)
* edebug-all-defs:                       Edebug Options.      (line  15)
* edebug-all-forms:                      Edebug Options.      (line  24)
* edebug-backtrace-hide-instrumentation: Edebug Misc.         (line  36)
* edebug-backtrace-show-instrumentation: Edebug Misc.         (line  36)
* edebug-behavior-alist:                 Edebug Options.      (line 149)
* edebug-continue-kbd-macro:             Edebug Options.      (line  87)
* edebug-defun:                          Instrumenting.       (line  26)
* edebug-display-freq-count:             Coverage Testing.    (line  28)
* edebug-eval-macro-args:                Instrumenting Macro Calls.
                                                              (line  76)
* edebug-eval-macro-args <1>:            Edebug Options.      (line  33)
* edebug-eval-top-level-form:            Instrumenting.       (line  26)
* edebug-global-break-condition:         Edebug Options.      (line 134)
* edebug-initial-mode:                   Edebug Options.      (line  66)
* edebug-max-depth:                      Checking Whether to Stop.
                                                              (line  10)
* edebug-new-definition-function:        Edebug Options.      (line 163)
* edebug-on-error:                       Edebug Options.      (line 122)
* edebug-on-quit:                        Edebug Options.      (line 126)
* edebug-print-circle:                   Printing in Edebug.  (line  37)
* edebug-print-circle <1>:               Edebug Options.      (line 100)
* edebug-print-length:                   Printing in Edebug.  (line  15)
* edebug-print-length <1>:               Edebug Options.      (line  92)
* edebug-print-level:                    Printing in Edebug.  (line  19)
* edebug-print-level <1>:                Edebug Options.      (line  96)
* edebug-print-trace-after:              Trace Buffer.        (line  24)
* edebug-print-trace-before:             Trace Buffer.        (line  24)
* edebug-remove-instrumentation:         Instrumenting.       (line  67)
* edebug-save-displayed-buffer-points:   Edebug Options.      (line  52)
* edebug-save-windows:                   Edebug Options.      (line  40)
* edebug-set-global-break-condition:     Global Break Condition.
                                                              (line  13)
* edebug-set-initial-mode:               Edebug Execution Modes.
                                                              (line  66)
* edebug-setup-hook:                     Edebug Options.      (line   8)
* edebug-sit-for-seconds:                Edebug Execution Modes.
                                                              (line  94)
* edebug-sit-for-seconds <1>:            Edebug Options.      (line 139)
* edebug-sit-on-break:                   Edebug Options.      (line 144)
* edebug-temp-display-freq-count:        Coverage Testing.    (line  23)
* edebug-test-coverage:                  Edebug Options.      (line  83)
* edebug-trace:                          Edebug Options.      (line  76)
* edebug-trace <1>:                      Trace Buffer.        (line  35)
* edebug-tracing:                        Trace Buffer.        (line  28)
* edebug-unwrap-results:                 Edebug Options.      (line 104)
* edge detection, images:                Image Descriptors.   (line 129)
* edit distance between strings:         Text Comparison.     (line 223)
* edit-and-eval-command:                 Object from Minibuffer.
                                                              (line  49)
* editing types:                         Editing Types.       (line   6)
* editor command loop:                   Command Loop.        (line   6)
* eight-bit, a charset:                  Character Sets.      (line  16)
* electric-future-map:                   A Sample Variable Description.
                                                              (line  17)
* element (of list):                     Lists.               (line   6)
* elements of sequences:                 Sequence Functions.  (line  43)
* elliptical-arc:                        SVG Images.          (line 284)
* elp.el:                                Profiling.           (line  39)
* elt:                                   Sequence Functions.  (line  42)
* Emacs event standard notation:         Describing Characters.
                                                              (line  14)
* Emacs process run time:                Processor Run Time.  (line   6)
* emacs, a charset:                      Character Sets.      (line  16)
* emacs-build-number:                    Version Info.        (line  46)
* emacs-build-time:                      Version Info.        (line  22)
* emacs-init-time:                       Processor Run Time.  (line  32)
* emacs-internal coding system:          Coding System Basics.
                                                              (line  66)
* emacs-lisp-docstring-fill-column:      Documentation Tips.  (line  22)
* emacs-major-version:                   Version Info.        (line  38)
* emacs-minor-version:                   Version Info.        (line  42)
* emacs-pid:                             System Environment.  (line 199)
* emacs-repository-branch:               Version Info.        (line  56)
* emacs-repository-version:              Version Info.        (line  51)
* emacs-save-session-functions:          Session Management.  (line  19)
* emacs-session-restore:                 Session Management.  (line  28)
* emacs-startup-hook:                    Init File.           (line  70)
* emacs-uptime:                          Processor Run Time.  (line   9)
* emacs-version:                         Version Info.        (line  30)
* emacs-version <1>:                     Version Info.        (line   9)
* emacsclient, getting a backtrace:      Error Debugging.     (line  74)
* EMACSLOADPATH environment variable:    Library Search.      (line  51)
* emacs_funcall_exit:                    Module Nonlocal.     (line  44)
* emacs_funcall_exit <1>:                Module Nonlocal.     (line  56)
* emacs_funcall_exit, enumeration:       Module Nonlocal.     (line  49)
* emacs_funcall_exit_return:             Module Nonlocal.     (line  49)
* emacs_funcall_exit_signal:             Module Nonlocal.     (line  51)
* emacs_funcall_exit_throw:              Module Nonlocal.     (line  53)
* EMACS_LIMB_MAX:                        Module Values.       (line  82)
* emacs_module_init:                     Dynamic Modules.     (line  19)
* emacs_module_init <1>:                 Module Initialization.
                                                              (line  19)
* emacs_process_input_result:            Module Misc.         (line  82)
* emacs_value data type:                 Module Values.       (line   6)
* emacs_variadic_function:               Module Functions.    (line  48)
* embedded widgets:                      Xwidgets.            (line   6)
* empty lines, indicating:               Fringe Indicators.   (line  10)
* empty list:                            Box Diagrams.        (line  41)
* empty overlay:                         Managing Overlays.   (line  21)
* empty region:                          The Region.          (line  37)
* emulation-mode-map-alists:             Controlling Active Maps.
                                                              (line 138)
* enable-command:                        Disabling Commands.  (line  31)
* enable-connection-local-variables:     Connection Local Variables.
                                                              (line 122)
* enable-dir-local-variables:            Directory Local Variables.
                                                              (line  97)
* enable-local-eval:                     File Local Variables.
                                                              (line 162)
* enable-local-variables:                File Local Variables.
                                                              (line  24)
* enable-multibyte-characters:           Text Representations.
                                                              (line  53)
* enable-multibyte-characters <1>:       Disabling Multibyte. (line  30)
* enable-recursive-minibuffers:          Recursive Mini.      (line  14)
* enable-theme:                          Custom Themes.       (line  94)
* encapsulation, ewoc:                   Abstract Display.    (line  41)
* encode-char:                           Character Sets.      (line  82)
* encode-coding-region:                  Explicit Encoding.   (line  37)
* encode-coding-string:                  Explicit Encoding.   (line  61)
* encode-time:                           Time Conversion.     (line 163)
* encoding file formats:                 Format Conversion.   (line   6)
* encoding in coding systems:            Explicit Encoding.   (line   6)
* encrypted network connections:         Network.             (line  55)
* end of line in regexp:                 Regexp Special.      (line 188)
* end-of-buffer:                         Buffer End Motion.   (line  31)
* end-of-defun:                          List Motion.         (line  69)
* end-of-defun-function:                 List Motion.         (line  96)
* end-of-file:                           Input Functions.     (line  13)
* end-of-line:                           Text Lines.          (line  35)
* end-of-line conversion:                Coding System Basics.
                                                              (line  37)
* endianness:                            Bindat Spec.         (line  13)
* environment:                           Intro Eval.          (line  40)
* environment variable access:           System Environment.  (line  80)
* environment variables, subprocesses:   Subprocess Creation. (line  67)
* eobp:                                  Near Point.          (line  67)
* EOL conversion:                        Coding System Basics.
                                                              (line  37)
* eol conversion of coding system:       Lisp and Coding Systems.
                                                              (line  47)
* eol in rx:                             Rx Constructs.       (line 316)
* eol type of coding system:             Lisp and Coding Systems.
                                                              (line  25)
* eolp:                                  Near Point.          (line  77)
* eos in rx:                             Rx Constructs.       (line 324)
* eot in rx:                             Rx Constructs.       (line 324)
* eow in rx:                             Rx Constructs.       (line 336)
* epoch:                                 Time of Day.         (line  18)
* eq:                                    Equality Predicates. (line  11)
* eq <1>:                                Module Misc.         (line  12)
* eql:                                   Comparison of Numbers.
                                                              (line  46)
* equal:                                 Equality Predicates. (line  85)
* equal-including-properties:            Equality Predicates. (line 145)
* equality:                              Equality Predicates. (line   6)
* erase-buffer:                          Deletion.            (line  13)
* error:                                 Signaling Errors.    (line  25)
* error cleanup:                         Cleanups.            (line  13)
* error debugging:                       Error Debugging.     (line   6)
* error description:                     Handling Errors.     (line 127)
* error display:                         The Echo Area.       (line   6)
* error handler:                         Handling Errors.     (line   6)
* error in debug:                        Invoking the Debugger.
                                                              (line  61)
* error message notation:                Error Messages.      (line   6)
* error name:                            Error Symbols.       (line   6)
* error symbol:                          Error Symbols.       (line   6)
* error-conditions:                      Error Symbols.       (line   6)
* error-message-string:                  Handling Errors.     (line 149)
* errors:                                Errors.              (line   6)
* <ESC>:                                 Functions for Key Lookup.
                                                              (line  86)
* esc-map:                               Prefix Keys.         (line  15)
* ESC-prefix:                            Prefix Keys.         (line  15)
* escape (ASCII character):              Basic Char Syntax.   (line  27)
* escape characters:                     Output Variables.    (line  17)
* escape characters in printing:         Output Functions.    (line   9)
* escape sequence:                       Basic Char Syntax.   (line  45)
* eval:                                  Eval.                (line  26)
* eval during compilation:               Eval During Compile. (line   6)
* eval in rx:                            Rx Constructs.       (line 392)
* eval, and debugging:                   Internals of Debugger.
                                                              (line  86)
* eval-and-compile:                      Eval During Compile. (line   9)
* eval-buffer:                           Eval.                (line  82)
* eval-buffer (Edebug):                  Instrumenting.       (line  19)
* eval-current-buffer:                   Eval.                (line  98)
* eval-current-buffer (Edebug):          Instrumenting.       (line  19)
* eval-defun (Edebug):                   Instrumenting.       (line  10)
* eval-defun, and defcustom forms:       Variable Definitions.
                                                              (line  43)
* eval-defun, and defface forms:         Defining Faces.      (line  40)
* eval-defun, and defvar forms:          Defining Variables.  (line  57)
* eval-defun, and explicit entry to debugger: Explicit Debug. (line   6)
* eval-expression (Edebug):              Instrumenting.       (line  62)
* eval-expression, and lexical-binding:  Using Lexical Binding.
                                                              (line  24)
* eval-expression-debug-on-error:        Error Debugging.     (line  54)
* eval-expression-print-length:          Output Variables.    (line  99)
* eval-expression-print-level:           Output Variables.    (line 100)
* eval-minibuffer:                       Object from Minibuffer.
                                                              (line  37)
* eval-region:                           Eval.                (line  60)
* eval-region (Edebug):                  Instrumenting.       (line  19)
* eval-when-compile:                     Eval During Compile. (line  35)
* evaluated expression argument:         Interactive Codes.   (line 203)
* evaluation:                            Evaluation.          (line   6)
* evaluation error:                      Local Variables.     (line 130)
* evaluation list group:                 Eval List.           (line  49)
* evaluation notation:                   Evaluation Notation. (line   6)
* evaluation of buffer contents:         Eval.                (line  82)
* evaluation of special forms:           Special Forms.       (line   6)
* evaporate (overlay property):          Overlay Properties.  (line 216)
* even-window-sizes:                     Choosing Window Options.
                                                              (line  63)
* event printing:                        Describing Characters.
                                                              (line  29)
* event translation:                     Event Mod.           (line   6)
* event type:                            Classifying Events.  (line   6)
* event, reading only one:               Reading One Event.   (line   6)
* event-basic-type:                      Classifying Events.  (line  70)
* event-click-count:                     Repeat Events.       (line  63)
* event-convert-list:                    Classifying Events.  (line  96)
* event-end:                             Accessing Mouse.     (line  21)
* event-modifiers:                       Classifying Events.  (line  26)
* event-start:                           Accessing Mouse.     (line  14)
* eventp:                                Input Events.        (line  12)
* events:                                Input Events.        (line   6)
* ewoc:                                  Abstract Display.    (line   6)
* ewoc-buffer:                           Abstract Display Functions.
                                                              (line  29)
* ewoc-collect:                          Abstract Display Functions.
                                                              (line 107)
* ewoc-create:                           Abstract Display Functions.
                                                              (line  10)
* ewoc-data:                             Abstract Display Functions.
                                                              (line  60)
* ewoc-delete:                           Abstract Display Functions.
                                                              (line  99)
* ewoc-enter-after:                      Abstract Display Functions.
                                                              (line  46)
* ewoc-enter-before:                     Abstract Display Functions.
                                                              (line  45)
* ewoc-enter-first:                      Abstract Display Functions.
                                                              (line  40)
* ewoc-enter-last:                       Abstract Display Functions.
                                                              (line  41)
* ewoc-filter:                           Abstract Display Functions.
                                                              (line 102)
* ewoc-get-hf:                           Abstract Display Functions.
                                                              (line  32)
* ewoc-goto-next:                        Abstract Display Functions.
                                                              (line  79)
* ewoc-goto-node:                        Abstract Display Functions.
                                                              (line  86)
* ewoc-goto-prev:                        Abstract Display Functions.
                                                              (line  78)
* ewoc-invalidate:                       Abstract Display Functions.
                                                              (line  95)
* ewoc-locate:                           Abstract Display Functions.
                                                              (line  66)
* ewoc-location:                         Abstract Display Functions.
                                                              (line  75)
* ewoc-map:                              Abstract Display Functions.
                                                              (line 113)
* ewoc-next:                             Abstract Display Functions.
                                                              (line  51)
* ewoc-nth:                              Abstract Display Functions.
                                                              (line  55)
* ewoc-prev:                             Abstract Display Functions.
                                                              (line  50)
* ewoc-refresh:                          Abstract Display Functions.
                                                              (line  89)
* ewoc-set-data:                         Abstract Display Functions.
                                                              (line  63)
* ewoc-set-hf:                           Abstract Display Functions.
                                                              (line  36)
* examining text properties:             Examining Properties.
                                                              (line   6)
* examining the interactive form:        Using Interactive.   (line 129)
* examining windows:                     Buffers and Windows. (line   6)
* examples of using interactive:         Interactive Examples.
                                                              (line   6)
* excess close parentheses:              Excess Close.        (line   6)
* excess open parentheses:               Excess Open.         (line   6)
* excursion:                             Excursions.          (line   6)
* exec-directory:                        Subprocess Creation. (line  72)
* exec-path:                             Subprocess Creation. (line  78)
* exec-path <1>:                         Subprocess Creation. (line  95)
* exec-suffixes:                         Subprocess Creation. (line  32)
* executable-find:                       Locating Files.      (line  53)
* execute program:                       Subprocess Creation. (line  18)
* execute with prefix argument:          Interactive Call.    (line 104)
* execute-extended-command:              Interactive Call.    (line  98)
* execute-kbd-macro:                     Keyboard Macros.     (line  12)
* executing-kbd-macro:                   Keyboard Macros.     (line  37)
* execution order of buffer display action functions: Precedence of Action Functions.
                                                              (line   6)
* execution speed:                       Compilation Tips.    (line   6)
* exit:                                  Recursive Editing.   (line  32)
* exit recursive editing:                Recursive Editing.   (line  32)
* exit-minibuffer:                       Minibuffer Commands. (line   8)
* exit-recursive-edit:                   Recursive Editing.   (line  87)
* exiting Emacs:                         Getting Out.         (line   6)
* exp:                                   Math Functions.      (line  31)
* expand-abbrev:                         Abbrev Expansion.    (line  25)
* expand-file-name:                      File Name Expansion. (line  13)
* expanding abbrevs:                     Abbrev Expansion.    (line   6)
* expansion of file names:               File Name Expansion. (line   6)
* expansion of macros:                   Expansion.           (line   6)
* explicit selective display:            Selective Display.   (line   9)
* explicit-name, a frame parameter:      Basic Parameters.    (line  37)
* expression:                            Intro Eval.          (line  12)
* expt:                                  Math Functions.      (line  39)
* extended file attributes:              Extended Attributes. (line   6)
* extended menu item:                    Extended Menu Items. (line   6)
* extended-command-history:              Minibuffer History.  (line 108)
* extent:                                Variable Scoping.    (line  10)
* external border:                       Frame Layout.        (line  70)
* external menu bar:                     Frame Layout.        (line 112)
* external tool bar:                     Frame Layout.        (line 131)
* external-debugging-output:             Output Streams.      (line 126)
* extra slots of char-table:             Char-Tables.         (line   6)
* extra-keyboard-modifiers:              Event Mod.           (line  11)
* extract_big_integer:                   Module Values.       (line  53)
* extract_float:                         Module Values.       (line  87)
* extract_integer:                       Module Values.       (line  43)
* face (button property):                Button Properties.   (line  23)
* face (non-removability of):            Defining Faces.      (line  18)
* face (overlay property):               Overlay Properties.  (line  88)
* face (text property):                  Special Properties.  (line  22)
* face alias:                            Face Functions.      (line  33)
* face attributes:                       Face Attributes.     (line   6)
* face attributes, access and modification: Attribute Functions.
                                                              (line   6)
* face codes of text:                    Special Properties.  (line  22)
* face merging:                          Displaying Faces.    (line   6)
* face name:                             Faces.               (line  17)
* face number:                           Face Functions.      (line  11)
* face property of face symbols:         Face Functions.      (line  11)
* face remapping:                        Face Remapping.      (line   6)
* face spec:                             Defining Faces.      (line   6)
* face-all-attributes:                   Attribute Functions. (line  53)
* face-attribute:                        Attribute Functions. (line   9)
* face-attribute-relative-p:             Attribute Functions. (line  38)
* face-background:                       Attribute Functions. (line 160)
* face-bold-p:                           Attribute Functions. (line 169)
* face-differs-from-default-p:           Face Functions.      (line  29)
* face-documentation:                    Accessing Documentation.
                                                              (line  59)
* face-documentation <1>:                Face Functions.      (line  21)
* face-equal:                            Face Functions.      (line  25)
* face-extend-p:                         Attribute Functions. (line 186)
* face-filters-always-match:             Special Properties.  (line 410)
* face-font:                             Attribute Functions. (line 150)
* face-font-family-alternatives:         Font Selection.      (line  16)
* face-font-registry-alternatives:       Font Selection.      (line  54)
* face-font-rescale-alist:               Font Selection.      (line  81)
* face-font-selection-order:             Font Selection.      (line  27)
* face-foreground:                       Attribute Functions. (line 159)
* face-id:                               Face Functions.      (line  11)
* face-inverse-video-p:                  Attribute Functions. (line 182)
* face-italic-p:                         Attribute Functions. (line 174)
* face-list:                             Face Functions.      (line   8)
* face-name-history:                     Minibuffer History.  (line 117)
* face-remap-add-relative:               Face Remapping.      (line  66)
* face-remap-remove-relative:            Face Remapping.      (line  83)
* face-remap-reset-base:                 Face Remapping.      (line 100)
* face-remap-set-base:                   Face Remapping.      (line  88)
* face-remapping-alist:                  Face Remapping.      (line  10)
* face-spec-set:                         Defining Faces.      (line 147)
* face-stipple:                          Attribute Functions. (line 165)
* face-underline-p:                      Attribute Functions. (line 178)
* facemenu-keymap:                       Prefix Keys.         (line  50)
* facep:                                 Faces.               (line  26)
* faces:                                 Faces.               (line   6)
* faces for font lock:                   Faces for Font Lock. (line   6)
* faces, automatic choice:               Auto Faces.          (line   6)
* false:                                 nil and t.           (line   6)
* fboundp:                               Function Cells.      (line  44)
* fceiling:                              Rounding Operations. (line  16)
* FEATURE-unload-function:               Unloading.           (line  31)
* featurep:                              Named Features.      (line 126)
* features:                              Named Features.      (line 133)
* features <1>:                          Named Features.      (line   6)
* fetch-bytecode:                        Dynamic Loading.     (line  52)
* ffloor:                                Rounding Operations. (line  12)
* field (overlay property):              Overlay Properties.  (line 129)
* field (text property):                 Special Properties.  (line 205)
* field numbers in format spec:          Formatting Strings.  (line 153)
* field width:                           Formatting Strings.  (line 202)
* field-beginning:                       Fields.              (line  35)
* field-end:                             Fields.              (line  46)
* field-string:                          Fields.              (line  57)
* field-string-no-properties:            Fields.              (line  61)
* fields:                                Fields.              (line   6)
* fifo data structure:                   Rings.               (line  73)
* file accessibility:                    Testing Accessibility.
                                                              (line   6)
* file age:                              File Attributes.     (line  12)
* file attributes:                       File Attributes.     (line   6)
* file classification:                   Kinds of Files.      (line   6)
* file contents, and default coding system: Default Coding Systems.
                                                              (line  17)
* file format conversion:                Format Conversion.   (line   6)
* file hard link:                        Changing Files.      (line  40)
* file local variables:                  File Local Variables.
                                                              (line   6)
* file local variables <1>:              Security Considerations.
                                                              (line  18)
* file locks:                            File Locks.          (line   6)
* file mode specification error:         Auto Major Mode.     (line  33)
* file modes:                            Testing Accessibility.
                                                              (line  84)
* file modes and MS-DOS:                 Testing Accessibility.
                                                              (line 111)
* file modes, setting:                   Changing Files.      (line 189)
* file modification time:                File Attributes.     (line  12)
* file name abbreviations:               Directory Names.     (line  83)
* file name completion subroutines:      File Name Completion.
                                                              (line   6)
* file name handler:                     Magic File Names.    (line  16)
* file name of buffer:                   Buffer File Name.    (line   6)
* file name of directory:                Directory Names.     (line   6)
* file name, and default coding system:  Default Coding Systems.
                                                              (line  27)
* file names:                            File Names.          (line   6)
* file names in directory:               Contents of Directories.
                                                              (line   6)
* file names, trailing whitespace:       Information about Files.
                                                              (line  12)
* file notifications:                    File Notifications.  (line   6)
* file open error:                       Subroutines of Visiting.
                                                              (line  39)
* file permissions:                      Testing Accessibility.
                                                              (line  84)
* file permissions, setting:             Changing Files.      (line 189)
* file with multiple names:              Changing Files.      (line  40)
* file, information about:               Information about Files.
                                                              (line   6)
* file-accessible-directory-p:           Testing Accessibility.
                                                              (line  55)
* file-acl:                              Extended Attributes. (line  20)
* file-already-exists:                   Changing Files.      (line 152)
* file-attributes:                       File Attributes.     (line  29)
* file-chase-links:                      Truenames.           (line  35)
* file-coding-system-alist:              Default Coding Systems.
                                                              (line  27)
* file-directory-p:                      Kinds of Files.      (line  68)
* file-equal-p:                          Truenames.           (line  57)
* file-error:                            How Programs Do Loading.
                                                              (line 102)
* file-executable-p:                     Testing Accessibility.
                                                              (line  34)
* file-exists-p:                         Testing Accessibility.
                                                              (line  14)
* file-expand-wildcards:                 Contents of Directories.
                                                              (line  96)
* file-extended-attributes:              Extended Attributes. (line  46)
* file-in-directory-p:                   Truenames.           (line  80)
* file-local-copy:                       Magic File Names.    (line 161)
* file-local-name:                       Magic File Names.    (line 214)
* file-local-variables-alist:            File Local Variables.
                                                              (line  74)
* file-locked:                           File Locks.          (line  69)
* file-locked-p:                         File Locks.          (line  31)
* file-modes:                            Testing Accessibility.
                                                              (line  83)
* file-modes-symbolic-to-number:         Changing Files.      (line 263)
* file-name encoding, MS-Windows:        Encoding and I/O.    (line  79)
* file-name-absolute-p:                  Relative File Names. (line  17)
* file-name-all-completions:             File Name Completion.
                                                              (line   9)
* file-name-as-directory:                Directory Names.     (line  26)
* file-name-base:                        File Name Components.
                                                              (line  99)
* file-name-case-insensitive-p:          Truenames.           (line  63)
* file-name-coding-system:               Encoding and I/O.    (line  60)
* file-name-completion:                  File Name Completion.
                                                              (line  32)
* file-name-directory:                   File Name Components.
                                                              (line  21)
* file-name-extension:                   File Name Components.
                                                              (line  61)
* file-name-handler-alist:               Magic File Names.    (line  16)
* file-name-history:                     Minibuffer History.  (line  99)
* file-name-nondirectory:                File Name Components.
                                                              (line  35)
* file-name-quote:                       File Name Expansion. (line 136)
* file-name-quoted-p:                    File Name Expansion. (line 157)
* file-name-sans-extension:              File Name Components.
                                                              (line  78)
* file-name-sans-versions:               File Name Components.
                                                              (line  45)
* file-name-unquote:                     File Name Expansion. (line 152)
* file-newer-than-file-p:                File Attributes.     (line  11)
* file-newest-backup:                    Backup Names.        (line  84)
vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
