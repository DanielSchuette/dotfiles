import { Neovim } from '@chemzqm/neovim';
import { Event } from 'vscode-languageserver-protocol';
import { ListHighlights, ListItem, ListOptions } from '../types';
import ListConfiguration from './configuration';
export declare type MouseEvent = 'mouseDown' | 'mouseDrag' | 'mouseUp' | 'doubleClick';
export interface MousePosition {
    winid: number;
    lnum: number;
    col: number;
    current: boolean;
}
export default class ListUI {
    private nvim;
    private name;
    private listOptions;
    private config;
    private window;
    private height;
    private newTab;
    private buffer;
    private currIndex;
    private drawCount;
    private highlights;
    private items;
    private disposables;
    private signOffset;
    private selected;
    private mouseDown;
    private mutex;
    private _onDidChangeLine;
    private _onDidOpen;
    private _onDidClose;
    private _onDidLineChange;
    private _onDoubleClick;
    readonly onDidChangeLine: Event<number>;
    readonly onDidLineChange: Event<number>;
    readonly onDidOpen: Event<number>;
    readonly onDidClose: Event<number>;
    readonly onDidDoubleClick: Event<void>;
    constructor(nvim: Neovim, name: string, listOptions: ListOptions, config: ListConfiguration);
    private get limitLines();
    private onLineChange;
    set index(n: number);
    get index(): number;
    get firstItem(): ListItem;
    get lastItem(): ListItem;
    getItem(delta: number): ListItem;
    get item(): Promise<ListItem>;
    echoMessage(item: ListItem): Promise<void>;
    updateItem(item: ListItem, index: number): Promise<void>;
    getItems(): Promise<ListItem[]>;
    onMouse(event: MouseEvent): Promise<void>;
    resume(): Promise<void>;
    toggleSelection(): Promise<void>;
    selectLines(start: number, end: number): Promise<void>;
    selectAll(): Promise<void>;
    clearSelection(): void;
    get shown(): boolean;
    get bufnr(): number | undefined;
    get winid(): number | undefined;
    get ready(): Promise<void>;
    drawItems(items: ListItem[], height: number, reload?: boolean): Promise<void>;
    appendItems(items: ListItem[]): Promise<void>;
    private setLines;
    restoreWindow(): void;
    close(): void;
    dispose(): void;
    get length(): number;
    get selectedItems(): ListItem[];
    private doHighlight;
    setCursor(lnum: number, col: number): void;
    addHighlights(highlights: ListHighlights[], append?: boolean): void;
    private getSelectedRange;
}
