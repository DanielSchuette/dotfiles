will often read all output from PROCESS, it has a race condition and can
miss some output if 'process-live-p' returns 'nil' while the connection
still contains data.  Better is to write the loop like this:

     (while (accept-process-output process))

   If you have passed a non-'nil' STDERR to 'make-process', it will have
a standard error process.  *Note Asynchronous Processes::.  In that
case, waiting for process output from the main process doesn't wait for
output from the standard error process.  To make sure you have received
both all of standard output and all of standard error from a process,
use the following code:

     (while (accept-process-output process))
     (while (accept-process-output stderr-process))

   Reading pending standard error from a process running on a remote
host is not possible this way.

==============================================================================
File: elisp.info,  Node: |Processes_and_Threads|,  Prev: |Accepting_Output|,  Up: |Output_from_Processes|
==============================================================================

                                                         *Processes_and_Threads*

38.9.5 Processes and Threads
----------------------------

Because threads were a relatively late addition to Emacs Lisp, and due
to the way dynamic binding was sometimes used in conjunction with
'accept-process-output', by default a process is locked to the thread
that created it.  When a process is locked to a thread, output from the
process can only be accepted by that thread.

   A Lisp program can specify to which thread a process is to be locked,
or instruct Emacs to unlock a process, in which case its output can be
processed by any thread.  Only a single thread will wait for output from
a given process at one time--once one thread begins waiting for output,
the process is temporarily locked until 'accept-process-output' or
'sit-for' returns.

   If the thread exits, all the processes locked to it are unlocked.

 -- Function: process-thread process
     Return the thread to which PROCESS is locked.  If PROCESS is
     unlocked, return 'nil'.

 -- Function: set-process-thread process thread
     Set the locking thread of PROCESS to THREAD.  THREAD may be 'nil',
     in which case the process is unlocked.

==============================================================================
File: elisp.info,  Node: |Sentinels|,  Next: |Query_Before_Exit|,  Prev: |Output_from_Processes|,  Up: |Processes|
==============================================================================

                                                                     *Sentinels*

38.10 Sentinels: Detecting Process Status Changes
-------------------------------------------------

A "process sentinel" is a function that is called whenever the
associated process changes status for any reason, including signals
(whether sent by Emacs or caused by the process's own actions) that
terminate, stop, or continue the process.  The process sentinel is also
called if the process exits.  The sentinel receives two arguments: the
process for which the event occurred, and a string describing the type
of event.

   If no sentinel function was specified for a process, it will use the
default sentinel function, which inserts a message in the process's
buffer with the process name and the string describing the event.

   The string describing the event looks like one of the following:

   * '"finished\n"'.

   * '"deleted\n"'.

   * '"exited abnormally with code EXITCODE (core dumped)\n"'.  The
     "core dumped" part is optional, and only appears if the process
     dumped core.

   * '"failed with code FAIL-CODE\n"'.

   * '"SIGNAL-DESCRIPTION (core dumped)\n"'.  The SIGNAL-DESCRIPTION is
     a system-dependent textual description of a signal, e.g.,
     '"killed"' for 'SIGKILL'.  The "core dumped" part is optional, and
     only appears if the process dumped core.

   * '"open from HOST-NAME\n"'.

   * '"open\n"'.

   * '"connection broken by remote peer\n"'.

   A sentinel runs only while Emacs is waiting (e.g., for terminal
input, or for time to elapse, or for process output).  This avoids the
timing errors that could result from running sentinels at random places
in the middle of other Lisp programs.  A program can wait, so that
sentinels will run, by calling 'sit-for' or 'sleep-for' (*note
Waiting::), or 'accept-process-output' (*note Accepting Output::).
Emacs also allows sentinels to run when the command loop is reading
input.  'delete-process' calls the sentinel when it terminates a running
process.

   Emacs does not keep a queue of multiple reasons to call the sentinel
of one process; it records just the current status and the fact that
there has been a change.  Therefore two changes in status, coming in
quick succession, can call the sentinel just once.  However, process
termination will always run the sentinel exactly once.  This is because
the process status can't change again after termination.

   Emacs explicitly checks for output from the process before running
the process sentinel.  Once the sentinel runs due to process
termination, no further output can arrive from the process.

   A sentinel that writes the output into the buffer of the process
should check whether the buffer is still alive.  If it tries to insert
into a dead buffer, it will get an error.  If the buffer is dead,
'(buffer-name (process-buffer PROCESS))' returns 'nil'.

   Quitting is normally inhibited within a sentinel--otherwise, the
effect of typing 'C-g' at command level or to quit a user command would
be unpredictable.  If you want to permit quitting inside a sentinel,
bind 'inhibit-quit' to 'nil'.  In most cases, the right way to do this
is with the macro 'with-local-quit'.  *Note Quitting::.

   If an error happens during execution of a sentinel, it is caught
automatically, so that it doesn't stop the execution of whatever
programs was running when the sentinel was started.  However, if
'debug-on-error' is non-'nil', errors are not caught.  This makes it
possible to use the Lisp debugger to debug the sentinel.  *Note
Debugger::.

   While a sentinel is running, the process sentinel is temporarily set
to 'nil' so that the sentinel won't run recursively.  For this reason it
is not possible for a sentinel to specify a new sentinel.

   Note that Emacs automatically saves and restores the match data while
executing sentinels.  *Note Match Data::.

 -- Function: set-process-sentinel process sentinel
     This function associates SENTINEL with PROCESS.  If SENTINEL is
     'nil', then the process will have the default sentinel, which
     inserts a message in the process's buffer when the process status
     changes.

     Changes in process sentinels take effect immediately--if the
     sentinel is slated to be run but has not been called yet, and you
     specify a new sentinel, the eventual call to the sentinel will use
     the new one.

          (defun msg-me (process event)
             (princ
               (format "Process: %s had the event '%s'" process event)))
          (set-process-sentinel (get-process "shell") 'msg-me)
               => msg-me
          (kill-process (get-process "shell"))
               -| Process: #<process shell> had the event 'killed'
               => #<process shell>

 -- Function: process-sentinel process
     This function returns the sentinel of PROCESS.

   In case a process status changes need to be passed to several
sentinels, you can use 'add-function' to combine an existing sentinel
with a new one.  *Note Advising Functions::.

 -- Function: waiting-for-user-input-p
     While a sentinel or filter function is running, this function
     returns non-'nil' if Emacs was waiting for keyboard input from the
     user at the time the sentinel or filter function was called, or
     'nil' if it was not.

==============================================================================
File: elisp.info,  Node: |Query_Before_Exit|,  Next: |System_Processes|,  Prev: |Sentinels|,  Up: |Processes|
==============================================================================

                                                             *Query_Before_Exit*

38.11 Querying Before Exit
--------------------------

When Emacs exits, it terminates all its subprocesses.  For subprocesses
that run a program, it sends them the 'SIGHUP' signal; connections are
simply closed.  Because subprocesses may be doing valuable work, Emacs
normally asks the user to confirm that it is ok to terminate them.  Each
process has a query flag, which, if non-'nil', says that Emacs should
ask for confirmation before exiting and thus killing that process.  The
default for the query flag is 't', meaning _do_ query.

 -- Function: process-query-on-exit-flag process
     This returns the query flag of PROCESS.

 -- Function: set-process-query-on-exit-flag process flag
     This function sets the query flag of PROCESS to FLAG.  It returns
     FLAG.

     Here is an example of using 'set-process-query-on-exit-flag' on a
     shell process to avoid querying:

          (set-process-query-on-exit-flag (get-process "shell") nil)
               => nil

 -- User Option: confirm-kill-processes
     If this user option is set to 't' (the default), then Emacs asks
     for confirmation before killing processes on exit.  If it is 'nil',
     Emacs kills processes without confirmation, i.e., the query flag of
     all processes is ignored.

==============================================================================
File: elisp.info,  Node: |System_Processes|,  Next: |Transaction_Queues|,  Prev: |Query_Before_Exit|,  Up: |Processes|
==============================================================================

                                                              *System_Processes*

38.12 Accessing Other Processes
-------------------------------

In addition to accessing and manipulating processes that are
subprocesses of the current Emacs session, Emacs Lisp programs can also
access other processes running on the same machine.  We call these
"system processes", to distinguish them from Emacs subprocesses.

   Emacs provides several primitives for accessing system processes.
Not all platforms support these primitives; on those which don't, these
primitives return 'nil'.

 -- Function: list-system-processes
     This function returns a list of all the processes running on the
     system.  Each process is identified by its PID, a numerical process
     ID that is assigned by the OS and distinguishes the process from
     all the other processes running on the same machine at the same
     time.

 -- Function: process-attributes pid
     This function returns an alist of attributes for the process
     specified by its process ID PID.  Each association in the alist is
     of the form '(KEY . VALUE)', where KEY designates the attribute and
     VALUE is the value of that attribute.  The various attribute KEYs
     that this function can return are listed below.  Not all platforms
     support all of these attributes; if an attribute is not supported,
     its association will not appear in the returned alist.

     'euid'
          The effective user ID of the user who invoked the process.
          The corresponding VALUE is a number.  If the process was
          invoked by the same user who runs the current Emacs session,
          the value is identical to what 'user-uid' returns (*note User
          Identification::).

     'user'
          User name corresponding to the process's effective user ID, a
          string.

     'egid'
          The group ID of the effective user ID, a number.

     'group'
          Group name corresponding to the effective user's group ID, a
          string.

     'comm'
          The name of the command that runs in the process.  This is a
          string that usually specifies the name of the executable file
          of the process, without the leading directories.  However,
          some special system processes can report strings that do not
          correspond to an executable file of a program.

     'state'
          The state code of the process.  This is a short string that
          encodes the scheduling state of the process.  Here's a list of
          the most frequently seen codes:

          '"D"'
               uninterruptible sleep (usually I/O)
          '"R"'
               running
          '"S"'
               interruptible sleep (waiting for some event)
          '"T"'
               stopped, e.g., by a job control signal
          '"Z"'
               zombie: a process that terminated, but was not reaped by
               its parent

          For the full list of the possible states, see the manual page
          of the 'ps' command.

     'ppid'
          The process ID of the parent process, a number.

     'pgrp'
          The process group ID of the process, a number.

     'sess'
          The session ID of the process.  This is a number that is the
          process ID of the process's "session leader".

     'ttname'
          A string that is the name of the process's controlling
          terminal.  On Unix and GNU systems, this is normally the file
          name of the corresponding terminal device, such as
          '/dev/pts65'.

     'tpgid'
          The numerical process group ID of the foreground process group
          that uses the process's terminal.

     'minflt'
          The number of minor page faults caused by the process since
          its beginning.  (Minor page faults are those that don't
          involve reading from disk.)

     'majflt'
          The number of major page faults caused by the process since
          its beginning.  (Major page faults require a disk to be read,
          and are thus more expensive than minor page faults.)

     'cminflt'
     'cmajflt'
          Like 'minflt' and 'majflt', but include the number of page
          faults for all the child processes of the given process.

     'utime'
          Time spent by the process in the user context, for running the
          application's code.  The corresponding VALUE is a Lisp
          timestamp (*note Time of Day::).

     'stime'
          Time spent by the process in the system (kernel) context, for
          processing system calls.  The corresponding VALUE is a Lisp
          timestamp.

     'time'
          The sum of 'utime' and 'stime'.  The corresponding VALUE is a
          Lisp timestamp.

     'cutime'
     'cstime'
     'ctime'
          Like 'utime', 'stime', and 'time', but include the times of
          all the child processes of the given process.

     'pri'
          The numerical priority of the process.

     'nice'
          The "nice value" of the process, a number.  (Processes with
          smaller nice values get scheduled more favorably.)

     'thcount'
          The number of threads in the process.

     'start'
          The time when the process was started, as a Lisp timestamp.

     'etime'
          The time elapsed since the process started, as a Lisp
          timestamp.

     'vsize'
          The virtual memory size of the process, measured in kilobytes.

     'rss'
          The size of the process's "resident set", the number of
          kilobytes occupied by the process in the machine's physical
          memory.

     'pcpu'
          The percentage of the CPU time used by the process since it
          started.  The corresponding VALUE is a floating-point number
          between 0 and 100.

     'pmem'
          The percentage of the total physical memory installed on the
          machine used by the process's resident set.  The value is a
          floating-point number between 0 and 100.

     'args'
          The command-line with which the process was invoked.  This is
          a string in which individual command-line arguments are
          separated by blanks; whitespace characters that are embedded
          in the arguments are quoted as appropriate for the system's
          shell: escaped by backslash characters on GNU and Unix, and
          enclosed in double quote characters on Windows.  Thus, this
          command-line string can be directly used in primitives such as
          'shell-command'.

==============================================================================
File: elisp.info,  Node: |Transaction_Queues|,  Next: |Network|,  Prev: |System_Processes|,  Up: |Processes|
==============================================================================

                                                            *Transaction_Queues*

38.13 Transaction Queues
------------------------

You can use a "transaction queue" to communicate with a subprocess using
transactions.  First use 'tq-create' to create a transaction queue
communicating with a specified process.  Then you can call 'tq-enqueue'
to send a transaction.

 -- Function: tq-create process
     This function creates and returns a transaction queue communicating
     with PROCESS.  The argument PROCESS should be a subprocess capable
     of sending and receiving streams of bytes.  It may be a child
     process, or it may be a TCP connection to a server, possibly on
     another machine.

 -- Function: tq-enqueue queue question regexp closure fn &optional
          delay-question
     This function sends a transaction to queue QUEUE.  Specifying the
     queue has the effect of specifying the subprocess to talk to.

     The argument QUESTION is the outgoing message that starts the
     transaction.  The argument FN is the function to call when the
     corresponding answer comes back; it is called with two arguments:
     CLOSURE, and the answer received.

     The argument REGEXP is a regular expression that should match text
     at the end of the entire answer, but nothing before; that's how
     'tq-enqueue' determines where the answer ends.

     If the argument DELAY-QUESTION is non-'nil', delay sending this
     question until the process has finished replying to any previous
     questions.  This produces more reliable results with some
     processes.

 -- Function: tq-close queue
     Shut down transaction queue QUEUE, waiting for all pending
     transactions to complete, and then terminate the connection or
     child process.

   Transaction queues are implemented by means of a filter function.
*Note Filter Functions::.

==============================================================================
File: elisp.info,  Node: |Network|,  Next: |Network_Servers|,  Prev: |Transaction_Queues|,  Up: |Processes|
==============================================================================

                                                                       *Network*

38.14 Network Connections
-------------------------

Emacs Lisp programs can open stream (TCP) and datagram (UDP) network
connections (*note Datagrams::) to other processes on the same machine
or other machines.  A network connection is handled by Lisp much like a
subprocess, and is represented by a process object.  However, the
process you are communicating with is not a child of the Emacs process,
has no process ID, and you can't kill it or send it signals.  All you
can do is send and receive data.  'delete-process' closes the
connection, but does not kill the program at the other end; that program
must decide what to do about closure of the connection.

   Lisp programs can listen for connections by creating network servers.
A network server is also represented by a kind of process object, but
unlike a network connection, the network server never transfers data
itself.  When it receives a connection request, it creates a new network
connection to represent the connection just made.  (The network
connection inherits certain information, including the process plist,
from the server.)  The network server then goes back to listening for
more connection requests.

   Network connections and servers are created by calling
'make-network-process' with an argument list consisting of
keyword/argument pairs, for example ':server t' to create a server
process, or ':type 'datagram' to create a datagram connection.  *Note
Low-Level Network::, for details.  You can also use the
'open-network-stream' function described below.

   To distinguish the different types of processes, the 'process-type'
function returns the symbol 'network' for a network connection or
server, 'serial' for a serial port connection, 'pipe' for a pipe
connection, or 'real' for a real subprocess.

   The 'process-status' function returns 'open', 'closed', 'connect',
'stop', or 'failed' for network connections.  For a network server, the
status is always 'listen'.  Except for 'stop', none of those values is
possible for a real subprocess.  *Note Process Information::.

   You can stop and resume operation of a network process by calling
'stop-process' and 'continue-process'.  For a server process, being
stopped means not accepting new connections.  (Up to 5 connection
requests will be queued for when you resume the server; you can increase
this limit, unless it is imposed by the operating system--see the
':server' keyword of 'make-network-process', *note Network Processes::.)
For a network stream connection, being stopped means not processing
input (any arriving input waits until you resume the connection).  For a
datagram connection, some number of packets may be queued but input may
be lost.  You can use the function 'process-command' to determine
whether a network connection or server is stopped; a non-'nil' value
means yes.

   Emacs can create encrypted network connections, using either built-in
or external support.  The built-in support uses the GnuTLS Transport
Layer Security Library; see the GnuTLS project page
(https://www.gnu.org/software/gnutls/).  If your Emacs was compiled with
GnuTLS support, the function 'gnutls-available-p' is defined and returns
non-'nil'.  For more details, *note Overview: (emacs-gnutls)Top.  The
external support uses the 'starttls.el' library, which requires a helper
utility such as 'gnutls-cli' to be installed on the system.  The
'open-network-stream' function can transparently handle the details of
creating encrypted connections for you, using whatever support is
available.

 -- Function: open-network-stream name buffer host service &rest
          parameters
     This function opens a TCP connection, with optional encryption, and
     returns a process object that represents the connection.

     The NAME argument specifies the name for the process object.  It is
     modified as necessary to make it unique.

     The BUFFER argument is the buffer to associate with the connection.
     Output from the connection is inserted in the buffer, unless you
     specify your own filter function to handle the output.  If BUFFER
     is 'nil', it means that the connection is not associated with any
     buffer.

     The arguments HOST and SERVICE specify where to connect to; HOST is
     the host name (a string), and SERVICE is the name of a defined
     network service (a string) or a port number (an integer like '80'
     or an integer string like '"80"').

     The remaining arguments PARAMETERS are keyword/argument pairs that
     are mainly relevant to encrypted connections:

     ':nowait BOOLEAN'
          If non-'nil', try to make an asynchronous connection.

     ':type TYPE'
          The type of connection.  Options are:

          'plain'
               An ordinary, unencrypted connection.
          'tls'
          'ssl'
               A TLS (Transport Layer Security) connection.
          'nil'
          'network'
               Start with a plain connection, and if parameters
               ':success' and ':capability-command' are supplied, try to
               upgrade to an encrypted connection via STARTTLS.  If that
               fails, retain the unencrypted connection.
          'starttls'
               As for 'nil', but if STARTTLS fails drop the connection.
          'shell'
               A shell connection.

     ':always-query-capabilities BOOLEAN'
          If non-'nil', always ask for the server's capabilities, even
          when doing a 'plain' connection.

     ':capability-command CAPABILITY-COMMAND'
          Command string to query the host capabilities.

     ':end-of-command REGEXP'
     ':end-of-capability REGEXP'
          Regular expression matching the end of a command, or the end
          of the command CAPABILITY-COMMAND.  The latter defaults to the
          former.

     ':starttls-function FUNCTION'
          Function of one argument (the response to CAPABILITY-COMMAND),
          which returns either 'nil', or the command to activate
          STARTTLS if supported.

     ':success REGEXP'
          Regular expression matching a successful STARTTLS negotiation.

     ':use-starttls-if-possible BOOLEAN'
          If non-'nil', do opportunistic STARTTLS upgrades even if Emacs
          doesn't have built-in TLS support.

     ':warn-unless-encrypted BOOLEAN'
          If non-'nil', and ':return-value' is also non-'nil', Emacs
          will warn if the connection isn't encrypted.  This is useful
          for protocols like IMAP and the like, where most users would
          expect the network traffic to be encrypted.

     ':client-certificate LIST-OR-T'
          Either a list of the form '(KEY-FILE CERT-FILE)', naming the
          certificate key file and certificate file itself, or 't',
          meaning to query 'auth-source' for this information (*note
          auth-source: (auth)Help for users.).  Only used for TLS or
          STARTTLS.  To enable automatic queries of 'auth-source' when
          ':client-certificate' is not specified customize
          'network-stream-use-client-certificates' to t.

     ':return-list CONS-OR-NIL'
          The return value of this function.  If omitted or 'nil',
          return a process object.  Otherwise, a cons of the form
          '(PROCESS-OBJECT . PLIST)', where PLIST has keywords:

          ':greeting STRING-OR-NIL'
               If non-'nil', the greeting string returned by the host.
          ':capabilities STRING-OR-NIL'
               If non-'nil', the host's capability string.
          ':type SYMBOL'
               The connection type: 'plain' or 'tls'.

     ':shell-command STRING-OR-NIL'
          If the connection 'type' is 'shell', this parameter will be
          interpreted as a format-spec string that will be executed to
          make the connection.  The specs available are '%s' for the
          host name and '%p' for the port number.  For instance, if you
          want to first ssh to 'gateway' before making a plain
          connection, then this parameter could be something like 'ssh
          gateway nc %s %p'.

==============================================================================
File: elisp.info,  Node: |Network_Servers|,  Next: |Datagrams|,  Prev: |Network|,  Up: |Processes|
==============================================================================

                                                               *Network_Servers*

38.15 Network Servers
---------------------

You create a server by calling 'make-network-process' (*note Network
Processes::) with ':server t'.  The server will listen for connection
requests from clients.  When it accepts a client connection request,
that creates a new network connection, itself a process object, with the
following parameters:

   * The connection's process name is constructed by concatenating the
     server process's NAME with a client identification string.  The
     client identification string for an IPv4 connection looks like
     '<A.B.C.D:P>', which represents an address and port number.
     Otherwise, it is a unique number in brackets, as in '<NNN>'.  The
     number is unique for each connection in the Emacs session.

   * If the server has a non-default filter, the connection process does
     not get a separate process buffer; otherwise, Emacs creates a new
     buffer for the purpose.  The buffer name is the server's buffer
     name or process name, concatenated with the client identification
     string.

     The server's process buffer value is never used directly, but the
     log function can retrieve it and use it to log connections by
     inserting text there.

   * The communication type and the process filter and sentinel are
     inherited from those of the server.  The server never directly uses
     its filter and sentinel; their sole purpose is to initialize
     connections made to the server.

   * The connection's process contact information is set according to
     the client's addressing information (typically an IP address and a
     port number).  This information is associated with the
     'process-contact' keywords ':host', ':service', ':remote'.

   * The connection's local address is set up according to the port
     number used for the connection.

   * The client process's plist is initialized from the server's plist.

==============================================================================
File: elisp.info,  Node: |Datagrams|,  Next: |Low_Level_Network|,  Prev: |Network_Servers|,  Up: |Processes|
==============================================================================

                                                                     *Datagrams*

38.16 Datagrams
---------------

A "datagram" connection communicates with individual packets rather than
streams of data.  Each call to 'process-send' sends one datagram packet
(*note Input to Processes::), and each datagram received results in one
call to the filter function.

   The datagram connection doesn't have to talk with the same remote
peer all the time.  It has a "remote peer address" which specifies where
to send datagrams to.  Each time an incoming datagram is passed to the
filter function, the peer address is set to the address that datagram
came from; that way, if the filter function sends a datagram, it will go
back to that place.  You can specify the remote peer address when you
create the datagram connection using the ':remote' keyword.  You can
change it later on by calling 'set-process-datagram-address'.

 -- Function: process-datagram-address process
     If PROCESS is a datagram connection or server, this function
     returns its remote peer address.

 -- Function: set-process-datagram-address process address
     If PROCESS is a datagram connection or server, this function sets
     its remote peer address to ADDRESS.

==============================================================================
File: elisp.info,  Node: |Low_Level_Network|,  Next: |Misc_Network|,  Prev: |Datagrams|,  Up: |Processes|
==============================================================================

                                                             *Low_Level_Network*

38.17 Low-Level Network Access
------------------------------

You can also create network connections by operating at a lower level
than that of 'open-network-stream', using 'make-network-process'.

MENU

* Proc: Network Processes.   Using 'make-network-process'.
* Options: Network Options.  Further control over network connections.
* Features: Network Feature Testing.
                             Determining which network features work on
                               the machine you are using.

==============================================================================
File: elisp.info,  Node: |Network_Processes|,  Next: |Network_Options|,  Up: |Low_Level_Network|
==============================================================================

                                                             *Network_Processes*

38.17.1 'make-network-process'
------------------------------

The basic function for creating network connections and network servers
is 'make-network-process'.  It can do either of those jobs, depending on
the arguments you give it.

 -- Function: make-network-process &rest args
     This function creates a network connection or server and returns
     the process object that represents it.  The arguments ARGS are a
     list of keyword/argument pairs.  Omitting a keyword is always
     equivalent to specifying it with value 'nil', except for ':coding',
     ':filter-multibyte', and ':reuseaddr'.  Here are the meaningful
     keywords (those corresponding to network options are listed in the
     following section):

     :name NAME
          Use the string NAME as the process name.  It is modified if
          necessary to make it unique.

     :type TYPE
          Specify the communication type.  A value of 'nil' specifies a
          stream connection (the default); 'datagram' specifies a
          datagram connection; 'seqpacket' specifies a sequenced packet
          stream connection.  Both connections and servers can be of
          these types.

     :server SERVER-FLAG
          If SERVER-FLAG is non-'nil', create a server.  Otherwise,
          create a connection.  For a stream type server, SERVER-FLAG
          may be an integer, which then specifies the length of the
          queue of pending connections to the server.  The default queue
          length is 5.

     :host HOST
          Specify the host to connect to.  HOST should be a host name or
          Internet address, as a string, or the symbol 'local' to
          specify the local host.  If you specify HOST for a server, it
          must specify a valid address for the local host, and only
          clients connecting to that address will be accepted.  When
          using 'local', by default IPv4 will be used, specify a FAMILY
          of 'ipv6' to override this.  To listen on all interfaces,
          specify an address of '"0.0.0.0"' for IPv4 or '"::"' for IPv6.
          Note that on some operating systems, listening on '"::"' will
          also listen on IPv4, so attempting to then listen separately
          on IPv4 will result in 'EADDRINUSE' errors ('"Address already
          in use"').

     :service SERVICE
          SERVICE specifies a port number to connect to; or, for a
          server, the port number to listen on.  It should be a service
          name like '"https"' that translates to a port number, or an
          integer like '443' or an integer string like '"443"' that
          specifies the port number directly.  For a server, it can also
          be 't', which means to let the system select an unused port
          number.

     :family FAMILY
          FAMILY specifies the address (and protocol) family for
          communication.  'nil' means determine the proper address
          family automatically for the given HOST and SERVICE.  'local'
          specifies a Unix socket, in which case HOST is ignored.
          'ipv4' and 'ipv6' specify to use IPv4 and IPv6, respectively.

     :use-external-socket USE-EXTERNAL-SOCKET
          If USE-EXTERNAL-SOCKET is non-'nil' use any sockets passed to
          Emacs on invocation instead of allocating one.  This is used
          by the Emacs server code to allow on-demand socket activation.
          If Emacs wasn't passed a socket, this option is silently
          ignored.

     :local LOCAL-ADDRESS
          For a server process, LOCAL-ADDRESS is the address to listen
          on.  It overrides FAMILY, HOST and SERVICE, so you might as
          well not specify them.

     :remote REMOTE-ADDRESS
          For a connection, REMOTE-ADDRESS is the address to connect to.
          It overrides FAMILY, HOST and SERVICE, so you might as well
          not specify them.

          For a datagram server, REMOTE-ADDRESS specifies the initial
          setting of the remote datagram address.

          The format of LOCAL-ADDRESS or REMOTE-ADDRESS depends on the
          address family:

             - An IPv4 address is represented as a five-element vector
               of four 8-bit integers and one 16-bit integer '[A B C D
               P]' corresponding to numeric IPv4 address A.B.C.D and
               port number P.

             - An IPv6 address is represented as a nine-element vector
               of 16-bit integers '[A B C D E F G H P]' corresponding to
               numeric IPv6 address A:B:C:D:E:F:G:H and port number P.

             - A local address is represented as a string, which
               specifies the address in the local address space.

             - An unsupported-family address is represented by a cons
               '(F . AV)', where F is the family number and AV is a
               vector specifying the socket address using one element
               per address data byte.  Do not rely on this format in
               portable code, as it may depend on implementation defined
               constants, data sizes, and data structure alignment.

     :nowait BOOL
          If BOOL is non-'nil' for a stream connection, return without
          waiting for the connection to complete.  When the connection
          succeeds or fails, Emacs will call the sentinel function, with
          a second argument matching '"open"' (if successful) or
          '"failed"'.  The default is to block, so that
          'make-network-process' does not return until the connection
          has succeeded or failed.

          If you're setting up an asynchronous TLS connection, you have
          to also provide the ':tls-parameters' parameter (see below).

          Depending on the capabilities of Emacs, how asynchronous
          ':nowait' is may vary.  The three elements that may (or may
          not) be done asynchronously are domain name resolution, socket
          setup, and (for TLS connections) TLS negotiation.

          Many functions that interact with process objects, (for
          instance, 'process-datagram-address') rely on them at least
          having a socket before they can return a useful value.  These
          functions will block until the socket has achieved the desired
          status.  The recommended way of interacting with asynchronous
          sockets is to place a sentinel on the process, and not try to
          interact with it before it has changed status to '"run"'.
          That way, none of these functions will block.

     :tls-parameters
          When opening a TLS connection, this should be where the first
          element is the TLS type (which should either be
          'gnutls-x509pki' or 'gnutls-anon', and the remaining elements
          should form a keyword list acceptable for 'gnutls-boot'.
          (This keyword list can be obtained from the
          'gnutls-boot-parameters' function.)  The TLS connection will
          then be negotiated after completing the connection to the
          host.

     :stop STOPPED
          If STOPPED is non-'nil', start the network connection or
          server in the stopped state.

     :buffer BUFFER
          Use BUFFER as the process buffer.

     :coding CODING
          Use CODING as the coding system for this process.  To specify
          different coding systems for decoding data from the connection
          and for encoding data sent to it, specify '(DECODING .
          ENCODING)' for CODING.

          If you don't specify this keyword at all, the default is to
          determine the coding systems from the data.

     :noquery QUERY-FLAG
          Initialize the process query flag to QUERY-FLAG.  *Note Query
          Before Exit::.

     :filter FILTER
          Initialize the process filter to FILTER.

     :filter-multibyte MULTIBYTE
          If MULTIBYTE is non-'nil', strings given to the process filter
          are multibyte, otherwise they are unibyte.  The default is
          't'.

     :sentinel SENTINEL
          Initialize the process sentinel to SENTINEL.

     :log LOG
          Initialize the log function of a server process to LOG.  The
          log function is called each time the server accepts a network
          connection from a client.  The arguments passed to the log
          function are SERVER, CONNECTION, and MESSAGE; where SERVER is
          the server process, CONNECTION is the new process for the
          connection, and MESSAGE is a string describing what has
          happened.

     :plist PLIST
          Initialize the process plist to PLIST.

     The original argument list, modified with the actual connection
     information, is available via the 'process-contact' function.

==============================================================================
File: elisp.info,  Node: |Network_Options|,  Next: |Network_Feature_Testing|,  Prev: |Network_Processes|,  Up: |Low_Level_Network|
==============================================================================

                                                               *Network_Options*

38.17.2 Network Options
-----------------------

The following network options can be specified when you create a network
process.  Except for ':reuseaddr', you can also set or modify these
options later, using 'set-network-process-option'.

   For a server process, the options specified with
'make-network-process' are not inherited by the client connections, so
you will need to set the necessary options for each child connection as
it is created.

:bindtodevice DEVICE-NAME
     If DEVICE-NAME is a non-empty string identifying a network
     interface name (see 'network-interface-list'), only handle packets
     received on that interface.  If DEVICE-NAME is 'nil' (the default),
     handle packets received on any interface.

     Using this option may require special privileges on some systems.

:broadcast BROADCAST-FLAG
     If BROADCAST-FLAG is non-'nil' for a datagram process, the process
     will receive datagram packet sent to a broadcast address, and be
     able to send packets to a broadcast address.  This is ignored for a
     stream connection.

:dontroute DONTROUTE-FLAG
     If DONTROUTE-FLAG is non-'nil', the process can only send to hosts
     on the same network as the local host.

:keepalive KEEPALIVE-FLAG
     If KEEPALIVE-FLAG is non-'nil' for a stream connection, enable
     exchange of low-level keep-alive messages.

:linger LINGER-ARG
     If LINGER-ARG is non-'nil', wait for successful transmission of all
     queued packets on the connection before it is deleted (see
     'delete-process').  If LINGER-ARG is an integer, it specifies the
     maximum time in seconds to wait for queued packets to be sent
     before closing the connection.  The default is 'nil', which means
     to discard unsent queued packets when the process is deleted.

:oobinline OOBINLINE-FLAG
     If OOBINLINE-FLAG is non-'nil' for a stream connection, receive
     out-of-band data in the normal data stream.  Otherwise, ignore
     out-of-band data.

:priority PRIORITY
     Set the priority for packets sent on this connection to the integer
     PRIORITY.  The interpretation of this number is protocol specific;
     such as setting the TOS (type of service) field on IP packets sent
     on this connection.  It may also have system dependent effects,
     such as selecting a specific output queue on the network interface.

:reuseaddr REUSEADDR-FLAG
     If REUSEADDR-FLAG is non-'nil' (the default) for a stream server
     process, allow this server to reuse a specific port number (see
     ':service'), unless another process on this host is already
     listening on that port.  If REUSEADDR-FLAG is 'nil', there may be a
     period of time after the last use of that port (by any process on
     the host) where it is not possible to make a new server on that
     port.

 -- Function: set-network-process-option process option value &optional
          no-error
     This function sets or modifies a network option for network process
     PROCESS.  The accepted options and values are as for
     'make-network-process'.  If NO-ERROR is non-'nil', this function
     returns 'nil' instead of signaling an error if OPTION is not a
     supported option.  If the function successfully completes, it
     returns 't'.

     The current setting of an option is available via the
     'process-contact' function.

==============================================================================
File: elisp.info,  Node: |Network_Feature_Testing|,  Prev: |Network_Options|,  Up: |Low_Level_Network|
==============================================================================

                                                       *Network_Feature_Testing*

38.17.3 Testing Availability of Network Features
------------------------------------------------

To test for the availability of a given network feature, use 'featurep'
like this:

     (featurep 'make-network-process '(KEYWORD VALUE))

The result of this form is 't' if it works to specify KEYWORD with value
VALUE in 'make-network-process'.  Here are some of the KEYWORD--VALUE
pairs you can test in this way.

'(:nowait t)'
     Non-'nil' if non-blocking connect is supported.
'(:type datagram)'
     Non-'nil' if datagrams are supported.
'(:family local)'
     Non-'nil' if local (a.k.a. "UNIX domain") sockets are supported.
'(:family ipv6)'
     Non-'nil' if IPv6 is supported.
'(:service t)'
     Non-'nil' if the system can select the port for a server.

   To test for the availability of a given network option, use
'featurep' like this:

     (featurep 'make-network-process 'KEYWORD)

The accepted KEYWORD values are ':bindtodevice', etc.  For the complete
list, *note Network Options::.  This form returns non-'nil' if that
particular network option is supported by 'make-network-process' (or
'set-network-process-option').

==============================================================================
File: elisp.info,  Node: |Misc_Network|,  Next: |Serial_Ports|,  Prev: |Low_Level_Network|,  Up: |Processes|
==============================================================================

                                                                  *Misc_Network*

38.18 Misc Network Facilities
-----------------------------

These additional functions are useful for creating and operating on
network connections.  Note that they are supported only on some systems.

 -- Function: network-interface-list &optional full family
     This function returns a list describing the network interfaces of
     the machine you are using.  The value is an alist whose elements
     have the form '(IFNAME . ADDRESS)'.  IFNAME is a string naming the
     interface, ADDRESS has the same form as the LOCAL-ADDRESS and
     REMOTE-ADDRESS arguments to 'make-network-process', i.e.  a vector
     of integers.  By default both IPv4 and IPv6 addresses are returned
     if possible.

     Optional argument FULL non-'nil' means to instead return a list of
     one or more elements of the form '(IFNAME ADDR BCAST NETMASK)'.
     IFNAME is a non-unique string naming the interface.  ADDR, BCAST,
     and NETMASK are vectors of integers detailing the IP address,
     broadcast address, and network mask.

     Optional argument FAMILY specified as symbol 'ipv4' or 'ipv6'
     restricts the returned information to IPv4 and IPv6 addresses
     respectively, independently of the value of FULL.  Specifying
     'ipv6' when IPv6 support is not available will result in an error
     being signaled.

     Some examples:

          (network-interface-list) =>
          (("vmnet8" .
            [172 16 76 1 0])
           ("vmnet1" .
            [172 16 206 1 0])
           ("lo0" .
            [65152 0 0 0 0 0 0 1 0])
           ("lo0" .
            [0 0 0 0 0 0 0 1 0])
           ("lo0" .
            [127 0 0 1 0]))

          (network-interface-list t) =>
          (("vmnet8"
            [172 16 76 1 0]
            [172 16 76 255 0]
            [255 255 255 0 0])
           ("vmnet1"
            [172 16 206 1 0]
            [172 16 206 255 0]
            [255 255 255 0 0])
           ("lo0"
            [65152 0 0 0 0 0 0 1 0]
            [65152 0 0 0 65535 65535 65535 65535 0]
            [65535 65535 65535 65535 0 0 0 0 0])
           ("lo0"
            [0 0 0 0 0 0 0 1 0]
            [0 0 0 0 0 0 0 1 0]
            [65535 65535 65535 65535 65535 65535 65535 65535 0])
           ("lo0"
            [127 0 0 1 0]
            [127 255 255 255 0]
            [255 0 0 0 0]))

 -- Function: network-interface-info ifname
     This function returns information about the network interface named
     IFNAME.  The value is a list of the form '(ADDR BCAST NETMASK
     HWADDR FLAGS)'.

     ADDR
          The Internet protocol address.
     BCAST
          The broadcast address.
     NETMASK
          The network mask.
     HWADDR
          The layer 2 address (Ethernet MAC address, for instance).
     FLAGS
          The current flags of the interface.

     Note that this function returns only IPv4 information.

 -- Function: format-network-address address &optional omit-port
     This function converts the Lisp representation of a network address
     to a string.

     A five-element vector '[A B C D P]' represents an IPv4 address
     A.B.C.D and port number P.  'format-network-address' converts that
     to the string '"A.B.C.D:P"'.

     A nine-element vector '[A B C D E F G H P]' represents an IPv6
     address along with a port number.  'format-network-address'
     converts that to the string '"[A:B:C:D:E:F:G:H]:P"'.

     If the vector does not include the port number, P, or if OMIT-PORT
     is non-'nil', the result does not include the ':P' suffix.

 -- Function: network-lookup-address-info name &optional family
     This function is used to perform hostname lookups on NAME, which is
     expected to be an ASCII-only string, otherwise an error is
     signaled.  Call 'puny-encode-domain' on NAME first if you wish to
     lookup internationalized hostnames.

     If successful it returns a list of Lisp representations of network
     addresses, otherwise it returns 'nil'.

     By default both IPv4 and IPv6 lookups are attempted.  The optional
     argument FAMILY controls this behavior, specifying the symbol
     'ipv4' or 'ipv6' restricts lookups to IPv4 and IPv6 respectively.

==============================================================================
File: elisp.info,  Node: |Serial_Ports|,  Next: |Byte_Packing|,  Prev: |Misc_Network|,  Up: |Processes|
==============================================================================

                                                                  *Serial_Ports*

38.19 Communicating with Serial Ports
-------------------------------------

Emacs can communicate with serial ports.  For interactive use, 'M-x
serial-term' opens a terminal window.  In a Lisp program,
'make-serial-process' creates a process object.

   The serial port can be configured at run-time, without having to
close and re-open it.  The function 'serial-process-configure' lets you
change the speed, bytesize, and other parameters.  In a terminal window
created by 'serial-term', you can click on the mode line for
configuration.

   A serial connection is represented by a process object, which can be
used in a similar way to a subprocess or network process.  You can send
and receive data, and configure the serial port.  A serial process
object has no process ID, however, and you can't send signals to it, and
the status codes are different from other types of processes.
'delete-process' on the process object or 'kill-buffer' on the process
buffer close the connection, but this does not affect the device
connected to the serial port.

   The function 'process-type' returns the symbol 'serial' for a process
object representing a serial port connection.

   Serial ports are available on GNU/Linux, Unix, and MS Windows
systems.

 -- Command: serial-term port speed &optional line-mode
     Start a terminal-emulator for a serial port in a new buffer.  PORT
     is the name of the serial port to connect to.  For example, this
     could be '/dev/ttyS0' on Unix.  On MS Windows, this could be
     'COM1', or '\\.\COM10' (double the backslashes in Lisp strings).

     SPEED is the speed of the serial port in bits per second.  9600 is
     a common value.  The buffer is in Term mode; see *note (emacs)Term
     Mode::, for the commands to use in that buffer.  You can change the
     speed and the configuration in the mode line menu.  If LINE-MODE is
     non-'nil', 'term-line-mode' is used; otherwise 'term-raw-mode' is
     used.

 -- Function: make-serial-process &rest args
     This function creates a process and a buffer.  Arguments are
     specified as keyword/argument pairs.  Here's the list of the
     meaningful keywords, with the first two (PORT and SPEED) being
     mandatory:

     ':port PORT'
          This is the name of the serial port.  On Unix and GNU systems,
          this is a file name such as '/dev/ttyS0'.  On Windows, this
          could be 'COM1', or '\\.\COM10' for ports higher than 'COM9'
          (double the backslashes in Lisp strings).

     ':speed SPEED'
          The speed of the serial port in bits per second.  This
          function calls 'serial-process-configure' to handle the speed;
          see the following documentation of that function for more
          details.

     ':name NAME'
          The name of the process.  If NAME is not given, PORT will
          serve as the process name as well.

     ':buffer BUFFER'
          The buffer to associate with the process.  The value can be
          either a buffer or a string that names a buffer.  Process
          output goes at the end of that buffer, unless you specify an
          output stream or filter function to handle the output.  If
          BUFFER is not given, the process buffer's name is taken from
          the value of the ':name' keyword.

     ':coding CODING'
          If CODING is a symbol, it specifies the coding system used for
          both reading and writing for this process.  If CODING is a
          cons '(DECODING . ENCODING)', DECODING is used for reading,
          and ENCODING is used for writing.  If not specified, the
          default is to determine the coding systems from the data
          itself.

     ':noquery QUERY-FLAG'
          Initialize the process query flag to QUERY-FLAG.  *Note Query
          Before Exit::.  The flags defaults to 'nil' if unspecified.

     ':stop BOOL'
          Start process in the stopped state if BOOL is non-'nil'.  In
          the stopped state, a serial process does not accept incoming
          data, but you can send outgoing data.  The stopped state is
          cleared by 'continue-process' and set by 'stop-process'.

     ':filter FILTER'
          Install FILTER as the process filter.

     ':sentinel SENTINEL'
          Install SENTINEL as the process sentinel.

     ':plist PLIST'
          Install PLIST as the initial plist of the process.

     ':bytesize'
     ':parity'
     ':stopbits'
     ':flowcontrol'
          These are handled by 'serial-process-configure', which is
          called by 'make-serial-process'.

     The original argument list, possibly modified by later
     configuration, is available via the function 'process-contact'.

     Here is an example:

          (make-serial-process :port "/dev/ttyS0" :speed 9600)

 -- Function: serial-process-configure &rest args

     This function configures a serial port connection.  Arguments are
     specified as keyword/argument pairs.  Attributes that are not given
     are re-initialized from the process's current configuration
     (available via the function 'process-contact'), or set to
     reasonable default values.  The following arguments are defined:

     ':process PROCESS'
     ':name NAME'
     ':buffer BUFFER'
     ':port PORT'
          Any of these arguments can be given to identify the process
          that is to be configured.  If none of these arguments is
          given, the current buffer's process is used.

     ':speed SPEED'
          The speed of the serial port in bits per second, a.k.a. "baud
          rate".  The value can be any number, but most serial ports
          work only at a few defined values between 1200 and 115200,
          with 9600 being the most common value.  If SPEED is 'nil', the
          function ignores all other arguments and does not configure
          the port.  This may be useful for special serial ports such as
          Bluetooth-to-serial converters, which can only be configured
          through 'AT' commands sent through the connection.  The value
          of 'nil' for SPEED is valid only for connections that were
          already opened by a previous call to 'make-serial-process' or
          'serial-term'.

     ':bytesize BYTESIZE'
          The number of bits per byte, which can be 7 or 8.  If BYTESIZE
          is not given or 'nil', it defaults to 8.

     ':parity PARITY'
          The value can be 'nil' (don't use parity), the symbol 'odd'
          (use odd parity), or the symbol 'even' (use even parity).  If
          PARITY is not given, it defaults to no parity.

     ':stopbits STOPBITS'
          The number of stopbits used to terminate a transmission of
          each byte.  STOPBITS can be 1 or 2.  If STOPBITS is not given
          or 'nil', it defaults to 1.

     ':flowcontrol FLOWCONTROL'
          The type of flow control to use for this connection, which is
          either 'nil' (don't use flow control), the symbol 'hw' (use
          RTS/CTS hardware flow control), or the symbol 'sw' (use
          XON/XOFF software flow control).  If FLOWCONTROL is not given,
          it defaults to no flow control.

     Internally, 'make-serial-process' calls 'serial-process-configure'
     for the initial configuration of the serial port.

==============================================================================
File: elisp.info,  Node: |Byte_Packing|,  Prev: |Serial_Ports|,  Up: |Processes|
==============================================================================

                                                                  *Byte_Packing*

38.20 Packing and Unpacking Byte Arrays
---------------------------------------

This section describes how to pack and unpack arrays of bytes, usually
for binary network protocols.  These functions convert byte arrays to
alists, and vice versa.  The byte array can be represented as a unibyte
string or as a vector of integers, while the alist associates symbols
either with fixed-size objects or with recursive sub-alists.  To use the
functions referred to in this section, load the 'bindat' library.

   Conversion from byte arrays to nested alists is also known as
"deserializing" or "unpacking", while going in the opposite direction is
also known as "serializing" or "packing".

MENU

* |Bindat_Spec|::         Describing data layout.
* |Bindat_Functions|::    Doing the unpacking and packing.

==============================================================================
File: elisp.info,  Node: |Bindat_Spec|,  Next: |Bindat_Functions|,  Up: |Byte_Packing|
==============================================================================

                                                                   *Bindat_Spec*

38.20.1 Describing Data Layout
------------------------------

To control unpacking and packing, you write a "data layout
specification", a special nested list describing named and typed
"fields".  This specification controls the length of each field to be
processed, and how to pack or unpack it.  We normally keep bindat specs
in variables whose names end in '-bindat-spec'; that kind of name is
automatically recognized as risky.

   A field's "type" describes the size (in bytes) of the object that the
field represents and, in the case of multibyte fields, how the bytes are
ordered within the field.  The two possible orderings are "big endian"
(also known as "network byte ordering") and "little endian".  For
instance, the number '#x23cd' (decimal 9165) in big endian would be the
two bytes '#x23' '#xcd'; and in little endian, '#xcd' '#x23'.  Here are
the possible type values:

'u8'
'byte'
     Unsigned byte, with length 1.

'u16'
'word'
'short'
     Unsigned integer in network byte order, with length 2.

'u24'
     Unsigned integer in network byte order, with length 3.

'u32'
'dword'
'long'
     Unsigned integer in network byte order, with length 4.  Note: These
     values may be limited by Emacs's integer implementation limits.

'u16r'
'u24r'
'u32r'
     Unsigned integer in little endian order, with length 2, 3 and 4,
     respectively.

'str LEN'
     String of length LEN.

'strz LEN'
     Zero-terminated string, in a fixed-size field with length LEN.

'vec LEN [TYPE]'
     Vector of LEN elements of type TYPE, defaulting to bytes.  The TYPE
     is any of the simple types above, or another vector specified as a
     list of the form '(vec LEN [TYPE])'.

'ip'
     Four-byte vector representing an Internet address.  For example:
     '[127 0 0 1]' for localhost.

'bits LEN'
     List of set bits in LEN bytes.  The bytes are taken in big endian
     order and the bits are numbered starting with '8 * LEN - 1' and
     ending with zero.  For example: 'bits 2' unpacks '#x28' '#x1c' to
     '(2 3 4 11 13)' and '#x1c' '#x28' to '(3 5 10 11 12)'.

'(eval FORM)'
     FORM is a Lisp expression evaluated at the moment the field is
     unpacked or packed.  The result of the evaluation should be one of
     the above-listed type specifications.

   For a fixed-size field, the length LEN is given as an integer
specifying the number of bytes in the field.

   When the length of a field is not fixed, it typically depends on the
value of a preceding field.  In this case, the length LEN can be given
either as a list '(NAME ...)' identifying a "field name" in the format
specified for 'bindat-get-field' below, or by an expression '(eval
FORM)' where FORM should evaluate to an integer, specifying the field
length.

   A field specification generally has the form '([NAME] HANDLER)',
where NAME is optional.  Don't use names that are symbols meaningful as
type specifications (above) or handler specifications (below), since
that would be ambiguous.  NAME can be a symbol or an expression '(eval
FORM)', in which case FORM should evaluate to a symbol.

   HANDLER describes how to unpack or pack the field and can be one of
the following:

'TYPE'
     Unpack/pack this field according to the type specification TYPE.

'eval FORM'
     Evaluate FORM, a Lisp expression, for side-effect only.  If the
     field name is specified, the value is bound to that field name.

'fill LEN'
     Skip LEN bytes.  In packing, this leaves them unchanged, which
     normally means they remain zero.  In unpacking, this means they are
     ignored.

'align LEN'
     Skip to the next multiple of LEN bytes.

'struct SPEC-NAME'
     Process SPEC-NAME as a sub-specification.  This describes a
     structure nested within another structure.

'union FORM (TAG SPEC)...'
     Evaluate FORM, a Lisp expression, find the first TAG that matches
     it, and process its associated data layout specification SPEC.
     Matching can occur in one of three ways:

        * If a TAG has the form '(eval EXPR)', evaluate EXPR with the
          variable 'tag' dynamically bound to the value of FORM.  A
          non-'nil' result indicates a match.

        * TAG matches if it is 'equal' to the value of FORM.

        * TAG matches unconditionally if it is 't'.

'repeat COUNT FIELD-SPECS...'
     Process the FIELD-SPECS recursively, in order, then repeat starting
     from the first one, processing all the specifications COUNT times
     overall.  The COUNT is given using the same formats as a field
     length--if an 'eval' form is used, it is evaluated just once.  For
     correct operation, each specification in FIELD-SPECS must include a
     name.

   For the '(eval FORM)' forms used in a bindat specification, the FORM
can access and update these dynamically bound variables during
evaluation:

'last'
     Value of the last field processed.

'bindat-raw'
     The data as a byte array.

'bindat-idx'
     Current index (within 'bindat-raw') for unpacking or packing.

'struct'
     The alist containing the structured data that have been unpacked so
     far, or the entire structure being packed.  You can use
     'bindat-get-field' to access specific fields of this structure.

'count'
'index'
     Inside a 'repeat' block, these contain the maximum number of
     repetitions (as specified by the COUNT parameter), and the current
     repetition number (counting from 0).  Setting 'count' to zero will
     terminate the inner-most repeat block after the current repetition
     has completed.

==============================================================================
File: elisp.info,  Node: |Bindat_Functions|,  Prev: |Bindat_Spec|,  Up: |Byte_Packing|
==============================================================================

                                                              *Bindat_Functions*

38.20.2 Functions to Unpack and Pack Bytes
------------------------------------------

In the following documentation, SPEC refers to a data layout
specification, 'bindat-raw' to a byte array, and STRUCT to an alist
representing unpacked field data.

 -- Function: bindat-unpack spec bindat-raw &optional bindat-idx
     This function unpacks data from the unibyte string or byte array
     'bindat-raw' according to SPEC.  Normally, this starts unpacking at
     the beginning of the byte array, but if BINDAT-IDX is non-'nil', it
     specifies a zero-based starting position to use instead.

     The value is an alist or nested alist in which each element
     describes one unpacked field.

 -- Function: bindat-get-field struct &rest name
     This function selects a field's data from the nested alist STRUCT.
     Usually STRUCT was returned by 'bindat-unpack'.  If NAME
     corresponds to just one argument, that means to extract a top-level
     field value.  Multiple NAME arguments specify repeated lookup of
     sub-structures.  An integer name acts as an array index.

     For example, if NAME is '(a b 2 c)', that means to find field 'c'
     in the third element of subfield 'b' of field 'a'.  (This
     corresponds to 'struct.a.b[2].c' in C.)

   Although packing and unpacking operations change the organization of
data (in memory), they preserve the data's "total length", which is the
sum of all the fields' lengths, in bytes.  This value is not generally
inherent in either the specification or alist alone; instead, both
pieces of information contribute to its calculation.  Likewise, the
length of a string or array being unpacked may be longer than the data's
total length as described by the specification.

 -- Function: bindat-length spec struct
     This function returns the total length of the data in STRUCT,
     according to SPEC.

 -- Function: bindat-pack spec struct &optional bindat-raw bindat-idx
     This function returns a byte array packed according to SPEC from
     the data in the alist STRUCT.  It normally creates and fills a new
     byte array starting at the beginning.  However, if BINDAT-RAW is
     non-'nil', it specifies a pre-allocated unibyte string or vector to
     pack into.  If BINDAT-IDX is non-'nil', it specifies the starting
     offset for packing into 'bindat-raw'.

     When pre-allocating, you should make sure '(length BINDAT-RAW)'
     meets or exceeds the total length to avoid an out-of-range error.

 -- Function: bindat-ip-to-string ip
     Convert the Internet address vector IP to a string in the usual
     dotted notation.

          (bindat-ip-to-string [127 0 0 1])
               => "127.0.0.1"

==============================================================================
File: elisp.info,  Node: |Display|,  Next: |System_Interface|,  Prev: |Processes|,  Up: |Top|
==============================================================================

                                                                       *Display*

39 Emacs Display
================

This chapter describes a number of features related to the display that
Emacs presents to the user.

MENU

* |Refresh_Screen|::      Clearing the screen and redrawing everything on it.
* |Forcing_Redisplay|::   Forcing redisplay.
* |Truncation|::          Folding or wrapping long text lines.
* |The_Echo_Area|::       Displaying messages at the bottom of the screen.
* |Warnings|::            Displaying warning messages for the user.
* |Invisible_Text|::      Hiding part of the buffer text.
* |Selective_Display|::   Hiding part of the buffer text (the old way).
* |Temporary_Displays|::  Displays that go away automatically.
* |Overlays|::            Use overlays to highlight parts of the buffer.
* |Size_of_Displayed_Text|::  How large displayed text is.
* |Line_Height|::         Controlling the height of lines.
* |Faces|::               A face defines a graphics style for text characters:
                          font, colors, etc.
* |Fringes|::             Controlling window fringes.
* |Scroll_Bars|::         Controlling scroll bars.
* |Window_Dividers|::     Separating windows visually.
* |Display_Property|::    Images, margins, text size, etc.
* |Images|::              Displaying images in Emacs buffers.
* |Xwidgets|::            Displaying native widgets in Emacs buffers.
* |Buttons|::             Adding clickable buttons to Emacs buffers.
* |Abstract_Display|::    Emacs's Widget for Object Collections.
* |Blinking|::            How Emacs shows the matching open parenthesis.
* |Character_Display|::   How Emacs displays individual characters.
* |Beeping|::             Audible signal to the user.
* |Window_Systems|::      Which window system is being used.
* |Tooltips|::            Tooltip display in Emacs.
* |Bidirectional_Display|:: Display of bidirectional scripts, such as
                             Arabic and Farsi.

==============================================================================
File: elisp.info,  Node: |Refresh_Screen|,  Next: |Forcing_Redisplay|,  Up: |Display|
==============================================================================

                                                                *Refresh_Screen*

39.1 Refreshing the Screen
--------------------------

The function 'redraw-frame' clears and redisplays the entire contents of
a given frame (*note Frames::).  This is useful if the screen is
corrupted.

 -- Function: redraw-frame &optional frame
     This function clears and redisplays frame FRAME.  If FRAME is
     omitted or 'nil', it redraws the selected frame.

   Even more powerful is 'redraw-display':

 -- Command: redraw-display
     This function clears and redisplays all visible frames.

   In Emacs, processing user input takes priority over redisplay.  If
you call these functions when input is available, they don't redisplay
immediately, but the requested redisplay does happen eventually--after
all the input has been processed.

   On text terminals, suspending and resuming Emacs normally also
refreshes the screen.  Some terminal emulators record separate contents
for display-oriented programs such as Emacs and for ordinary sequential
display.  If you are using such a terminal, you might want to inhibit
the redisplay on resumption.

 -- User Option: no-redraw-on-reenter
     This variable controls whether Emacs redraws the entire screen
     after it has been suspended and resumed.  Non-'nil' means there is
     no need to redraw, 'nil' means redrawing is needed.  The default is
     'nil'.

==============================================================================
File: elisp.info,  Node: |Forcing_Redisplay|,  Next: |Truncation|,  Prev: |Refresh_Screen|,  Up: |Display|
==============================================================================

                                                             *Forcing_Redisplay*

39.2 Forcing Redisplay
----------------------

Emacs normally tries to redisplay the screen whenever it waits for
input.  With the following function, you can request an immediate
attempt to redisplay, in the middle of Lisp code, without actually
waiting for input.

 -- Function: redisplay &optional force
     This function tries immediately to redisplay.  The optional
     argument FORCE, if non-'nil', forces the redisplay to be performed,
     instead of being preempted if input is pending.

     The function returns 't' if it actually tried to redisplay, and
     'nil' otherwise.  A value of 't' does not mean that redisplay
     proceeded to completion; it could have been preempted by newly
     arriving input.

   Although 'redisplay' tries immediately to redisplay, it does not
change how Emacs decides which parts of its frame(s) to redisplay.  By
contrast, the following function adds certain windows to the pending
redisplay work (as if their contents had completely changed), but does
not immediately try to perform redisplay.

 -- Function: force-window-update &optional object
     This function forces some or all windows to be updated the next
     time Emacs does a redisplay.  If OBJECT is a window, that window is
     to be updated.  If OBJECT is a buffer or buffer name, all windows
     displaying that buffer are to be updated.  If OBJECT is 'nil' (or
     omitted), all windows are to be updated.

     This function does not do a redisplay immediately; Emacs does that
     as it waits for input, or when the function 'redisplay' is called.

 -- Variable: pre-redisplay-function
     A function run just before redisplay.  It is called with one
     argument, the set of windows to be redisplayed.  The set can be
     'nil', meaning only the selected window, or 't', meaning all the
     windows.

 -- Variable: pre-redisplay-functions
     This hook is run just before redisplay.  It is called once in each
     window that is about to be redisplayed, with 'current-buffer' set
     to the buffer displayed in that window.

==============================================================================
File: elisp.info,  Node: |Truncation|,  Next: |The_Echo_Area|,  Prev: |Forcing_Redisplay|,  Up: |Display|
==============================================================================

                                                                    *Truncation*

39.3 Truncation
---------------

When a line of text extends beyond the right edge of a window, Emacs can
"continue" the line (make it wrap to the next screen line), or
"truncate" the line (limit it to one screen line).  The additional
screen lines used to display a long text line are called "continuation"
lines.  Continuation is not the same as filling; continuation happens on
the screen only, not in the buffer contents, and it breaks a line
precisely at the right margin, not at a word boundary.  *Note Filling::.

   On a graphical display, tiny arrow images in the window fringes
indicate truncated and continued lines (*note Fringes::).  On a text
terminal, a '$' in the rightmost column of the window indicates
truncation; a '\' on the rightmost column indicates a line that wraps.
(The display table can specify alternate characters to use for this;
*note Display Tables::).

 -- User Option: truncate-lines
     If this buffer-local variable is non-'nil', lines that extend
     beyond the right edge of the window are truncated; otherwise, they
     are continued.  As a special exception, the variable
     'truncate-partial-width-windows' takes precedence in
     "partial-width" windows (i.e., windows that do not occupy the
     entire frame width).

 -- User Option: truncate-partial-width-windows
     This variable controls line truncation in "partial-width" windows.
     A partial-width window is one that does not occupy the entire frame
     width (*note Splitting Windows::).  If the value is 'nil', line
     truncation is determined by the variable 'truncate-lines' (see
     above).  If the value is an integer N, lines are truncated if the
     partial-width window has fewer than N columns, regardless of the
     value of 'truncate-lines'; if the partial-width window has N or
     more columns, line truncation is determined by 'truncate-lines'.
     For any other non-'nil' value, lines are truncated in every
     partial-width window, regardless of the value of 'truncate-lines'.

   When horizontal scrolling (*note Horizontal Scrolling::) is in use in
a window, that forces truncation.

 -- Variable: wrap-prefix
     If this buffer-local variable is non-'nil', it defines a "wrap
     prefix" which Emacs displays at the start of every continuation
     line.  (If lines are truncated, 'wrap-prefix' is never used.)  Its
     value may be a string or an image (*note Other Display Specs::), or
     a stretch of whitespace such as specified by the ':width' or
     ':align-to' display properties (*note Specified Space::).  The
     value is interpreted in the same way as a 'display' text property.
     *Note Display Property::.

     A wrap prefix may also be specified for regions of text, using the
     'wrap-prefix' text or overlay property.  This takes precedence over
     the 'wrap-prefix' variable.  *Note Special Properties::.

 -- Variable: line-prefix
     If this buffer-local variable is non-'nil', it defines a "line
     prefix" which Emacs displays at the start of every non-continuation
     line.  Its value may be a string or an image (*note Other Display
     Specs::), or a stretch of whitespace such as specified by the
     ':width' or ':align-to' display properties (*note Specified
     Space::).  The value is interpreted in the same way as a 'display'
     text property.  *Note Display Property::.

     A line prefix may also be specified for regions of text using the
     'line-prefix' text or overlay property.  This takes precedence over
     the 'line-prefix' variable.  *Note Special Properties::.

==============================================================================
File: elisp.info,  Node: |The_Echo_Area|,  Next: |Warnings|,  Prev: |Truncation|,  Up: |Display|
==============================================================================

                                                                 *The_Echo_Area*

39.4 The Echo Area
------------------

The "echo area" is used for displaying error messages (*note Errors::),
for messages made with the 'message' primitive, and for echoing
keystrokes.  It is not the same as the minibuffer, despite the fact that
the minibuffer appears (when active) in the same place on the screen as
the echo area.  *Note The Minibuffer: (emacs)Minibuffer.

   Apart from the functions documented in this section, you can print
Lisp objects to the echo area by specifying 't' as the output stream.
*Note Output Streams::.

MENU

* |Displaying_Messages|:: Explicitly displaying text in the echo area.
* |Progress|::            Informing user about progress of a long operation.
* |Logging_Messages|::    Echo area messages are logged for the user.
* |Echo_Area_Customization|:: Controlling the echo area.

==============================================================================
File: elisp.info,  Node: |Displaying_Messages|,  Next: |Progress|,  Up: |The_Echo_Area|
==============================================================================

                                                           *Displaying_Messages*

39.4.1 Displaying Messages in the Echo Area
-------------------------------------------

This section describes the standard functions for displaying messages in
the echo area.

 -- Function: message format-string &rest arguments
     This function displays a message in the echo area.  FORMAT-STRING
     is a format string, and ARGUMENTS are the objects for its format
     specifications, like in the 'format-message' function (*note
     Formatting Strings::).  The resulting formatted string is displayed
     in the echo area; if it contains 'face' text properties, it is
     displayed with the specified faces (*note Faces::).  The string is
     also added to the 'Messages' buffer, but without text properties
     (*note Logging Messages::).

     Typically grave accent and apostrophe in the format translate to
     matching curved quotes, e.g., "Missing `%s'" might result in
     "Missing 'foo'".  *Note Text Quoting Style::, for how to influence
     or inhibit this translation.

     In batch mode, the message is printed to the standard error stream,
     followed by a newline.

     When 'inhibit-message' is non-'nil', no message will be displayed
     in the echo area, it will only be logged to 'Messages'.

     If FORMAT-STRING is 'nil' or the empty string, 'message' clears the
     echo area; if the echo area has been expanded automatically, this
     brings it back to its normal size.  If the minibuffer is active,
     this brings the minibuffer contents back onto the screen
     immediately.

          (message "Reverting `%s'..." (buffer-name))
           -| Reverting 'subr.el'...
          => "Reverting 'subr.el'..."

          ---------- Echo Area ----------
          Reverting 'subr.el'...
          ---------- Echo Area ----------

     To automatically display a message in the echo area or in a
     pop-buffer, depending on its size, use 'display-message-or-buffer'
     (see below).

     Warning: If you want to use your own string as a message
     verbatim, don't just write '(message STRING)'.  If STRING contains
     '%', '`', or ''' it may be reformatted, with undesirable results.
     Instead, use '(message "%s" STRING)'.

 -- Variable: set-message-function
     If this variable is non-'nil', it should be a function of one
     argument, the text of a message to display in the echo area.  This
     function will be called by 'message' and related functions.  If the
     function returns 'nil', the message is displayed in the echo area
     as usual.  If this function returns a string, that string is
     displayed in the echo area instead of the original one.  If this
     function returns other non-'nil' values, that means the message was
     already handled, so 'message' will not display anything in the echo
     area.  See also 'clear-message-function' that can be used to clear
     the message displayed by this function.

     The default value is the function that displays the message at the
     end of the minibuffer when the minibuffer is active.  However, if
     the text shown in the active minibuffer has the
     'minibuffer-message' text property (*note Special Properties::) on
     some character, the message will be displayed before the first
     character having that property.

 -- Variable: clear-message-function
     If this variable is non-'nil', 'message' and related functions call
     it with no arguments when their argument message is 'nil' or the
     empty string.

     Usually this function is called when the next input event arrives
     after displaying an echo-area message.  The function is expected to
     clear the message displayed by its counterpart function specified
     by 'set-message-function'.

     The default value is the function that clears the message displayed
     in an active minibuffer.

 -- Variable: inhibit-message
     When this variable is non-'nil', 'message' and related functions
     will not use the Echo Area to display messages.

 -- Macro: with-temp-message message &rest body
     This construct displays a message in the echo area temporarily,
     during the execution of BODY.  It displays MESSAGE, executes BODY,
     then returns the value of the last body form while restoring the
     previous echo area contents.

 -- Function: message-or-box format-string &rest arguments
     This function displays a message like 'message', but may display it
     in a dialog box instead of the echo area.  If this function is
     called in a command that was invoked using the mouse--more
     precisely, if 'last-nonmenu-event' (*note Command Loop Info::) is
     either 'nil' or a list--then it uses a dialog box or pop-up menu to
     display the message.  Otherwise, it uses the echo area.  (This is
     the same criterion that 'y-or-n-p' uses to make a similar decision;
     see *note Yes-or-No Queries::.)

     You can force use of the mouse or of the echo area by binding
     'last-nonmenu-event' to a suitable value around the call.

 -- Function: message-box format-string &rest arguments
     This function displays a message like 'message', but uses a dialog
     box (or a pop-up menu) whenever that is possible.  If it is
     impossible to use a dialog box or pop-up menu, because the terminal
     does not support them, then 'message-box' uses the echo area, like
     'message'.

 -- Function: display-message-or-buffer message &optional buffer-name
          action frame
     This function displays the message MESSAGE, which may be either a
     string or a buffer.  If it is shorter than the maximum height of
     the echo area, as defined by 'max-mini-window-height', it is
     displayed in the echo area, using 'message'.  Otherwise,
     'display-buffer' is used to show it in a pop-up buffer.

     Returns either the string shown in the echo area, or when a pop-up
     buffer is used, the window used to display it.

     If MESSAGE is a string, then the optional argument BUFFER-NAME is
     the name of the buffer used to display it when a pop-up buffer is
     used, defaulting to 'Message'.  In the case where MESSAGE is a
     string and displayed in the echo area, it is not specified whether
     the contents are inserted into the buffer anyway.

     The optional arguments ACTION and FRAME are as for
     'display-buffer', and only used if a buffer is displayed.

 -- Function: current-message
     This function returns the message currently being displayed in the
     echo area, or 'nil' if there is none.

==============================================================================
File: elisp.info,  Node: |Progress|,  Next: |Logging_Messages|,  Prev: |Displaying_Messages|,  Up: |The_Echo_Area|
==============================================================================

                                                                      *Progress*

39.4.2 Reporting Operation Progress
-----------------------------------

When an operation can take a while to finish, you should inform the user
about the progress it makes.  This way the user can estimate remaining
time and clearly see that Emacs is busy working, not hung.  A convenient
way to do this is to use a "progress reporter".

   Here is a working example that does nothing useful:

     (let ((progress-reporter
            (make-progress-reporter "Collecting mana for Emacs..."
                                    0  500)))
       (dotimes (k 500)
         (sit-for 0.01)
         (progress-reporter-update progress-reporter k))
       (progress-reporter-done progress-reporter))

 -- Function: make-progress-reporter message &optional min-value
          max-value current-value min-change min-time
     This function creates and returns a progress reporter object, which
     you will use as an argument for the other functions listed below.
     The idea is to precompute as much data as possible to make progress
     reporting very fast.

     When this progress reporter is subsequently used, it will display
     MESSAGE in the echo area, followed by progress percentage.  MESSAGE
     is treated as a simple string.  If you need it to depend on a
     filename, for instance, use 'format-message' before calling this
     function.

     The arguments MIN-VALUE and MAX-VALUE should be numbers standing
     for the starting and final states of the operation.  For instance,
     an operation that scans a buffer should set these to the results of
     'point-min' and 'point-max' correspondingly.  MAX-VALUE should be
     greater than MIN-VALUE.

     Alternatively, you can set MIN-VALUE and MAX-VALUE to 'nil'.  In
     that case, the progress reporter does not report process
     percentages; it instead displays a "spinner" that rotates a notch
     each time you update the progress reporter.

     If MIN-VALUE and MAX-VALUE are numbers, you can give the argument
     CURRENT-VALUE a numerical value specifying the initial progress; if
     omitted, this defaults to MIN-VALUE.

     The remaining arguments control the rate of echo area updates.  The
     progress reporter will wait for at least MIN-CHANGE more percents
     of the operation to be completed before printing next message; the
     default is one percent.  MIN-TIME specifies the minimum time in
     seconds to pass between successive prints; the default is 0.2
     seconds.  (On some operating systems, the progress reporter may
     handle fractions of seconds with varying precision).

     This function calls 'progress-reporter-update', so the first
     message is printed immediately.

 -- Function: progress-reporter-update reporter &optional value suffix
     This function does the main work of reporting progress of your
     operation.  It displays the message of REPORTER, followed by
     progress percentage determined by VALUE.  If percentage is zero, or
     close enough according to the MIN-CHANGE and MIN-TIME arguments,
     then it is omitted from the output.

     REPORTER must be the result of a call to 'make-progress-reporter'.
     VALUE specifies the current state of your operation and must be
     between MIN-VALUE and MAX-VALUE (inclusive) as passed to
     'make-progress-reporter'.  For instance, if you scan a buffer, then
     VALUE should be the result of a call to 'point'.

     Optional argument SUFFIX is a string to be displayed after
     REPORTER's main message and progress text.  If REPORTER is a
     non-numerical reporter, then VALUE should be 'nil', or a string to
     use instead of SUFFIX.

     This function respects MIN-CHANGE and MIN-TIME as passed to
     'make-progress-reporter' and so does not output new messages on
     every invocation.  It is thus very fast and normally you should not
     try to reduce the number of calls to it: resulting overhead will
     most likely negate your effort.

 -- Function: progress-reporter-force-update reporter &optional value
          new-message suffix
     This function is similar to 'progress-reporter-update' except that
     it prints a message in the echo area unconditionally.

     REPORTER, VALUE, and SUFFIX have the same meaning as for
     'progress-reporter-update'.  Optional NEW-MESSAGE allows you to
     change the message of the REPORTER.  Since this function always
     updates the echo area, such a change will be immediately presented
     to the user.

 -- Function: progress-reporter-done reporter
     This function should be called when the operation is finished.  It
     prints the message of REPORTER followed by word 'done' in the echo
     area.

     You should always call this function and not hope for
     'progress-reporter-update' to print '100%'.  Firstly, it may never
     print it, there are many good reasons for this not to happen.
     Secondly, 'done' is more explicit.

 -- Macro: dotimes-with-progress-reporter (var count [result])
          reporter-or-message body...
     This is a convenience macro that works the same way as 'dotimes'
     does, but also reports loop progress using the functions described
     above.  It allows you to save some typing.  The argument
     REPORTER-OR-MESSAGE can be either a string or a progress reporter
     object.

     You can rewrite the example in the beginning of this subsection
     using this macro as follows:

          (dotimes-with-progress-reporter
              (k 500)
              "Collecting some mana for Emacs..."
            (sit-for 0.01))

     Using a reporter object as the REPORTER-OR-MESSAGE argument is
     useful if you want to specify the optional arguments in
     MAKE-PROGRESS-REPORTER.  For instance, you can write the previous
     example as follows:

          (dotimes-with-progress-reporter
              (k 500)
              (make-progress-reporter "Collecting some mana for Emacs..." 0 500 0 1 1.5)
            (sit-for 0.01))

 -- Macro: dolist-with-progress-reporter (var count [result])
          reporter-or-message body...
     This is another convenience macro that works the same way as
     'dolist' does, but also reports loop progress using the functions
     described above.  As in 'dotimes-with-progress-reporter',
     'reporter-or-message' can be a progress reporter or a string.  You
     can rewrite the previous example with this macro as follows:

          (dolist-with-progress-reporter
              (k (number-sequence 0 500))
              "Collecting some mana for Emacs..."
            (sit-for 0.01))

==============================================================================
File: elisp.info,  Node: |Logging_Messages|,  Next: |Echo_Area_Customization|,  Prev: |Progress|,  Up: |The_Echo_Area|
==============================================================================

                                                              *Logging_Messages*

39.4.3 Logging Messages in 'Messages'
---------------------------------------

Almost all the messages displayed in the echo area are also recorded in
the 'Messages' buffer so that the user can refer back to them.  This
includes all the messages that are output with 'message'.  By default,
this buffer is read-only and uses the major mode 'messages-buffer-mode'.
Nothing prevents the user from killing the 'Messages' buffer, but the
next display of a message recreates it.  Any Lisp code that needs to
access the 'Messages' buffer directly and wants to ensure that it
exists should use the function 'messages-buffer'.

 -- Function: messages-buffer
     This function returns the 'Messages' buffer.  If it does not
     exist, it creates it, and switches it to 'messages-buffer-mode'.

 -- User Option: message-log-max
     This variable specifies how many lines to keep in the 'Messages'
     buffer.  The value 't' means there is no limit on how many lines to
     keep.  The value 'nil' disables message logging entirely.  Here's
     how to display a message and prevent it from being logged:

          (let (message-log-max)
            (message ...))

   To make 'Messages' more convenient for the user, the logging
facility combines successive identical messages.  It also combines
successive related messages for the sake of two cases: question followed
by answer, and a series of progress messages.

   A question followed by an answer has two messages like the ones
produced by 'y-or-n-p': the first is 'QUESTION', and the second is
'QUESTION...ANSWER'.  The first message conveys no additional
information beyond what's in the second, so logging the second message
discards the first from the log.

   A series of progress messages has successive messages like those
produced by 'make-progress-reporter'.  They have the form
'BASE...HOW-FAR', where BASE is the same each time, while HOW-FAR
varies.  Logging each message in the series discards the previous one,
provided they are consecutive.

   The functions 'make-progress-reporter' and 'y-or-n-p' don't have to
do anything special to activate the message log combination feature.  It
operates whenever two consecutive messages are logged that share a
common prefix ending in '...'.

==============================================================================
File: elisp.info,  Node: |Echo_Area_Customization|,  Prev: |Logging_Messages|,  Up: |The_Echo_Area|
==============================================================================

                                                       *Echo_Area_Customization*

39.4.4 Echo Area Customization
------------------------------

These variables control details of how the echo area works.

 -- Variable: cursor-in-echo-area
     This variable controls where the cursor appears when a message is
     displayed in the echo area.  If it is non-'nil', then the cursor
     appears at the end of the message.  Otherwise, the cursor appears
     at point--not in the echo area at all.

     The value is normally 'nil'; Lisp programs bind it to 't' for brief
     periods of time.

 -- Variable: echo-area-clear-hook
     This normal hook is run whenever the echo area is cleared--either by
     '(message nil)' or for any other reason.

 -- User Option: echo-keystrokes
     This variable determines how much time should elapse before command
     characters echo.  Its value must be a number, and specifies the
     number of seconds to wait before echoing.  If the user types a
     prefix key (such as 'C-x') and then delays this many seconds before
     continuing, the prefix key is echoed in the echo area.  (Once
     echoing begins in a key sequence, all subsequent characters in the
     same key sequence are echoed immediately.)

     If the value is zero, then command input is not echoed.

 -- Variable: message-truncate-lines
     Normally, displaying a long message resizes the echo area to
     display the entire message.  But if the variable
     'message-truncate-lines' is non-'nil', the echo area does not
     resize, and the message is truncated to fit it.

   The variable 'max-mini-window-height', which specifies the maximum
height for resizing minibuffer windows, also applies to the echo area
(which is really a special use of the minibuffer window; *note
Minibuffer Windows::).

==============================================================================
File: elisp.info,  Node: |Warnings|,  Next: |Invisible_Text|,  Prev: |The_Echo_Area|,  Up: |Display|
==============================================================================

                                                                      *Warnings*

39.5 Reporting Warnings
-----------------------

"Warnings" are a facility for a program to inform the user of a possible
problem, but continue running.

MENU

* |Warning_Basics|::      Warnings concepts and functions to report them.
* |Warning_Variables|::   Variables programs bind to customize their warnings.
* |Warning_Options|::     Variables users set to control display of warnings.
* |Delayed_Warnings|::    Deferring a warning until the end of a command.

==============================================================================
File: elisp.info,  Node: |Warning_Basics|,  Next: |Warning_Variables|,  Up: |Warnings|
==============================================================================

                                                                *Warning_Basics*

39.5.1 Warning Basics
---------------------

Every warning has a textual message, which explains the problem for the
user, and a "severity level" which is a symbol.  Here are the possible
severity levels, in order of decreasing severity, and their meanings:

':emergency'
     A problem that will seriously impair Emacs operation soon if you do
     not attend to it promptly.
':error'
     A report of data or circumstances that are inherently wrong.
':warning'
     A report of data or circumstances that are not inherently wrong,
     but raise suspicion of a possible problem.
':debug'
     A report of information that may be useful if you are debugging.

   When your program encounters invalid input data, it can either signal
a Lisp error by calling 'error' or 'signal' or report a warning with
severity ':error'.  Signaling a Lisp error is the easiest thing to do,
but it means the program cannot continue processing.  If you want to
take the trouble to implement a way to continue processing despite the
bad data, then reporting a warning of severity ':error' is the right way
to inform the user of the problem.  For instance, the Emacs Lisp byte
compiler can report an error that way and continue compiling other
functions.  (If the program signals a Lisp error and then handles it
with 'condition-case', the user won't see the error message; it could
show the message to the user by reporting it as a warning.)

   Each warning has a "warning type" to classify it.  The type is a list
of symbols.  The first symbol should be the custom group that you use
for the program's user options.  For example, byte compiler warnings use
the warning type '(bytecomp)'.  You can also subcategorize the warnings,
if you wish, by using more symbols in the list.

 -- Function: display-warning type message &optional level buffer-name
     This function reports a warning, using MESSAGE as the message and
     TYPE as the warning type.  LEVEL should be the severity level, with
     ':warning' being the default.

     BUFFER-NAME, if non-'nil', specifies the name of the buffer for
     logging the warning.  By default, it is 'Warnings'.

 -- Function: lwarn type level message &rest args
     This function reports a warning using the value of '(format-message
     MESSAGE ARGS...)' as the message in the 'Warnings' buffer.  In
     other respects it is equivalent to 'display-warning'.

 -- Function: warn message &rest args
     This function reports a warning using the value of '(format-message
     MESSAGE ARGS...)' as the message, '(emacs)' as the type, and
     ':warning' as the severity level.  It exists for compatibility
     only; we recommend not using it, because you should specify a
     specific warning type.

==============================================================================
File: elisp.info,  Node: |Warning_Variables|,  Next: |Warning_Options|,  Prev: |Warning_Basics|,  Up: |Warnings|
==============================================================================

                                                             *Warning_Variables*

39.5.2 Warning Variables
------------------------

Programs can customize how their warnings appear by binding the
variables described in this section.

 -- Variable: warning-levels
     This list defines the meaning and severity order of the warning
     severity levels.  Each element defines one severity level, and they
     are arranged in order of decreasing severity.

     Each element has the form '(LEVEL STRING FUNCTION)', where LEVEL is
     the severity level it defines.  STRING specifies the textual
     description of this level.  STRING should use '%s' to specify where
     to put the warning type information, or it can omit the '%s' so as
     not to include that information.

     The optional FUNCTION, if non-'nil', is a function to call with no
     arguments, to get the user's attention.

     Normally you should not change the value of this variable.

 -- Variable: warning-prefix-function
     If non-'nil', the value is a function to generate prefix text for
     warnings.  Programs can bind the variable to a suitable function.
     'display-warning' calls this function with the warnings buffer
     current, and the function can insert text in it.  That text becomes
     the beginning of the warning message.

     The function is called with two arguments, the severity level and
     its entry in 'warning-levels'.  It should return a list to use as
     the entry (this value need not be an actual member of
     'warning-levels').  By constructing this value, the function can
     change the severity of the warning, or specify different handling
     for a given severity level.

     If the variable's value is 'nil' then there is no function to call.

 -- Variable: warning-series
     Programs can bind this variable to 't' to say that the next warning
     should begin a series.  When several warnings form a series, that
     means to leave point on the first warning of the series, rather
     than keep moving it for each warning so that it appears on the last
     one.  The series ends when the local binding is unbound and
     'warning-series' becomes 'nil' again.

     The value can also be a symbol with a function definition.  That is
     equivalent to 't', except that the next warning will also call the
     function with no arguments with the warnings buffer current.  The
     function can insert text which will serve as a header for the
     series of warnings.

     Once a series has begun, the value is a marker which points to the
     buffer position in the warnings buffer of the start of the series.

     The variable's normal value is 'nil', which means to handle each
     warning separately.

 -- Variable: warning-fill-prefix
     When this variable is non-'nil', it specifies a fill prefix to use
     for filling each warning's text.

 -- Variable: warning-fill-column
     The column at which to fill warnings.

 -- Variable: warning-type-format
     This variable specifies the format for displaying the warning type
     in the warning message.  The result of formatting the type this way
     gets included in the message under the control of the string in the
     entry in 'warning-levels'.  The default value is '" (%s)"'.  If you
     bind it to '""' then the warning type won't appear at all.

==============================================================================
File: elisp.info,  Node: |Warning_Options|,  Next: |Delayed_Warnings|,  Prev: |Warning_Variables|,  Up: |Warnings|
==============================================================================

                                                               *Warning_Options*

39.5.3 Warning Options
----------------------

These variables are used by users to control what happens when a Lisp
program reports a warning.

 -- User Option: warning-minimum-level
     This user option specifies the minimum severity level that should
     be shown immediately to the user.  The default is ':warning', which
     means to immediately display all warnings except ':debug' warnings.

 -- User Option: warning-minimum-log-level
     This user option specifies the minimum severity level that should
     be logged in the warnings buffer.  The default is ':warning', which
     means to log all warnings except ':debug' warnings.

 -- User Option: warning-suppress-types
     This list specifies which warning types should not be displayed
     immediately for the user.  Each element of the list should be a
     list of symbols.  If its elements match the first elements in a
     warning type, then that warning is not displayed immediately.

 -- User Option: warning-suppress-log-types
     This list specifies which warning types should not be logged in the
     warnings buffer.  Each element of the list should be a list of
     symbols.  If it matches the first few elements in a warning type,
     then that warning is not logged.

==============================================================================
File: elisp.info,  Node: |Delayed_Warnings|,  Prev: |Warning_Options|,  Up: |Warnings|
==============================================================================

                                                              *Delayed_Warnings*

39.5.4 Delayed Warnings
-----------------------

Sometimes, you may wish to avoid showing a warning while a command is
running, and only show it only after the end of the command.  You can
use the function 'delay-warning' for this.

 -- Function: delay-warning type message &optional level buffer-name
     This function is the delayed counterpart to 'display-warning'
     (*note Warning Basics::), and it is called with the same arguments.
     The warning message is queued into 'delayed-warnings-list'.

 -- Variable: delayed-warnings-list
     The value of this variable is a list of warnings to be displayed
     after the current command has finished.  Each element must be a
     list

          (TYPE MESSAGE [LEVEL [BUFFER-NAME]])

     with the same form, and the same meanings, as the argument list of
     'display-warning'.  Immediately after running 'post-command-hook'
     (*note Command Overview::), the Emacs command loop displays all the
     warnings specified by this variable, then resets it to 'nil'.

   Programs which need to further customize the delayed warnings
mechanism can change the variable 'delayed-warnings-hook':

 -- Variable: delayed-warnings-hook
     This is a normal hook which is run by the Emacs command loop, after
     'post-command-hook', in order to process and display delayed
     warnings.

     Its default value is a list of two functions:

          (collapse-delayed-warnings display-delayed-warnings)

     The function 'collapse-delayed-warnings' removes repeated entries
     from 'delayed-warnings-list'.  The function
     'display-delayed-warnings' calls 'display-warning' on each of the
     entries in 'delayed-warnings-list', in turn, and then sets
     'delayed-warnings-list' to 'nil'.

==============================================================================
File: elisp.info,  Node: |Invisible_Text|,  Next: |Selective_Display|,  Prev: |Warnings|,  Up: |Display|
==============================================================================

                                                                *Invisible_Text*

39.6 Invisible Text
-------------------

You can make characters "invisible", so that they do not appear on the
screen, with the 'invisible' property.  This can be either a text
property (*note Text Properties::) or an overlay property (*note
Overlays::).  Cursor motion also partly ignores these characters; if the
command loop finds that point is inside a range of invisible text after
a command, it relocates point to the other side of the text.

   In the simplest case, any non-'nil' 'invisible' property makes a
character invisible.  This is the default case--if you don't alter the
default value of 'buffer-invisibility-spec', this is how the 'invisible'
property works.  You should normally use 't' as the value of the
'invisible' property if you don't plan to set 'buffer-invisibility-spec'
yourself.

   More generally, you can use the variable 'buffer-invisibility-spec'
to control which values of the 'invisible' property make text invisible.
This permits you to classify the text into different subsets in advance,
by giving them different 'invisible' values, and subsequently make
various subsets visible or invisible by changing the value of
'buffer-invisibility-spec'.

   Controlling visibility with 'buffer-invisibility-spec' is especially
useful in a program to display the list of entries in a database.  It
permits the implementation of convenient filtering commands to view just
a part of the entries in the database.  Setting this variable is very
fast, much faster than scanning all the text in the buffer looking for
properties to change.

 -- Variable: buffer-invisibility-spec
     This variable specifies which kinds of 'invisible' properties
     actually make a character invisible.  Setting this variable makes
     it buffer-local.

     't'
          A character is invisible if its 'invisible' property is
          non-'nil'.  This is the default.

     a list
          Each element of the list specifies a criterion for
          invisibility; if a character's 'invisible' property fits any
          one of these criteria, the character is invisible.  The list
          can have two kinds of elements:

          'ATOM'
               A character is invisible if its 'invisible' property
               value is ATOM or if it is a list with ATOM as a member;
               comparison is done with 'eq'.

          '(ATOM . t)'
               A character is invisible if its 'invisible' property
               value is ATOM or if it is a list with ATOM as a member;
               comparison is done with 'eq'.  Moreover, a sequence of
               such characters displays as an ellipsis.

   Two functions are specifically provided for adding elements to
'buffer-invisibility-spec' and removing elements from it.

 -- Function: add-to-invisibility-spec element
     This function adds the element ELEMENT to
     'buffer-invisibility-spec'.  If 'buffer-invisibility-spec' was 't',
     it changes to a list, '(t)', so that text whose 'invisible'
     property is 't' remains invisible.

 -- Function: remove-from-invisibility-spec element
     This removes the element ELEMENT from 'buffer-invisibility-spec'.
     This does nothing if ELEMENT is not in the list.

   A convention for use of 'buffer-invisibility-spec' is that a major
mode should use the mode's own name as an element of
'buffer-invisibility-spec' and as the value of the 'invisible' property:

     ;; If you want to display an ellipsis:
     (add-to-invisibility-spec '(my-symbol . t))
     ;; If you don't want ellipsis:
     (add-to-invisibility-spec 'my-symbol)

     (overlay-put (make-overlay beginning end)
                  'invisible 'my-symbol)

     ;; When done with the invisibility:
     (remove-from-invisibility-spec '(my-symbol . t))
     ;; Or respectively:
     (remove-from-invisibility-spec 'my-symbol)

   You can check for invisibility using the following function:

 -- Function: invisible-p pos-or-prop
     If POS-OR-PROP is a marker or number, this function returns a
     non-'nil' value if the text at that position is currently
     invisible.

     If POS-OR-PROP is any other kind of Lisp object, that is taken to
     mean a possible value of the 'invisible' text or overlay property.
     In that case, this function returns a non-'nil' value if that value
     would cause text to become invisible, based on the current value of
     'buffer-invisibility-spec'.

     The return value of this function is 't' if the text would be
     completely hidden on display, or a non-'nil', non-'t' value if the
     text would be replaced by an ellipsis.

   Ordinarily, functions that operate on text or move point do not care
whether the text is invisible, they process invisible characters and
visible characters alike.  The user-level line motion commands, such as
'next-line', 'previous-line', ignore invisible newlines if
'line-move-ignore-invisible' is non-'nil' (the default), i.e., behave
like these invisible newlines didn't exist in the buffer, but only
because they are explicitly programmed to do so.

   If a command ends with point inside or at the boundary of invisible
text, the main editing loop relocates point to one of the two ends of
the invisible text.  Emacs chooses the direction of relocation so that
it is the same as the overall movement direction of the command; if in
doubt, it prefers a position where an inserted char would not inherit
the 'invisible' property.  Additionally, if the text is not replaced by
an ellipsis and the command only moved within the invisible text, then
point is moved one extra character so as to try and reflect the
command's movement by a visible movement of the cursor.

   Thus, if the command moved point back to an invisible range (with the
usual stickiness), Emacs moves point back to the beginning of that
range.  If the command moved point forward into an invisible range,
Emacs moves point forward to the first visible character that follows
the invisible text and then forward one more character.

   These "adjustments" of point that ended up in the middle of invisible
text can be disabled by setting 'disable-point-adjustment' to a
non-'nil' value.  *Note Adjusting Point::.

   Incremental search can make invisible overlays visible temporarily
and/or permanently when a match includes invisible text.  To enable
this, the overlay should have a non-'nil' 'isearch-open-invisible'
property.  The property value should be a function to be called with the
overlay as an argument.  This function should make the overlay visible
permanently; it is used when the match overlaps the overlay on exit from
the search.

   During the search, such overlays are made temporarily visible by
temporarily modifying their invisible and intangible properties.  If you
want this to be done differently for a certain overlay, give it an
'isearch-open-invisible-temporary' property which is a function.  The
function is called with two arguments: the first is the overlay, and the
second is 'nil' to make the overlay visible, or 't' to make it invisible
again.

==============================================================================
File: elisp.info,  Node: |Selective_Display|,  Next: |Temporary_Displays|,  Prev: |Invisible_Text|,  Up: |Display|
==============================================================================

                                                             *Selective_Display*

39.7 Selective Display
----------------------

"Selective display" refers to a pair of related features for hiding
certain lines on the screen.

   The first variant, explicit selective display, was designed for use
in a Lisp program: it controls which lines are hidden by altering the
text.  This kind of hiding is now obsolete and deprecated; instead you
should use the 'invisible' property (*note Invisible Text::) to get the
same effect.

   In the second variant, the choice of lines to hide is made
automatically based on indentation.  This variant is designed to be a
user-level feature.

   The way you control explicit selective display is by replacing a
newline (control-j) with a carriage return (control-m).  The text that
was formerly a line following that newline is now hidden.  Strictly
speaking, it is temporarily no longer a line at all, since only newlines
can separate lines; it is now part of the previous line.

   Selective display does not directly affect editing commands.  For
example, 'C-f' ('forward-char') moves point unhesitatingly into hidden
text.  However, the replacement of newline characters with carriage
return characters affects some editing commands.  For example,
'next-line' skips hidden lines, since it searches only for newlines.
Modes that use selective display can also define commands that take
account of the newlines, or that control which parts of the text are
hidden.

   When you write a selectively displayed buffer into a file, all the
control-m's are output as newlines.  This means that when you next read
in the file, it looks OK, with nothing hidden.  The selective display
effect is seen only within Emacs.

 -- Variable: selective-display
     This buffer-local variable enables selective display.  This means
     that lines, or portions of lines, may be made hidden.

        * If the value of 'selective-display' is 't', then the character
          control-m marks the start of hidden text; the control-m, and
          the rest of the line following it, are not displayed.  This is
          explicit selective display.

        * If the value of 'selective-display' is a positive integer,
          then lines that start with more than that many columns of
          indentation are not displayed.

     When some portion of a buffer is hidden, the vertical movement
     commands operate as if that portion did not exist, allowing a
     single 'next-line' command to skip any number of hidden lines.
     However, character movement commands (such as 'forward-char') do
     not skip the hidden portion, and it is possible (if tricky) to
     insert or delete text in a hidden portion.

     In the examples below, we show the _display appearance_ of the
     buffer 'foo', which changes with the value of 'selective-display'.
     The _contents_ of the buffer do not change.

          (setq selective-display nil)
               => nil

          ---------- Buffer: foo ----------
          1 on this column
           2on this column
            3n this column
            3n this column
           2on this column
          1 on this column
          ---------- Buffer: foo ----------

          (setq selective-display 2)
               => 2

          ---------- Buffer: foo ----------
          1 on this column
           2on this column
           2on this column
          1 on this column
          ---------- Buffer: foo ----------

 -- User Option: selective-display-ellipses
     If this buffer-local variable is non-'nil', then Emacs displays
     '...' at the end of a line that is followed by hidden text.  This
     example is a continuation of the previous one.

          (setq selective-display-ellipses t)
               => t

          ---------- Buffer: foo ----------
          1 on this column
           2on this column ...
           2on this column
          1 on this column
          ---------- Buffer: foo ----------

     You can use a display table to substitute other text for the
     ellipsis ('...').  *Note Display Tables::.

==============================================================================
File: elisp.info,  Node: |Temporary_Displays|,  Next: |Overlays|,  Prev: |Selective_Display|,  Up: |Display|
==============================================================================

                                                            *Temporary_Displays*

39.8 Temporary Displays
-----------------------

Temporary displays are used by Lisp programs to put output into a buffer
and then present it to the user for perusal rather than for editing.
Many help commands use this feature.

 -- Macro: with-output-to-temp-buffer buffer-name body...
     This function executes the forms in BODY while arranging to insert
     any output they print into the buffer named BUFFER-NAME, which is
     first created if necessary, and put into Help mode.  (See the
     similar form 'with-temp-buffer-window' below.)  Finally, the buffer
     is displayed in some window, but that window is not selected.

     If the forms in BODY do not change the major mode in the output
     buffer, so that it is still Help mode at the end of their
     execution, then 'with-output-to-temp-buffer' makes this buffer
     read-only at the end, and also scans it for function and variable
     names to make them into clickable cross-references.  *Note Tips for
     Documentation Strings: Docstring hyperlinks, in particular the item
     on hyperlinks in documentation strings, for more details.

     The string BUFFER-NAME specifies the temporary buffer, which need
     not already exist.  The argument must be a string, not a buffer.
     The buffer is erased initially (with no questions asked), and it is
     marked as unmodified after 'with-output-to-temp-buffer' exits.

     'with-output-to-temp-buffer' binds 'standard-output' to the
     temporary buffer, then it evaluates the forms in BODY.  Output
     using the Lisp output functions within BODY goes by default to that
     buffer (but screen display and messages in the echo area, although
     they are "output" in the general sense of the word, are not
     affected).  *Note Output Functions::.

     Several hooks are available for customizing the behavior of this
     construct; they are listed below.

     The value of the last form in BODY is returned.

          ---------- Buffer: foo ----------
           This is the contents of foo.
          ---------- Buffer: foo ----------

          (with-output-to-temp-buffer "foo"
              (print 20)
              (print standard-output))
          => #<buffer foo>

          ---------- Buffer: foo ----------

          20

          #<buffer foo>

          ---------- Buffer: foo ----------

 -- User Option: temp-buffer-show-function
     If this variable is non-'nil', 'with-output-to-temp-buffer' calls
     it as a function to do the job of displaying a help buffer.  The
     function gets one argument, which is the buffer it should display.

     It is a good idea for this function to run 'temp-buffer-show-hook'
     just as 'with-output-to-temp-buffer' normally would, inside of
     'save-selected-window' and with the chosen window and buffer
     selected.

 -- Variable: temp-buffer-setup-hook
     This normal hook is run by 'with-output-to-temp-buffer' before
     evaluating BODY.  When the hook runs, the temporary buffer is
     current.  This hook is normally set up with a function to put the
     buffer in Help mode.

 -- Variable: temp-buffer-show-hook
     This normal hook is run by 'with-output-to-temp-buffer' after
     displaying the temporary buffer.  When the hook runs, the temporary
     buffer is current, and the window it was displayed in is selected.

 -- Macro: with-temp-buffer-window buffer-or-name action quit-function
          body...
     This macro is similar to 'with-output-to-temp-buffer'.  Like that
     construct, it executes BODY while arranging to insert any output it
     prints into the buffer named BUFFER-OR-NAME and displays that
     buffer in some window.  Unlike 'with-output-to-temp-buffer',
     however, it does not automatically switch that buffer to Help mode.

     The argument BUFFER-OR-NAME specifies the temporary buffer.  It can
     be either a buffer, which must already exist, or a string, in which
     case a buffer of that name is created, if necessary.  The buffer is
     marked as unmodified and read-only when 'with-temp-buffer-window'
     exits.

     This macro does not call 'temp-buffer-show-function'.  Rather, it
     passes the ACTION argument to 'display-buffer' (*note Choosing
     Window::) in order to display the buffer.

     The value of the last form in BODY is returned, unless the argument
     QUIT-FUNCTION is specified.  In that case, it is called with two
     arguments: the window showing the buffer and the result of BODY.
     The final return value is then whatever QUIT-FUNCTION returns.

     This macro uses the normal hooks 'temp-buffer-window-setup-hook'
     and 'temp-buffer-window-show-hook' in place of the analogous hooks
     run by 'with-output-to-temp-buffer'.

   The two constructs described next are mostly identical to
'with-temp-buffer-window' but differ from it as specified:

 -- Macro: with-current-buffer-window buffer-or-name action
          quit-function &rest body
     This macro is like 'with-temp-buffer-window' but unlike that makes
     the buffer specified by BUFFER-OR-NAME current for running BODY.

 -- Macro: with-displayed-buffer-window buffer-or-name action
          quit-function &rest body
     This macro is like 'with-current-buffer-window' but unlike that
     displays the buffer specified by BUFFER-OR-NAME _before_ running
     BODY.

   A window showing a temporary buffer can be fitted to the size of that
buffer using the following mode:

 -- User Option: temp-buffer-resize-mode
     When this minor mode is enabled, windows showing a temporary buffer
     are automatically resized to fit their buffer's contents.

     A window is resized if and only if it has been specially created
     for the buffer.  In particular, windows that have shown another
     buffer before are not resized.  By default, this mode uses
     'fit-window-to-buffer' (*note Resizing Windows::) for resizing.
     You can specify a different function by customizing the options
     'temp-buffer-max-height' and 'temp-buffer-max-width' below.

 -- User Option: temp-buffer-max-height
     This option specifies the maximum height (in lines) of a window
     displaying a temporary buffer when 'temp-buffer-resize-mode' is
     enabled.  It can also be a function to be called to choose the
     height for such a buffer.  It gets one argument, the buffer, and
     should return a positive integer.  At the time the function is
     called, the window to be resized is selected.

 -- User Option: temp-buffer-max-width
     This option specifies the maximum width of a window (in columns)
     displaying a temporary buffer when 'temp-buffer-resize-mode' is
     enabled.  It can also be a function to be called to choose the
     width for such a buffer.  It gets one argument, the buffer, and
     should return a positive integer.  At the time the function is
     called, the window to be resized is selected.

   The following function uses the current buffer for temporary display:

 -- Function: momentary-string-display string position &optional char
          message
     This function momentarily displays STRING in the current buffer at
     POSITION.  It has no effect on the undo list or on the buffer's
     modification status.

     The momentary display remains until the next input event.  If the
     next input event is CHAR, 'momentary-string-display' ignores it and
     returns.  Otherwise, that event remains buffered for subsequent use
     as input.  Thus, typing CHAR will simply remove the string from the
     display, while typing (say) 'C-f' will remove the string from the
     display and later (presumably) move point forward.  The argument
     CHAR is a space by default.

     The return value of 'momentary-string-display' is not meaningful.

     If the string STRING does not contain control characters, you can
     do the same job in a more general way by creating (and then
     subsequently deleting) an overlay with a 'before-string' property.
     *Note Overlay Properties::.

     If MESSAGE is non-'nil', it is displayed in the echo area while
     STRING is displayed in the buffer.  If it is 'nil', a default
     message says to type CHAR to continue.

     In this example, point is initially located at the beginning of the
     second line:

          ---------- Buffer: foo ----------
          This is the contents of foo.
          -!-Second line.
          ---------- Buffer: foo ----------

          (momentary-string-display
            "**** Important Message! ****"
            (point) ?\r
            "Type RET when done reading")
          => t

          ---------- Buffer: foo ----------
          This is the contents of foo.
          **** Important Message! ****Second line.
          ---------- Buffer: foo ----------

          ---------- Echo Area ----------
          Type RET when done reading
          ---------- Echo Area ----------

==============================================================================
File: elisp.info,  Node: |Overlays|,  Next: |Size_of_Displayed_Text|,  Prev: |Temporary_Displays|,  Up: |Display|
==============================================================================

                                                                      *Overlays*

39.9 Overlays
-------------

You can use "overlays" to alter the appearance of a buffer's text on the
screen, for the sake of presentation features.  An overlay is an object
that belongs to a particular buffer, and has a specified beginning and
end.  It also has properties that you can examine and set; these affect
the display of the text within the overlay.

   The visual effect of an overlay is the same as of the corresponding
text property (*note Text Properties::).  However, due to a different
implementation, overlays generally don't scale well (many operations
take a time that is proportional to the number of overlays in the
buffer).  If you need to affect the visual appearance of many portions
in the buffer, we recommend using text properties.

   An overlay uses markers to record its beginning and end; thus,
editing the text of the buffer adjusts the beginning and end of each
overlay so that it stays with the text.  When you create the overlay,
you can specify whether text inserted at the beginning should be inside
the overlay or outside, and likewise for the end of the overlay.

MENU

* |Managing_Overlays|::   Creating and moving overlays.
* |Overlay_Properties|::  How to read and set properties.
                          What properties do to the screen display.
* |Finding_Overlays|::    Searching for overlays.

==============================================================================
File: elisp.info,  Node: |Managing_Overlays|,  Next: |Overlay_Properties|,  Up: |Overlays|
==============================================================================

                                                             *Managing_Overlays*

39.9.1 Managing Overlays
------------------------

This section describes the functions to create, delete and move
overlays, and to examine their contents.  Overlay changes are not
recorded in the buffer's undo list, since the overlays are not part of
the buffer's contents.

 -- Function: overlayp object
     This function returns 't' if OBJECT is an overlay.

 -- Function: make-overlay start end &optional buffer front-advance
          rear-advance
     This function creates and returns an overlay that belongs to BUFFER
     and ranges from START to END.  Both START and END must specify
     buffer positions; they may be integers or markers.  If BUFFER is
     omitted, the overlay is created in the current buffer.

     An overlay whose START and END specify the same buffer position is
     known as "empty".  A non-empty overlay can become empty if the text
     between its START and END is deleted.  When that happens, the
     overlay is by default not deleted, but you can cause it to be
     deleted by giving it the 'evaporate' property (*note evaporate
     property: Overlay Properties.).

     The arguments FRONT-ADVANCE and REAR-ADVANCE specify the marker
     insertion type for the start of the overlay and for the end of the
     overlay, respectively.  *Note Marker Insertion Types::.  If they
     are both 'nil', the default, then the overlay extends to include
     any text inserted at the beginning, but not text inserted at the
     end.  If FRONT-ADVANCE is non-'nil', text inserted at the beginning
     of the overlay is excluded from the overlay.  If REAR-ADVANCE is
     non-'nil', text inserted at the end of the overlay is included in
     the overlay.

 -- Function: overlay-start overlay
     This function returns the position at which OVERLAY starts, as an
     integer.

 -- Function: overlay-end overlay
     This function returns the position at which OVERLAY ends, as an
     integer.

 -- Function: overlay-buffer overlay
     This function returns the buffer that OVERLAY belongs to.  It
     returns 'nil' if OVERLAY has been deleted.

 -- Function: delete-overlay overlay
     This function deletes OVERLAY.  The overlay continues to exist as a
     Lisp object, and its property list is unchanged, but it ceases to
     be attached to the buffer it belonged to, and ceases to have any
     effect on display.

     A deleted overlay is not permanently disconnected.  You can give it
     a position in a buffer again by calling 'move-overlay'.

 -- Function: move-overlay overlay start end &optional buffer
     This function moves OVERLAY to BUFFER, and places its bounds at
     START and END.  Both arguments START and END must specify buffer
     positions; they may be integers or markers.

     If BUFFER is omitted, OVERLAY stays in the same buffer it was
     already associated with; if OVERLAY was deleted, it goes into the
     current buffer.

     The return value is OVERLAY.

     This is the only valid way to change the endpoints of an overlay.
     Do not try modifying the markers in the overlay by hand, as that
     fails to update other vital data structures and can cause some
     overlays to be lost.

 -- Function: remove-overlays &optional start end name value
     This function removes all the overlays between START and END whose
     property NAME has the value VALUE.  It can move the endpoints of
     the overlays in the region, or split them.

     If NAME is omitted or 'nil', it means to delete all overlays in the
     specified region.  If START and/or END are omitted or 'nil', that
     means the beginning and end of the buffer respectively.  Therefore,
     '(remove-overlays)' removes all the overlays in the current buffer.

 -- Function: copy-overlay overlay
     This function returns a copy of OVERLAY.  The copy has the same
     endpoints and properties as OVERLAY.  However, the marker insertion
     type for the start of the overlay and for the end of the overlay
     are set to their default values (*note Marker Insertion Types::).

   Here are some examples:

     ;; Create an overlay.
     (setq foo (make-overlay 1 10))
          => #<overlay from 1 to 10 in display.texi>
     (overlay-start foo)
          => 1
     (overlay-end foo)
          => 10
     (overlay-buffer foo)
          => #<buffer display.texi>
     ;; Give it a property we can check later.
     (overlay-put foo 'happy t)
          => t
     ;; Verify the property is present.
     (overlay-get foo 'happy)
          => t
     ;; Move the overlay.
     (move-overlay foo 5 20)
          => #<overlay from 5 to 20 in display.texi>
     (overlay-start foo)
          => 5
     (overlay-end foo)
          => 20
     ;; Delete the overlay.
     (delete-overlay foo)
          => nil
     ;; Verify it is deleted.
     foo
          => #<overlay in no buffer>
     ;; A deleted overlay has no position.
     (overlay-start foo)
          => nil
     (overlay-end foo)
          => nil
     (overlay-buffer foo)
          => nil
     ;; Undelete the overlay.
     (move-overlay foo 1 20)
          => #<overlay from 1 to 20 in display.texi>
     ;; Verify the results.
     (overlay-start foo)
          => 1
     (overlay-end foo)
          => 20
     (overlay-buffer foo)
          => #<buffer display.texi>
     ;; Moving and deleting the overlay does not change its properties.
     (overlay-get foo 'happy)
          => t

   Emacs stores the overlays of each buffer in two lists, divided around
an arbitrary center position.  One list extends backwards through the
buffer from that center position, and the other extends forwards from
that center position.  The center position can be anywhere in the
buffer.

 -- Function: overlay-recenter pos
     This function recenters the overlays of the current buffer around
     position POS.  That makes overlay lookup faster for positions near
     POS, but slower for positions far away from POS.

   A loop that scans the buffer forwards, creating overlays, can run
faster if you do '(overlay-recenter (point-max))' first.

==============================================================================
File: elisp.info,  Node: |Overlay_Properties|,  Next: |Finding_Overlays|,  Prev: |Managing_Overlays|,  Up: |Overlays|
==============================================================================

                                                            *Overlay_Properties*

39.9.2 Overlay Properties
-------------------------

Overlay properties are like text properties in that the properties that
alter how a character is displayed can come from either source.  But in
most respects they are different.  *Note Text Properties::, for
comparison.

   Text properties are considered a part of the text; overlays and their
properties are specifically considered not to be part of the text.
Thus, copying text between various buffers and strings preserves text
properties, but does not try to preserve overlays.  Changing a buffer's
text properties marks the buffer as modified, while moving an overlay or
changing its properties does not.  Unlike text property changes, overlay
property changes are not recorded in the buffer's undo list.

   Since more than one overlay can specify a property value for the same
character, Emacs lets you specify a priority value of each overlay.  The
priority value is used to decide which of the overlapping overlays will
"win".

   These functions read and set the properties of an overlay:

 -- Function: overlay-get overlay prop
     This function returns the value of property PROP recorded in
     OVERLAY, if any.  If OVERLAY does not record any value for that
     property, but it does have a 'category' property which is a symbol,
     that symbol's PROP property is used.  Otherwise, the value is
     'nil'.

 -- Function: overlay-put overlay prop value
     This function sets the value of property PROP recorded in OVERLAY
     to VALUE.  It returns VALUE.

 -- Function: overlay-properties overlay
     This returns a copy of the property list of OVERLAY.

   See also the function 'get-char-property' which checks both overlay
properties and text properties for a given character.  *Note Examining
Properties::.

   Many overlay properties have special meanings; here is a table of
them:

'priority'
     This property's value determines the priority of the overlay.  If
     you want to specify a priority value, use either 'nil' (or zero),
     or a positive integer.  Any other value has undefined behavior.

     The priority matters when two or more overlays cover the same
     character and both specify the same property; the one whose
     'priority' value is larger overrides the other.  (For the 'face'
     property, the higher priority overlay's value does not completely
     override the other value; instead, its face attributes override the
     face attributes of the lower priority 'face' property.)  If two
     overlays have the same priority value, and one is nested in the
     other, then the inner one will prevail over the outer one.  If
     neither is nested in the other then you should not make assumptions
     about which overlay will prevail.

     Currently, all overlays take priority over text properties.

     Note that Emacs sometimes uses non-numeric priority values for some
     of its internal overlays, so do not try to do arithmetic on the
     priority of an overlay (unless it is one that you created).  In
     particular, the overlay used for showing the region uses a priority
     value of the form '(PRIMARY . SECONDARY)', where the PRIMARY value
     is used as described above, and SECONDARY is the fallback value
     used when PRIMARY and the nesting considerations fail to resolve
     the precedence between overlays.  However, you are advised not to
     design Lisp programs based on this implementation detail; if you
     need to put overlays in priority order, use the SORTED argument of
     'overlays-at'.  *Note Finding Overlays::.

'window'
     If the 'window' property is non-'nil', then the overlay applies
     only on that window.

'category'
     If an overlay has a 'category' property, we call it the "category"
     of the overlay.  It should be a symbol.  The properties of the
     symbol serve as defaults for the properties of the overlay.

'face'
     This property controls the appearance of the text (*note Faces::).
     The value of the property can be the following:

        * A face name (a symbol or string).

        * An anonymous face: a property list of the form '(KEYWORD VALUE
          ...)', where each KEYWORD is a face attribute name and VALUE
          is a value for that attribute.

        * A list of faces.  Each list element should be either a face
          name or an anonymous face.  This specifies a face which is an
          aggregate of the attributes of each of the listed faces.
          Faces occurring earlier in the list have higher priority.

        * A cons cell of the form '(foreground-color . COLOR-NAME)' or
          '(background-color . COLOR-NAME)'.  This specifies the
          foreground or background color, similar to '(:foreground
          COLOR-NAME)' or '(:background COLOR-NAME)'.  This form is
          supported for backward compatibility only, and should be
          avoided.

'mouse-face'
     This property is used instead of 'face' when the mouse is within
     the range of the overlay.  However, Emacs ignores all face
     attributes from this property that alter the text size (e.g.,
     ':height', ':weight', and ':slant').  Those attributes are always
     the same as in the unhighlighted text.

'display'
     This property activates various features that change the way text
     is displayed.  For example, it can make text appear taller or
     shorter, higher or lower, wider or narrower, or replaced with an
     image.  *Note Display Property::.

'help-echo'
     If an overlay has a 'help-echo' property, then when you move the
     mouse onto the text in the overlay, Emacs displays a help string in
     the echo area, or in the tooltip window.  For details see *note
     Text help-echo::.

'field'
     Consecutive characters with the same 'field' property constitute a
     _field_.  Some motion functions including 'forward-word' and
     'beginning-of-line' stop moving at a field boundary.  *Note
     Fields::.

'modification-hooks'
     This property's value is a list of functions to be called if any
     character within the overlay is changed or if text is inserted
     strictly within the overlay.

     The hook functions are called both before and after each change.
     If the functions save the information they receive, and compare
     notes between calls, they can determine exactly what change has
     been made in the buffer text.

     When called before a change, each function receives four arguments:
     the overlay, 'nil', and the beginning and end of the text range to
     be modified.

     When called after a change, each function receives five arguments:
     the overlay, 't', the beginning and end of the text range just
     modified, and the length of the pre-change text replaced by that
     range.  (For an insertion, the pre-change length is zero; for a
     deletion, that length is the number of characters deleted, and the
     post-change beginning and end are equal.)

     When these functions are called, 'inhibit-modification-hooks' is
     bound to non-'nil'.  If the functions modify the buffer, you might
     want to bind 'inhibit-modification-hooks' to 'nil', so as to cause
     the change hooks to run for these modifications.  However, doing
     this may call your own change hook recursively, so be sure to
     prepare for that.  *Note Change Hooks::.

     Text properties also support the 'modification-hooks' property, but
     the details are somewhat different (*note Special Properties::).

'insert-in-front-hooks'
     This property's value is a list of functions to be called before
     and after inserting text right at the beginning of the overlay.
     The calling conventions are the same as for the
     'modification-hooks' functions.

'insert-behind-hooks'
     This property's value is a list of functions to be called before
     and after inserting text right at the end of the overlay.  The
     calling conventions are the same as for the 'modification-hooks'
     functions.

'invisible'
     The 'invisible' property can make the text in the overlay
     invisible, which means that it does not appear on the screen.
     *Note Invisible Text::, for details.

'intangible'
     The 'intangible' property on an overlay works just like the
     'intangible' text property.  It is obsolete.  *Note Special
     Properties::, for details.

'isearch-open-invisible'
     This property tells incremental search how to make an invisible
     overlay visible, permanently, if the final match overlaps it.
     *Note Invisible Text::.

'isearch-open-invisible-temporary'
     This property tells incremental search how to make an invisible
     overlay visible, temporarily, during the search.  *Note Invisible
     Text::.

'before-string'
     This property's value is a string to add to the display at the
     beginning of the overlay.  The string does not appear in the buffer
     in any sense--only on the screen.

'after-string'
     This property's value is a string to add to the display at the end
     of the overlay.  The string does not appear in the buffer in any
     sense--only on the screen.

'line-prefix'
     This property specifies a display spec to prepend to each
     non-continuation line at display-time.  *Note Truncation::.

'wrap-prefix'
     This property specifies a display spec to prepend to each
     continuation line at display-time.  *Note Truncation::.

'evaporate'
     If this property is non-'nil', the overlay is deleted automatically
     if it becomes empty (i.e., if its length becomes zero).  If you
     give an empty overlay (*note empty overlay: Managing Overlays.) a
     non-'nil' 'evaporate' property, that deletes it immediately.  Note
     that, unless an overlay has this property, it will not be deleted
     when the text between its starting and ending positions is deleted
     from the buffer.

'keymap'
     If this property is non-'nil', it specifies a keymap for a portion
     of the text.  This keymap is used when the character after point is
     within the overlay, and takes precedence over most other keymaps.
     *Note Active Keymaps::.

'local-map'
     The 'local-map' property is similar to 'keymap' but replaces the
     buffer's local map rather than augmenting existing keymaps.  This
     also means it has lower precedence than minor mode keymaps.

   The 'keymap' and 'local-map' properties do not affect a string
displayed by the 'before-string', 'after-string', or 'display'
properties.  This is only relevant for mouse clicks and other mouse
events that fall on the string, since point is never on the string.  To
bind special mouse events for the string, assign it a 'keymap' or
'local-map' text property.  *Note Special Properties::.

==============================================================================
File: elisp.info,  Node: |Finding_Overlays|,  Prev: |Overlay_Properties|,  Up: |Overlays|
==============================================================================

                                                              *Finding_Overlays*

39.9.3 Searching for Overlays
-----------------------------

 -- Function: overlays-at pos &optional sorted
     This function returns a list of all the overlays that cover the
     character at position POS in the current buffer.  If SORTED is
     non-'nil', the list is in decreasing order of priority, otherwise
     it is in no particular order.  An overlay contains position POS if
     it begins at or before POS, and ends after POS.

     To illustrate usage, here is a Lisp function that returns a list of
     the overlays that specify property PROP for the character at point:

          (defun find-overlays-specifying (prop)
            (let ((overlays (overlays-at (point)))
                  found)
              (while overlays
                (let ((overlay (car overlays)))
                  (if (overlay-get overlay prop)
                      (setq found (cons overlay found))))
                (setq overlays (cdr overlays)))
              found))

 -- Function: overlays-in beg end
     This function returns a list of the overlays that overlap the
     region BEG through END.  An overlay overlaps with a region if it
     contains one or more characters in the region; empty overlays
     (*note empty overlay: Managing Overlays.) overlap if they are at
     BEG, strictly between BEG and END, or at END when END denotes the
     position at the end of the buffer.

 -- Function: next-overlay-change pos
     This function returns the buffer position of the next beginning or
     end of an overlay, after POS.  If there is none, it returns
     '(point-max)'.

 -- Function: previous-overlay-change pos
     This function returns the buffer position of the previous beginning
     or end of an overlay, before POS.  If there is none, it returns
     '(point-min)'.

   As an example, here's a simplified (and inefficient) version of the
primitive function 'next-single-char-property-change' (*note Property
Search::).  It searches forward from position POS for the next position
where the value of a given property 'prop', as obtained from either
overlays or text properties, changes.

     (defun next-single-char-property-change (position prop)
       (save-excursion
         (goto-char position)
         (let ((propval (get-char-property (point) prop)))
           (while (and (not (eobp))
                       (eq (get-char-property (point) prop) propval))
             (goto-char (min (next-overlay-change (point))
                             (next-single-property-change (point) prop)))))
         (point)))

==============================================================================
File: elisp.info,  Node: |Size_of_Displayed_Text|,  Next: |Line_Height|,  Prev: |Overlays|,  Up: |Display|
==============================================================================

                                                        *Size_of_Displayed_Text*

39.10 Size of Displayed Text
----------------------------

Since not all characters have the same width, these functions let you
check the width of a character.  *Note Primitive Indent::, and *note
Screen Lines::, for related functions.

 -- Function: char-width char
     This function returns the width in columns of the character CHAR,
     if it were displayed in the current buffer (i.e., taking into
     account the buffer's display table, if any; *note Display
     Tables::).  The width of a tab character is usually 'tab-width'
     (*note Usual Display::).

 -- Function: string-width string
     This function returns the width in columns of the string STRING, if
     it were displayed in the current buffer and the selected window.

 -- Function: truncate-string-to-width string width &optional
          start-column padding ellipsis
     This function returns the part of STRING that fits within WIDTH
     columns, as a new string.

     If STRING does not reach WIDTH, then the result ends where STRING
     ends.  If one multi-column character in STRING extends across the
     column WIDTH, that character is not included in the result.  Thus,
     the result can fall short of WIDTH but cannot go beyond it.

     The optional argument START-COLUMN specifies the starting column.
     If this is non-'nil', then the first START-COLUMN columns of the
     string are omitted from the value.  If one multi-column character
     in STRING extends across the column START-COLUMN, that character is
     not included.

     The optional argument PADDING, if non-'nil', is a padding character
     added at the beginning and end of the result string, to extend it
     to exactly WIDTH columns.  The padding character is used at the end
     of the result if it falls short of WIDTH.  It is also used at the
     beginning of the result if one multi-column character in STRING
     extends across the column START-COLUMN.

     If ELLIPSIS is non-'nil', it should be a string which will replace
     the end of STRING (including any padding) if it extends beyond
     WIDTH, unless the display width of STRING is equal to or less than
     the display width of ELLIPSIS.  If ELLIPSIS is non-'nil' and not a
     string, it stands for the value of the variable
     'truncate-string-ellipsis'.

          (truncate-string-to-width "\tab\t" 12 4)
               => "ab"
          (truncate-string-to-width "\tab\t" 12 4 ?\s)
               => "    ab  "

   The following function returns the size in pixels of text as if it
were displayed in a given window.  This function is used by
'fit-window-to-buffer' and 'fit-frame-to-buffer' (*note Resizing
Windows::) to make a window exactly as large as the text it contains.

 -- Function: window-text-pixel-size &optional window from to x-limit
          y-limit mode-and-header-line
     This function returns the size of the text of WINDOW's buffer in
     pixels.  WINDOW must be a live window and defaults to the selected
     one.  The return value is a cons of the maximum pixel-width of any
     text line and the maximum pixel-height of all text lines.  This
     function exists to allow Lisp programs to adjust the dimensions of
     WINDOW to the buffer text it needs to display.

     The optional argument FROM, if non-'nil', specifies the first text
     position to consider, and defaults to the minimum accessible
     position of the buffer.  If FROM is 't', it stands for the minimum
     accessible position that is not a newline character.  The optional
     argument TO, if non-'nil', specifies the last text position to
     consider, and defaults to the maximum accessible position of the
     buffer.  If TO is 't', it stands for the maximum accessible
     position that is not a newline character.

     The optional argument X-LIMIT, if non-'nil', specifies the maximum
     X coordinate beyond which text should be ignored; it is therefore
     also the largest value of pixel-width that the function can return.
     If X-LIMIT 'nil' or omitted, it means to use the pixel-width of
     WINDOW's body (*note Window Sizes::); this default means that text
     of truncated lines wider than the window will be ignored.  This
     default is useful when the caller does not intend to change the
     width of WINDOW.  Otherwise, the caller should specify here the
     maximum width WINDOW's body may assume; in particular, if truncated
     lines are expected and their text needs to be accounted for,
     X-LIMIT should be set to a large value.  Since calculating the
     width of long lines can take some time, it's always a good idea to
     make this argument as small as needed; in particular, if the buffer
     might contain long lines that will be truncated anyway.

     The optional argument Y-LIMIT, if non-'nil', specifies the maximum
     Y coordinate beyond which text is to be ignored; it is therefore
     also the maximum pixel-height that the function can return.  If
     Y-LIMIT is nil or omitted, it means to considers all the lines of
     text till the buffer position specified by TO.  Since calculating
     the pixel-height of a large buffer can take some time, it makes
     sense to specify this argument; in particular, if the caller does
     not know the size of the buffer.

     The optional argument MODE-AND-HEADER-LINE 'nil' or omitted means
     to not include the height of the mode- or header-line of WINDOW in
     the return value.  If it is either the symbol 'mode-line' or
     'header-line', include only the height of that line, if present, in
     the return value.  If it is 't', include the height of both, if
     present, in the return value.

   'window-text-pixel-size' treats the text displayed in a window as a
whole and does not care about the size of individual lines.  The
following function does.

 -- Function: window-lines-pixel-dimensions &optional window first last
          body inverse left
     This function calculates the pixel dimensions of each line
     displayed in the specified WINDOW.  It does so by walking WINDOW's
     current glyph matrix--a matrix storing the glyph (*note Glyphs::) of
     each buffer character currently displayed in WINDOW.  If
     successful, it returns a list of cons pairs representing the x- and
     y-coordinates of the lower right corner of the last character of
     each line.  Coordinates are measured in pixels from an origin (0,
     0) at the top-left corner of WINDOW.  WINDOW must be a live window
     and defaults to the selected one.

     If the optional argument FIRST is an integer, it denotes the index
     (starting with 0) of the first line of WINDOW's glyph matrix to be
     returned.  Note that if WINDOW has a header line, the line with
     index 0 is that header line.  If FIRST is 'nil', the first line to
     be considered is determined by the value of the optional argument
     BODY: If BODY is non-'nil', this means to start with the first line
     of WINDOW's body, skipping any header line, if present.  Otherwise,
     this function will start with the first line of WINDOW's glyph
     matrix, possibly the header line.

     If the optional argument LAST is an integer, it denotes the index
     of the last line of WINDOW's glyph matrix that shall be returned.
     If LAST is 'nil', the last line to be considered is determined by
     the value of BODY: If BODY is non-'nil', this means to use the last
     line of WINDOW's body, omitting WINDOW's mode line, if present.
     Otherwise, this means to use the last line of WINDOW which may be
     the mode line.

     The optional argument INVERSE, if 'nil', means that the y-pixel
     value returned for any line specifies the distance in pixels from
     the left edge (body edge if BODY is non-'nil') of WINDOW to the
     right edge of the last glyph of that line.  INVERSE non-'nil' means
     that the y-pixel value returned for any line specifies the distance
     in pixels from the right edge of the last glyph of that line to the
     right edge (body edge if BODY is non-'nil') of WINDOW.  This is
     useful for determining the amount of slack space at the end of each
     line.

     The optional argument LEFT, if non-'nil' means to return the x- and
     y-coordinates of the lower left corner of the leftmost character on
     each line.  This is the value that should be used for windows that
     mostly display text from right to left.

     If LEFT is non-'nil' and INVERSE is 'nil', this means that the
     y-pixel value returned for any line specifies the distance in
     pixels from the left edge of the last (leftmost) glyph of that line
     to the right edge (body edge if BODY is non-'nil') of WINDOW.  If
     LEFT and INVERSE are both non-'nil', the y-pixel value returned for
     any line specifies the distance in pixels from the left edge (body
     edge if BODY is non-'nil') of WINDOW to the left edge of the last
     (leftmost) glyph of that line.

     This function returns 'nil' if the current glyph matrix of WINDOW
     is not up-to-date which usually happens when Emacs is busy, for
     example, when processing a command.  The value should be
     retrievable though when this function is run from an idle timer
     with a delay of zero seconds.

 -- Function: line-pixel-height
     This function returns the height in pixels of the line at point in
     the selected window.  The value includes the line spacing of the
     line (*note Line Height::).

   When a buffer is displayed with line numbers (*note (emacs)Display
Custom::), it is sometimes useful to know the width taken for displaying
the line numbers.  The following function is for Lisp programs which
need this information for layout calculations.

 -- Function: line-number-display-width &optional pixelwise
     This function returns the width used for displaying the line
     numbers in the selected window.  If the optional argument PIXELWISE
     is the symbol 'columns', the return value is a float number of the
     frame's canonical columns; if PIXELWISE is 't' or any other
     non-'nil' value, the value is an integer and is measured in pixels.
     If PIXELWISE is omitted or 'nil', the value is the integer number
     of columns of the font defined for the 'line-number' face, and
     doesn't include the 2 columns used to pad the numbers on display.
     If line numbers are not displayed in the selected window, the value
     is zero regardless of the value of PIXELWISE.  Use
     'with-selected-window' (*note Selecting Windows::) if you need this
     information about another window.

==============================================================================
File: elisp.info,  Node: |Line_Height|,  Next: |Faces|,  Prev: |Size_of_Displayed_Text|,  Up: |Display|
==============================================================================

                                                                   *Line_Height*

39.11 Line Height
-----------------

The total height of each display line consists of the height of the
contents of the line, plus optional additional vertical line spacing
above or below the display line.

   The height of the line contents is the maximum height of any
character or image on that display line, including the final newline if
there is one.  (A display line that is continued doesn't include a final
newline.)  That is the default line height, if you do nothing to specify
a greater height.  (In the most common case, this equals the height of
the corresponding frame's default font, see *note Frame Font::.)

   There are several ways to explicitly specify a larger line height,
either by specifying an absolute height for the display line, or by
specifying vertical space.  However, no matter what you specify, the
actual line height can never be less than the default.

   A newline can have a 'line-height' text or overlay property that
controls the total height of the display line ending in that newline.

   If the property value is 't', the newline character has no effect on
the displayed height of the line--the visible contents alone determine
the height.  The 'line-spacing' property, described below, is also
ignored in this case.  This is useful for tiling small images (or image
slices) without adding blank areas between the images.

   If the property value is a list of the form '(HEIGHT TOTAL)', that
adds extra space _below_ the display line.  First Emacs uses HEIGHT as a
height spec to control extra space _above_ the line; then it adds enough
space _below_ the line to bring the total line height up to TOTAL.  In
this case, any value of 'line-spacing' property for the newline is
ignored.

   Any other kind of property value is a height spec, which translates
into a number--the specified line height.  There are several ways to
write a height spec; here's how each of them translates into a number:

'INTEGER'
     If the height spec is a positive integer, the height value is that
     integer.
'FLOAT'
     If the height spec is a float, FLOAT, the numeric height value is
     FLOAT times the frame's default line height.
'(FACE . RATIO)'
     If the height spec is a cons of the format shown, the numeric
     height is RATIO times the height of face FACE.  RATIO can be any
     type of number, or 'nil' which means a ratio of 1.  If FACE is 't',
     it refers to the current face.
'(nil . RATIO)'
     If the height spec is a cons of the format shown, the numeric
     height is RATIO times the height of the contents of the line.

   Thus, any valid height spec determines the height in pixels, one way
or another.  If the line contents' height is less than that, Emacs adds
extra vertical space above the line to achieve the specified total
height.

   If you don't specify the 'line-height' property, the line's height
consists of the contents' height plus the line spacing.  There are
several ways to specify the line spacing for different parts of Emacs
text.

   On graphical terminals, you can specify the line spacing for all
lines in a frame, using the 'line-spacing' frame parameter (*note Layout
Parameters::).  However, if the default value of 'line-spacing' is
non-'nil', it overrides the frame's 'line-spacing' parameter.  An
integer specifies the number of pixels put below lines.  A
floating-point number specifies the spacing relative to the frame's
default line height.

   You can specify the line spacing for all lines in a buffer via the
buffer-local 'line-spacing' variable.  An integer specifies the number
of pixels put below lines.  A floating-point number specifies the
spacing relative to the default frame line height.  This overrides line
spacings specified for the frame.

   Finally, a newline can have a 'line-spacing' text or overlay property
that can enlarge the default frame line spacing and the buffer local
'line-spacing' variable: if its value is larger than the buffer or frame
defaults, that larger value is used instead, for the display line ending
in that newline.

   One way or another, these mechanisms specify a Lisp value for the
spacing of each line.  The value is a height spec, and it translates
into a Lisp value as described above.  However, in this case the numeric
height value specifies the line spacing, rather than the line height.

   On text terminals, the line spacing cannot be altered.

==============================================================================
File: elisp.info,  Node: |Faces|,  Next: |Fringes|,  Prev: |Line_Height|,  Up: |Display|
==============================================================================

                                                                         *Faces*

39.12 Faces
-----------

A "face" is a collection of graphical attributes for displaying text:
font, foreground color, background color, optional underlining, etc.
Faces control how Emacs displays text in buffers, as well as other parts
of the frame such as the mode line.

   One way to represent a face is as a property list of attributes, like
'(:foreground "red" :weight bold)'.  Such a list is called an "anonymous
face".  For example, you can assign an anonymous face as the value of
the 'face' text property, and Emacs will display the underlying text
with the specified attributes.  *Note Special Properties::.

   More commonly, a face is referred to via a "face name": a Lisp symbol
associated with a set of face attributes(1).  Named faces are defined
using the 'defface' macro (*note Defining Faces::).  Emacs comes with
several standard named faces (*note Basic Faces::).

   Some parts of Emacs require named faces (e.g., the functions
documented in *note Attribute Functions::).  Unless otherwise stated, we
will use the term "face" to refer only to named faces.

 -- Function: facep object
     This function returns a non-'nil' value if OBJECT is a named face:
     a Lisp symbol or string which serves as a face name.  Otherwise, it
     returns 'nil'.

MENU

* |Face_Attributes|::     What is in a face?
* |Defining_Faces|::      How to define a face.
* |Attribute_Functions|::  Functions to examine and set face attributes.
* |Displaying_Faces|::     How Emacs combines the faces specified for a character.
* |Face_Remapping|::      Remapping faces to alternative definitions.
* |Face_Functions|::      How to define and examine faces.
* |Auto_Faces|::          Hook for automatic face assignment.
* |Basic_Faces|::         Faces that are defined by default.
* |Font_Selection|::      Finding the best available font for a face.
* |Font_Lookup|::         Looking up the names of available fonts
                          and information about them.
* |Fontsets|::            A fontset is a collection of fonts
                          that handle a range of character sets.
* |Low_Level_Font|::      Lisp representation for character display fonts.

   ---------- Footnotes ----------

   (1) For backward compatibility, you can also use a string to specify
a face name; that is equivalent to a Lisp symbol with the same name.

==============================================================================
File: elisp.info,  Node: |Face_Attributes|,  Next: |Defining_Faces|,  Up: |Faces|
==============================================================================

                                                               *Face_Attributes*

39.12.1 Face Attributes
-----------------------

"Face attributes" determine the visual appearance of a face.  The
following table lists all the face attributes, their possible values,
and their effects.

   Apart from the values given below, each face attribute can have the
value 'unspecified'.  This special value means that the face doesn't
specify that attribute directly.  An 'unspecified' attribute tells Emacs
to refer instead to a parent face (see the description ':inherit'
attribute below); or, failing that, to an underlying face (*note
Displaying Faces::).  The 'default' face must specify all attributes.

   Some of these attributes are meaningful only on certain kinds of
displays.  If your display cannot handle a certain attribute, the
attribute is ignored.

':family'
     Font family name (a string).  *Note (emacs)Fonts::, for more
     information about font families.  The function 'font-family-list'
     (see below) returns a list of available family names.

':foundry'
     The name of the "font foundry" for the font family specified by the
     ':family' attribute (a string).  *Note (emacs)Fonts::.

':width'
     Relative character width.  This should be one of the symbols
     'ultra-condensed', 'extra-condensed', 'condensed',
     'semi-condensed', 'normal', 'semi-expanded', 'expanded',
     'extra-expanded', or 'ultra-expanded'.

':height'
     The height of the font.  In the simplest case, this is an integer
     in units of 1/10 point.

     The value can also be floating point or a function, which specifies
     the height relative to an "underlying face" (*note Displaying
     Faces::).  A floating-point value specifies the amount by which to
     scale the height of the underlying face.  A function value is
     called with one argument, the height of the underlying face, and
     returns the height of the new face.  If the function is passed an
     integer argument, it must return an integer.

     The height of the default face must be specified using an integer;
     floating point and function values are not allowed.

':weight'
     Font weight--one of the symbols (from densest to faintest)
     'ultra-bold', 'extra-bold', 'bold', 'semi-bold', 'normal',
     'semi-light', 'light', 'extra-light', or 'ultra-light'.  On text
     terminals which support variable-brightness text, any weight
     greater than normal is displayed as extra bright, and any weight
     less than normal is displayed as half-bright.

':slant'
     Font slant--one of the symbols 'italic', 'oblique', 'normal',
     'reverse-italic', or 'reverse-oblique'.  On text terminals that
     support variable-brightness text, slanted text is displayed as
     half-bright.

':foreground'
     Foreground color, a string.  The value can be a system-defined
     color name, or a hexadecimal color specification.  *Note Color
     Names::.  On black-and-white displays, certain shades of gray are
     implemented by stipple patterns.

':distant-foreground'
     Alternative foreground color, a string.  This is like ':foreground'
     but the color is only used as a foreground when the background
     color is near to the foreground that would have been used.  This is
     useful for example when marking text (i.e., the region face).  If
     the text has a foreground that is visible with the region face,
     that foreground is used.  If the foreground is near the region face
     background, ':distant-foreground' is used instead so the text is
     readable.

':background'
     Background color, a string.  The value can be a system-defined
     color name, or a hexadecimal color specification.  *Note Color
     Names::.

':underline'
     Whether or not characters should be underlined, and in what way.
     The possible values of the ':underline' attribute are:

     'nil'
          Don't underline.

     't'
          Underline with the foreground color of the face.

     COLOR
          Underline in color COLOR, a string specifying a color.

     '(:color COLOR :style STYLE)'
          COLOR is either a string, or the symbol 'foreground-color',
          meaning the foreground color of the face.  Omitting the
          attribute ':color' means to use the foreground color of the
          face.  STYLE should be a symbol 'line' or 'wave', meaning to
          use a straight or wavy line.  Omitting the attribute ':style'
          means to use a straight line.

':overline'
     Whether or not characters should be overlined, and in what color.
     If the value is 't', overlining uses the foreground color of the
     face.  If the value is a string, overlining uses that color.  The
     value 'nil' means do not overline.

':strike-through'
     Whether or not characters should be strike-through, and in what
     color.  The value is used like that of ':overline'.

':box'
     Whether or not a box should be drawn around characters, its color,
     the width of the box lines, and 3D appearance.  Here are the
     possible values of the ':box' attribute, and what they mean:

     'nil'
          Don't draw a box.

     't'
          Draw a box with lines of width 1, in the foreground color.

     COLOR
          Draw a box with lines of width 1, in color COLOR.

     '(:line-width WIDTH :color COLOR :style STYLE)'
          This way you can explicitly specify all aspects of the box.
          The value WIDTH specifies the width of the lines to draw; it
          defaults to 1.  A negative width -N means to draw a line of
          width N whose top and bottom parts occupy the space of the
          underlying text, thus avoiding any increase in the character
          height.

          The value COLOR specifies the color to draw with.  The default
          is the foreground color of the face for simple boxes, and the
          background color of the face for 3D boxes.

          The value STYLE specifies whether to draw a 3D box.  If it is
          'released-button', the box looks like a 3D button that is not
          being pressed.  If it is 'pressed-button', the box looks like
          a 3D button that is being pressed.  If it is 'nil' or omitted,
          a plain 2D box is used.

':inverse-video'
     Whether or not characters should be displayed in inverse video.
     The value should be 't' (yes) or 'nil' (no).

':stipple'
     The background stipple, a bitmap.

     The value can be a string; that should be the name of a file
     containing external-format X bitmap data.  The file is found in the
     directories listed in the variable 'x-bitmap-file-path'.

     Alternatively, the value can specify the bitmap directly, with a
     list of the form '(WIDTH HEIGHT DATA)'.  Here, WIDTH and HEIGHT
     specify the size in pixels, and DATA is a string containing the raw
     bits of the bitmap, row by row.  Each row occupies (WIDTH + 7) / 8
     consecutive bytes in the string (which should be a unibyte string
     for best results).  This means that each row always occupies at
     least one whole byte.

     If the value is 'nil', that means use no stipple pattern.

     Normally you do not need to set the stipple attribute, because it
     is used automatically to handle certain shades of gray.

':font'
     The font used to display the face.  Its value should be a font
     object or a fontset.  *Note Low-Level Font::, for information about
     font objects, font specs, and font entities.  *Note Fontsets::, for
     information about fontsets.

     When specifying this attribute using 'set-face-attribute' or
     'set-face-font' (*note Attribute Functions::), you may also supply
     a font spec, a font entity, or a string.  Emacs converts such
     values to an appropriate font object, and stores that font object
     as the actual attribute value.  If you specify a string, the
     contents of the string should be a font name (*note
     (emacs)Fonts::); if the font name is an XLFD containing wildcards,
     Emacs chooses the first font matching those wildcards.  Specifying
     this attribute also changes the values of the ':family',
     ':foundry', ':width', ':height', ':weight', and ':slant'
     attributes.

':inherit'
     The name of a face from which to inherit attributes, or a list of
     face names.  Attributes from inherited faces are merged into the
     face like an underlying face would be, with higher priority than
     underlying faces (*note Displaying Faces::).  If the face to
     inherit from is 'unspecified', it is treated the same as 'nil',
     since Emacs never merges ':inherit' attributes.  If a list of faces
     is used, attributes from faces earlier in the list override those
     from later faces.

':extend'
     Whether or not this face will be extended beyond end of line and
     will affect the display of the empty space between the end of line
     and the edge of the window.  The value should be 't' to display the
     empty space between end of line and edge of the window using this
     face, or 'nil' to not use this face for the space between the end
     of the line and the edge of the window.  When Emacs merges several
     faces for displaying the empty space beyond end of line, only those
     faces with ':extend' non-'nil' will be merged.  By default, only a
     small number of faces, notably, 'region', have this attribute set.
     This attribute is different from the others in that when a theme
     doesn't specify an explicit value for a face, the value from the
     original face definition by 'defface' is inherited (*note Defining
     Faces::).

 -- Function: font-family-list &optional frame
     This function returns a list of available font family names.  The
     optional argument FRAME specifies the frame on which the text is to
     be displayed; if it is 'nil', the selected frame is used.

 -- User Option: underline-minimum-offset
     This variable specifies the minimum distance between the baseline
     and the underline, in pixels, when displaying underlined text.

 -- User Option: x-bitmap-file-path
     This variable specifies a list of directories for searching for
     bitmap files, for the ':stipple' attribute.

 -- Function: bitmap-spec-p object
     This returns 't' if OBJECT is a valid bitmap specification,
     suitable for use with ':stipple' (see above).  It returns 'nil'
     otherwise.

==============================================================================
File: elisp.info,  Node: |Defining_Faces|,  Next: |Attribute_Functions|,  Prev: |Face_Attributes|,  Up: |Faces|
==============================================================================

                                                                *Defining_Faces*

39.12.2 Defining Faces
----------------------

The usual way to define a face is through the 'defface' macro.  This
macro associates a face name (a symbol) with a default "face spec".  A
face spec is a construct which specifies what attributes a face should
have on any given terminal; for example, a face spec might specify one
foreground color on high-color terminals, and a different foreground
color on low-color terminals.

   People are sometimes tempted to create a variable whose value is a
face name.  In the vast majority of cases, this is not necessary; the
usual procedure is to define a face with 'defface', and then use its
name directly.

   Note that once you have defined a face (usually with 'defface'), you
cannot later undefine this face safely, except by restarting Emacs.

 -- Macro: defface face spec doc [keyword value]...
     This macro declares FACE as a named face whose default face spec is
     given by SPEC.  You should not quote the symbol FACE, and it should
     not end in '-face' (that would be redundant).  The argument DOC is
     a documentation string for the face.  The additional KEYWORD
     arguments have the same meanings as in 'defgroup' and 'defcustom'
     (*note Common Keywords::).

     If FACE already has a default face spec, this macro does nothing.

     The default face spec determines FACE's appearance when no
     customizations are in effect (*note Customization::).  If FACE has
     already been customized (via Custom themes or via customizations
     read from the init file), its appearance is determined by the
     custom face spec(s), which override the default face spec SPEC.
     However, if the customizations are subsequently removed, the
     appearance of FACE will again be determined by its default face
     spec.

     As an exception, if you evaluate a 'defface' form with 'C-M-x' in
     Emacs Lisp mode ('eval-defun'), a special feature of 'eval-defun'
     overrides any custom face specs on the face, causing the face to
     reflect exactly what the 'defface' says.

     The SPEC argument is a "face spec", which states how the face
     should appear on different kinds of terminals.  It should be an
     alist whose elements each have the form

          (DISPLAY . PLIST)

     DISPLAY specifies a class of terminals (see below).  PLIST is a
     property list of face attributes and their values, specifying how
     the face appears on such terminals.  For backward compatibility,
     you can also write an element as '(DISPLAY PLIST)'.

     The DISPLAY part of an element of SPEC determines which terminals
     the element matches.  If more than one element of SPEC matches a
     given terminal, the first element that matches is the one used for
     that terminal.  There are three possibilities for DISPLAY:

     'default'
          This element of SPEC doesn't match any terminal; instead, it
          specifies defaults that apply to all terminals.  This element,
          if used, must be the first element of SPEC.  Each of the
          following elements can override any or all of these defaults.

     't'
          This element of SPEC matches all terminals.  Therefore, any
          subsequent elements of SPEC are never used.  Normally 't' is
          used in the last (or only) element of SPEC.

     a list
          If DISPLAY is a list, each element should have the form
          '(CHARACTERISTIC VALUE...)'.  Here CHARACTERISTIC specifies a
          way of classifying terminals, and the VALUEs are possible
          classifications which DISPLAY should apply to.  Here are the
          possible values of CHARACTERISTIC:

          'type'
               The kind of window system the terminal uses--either
               'graphic' (any graphics-capable display), 'x', 'pc' (for
               the MS-DOS console), 'w32' (for MS Windows 9X/NT/2K/XP),
               or 'tty' (a non-graphics-capable display).  *Note
               window-system: Window Systems.

          'class'
               What kinds of colors the terminal supports--either
               'color', 'grayscale', or 'mono'.

          'background'
               The kind of background--either 'light' or 'dark'.

          'min-colors'
               An integer that represents the minimum number of colors
               the terminal should support.  This matches a terminal if
               its 'display-color-cells' value is at least the specified
               integer.

          'supports'
               Whether or not the terminal can display the face
               attributes given in VALUE... (*note Face Attributes::).
               *Note Display Face Attribute Testing::, for more
               information on exactly how this testing is done.

          If an element of DISPLAY specifies more than one VALUE for a
          given CHARACTERISTIC, any of those values is acceptable.  If
          DISPLAY has more than one element, each element should specify
          a different CHARACTERISTIC; then _each_ characteristic of the
          terminal must match one of the VALUEs specified for it in
          DISPLAY.

   For example, here's the definition of the standard face 'highlight':

     (defface highlight
       '((((class color) (min-colors 88) (background light))
          :background "darkseagreen2")
         (((class color) (min-colors 88) (background dark))
          :background "darkolivegreen")
         (((class color) (min-colors 16) (background light))
          :background "darkseagreen2")
         (((class color) (min-colors 16) (background dark))
          :background "darkolivegreen")
         (((class color) (min-colors 8))
          :background "green" :foreground "black")
         (t :inverse-video t))
       "Basic face for highlighting."
       :group 'basic-faces)

   Internally, Emacs stores each face's default spec in its
'face-defface-spec' symbol property (*note Symbol Properties::).  The
'saved-face' property stores any face spec saved by the user using the
customization buffer; the 'customized-face' property stores the face
spec customized for the current session, but not saved; and the
'theme-face' property stores an alist associating the active
customization settings and Custom themes with the face specs for that
face.  The face's documentation string is stored in the
'face-documentation' property.

   Normally, a face is declared just once, using 'defface', and any
further changes to its appearance are applied using the Customize
framework (e.g., via the Customize user interface or via the
'custom-set-faces' function; *note Applying Customizations::), or by
face remapping (*note Face Remapping::).  In the rare event that you
need to change a face spec directly from Lisp, you can use the
'face-spec-set' function.

 -- Function: face-spec-set face spec &optional spec-type
     This function applies SPEC as a face spec for 'face'.  SPEC should
     be a face spec, as described in the above documentation for
     'defface'.

     This function also defines FACE as a valid face name if it is not
     already one, and (re)calculates its attributes on existing frames.

     The optional argument SPEC-TYPE determines which spec to set.  If
     it is omitted or 'nil' or 'face-override-spec', this function sets
     the "override spec", which overrides face specs on FACE of all the
     other types mentioned below.  This is useful when calling this
     function outside of Custom code.  If SPEC-TYPE is 'customized-face'
     or 'saved-face', this function sets the customized spec or the
     saved custom spec, respectively.  If it is 'face-defface-spec',
     this function sets the default face spec (the same one set by
     'defface').  If it is 'reset', this function clears out all
     customization specs and override specs from FACE (in this case, the
     value of SPEC is ignored).  The effect of any other value of
     SPEC-TYPE on the face specs is reserved for internal use, but the
     function will still define FACE itself and recalculate its
     attributes, as described above.

==============================================================================
File: elisp.info,  Node: |Attribute_Functions|,  Next: |Displaying_Faces|,  Prev: |Defining_Faces|,  Up: |Faces|
==============================================================================

                                                           *Attribute_Functions*

39.12.3 Face Attribute Functions
--------------------------------

This section describes functions for directly accessing and modifying
the attributes of a named face.

 -- Function: face-attribute face attribute &optional frame inherit
     This function returns the value of the ATTRIBUTE attribute for FACE
     on FRAME.

     If FRAME is omitted or 'nil', that means the selected frame (*note
     Input Focus::).  If FRAME is 't', this function returns the value
     of the specified attribute for newly-created frames (this is
     normally 'unspecified', unless you have specified some value using
     'set-face-attribute'; see below).

     If INHERIT is 'nil', only attributes directly defined by FACE are
     considered, so the return value may be 'unspecified', or a relative
     value.  If INHERIT is non-'nil', FACE's definition of ATTRIBUTE is
     merged with the faces specified by its ':inherit' attribute;
     however the return value may still be 'unspecified' or relative.
     If INHERIT is a face or a list of faces, then the result is further
     merged with that face (or faces), until it becomes specified and
     absolute.

     To ensure that the return value is always specified and absolute,
     use a value of 'default' for INHERIT; this will resolve any
     unspecified or relative values by merging with the 'default' face
     (which is always completely specified).

     For example,

          (face-attribute 'bold :weight)
               => bold

 -- Function: face-attribute-relative-p attribute value
     This function returns non-'nil' if VALUE, when used as the value of
     the face attribute ATTRIBUTE, is relative.  This means it would
     modify, rather than completely override, any value that comes from
     a subsequent face in the face list or that is inherited from
     another face.

     'unspecified' is a relative value for all attributes.  For
     ':height', floating point and function values are also relative.

     For example:

          (face-attribute-relative-p :height 2.0)
               => t

 -- Function: face-all-attributes face &optional frame
     This function returns an alist of attributes of FACE.  The elements
     of the result are name-value pairs of the form
     '(ATTR-NAME . ATTR-VALUE)'.  Optional argument FRAME specifies the
     frame whose definition of FACE to return; if omitted or 'nil', the
     returned value describes the default attributes of FACE for newly
     created frames.

 -- Function: merge-face-attribute attribute value1 value2
     If VALUE1 is a relative value for the face attribute ATTRIBUTE,
     returns it merged with the underlying value VALUE2; otherwise, if
     VALUE1 is an absolute value for the face attribute ATTRIBUTE,
     returns VALUE1 unchanged.

   Normally, Emacs uses the face specs of each face to automatically
calculate its attributes on each frame (*note Defining Faces::).  The
function 'set-face-attribute' can override this calculation by directly
assigning attributes to a face, either on a specific frame or for all
frames.  This function is mostly intended for internal usage.

 -- Function: set-face-attribute face frame &rest arguments
     This function sets one or more attributes of FACE for FRAME.  The
     attributes specifies in this way override the face spec(s)
     belonging to FACE.

     The extra arguments ARGUMENTS specify the attributes to set, and
     the values for them.  They should consist of alternating attribute
     names (such as ':family' or ':underline') and values.  Thus,

          (set-face-attribute 'foo nil :weight 'bold :slant 'italic)

     sets the attribute ':weight' to 'bold' and the attribute ':slant'
     to 'italic'.

     If FRAME is 't', this function sets the default attributes for
     newly created frames.  If FRAME is 'nil', this function sets the
     attributes for all existing frames, as well as for newly created
     frames.

   The following commands and functions mostly provide compatibility
with old versions of Emacs.  They work by calling 'set-face-attribute'.
Values of 't' and 'nil' (or omitted) for their FRAME argument are
handled just like 'set-face-attribute' and 'face-attribute'.  The
commands read their arguments using the minibuffer, if called
interactively.

 -- Command: set-face-foreground face color &optional frame
 -- Command: set-face-background face color &optional frame
     These set the ':foreground' attribute (or ':background' attribute,
     respectively) of FACE to COLOR.

 -- Command: set-face-stipple face pattern &optional frame
     This sets the ':stipple' attribute of FACE to PATTERN.

 -- Command: set-face-font face font &optional frame
     Change the font-related attributes of FACE to those of FONT (a
     string or a font object).  *Note face-font-attribute::, for the
     supported formats of the FONT argument.  This function sets the
     attribute ':font' of the face, and indirectly also the ':family',
     ':foundry', ':width', ':height', ':weight', and ':slant'
     attributes, as defined by the font.  If FRAME is non-'nil', only
     change the attributes on the specified frame.

 -- Function: set-face-bold face bold-p &optional frame
     This sets the ':weight' attribute of FACE to NORMAL if BOLD-P is
     'nil', and to BOLD otherwise.

 -- Function: set-face-italic face italic-p &optional frame
     This sets the ':slant' attribute of FACE to NORMAL if ITALIC-P is
     'nil', and to ITALIC otherwise.

 -- Command: set-face-underline face underline &optional frame
     This sets the ':underline' attribute of FACE to UNDERLINE.

 -- Command: set-face-inverse-video face inverse-video-p &optional frame
     This sets the ':inverse-video' attribute of FACE to
     INVERSE-VIDEO-P.

 -- Command: invert-face face &optional frame
     This swaps the foreground and background colors of face FACE.

 -- Command: set-face-extend face extend &optional frame
     This sets the ':extend' attribute of FACE to EXTEND.

   The following functions examine the attributes of a face.  They
mostly provide compatibility with old versions of Emacs.  If you don't
specify FRAME, they refer to the selected frame; 't' refers to the
default data for new frames.  They return 'unspecified' if the face
doesn't define any value for that attribute.  If INHERIT is 'nil', only
an attribute directly defined by the face is returned.  If INHERIT is
non-'nil', any faces specified by its ':inherit' attribute are
considered as well, and if INHERIT is a face or a list of faces, then
they are also considered, until a specified attribute is found.  To
ensure that the return value is always specified, use a value of
'default' for INHERIT.

 -- Function: face-font face &optional frame character
     This function returns the name of the font of face FACE.

     If the optional argument FRAME is specified, it returns the name of
     the font of FACE for that frame.  If FRAME is omitted or 'nil', the
     selected frame is used.  In the latter case, if the optional third
     argument CHARACTER is supplied, it returns the font name used for
     CHARACTER.

 -- Function: face-foreground face &optional frame inherit
 -- Function: face-background face &optional frame inherit
     These functions return the foreground color (or background color,
     respectively) of face FACE, as a string.  If the color is
     unspecified, they return 'nil'.

 -- Function: face-stipple face &optional frame inherit
     This function returns the name of the background stipple pattern of
     face FACE, or 'nil' if it doesn't have one.

 -- Function: face-bold-p face &optional frame inherit
     This function returns a non-'nil' value if the ':weight' attribute
     of FACE is bolder than normal (i.e., one of 'semi-bold', 'bold',
     'extra-bold', or 'ultra-bold').  Otherwise, it returns 'nil'.

 -- Function: face-italic-p face &optional frame inherit
     This function returns a non-'nil' value if the ':slant' attribute
     of FACE is 'italic' or 'oblique', and 'nil' otherwise.

 -- Function: face-underline-p face &optional frame inherit
     This function returns non-'nil' if face FACE specifies a non-'nil'
     ':underline' attribute.

 -- Function: face-inverse-video-p face &optional frame inherit
     This function returns non-'nil' if face FACE specifies a non-'nil'
     ':inverse-video' attribute.

 -- Function: face-extend-p face &optional frame
     This function returns non-'nil' if face FACE specifies a non-'nil'
     ':extend' attribute.

==============================================================================
File: elisp.info,  Node: |Displaying_Faces|,  Next: |Face_Remapping|,  Prev: |Attribute_Functions|,  Up: |Faces|
==============================================================================

                                                              *Displaying_Faces*

39.12.4 Displaying Faces
------------------------

When Emacs displays a given piece of text, the visual appearance of the
text may be determined by faces drawn from different sources.  If these
various sources together specify more than one face for a particular
character, Emacs merges the attributes of the various faces.  Here is
the order in which Emacs merges the faces, from highest to lowest
priority:

   * If the text consists of a special glyph, the glyph can specify a
     particular face.  *Note Glyphs::.

   * If the text lies within an active region, Emacs highlights it using
     the 'region' face.  *Note (emacs)Standard Faces::.

   * If the text lies within an overlay with a non-'nil' 'face'
     property, Emacs applies the face(s) specified by that property.  If
     the overlay has a 'mouse-face' property and the mouse is near
     enough to the overlay, Emacs applies the face or face attributes
     specified by the 'mouse-face' property instead.  *Note Overlay
     Properties::.

     When multiple overlays cover one character, an overlay with higher
     priority overrides those with lower priority.  *Note Overlays::.

   * If the text contains a 'face' or 'mouse-face' property, Emacs
     applies the specified faces and face attributes.  *Note Special
     Properties::.  (This is how Font Lock mode faces are applied.
     *Note Font Lock Mode::.)

   * If the text lies within the mode line of the selected window, Emacs
     applies the 'mode-line' face.  For the mode line of a non-selected
     window, Emacs applies the 'mode-line-inactive' face.  For a header
     line, Emacs applies the 'header-line' face.  For a tab line, Emacs
     applies the 'tab-line' face.

   * If the text comes from an overlay string via 'before-string' or
     'after-string' properties (*note Overlay Properties::), or from a
     display string (*note Other Display Specs::), and the string
     doesn't contain a 'face' or 'mouse-face' property, or these
     properties leave some face attributes undefined, but the buffer
     text affected by the overlay/display property does define a face or
     those attributes, Emacs applies the face attributes of the
     "underlying" buffer text.  Note that this is so even if the overlay
     or display string is displayed in the display margins (*note
     Display Margins::).

   * If any given attribute has not been specified during the preceding
     steps, Emacs applies the attribute of the 'default' face.

   At each stage, if a face has a valid ':inherit' attribute, Emacs
treats any attribute with an 'unspecified' value as having the
corresponding value drawn from the parent face(s).  *note Face
Attributes::.  Note that the parent face(s) may also leave the attribute
unspecified; in that case, the attribute remains unspecified at the next
level of face merging.

==============================================================================
File: elisp.info,  Node: |Face_Remapping|,  Next: |Face_Functions|,  Prev: |Displaying_Faces|,  Up: |Faces|
==============================================================================

                                                                *Face_Remapping*

39.12.5 Face Remapping
----------------------

The variable 'face-remapping-alist' is used for buffer-local or global
changes in the appearance of a face.  For instance, it is used to
implement the 'text-scale-adjust' command (*note (emacs)Text Scale::).

 -- Variable: face-remapping-alist
     The value of this variable is an alist whose elements have the form
     '(FACE . REMAPPING)'.  This causes Emacs to display any text having
     the face FACE with REMAPPING, rather than the ordinary definition
     of FACE.

     REMAPPING may be any face spec suitable for a 'face' text property:
     either a face (i.e., a face name or a property list of
     attribute/value pairs), or a list of faces.  For details, see the
     description of the 'face' text property in *note Special
     Properties::.  REMAPPING serves as the complete specification for
     the remapped face--it replaces the normal definition of FACE,
     instead of modifying it.

     If 'face-remapping-alist' is buffer-local, its local value takes
     effect only within that buffer.  If 'face-remapping-alist' includes
     faces applicable only to certain windows, by using the
     '(:filtered (:window PARAM VAL) SPEC)', that face takes effect only
     in windows that match the filter conditions (*note Special
     Properties::).  To turn off face filtering temporarily, bind
     'face-filters-always-match' to a non-'nil' value, then all face
     filters will match any window.

     Note: face remapping is non-recursive.  If REMAPPING references the
     same face name FACE, either directly or via the ':inherit'
     attribute of some other face in REMAPPING, that reference uses the
     normal definition of FACE.  For instance, if the 'mode-line' face
     is remapped using this entry in 'face-remapping-alist':

          (mode-line italic mode-line)

     then the new definition of the 'mode-line' face inherits from the
     'italic' face, and the _normal_ (non-remapped) definition of
     'mode-line' face.

   The following functions implement a higher-level interface to
'face-remapping-alist'.  Most Lisp code should use these functions
instead of setting 'face-remapping-alist' directly, to avoid trampling
on remappings applied elsewhere.  These functions are intended for
buffer-local remappings, so they all make 'face-remapping-alist'
buffer-local as a side-effect.  They manage 'face-remapping-alist'
entries of the form

       (FACE RELATIVE-SPEC-1 RELATIVE-SPEC-2 ... BASE-SPEC)

where, as explained above, each of the RELATIVE-SPEC-N and BASE-SPEC is
either a face name, or a property list of attribute/value pairs.  Each
of the "relative remapping" entries, RELATIVE-SPEC-N, is managed by the
'face-remap-add-relative' and 'face-remap-remove-relative' functions;
these are intended for simple modifications like changing the text size.
The "base remapping" entry, BASE-SPEC, has the lowest priority and is
managed by the 'face-remap-set-base' and 'face-remap-reset-base'
functions; it is intended for major modes to remap faces in the buffers
they control.

 -- Function: face-remap-add-relative face &rest specs
     This function adds the face spec in SPECS as relative remappings
     for face FACE in the current buffer.  The remaining arguments,
     SPECS, should form either a list of face names, or a property list
     of attribute/value pairs.

     The return value is a Lisp object that serves as a cookie; you can
     pass this object as an argument to 'face-remap-remove-relative' if
     you need to remove the remapping later.

          ;; Remap the 'escape-glyph' face into a combination
          ;; of the 'highlight' and 'italic' faces:
          (face-remap-add-relative 'escape-glyph 'highlight 'italic)

          ;; Increase the size of the 'default' face by 50%:
          (face-remap-add-relative 'default :height 1.5)

 -- Function: face-remap-remove-relative cookie
     This function removes a relative remapping previously added by
     'face-remap-add-relative'.  COOKIE should be the Lisp object
     returned by 'face-remap-add-relative' when the remapping was added.

 -- Function: face-remap-set-base face &rest specs
     This function sets the base remapping of FACE in the current buffer
     to SPECS.  If SPECS is empty, the default base remapping is
     restored, similar to calling 'face-remap-reset-base' (see below);
     note that this is different from SPECS containing a single value
     'nil', which has the opposite result (the global definition of FACE
     is ignored).

     This overwrites the default BASE-SPEC, which inherits the global
     face definition, so it is up to the caller to add such inheritance
     if so desired.

 -- Function: face-remap-reset-base face
     This function sets the base remapping of FACE to its default value,
     which inherits from FACE's global definition.

==============================================================================
File: elisp.info,  Node: |Face_Functions|,  Next: |Auto_Faces|,  Prev: |Face_Remapping|,  Up: |Faces|
==============================================================================

                                                                *Face_Functions*

39.12.6 Functions for Working with Faces
----------------------------------------

Here are additional functions for creating and working with faces.

 -- Function: face-list
     This function returns a list of all defined face names.

 -- Function: face-id face
     This function returns the "face number" of face FACE.  This is a
     number that uniquely identifies a face at low levels within Emacs.
     It is seldom necessary to refer to a face by its face number.
     However, functions that manipulate glyphs, such as
     'make-glyph-code' and 'glyph-face' (*note Glyphs::) access the face
     numbers internally.  Note that the face number is stored as the
     value of the 'face' property of the face symbol, so we recommend
     not to set that property of a face to any value of your own.

 -- Function: face-documentation face
     This function returns the documentation string of face FACE, or
     'nil' if none was specified for it.

 -- Function: face-equal face1 face2 &optional frame
     This returns 't' if the faces FACE1 and FACE2 have the same
     attributes for display.

 -- Function: face-differs-from-default-p face &optional frame
     This returns non-'nil' if the face FACE displays differently from
     the default face.

   A "face alias" provides an equivalent name for a face.  You can
define a face alias by giving the alias symbol the 'face-alias'
property, with a value of the target face name.  The following example
makes 'modeline' an alias for the 'mode-line' face.

     (put 'modeline 'face-alias 'mode-line)

 -- Macro: define-obsolete-face-alias obsolete-face current-face when
     This macro defines 'obsolete-face' as an alias for CURRENT-FACE,
     and also marks it as obsolete, indicating that it may be removed in
     future.  WHEN should be a string indicating when 'obsolete-face'
     was made obsolete (usually a version number string).

==============================================================================
File: elisp.info,  Node: |Auto_Faces|,  Next: |Basic_Faces|,  Prev: |Face_Functions|,  Up: |Faces|
==============================================================================

                                                                    *Auto_Faces*

39.12.7 Automatic Face Assignment
---------------------------------

This hook is used for automatically assigning faces to text in the
buffer.  It is part of the implementation of Jit-Lock mode, used by
Font-Lock.

 -- Variable: fontification-functions
     This variable holds a list of functions that are called by Emacs
     redisplay as needed, just before doing redisplay.  They are called
     even when Font Lock Mode isn't enabled.  When Font Lock Mode is
     enabled, this variable usually holds just one function,
     'jit-lock-function'.

     The functions are called in the order listed, with one argument, a
     buffer position POS.  Collectively they should attempt to assign
     faces to the text in the current buffer starting at POS.

     The functions should record the faces they assign by setting the
     'face' property.  They should also add a non-'nil' 'fontified'
     property to all the text they have assigned faces to.  That
     property tells redisplay that faces have been assigned to that text
     already.

     It is probably a good idea for the functions to do nothing if the
     character after POS already has a non-'nil' 'fontified' property,
     but this is not required.  If one function overrides the
     assignments made by a previous one, the properties after the last
     function finishes are the ones that really matter.

     For efficiency, we recommend writing these functions so that they
     usually assign faces to around 400 to 600 characters at each call.

==============================================================================
File: elisp.info,  Node: |Basic_Faces|,  Next: |Font_Selection|,  Prev: |Auto_Faces|,  Up: |Faces|
==============================================================================

                                                                   *Basic_Faces*

39.12.8 Basic Faces
-------------------

If your Emacs Lisp program needs to assign some faces to text, it is
often a good idea to use certain existing faces or inherit from them,
rather than defining entirely new faces.  This way, if other users have
customized the basic faces to give Emacs a certain look, your program
will fit in without additional customization.

   Some of the basic faces defined in Emacs are listed below.  In
addition to these, you might want to make use of the Font Lock faces for
syntactic highlighting, if highlighting is not already handled by Font
Lock mode, or if some Font Lock faces are not in use.  *Note Faces for
Font Lock::.

'default'
     The default face, whose attributes are all specified.  All other
     faces implicitly inherit from it: any unspecified attribute
     defaults to the attribute on this face (*note Face Attributes::).

'bold'
'italic'
'bold-italic'
'underline'
'fixed-pitch'
'fixed-pitch-serif'
'variable-pitch'
     These have the attributes indicated by their names (e.g., 'bold'
     has a bold ':weight' attribute), with all other attributes
     unspecified (and so given by 'default').

'shadow'
     For dimmed-out text.  For example, it is used for the ignored part
     of a filename in the minibuffer (*note Minibuffers for File Names:
     (emacs)Minibuffer File.).

'link'
'link-visited'
     For clickable text buttons that send the user to a different buffer
     or location.

'highlight'
     For stretches of text that should temporarily stand out.  For
     example, it is commonly assigned to the 'mouse-face' property for
     cursor highlighting (*note Special Properties::).

'match'
'isearch'
'lazy-highlight'
     For text matching (respectively) permanent search matches,
     interactive search matches, and lazy highlighting other matches
     than the current interactive one.

'error'
'warning'
'success'
     For text concerning errors, warnings, or successes.  For example,
     these are used for messages in 'Compilation' buffers.

==============================================================================
File: elisp.info,  Node: |Font_Selection|,  Next: |Font_Lookup|,  Prev: |Basic_Faces|,  Up: |Faces|
==============================================================================

                                                                *Font_Selection*

39.12.9 Font Selection
----------------------

Before Emacs can draw a character on a graphical display, it must select
a "font" for that character(1).  *Note (emacs)Fonts::.  Normally, Emacs
automatically chooses a font based on the faces assigned to that
character--specifically, the face attributes ':family', ':weight',
':slant', and ':width' (*note Face Attributes::).  The choice of font
also depends on the character to be displayed; some fonts can only
display a limited set of characters.  If no available font exactly fits
the requirements, Emacs looks for the "closest matching font".  The
variables in this section control how Emacs makes this selection.

 -- User Option: face-font-family-alternatives
     If a given family is specified but does not exist, this variable
     specifies alternative font families to try.  Each element should
     have this form:

          (FAMILY ALTERNATE-FAMILIES...)

     If FAMILY is specified but not available, Emacs will try the other
     families given in ALTERNATE-FAMILIES, one by one, until it finds a
     family that does exist.

 -- User Option: face-font-selection-order
     If there is no font that exactly matches all desired face
     attributes (':width', ':height', ':weight', and ':slant'), this
     variable specifies the order in which these attributes should be
     considered when selecting the closest matching font.  The value
     should be a list containing those four attribute symbols, in order
     of decreasing importance.  The default is '(:width :height :weight
     :slant)'.

     Font selection first finds the best available matches for the first
     attribute in the list; then, among the fonts which are best in that
     way, it searches for the best matches in the second attribute, and
     so on.

     The attributes ':weight' and ':width' have symbolic values in a
     range centered around 'normal'.  Matches that are more extreme
     (farther from 'normal') are somewhat preferred to matches that are
     less extreme (closer to 'normal'); this is designed to ensure that
     non-normal faces contrast with normal ones, whenever possible.

     One example of a case where this variable makes a difference is
     when the default font has no italic equivalent.  With the default
     ordering, the 'italic' face will use a non-italic font that is
     similar to the default one.  But if you put ':slant' before
     ':height', the 'italic' face will use an italic font, even if its
     height is not quite right.

 -- User Option: face-font-registry-alternatives
     This variable lets you specify alternative font registries to try,
     if a given registry is specified and doesn't exist.  Each element
     should have this form:

          (REGISTRY ALTERNATE-REGISTRIES...)

     If REGISTRY is specified but not available, Emacs will try the
     other registries given in ALTERNATE-REGISTRIES, one by one, until
     it finds a registry that does exist.

   Emacs can make use of scalable fonts, but by default it does not use
them.

 -- User Option: scalable-fonts-allowed
     This variable controls which scalable fonts to use.  A value of
     'nil', the default, means do not use scalable fonts.  't' means to
     use any scalable font that seems appropriate for the text.

     Otherwise, the value must be a list of regular expressions.  Then a
     scalable font is enabled for use if its name matches any regular
     expression in the list.  For example,

          (setq scalable-fonts-allowed '("iso10646-1$"))

     allows the use of scalable fonts with registry 'iso10646-1'.

 -- Variable: face-font-rescale-alist
     This variable specifies scaling for certain faces.  Its value
     should be a list of elements of the form

          (FONTNAME-REGEXP . SCALE-FACTOR)

     If FONTNAME-REGEXP matches the font name that is about to be used,
     this says to choose a larger similar font according to the factor
     SCALE-FACTOR.  You would use this feature to normalize the font
     size if certain fonts are bigger or smaller than their nominal
     heights and widths would suggest.

   ---------- Footnotes ----------

   (1) In this context, the term "font" has nothing to do with Font Lock
(*note Font Lock Mode::).

==============================================================================
File: elisp.info,  Node: |Font_Lookup|,  Next: |Fontsets|,  Prev: |Font_Selection|,  Up: |Faces|
==============================================================================

                                                                   *Font_Lookup*

39.12.10 Looking Up Fonts
-------------------------

 -- Function: x-list-fonts name &optional reference-face frame maximum
          width
     This function returns a list of available font names that match
     NAME.  NAME should be a string containing a font name in either the
     Fontconfig, GTK+, or XLFD format (*note (emacs)Fonts::).  Within an
     XLFD string, wildcard characters may be used: the '*' character
     matches any substring, and the '?' character matches any single
     character.  Case is ignored when matching font names.

     If the optional arguments REFERENCE-FACE and FRAME are specified,
     the returned list includes only fonts that are the same size as
     REFERENCE-FACE (a face name) currently is on the frame FRAME.

     The optional argument MAXIMUM sets a limit on how many fonts to
     return.  If it is non-'nil', then the return value is truncated
     after the first MAXIMUM matching fonts.  Specifying a small value
     for MAXIMUM can make this function much faster, in cases where many
     fonts match the pattern.

     The optional argument WIDTH specifies a desired font width.  If it
     is non-'nil', the function only returns those fonts whose
     characters are (on average) WIDTH times as wide as REFERENCE-FACE.

 -- Function: x-family-fonts &optional family frame
     This function returns a list describing the available fonts for
     family FAMILY on FRAME.  If FAMILY is omitted or 'nil', this list
     applies to all families, and therefore, it contains all available
     fonts.  Otherwise, FAMILY must be a string; it may contain the
     wildcards '?' and '*'.

     The list describes the display that FRAME is on; if FRAME is
     omitted or 'nil', it applies to the selected frame's display (*note
     Input Focus::).

     Each element in the list is a vector of the following form:

          [FAMILY WIDTH POINT-SIZE WEIGHT SLANT
           FIXED-P FULL REGISTRY-AND-ENCODING]

     The first five elements correspond to face attributes; if you
     specify these attributes for a face, it will use this font.

     The last three elements give additional information about the font.
     FIXED-P is non-'nil' if the font is fixed-pitch.  FULL is the full
     name of the font, and REGISTRY-AND-ENCODING is a string giving the
     registry and encoding of the font.

==============================================================================
File: elisp.info,  Node: |Fontsets|,  Next: |Low_Level_Font|,  Prev: |Font_Lookup|,  Up: |Faces|
==============================================================================

                                                                      *Fontsets*

39.12.11 Fontsets
-----------------

A "fontset" is a list of fonts, each assigned to a range of character
codes.  An individual font cannot display the whole range of characters
that Emacs supports, but a fontset can.  Fontsets have names, just as
fonts do, and you can use a fontset name in place of a font name when
you specify the font for a frame or a face.  Here is information about
defining a fontset under Lisp program control.

 -- Function: create-fontset-from-fontset-spec fontset-spec &optional
          style-variant-p noerror
     This function defines a new fontset according to the specification
     string FONTSET-SPEC.  The string should have this format:

          FONTPATTERN, [CHARSET:FONT]...

     Whitespace characters before and after the commas are ignored.

     The first part of the string, FONTPATTERN, should have the form of
     a standard X font name, except that the last two fields should be
     'fontset-ALIAS'.

     The new fontset has two names, one long and one short.  The long
     name is FONTPATTERN in its entirety.  The short name is
     'fontset-ALIAS'.  You can refer to the fontset by either name.  If
     a fontset with the same name already exists, an error is signaled,
     unless NOERROR is non-'nil', in which case this function does
     nothing.

     If optional argument STYLE-VARIANT-P is non-'nil', that says to
     create bold, italic and bold-italic variants of the fontset as
     well.  These variant fontsets do not have a short name, only a long
     one, which is made by altering FONTPATTERN to indicate the bold
     and/or italic status.

     The specification string also says which fonts to use in the
     fontset.  See below for the details.

   The construct 'CHARSET:FONT' specifies which font to use (in this
fontset) for one particular character set.  Here, CHARSET is the name of
a character set, and FONT is the font to use for that character set.
You can use this construct any number of times in the specification
string.

   For the remaining character sets, those that you don't specify
explicitly, Emacs chooses a font based on FONTPATTERN: it replaces
'fontset-ALIAS' with a value that names one character set.  For the
ASCII character set, 'fontset-ALIAS' is replaced with 'ISO8859-1'.

   In addition, when several consecutive fields are wildcards, Emacs
collapses them into a single wildcard.  This is to prevent use of
auto-scaled fonts.  Fonts made by scaling larger fonts are not usable
for editing, and scaling a smaller font is not useful because it is
better to use the smaller font in its own size, which Emacs does.

   Thus if FONTPATTERN is this,

     --fixed-medium-r-normal--24-*-*-*-*-*-fontset-24

the font specification for ASCII characters would be this:

     --fixed-medium-r-normal--24-*-ISO8859-1

and the font specification for Chinese GB2312 characters would be this:

     --fixed-medium-r-normal--24-*-gb2312*-*

   You may not have any Chinese font matching the above font
specification.  Most X distributions include only Chinese fonts that
have 'song ti' or 'fangsong ti' in the FAMILY field.  In such a case,
'Fontset-N' can be specified as below:

     Emacs.Fontset-0: --fixed-medium-r-normal--24-*-*-*-*-*-fontset-24,\
             chinese-gb2312:---medium-r-normal-*-24-*-gb2312*-*

Then, the font specifications for all but Chinese GB2312 characters have
'fixed' in the FAMILY field, and the font specification for Chinese
GB2312 characters has a wild card '*' in the FAMILY field.

 -- Function: set-fontset-font name character font-spec &optional frame
          add
     This function modifies the existing fontset NAME to use the font
     matching with FONT-SPEC for the specified CHARACTER.

     If NAME is 'nil', this function modifies the fontset of the
     selected frame or that of FRAME if FRAME is not 'nil'.

     If NAME is 't', this function modifies the default fontset, whose
     short name is 'fontset-default'.

     In addition to specifying a single codepoint, CHARACTER may be a
     cons '(FROM . TO)', where FROM and TO are character codepoints.  In
     that case, use FONT-SPEC for all the characters in the range FROM
     and TO (inclusive).

     CHARACTER may be a charset (*note Character Sets::).  In that case,
     use FONT-SPEC for all the characters in the charset.

     CHARACTER may be a script name (*note char-script-table: Character
     Properties.).  In that case, use FONT-SPEC for all the characters
     belonging to the script.

     CHARACTER may be 'nil', which means to use FONT-SPEC for any
     character which no font-spec is specified.

     FONT-SPEC may be a font-spec object created by the function
     'font-spec' (*note Low-Level Font::).

     FONT-SPEC may be a cons; '(FAMILY . REGISTRY)', where FAMILY is a
     family name of a font (possibly including a foundry name at the
     head), REGISTRY is a registry name of a font (possibly including an
     encoding name at the tail).

     FONT-SPEC may be a font name, a string.

     FONT-SPEC may be 'nil', which explicitly specifies that there's no
     font for the specified CHARACTER.  This is useful, for example, to
     avoid expensive system-wide search for fonts for characters that
     have no glyphs, like those from the Unicode Private Use Area (PUA).

     The optional argument ADD, if non-'nil', specifies how to add
     FONT-SPEC to the font specifications previously set.  If it is
     'prepend', FONT-SPEC is prepended.  If it is 'append', FONT-SPEC is
     appended.  By default, FONT-SPEC overrides the previous settings.

     For instance, this changes the default fontset to use a font of
     which family name is 'Kochi Gothic' for all characters belonging to
     the charset 'japanese-jisx0208'.

          (set-fontset-font t 'japanese-jisx0208
                            (font-spec :family "Kochi Gothic"))

 -- Function: char-displayable-p char
     This function returns 't' if Emacs ought to be able to display
     CHAR.  More precisely, if the selected frame's fontset has a font
     to display the character set that CHAR belongs to.

     Fontsets can specify a font on a per-character basis; when the
     fontset does that, this function's value may not be accurate.

==============================================================================
File: elisp.info,  Node: |Low_Level_Font|,  Prev: Fontsets,  Up: Faces
==============================================================================

                                                                *Low_Level_Font*

39.12.12 Low-Level Font Representation
--------------------------------------

Normally, it is not necessary to manipulate fonts directly.  In case you
need to do so, this section explains how.

   In Emacs Lisp, fonts are represented using three different Lisp
object types: "font objects", "font specs", and "font entities".

 -- Function: fontp object &optional type
     Return 't' if OBJECT is a font object, font spec, or font entity.
     Otherwise, return 'nil'.

     The optional argument TYPE, if non-'nil', determines the exact type
     of Lisp object to check for.  In that case, TYPE should be one of
     'font-object', 'font-spec', or 'font-entity'.

   A font object is a Lisp object that represents a font that Emacs has
"opened".  Font objects cannot be modified in Lisp, but they can be
inspected.

 -- Function: font-at position &optional window string
     Return the font object that is being used to display the character
     at position POSITION in the window WINDOW.  If WINDOW is 'nil', it
     defaults to the selected window.  If STRING is 'nil', POSITION
     specifies a position in the current buffer; otherwise, STRING
     should be a string, and POSITION specifies a position in that
     string.

   A font spec is a Lisp object that contains a set of specifications
that can be used to find a font.  More than one font may match the
specifications in a font spec.

 -- Function: font-spec &rest arguments
     Return a new font spec using the specifications in ARGUMENTS, which
     should come in 'property'-'value' pairs.  The possible
     specifications are as follows:

     ':name'
          The font name (a string), in either XLFD, Fontconfig, or GTK+
          format.  *Note (emacs)Fonts::.

     ':family'
     ':foundry'
     ':weight'
     ':slant'
     ':width'
          These have the same meanings as the face attributes of the
          same name.  *Note Face Attributes::.  ':family' and ':foundry'
          are strings, while the other three are symbols.  As example
          values, ':slant' may be 'italic', ':weight' may be 'bold' and
          ':width' may be 'normal'.

     ':size'
          The font size--either a non-negative integer that specifies the
          pixel size, or a floating-point number that specifies the
          point size.

     ':adstyle'
          Additional typographic style information for the font, such as
          'sans'.  The value should be a string or a symbol.

     ':registry'
          The charset registry and encoding of the font, such as
          'iso8859-1'.  The value should be a string or a symbol.

     ':script'
          The script that the font must support (a symbol).

     ':lang'
          The language that the font should support.  The value should
          be a symbol whose name is a two-letter ISO-639 language name.
          On X, the value is matched against the "Additional Style"
          field of the XLFD name of a font, if it is non-empty.  On
          MS-Windows, fonts matching the spec are required to support
          codepages needed for the language.  Currently, only a small
          set of CJK languages is supported with this property: 'ja',
          'ko', and 'zh'.

     ':otf'
          The font must be an OpenType font that supports these OpenType
          features, provided Emacs is compiled with a library, such as
          'libotf' on GNU/Linux, that supports complex text layout for
          scripts which need that.  The value must be a list of the form

               (SCRIPT-TAG LANGSYS-TAG GSUB GPOS)

          where SCRIPT-TAG is the OpenType script tag symbol;
          LANGSYS-TAG is the OpenType language system tag symbol, or
          'nil' to use the default language system; 'gsub' is a list of
          OpenType GSUB feature tag symbols, or 'nil' if none is
          required; and 'gpos' is a list of OpenType GPOS feature tag
          symbols, or 'nil' if none is required.  If 'gsub' or 'gpos' is
          a list, a 'nil' element in that list means that the font must
          not match any of the remaining tag symbols.  The 'gpos'
          element may be omitted.

 -- Function: font-put font-spec property value
     Set the font property PROPERTY in the font-spec FONT-SPEC to VALUE.

   A font entity is a reference to a font that need not be open.  Its
properties are intermediate between a font object and a font spec: like
a font object, and unlike a font spec, it refers to a single, specific
font.  Unlike a font object, creating a font entity does not load the
contents of that font into computer memory.  Emacs may open multiple
font objects of different sizes from a single font entity referring to a
scalable font.

 -- Function: find-font font-spec &optional frame
     This function returns a font entity that best matches the font spec
     FONT-SPEC on frame FRAME.  If FRAME is 'nil', it defaults to the
     selected frame.

 -- Function: list-fonts font-spec &optional frame num prefer
     This function returns a list of all font entities that match the
     font spec FONT-SPEC.

     The optional argument FRAME, if non-'nil', specifies the frame on
     which the fonts are to be displayed.  The optional argument NUM, if
     non-'nil', should be an integer that specifies the maximum length
     of the returned list.  The optional argument PREFER, if non-'nil',
     should be another font spec, which is used to control the order of
     the returned list; the returned font entities are sorted in order
     of decreasing closeness to that font spec.

   If you call 'set-face-attribute' and pass a font spec, font entity,
or font name string as the value of the ':font' attribute, Emacs opens
the best matching font that is available for display.  It then stores
the corresponding font object as the actual value of the ':font'
attribute for that face.

   The following functions can be used to obtain information about a
font.  For these functions, the FONT argument can be a font object, a
font entity, or a font spec.

 -- Function: font-get font property
     This function returns the value of the font property PROPERTY for
     FONT.

     If FONT is a font spec and the font spec does not specify PROPERTY,
     the return value is 'nil'.  If FONT is a font object or font
     entity, the value for the :SCRIPT property may be a list of scripts
     supported by the font.

 -- Function: font-face-attributes font &optional frame
     This function returns a list of face attributes corresponding to
     FONT.  The optional argument FRAME specifies the frame on which the
     font is to be displayed.  If it is 'nil', the selected frame is
     used.  The return value has the form

          (:family FAMILY :height HEIGHT :weight WEIGHT
             :slant SLANT :width WIDTH)

     where the values of FAMILY, HEIGHT, WEIGHT, SLANT, and WIDTH are
     face attribute values.  Some of these key-attribute pairs may be
     omitted from the list if they are not specified by FONT.

 -- Function: font-xlfd-name font &optional fold-wildcards
     This function returns the XLFD (X Logical Font Descriptor), a
     string, matching FONT.  *Note (emacs)Fonts::, for information about
     XLFDs.  If the name is too long for an XLFD (which can contain at
     most 255 characters), the function returns 'nil'.

     If the optional argument FOLD-WILDCARDS is non-'nil', consecutive
     wildcards in the XLFD are folded into one.

   The following two functions return important information about a
font.

 -- Function: font-info name &optional frame
     This function returns information about a font specified by its
     NAME, a string, as it is used on FRAME.  If FRAME is omitted or
     'nil', it defaults to the selected frame.

     The value returned by the function is a vector of the form
     '[OPENED-NAME FULL-NAME SIZE HEIGHT BASELINE-OFFSET
     RELATIVE-COMPOSE DEFAULT-ASCENT MAX-WIDTH ASCENT DESCENT
     SPACE-WIDTH AVERAGE-WIDTH FILENAME CAPABILITY]'.  Here's the
     description of each components of this vector:

     OPENED-NAME
          The name used to open the font, a string.

     FULL-NAME
          The full name of the font, a string.

     SIZE
          The pixel size of the font.

     HEIGHT
          The height of the font in pixels.

     BASELINE-OFFSET
          The offset in pixels from the ASCII baseline, positive upward.

     RELATIVE-COMPOSE
     DEFAULT-ASCENT
          Numbers controlling how to compose characters.

     MAX-WIDTH
          The maximum advance width of the font.

     ASCENT
     DESCENT
          The ascent and descent of this font.  The sum of these two
          numbers should be equal to the value of HEIGHT above.

     SPACE-WIDTH
          The width, in pixels, of the font's space character.

     AVERAGE-WIDTH
          The average width of the font characters.  If this is zero,
          Emacs uses the value of SPACE-WIDTH instead, when it
          calculates text layout on display.

     FILENAME
          The file name of the font as a string.  This can be 'nil' if
          the font back-end does not provide a way to find out the
          font's file name.

     CAPABILITY
          A list whose first element is a symbol representing the font
          type, one of 'x', 'opentype', 'truetype', 'type1', 'pcf', or
          'bdf'.  For OpenType fonts, the list includes 2 additional
          elements describing the GSUB and GPOS features supported by
          the font.  Each of these elements is a list of the form
          '((SCRIPT (LANGSYS FEATURE ...) ...) ...)', where SCRIPT is a
          symbol representing an OpenType script tag, LANGSYS is a
          symbol representing an OpenType langsys tag (or 'nil', which
          stands for the default langsys), and each FEATURE is a symbol
          representing an OpenType feature tag.

 -- Function: query-font font-object
     This function returns information about a FONT-OBJECT.  (This is in
     contrast to 'font-info', which takes the font name, a string, as
     its argument.)

     The value returned by the function is a vector of the form '[NAME
     FILENAME PIXEL-SIZE MAX-WIDTH ASCENT DESCENT SPACE-WIDTH
     vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
