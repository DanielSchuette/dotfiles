   If the output file is currently visited in an Emacs buffer, the
output commands append the message to that buffer.  It is up to you to
save the buffer eventually in its file.

   Sometimes you may receive a message whose body holds the contents of
a file.  You can save the body to a file (excluding the message header)
with the 'w' command ('rmail-output-body-to-file').  Often these
messages contain the intended file name in the 'Subject' field, so the
'w' command uses the 'Subject' field as the default for the output file
name (after replacing some characters that cannot be portably used in
file names).  However, the file name is read using the minibuffer, so
you can specify a different name if you wish.

   You can also output a message to an Rmail file chosen with a menu.
In the Classify menu, choose the Output Rmail File menu item; then
choose the Rmail file you want.  This outputs the current message to
that file, like the 'o' command.  The variables
'rmail-secondary-file-directory' and 'rmail-secondary-file-regexp'
specify which files to offer in the menu: the first variable says which
directory to find them in; the second says which files in that directory
to offer (all those that match the regular expression).  If no files
match, you cannot select this menu item.

   Copying a message with 'o' or 'C-o' gives the original copy of the
message the 'filed' attribute, so that 'filed' appears in the mode line
when such a message is current.

   If you like to keep just a single copy of every mail message, set the
variable 'rmail-delete-after-output' to 't'; then the 'o', 'C-o' and 'w'
commands delete the original message after copying it.  (You can
undelete it afterward if you wish, see *note Rmail Deletion::.)

   By default, 'o' will leave the deleted status of a message it outputs
as it was on the original message; thus, a message deleted before it was
output will appear as deleted in the output file.  Setting the variable
'rmail-output-reset-deleted-flag' to a non-'nil' value countermands
that: the copy of the message will have its deleted status reset, so the
message will appear as undeleted in the output file.  In addition, when
this variable is non-'nil', specifying a positive argument to 'o' will
not ignore deleted messages when looking for consecutive messages to
output.

   The variable 'rmail-output-file-alist' lets you specify intelligent
defaults for the output file, based on the contents of the current
message.  The value should be a list whose elements have this form:

     (REGEXP . NAME-EXP)

If there's a match for REGEXP in the current message, then the default
file name for output is NAME-EXP.  If multiple elements match the
message, the first matching element decides the default file name.  The
subexpression NAME-EXP may be a string constant giving the file name to
use, or more generally it may be any Lisp expression that yields a file
name as a string.  'rmail-output-file-alist' applies to both 'o' and
'C-o'.

   Rmail can automatically save messages from your primary Rmail file
(the one that 'rmail-file-name' specifies) to other files, based on the
value of the variable 'rmail-automatic-folder-directives'.  This
variable is a list of elements ('directives') that say which messages to
save where.  Each directive is a list consisting of an output file,
followed by one or more pairs of a header name and a regular expression.
If a message has a header matching the specified regular expression,
that message is saved to the given file.  If the directive has more than
one header entry, all must match.  Rmail checks directives when it shows
a message from the file 'rmail-file-name', and applies the first that
matches (if any).  If the output file is 'nil', the message is deleted,
not saved.  For example, you can use this feature to save messages from
a particular address, or with a particular subject, to a dedicated file.

==============================================================================
File: emacs.info,  Node: |Rmail_Labels|,  Next: |Rmail_Attributes|,  Prev: |Rmail_Output|,  Up: |Rmail|
==============================================================================

                                                                  *Rmail_Labels*

33.8 Labels
===--------

Each message can have various "labels" assigned to it as a means of
classification.  Each label has a name; different names are different
labels.  Any given label is either present or absent on a particular
message.  A few label names have standard meanings and are given to
messages automatically by Rmail when appropriate; these special labels
are called "attributes".  (*Note Rmail Attributes::.)  All other labels
are assigned only by users.

'a LABEL <RET>'
     Assign the label LABEL to the current message ('rmail-add-label').
'k LABEL <RET>'
     Remove the label LABEL from the current message
     ('rmail-kill-label').
'C-M-n LABELS <RET>'
     Move to the next message that has one of the labels LABELS
     ('rmail-next-labeled-message').
'C-M-p LABELS <RET>'
     Move to the previous message that has one of the labels LABELS
     ('rmail-previous-labeled-message').
'l LABELS <RET>'
'C-M-l LABELS <RET>'
     Make a summary of all messages containing any of the labels LABELS
     ('rmail-summary-by-labels').

   The 'a' ('rmail-add-label') and 'k' ('rmail-kill-label') commands
allow you to assign or remove any label on the current message.  If the
LABEL argument is empty, it means to assign or remove the label most
recently assigned or removed.

   Once you have given messages labels to classify them as you wish,
there are three ways to use the labels: in moving, in summaries, and in
sorting.

   'C-M-n LABELS <RET>' ('rmail-next-labeled-message') moves to the next
message that has one of the labels LABELS.  The argument LABELS
specifies one or more label names, separated by commas.  'C-M-p'
('rmail-previous-labeled-message') is similar, but moves backwards to
previous messages.  A numeric argument to either command serves as a
repeat count.

   The command 'C-M-l LABELS <RET>' ('rmail-summary-by-labels') displays
a summary containing only the messages that have at least one of a
specified set of labels.  The argument LABELS is one or more label
names, separated by commas.  *Note Rmail Summary::, for information on
summaries.

   If the LABELS argument to 'C-M-n', 'C-M-p' or 'C-M-l' is empty, it
means to use the last set of labels specified for any of these commands.

   *Note Rmail Sorting::, for information on sorting messages with
labels.

==============================================================================
File: emacs.info,  Node: |Rmail_Attributes|,  Next: |Rmail_Reply|,  Prev: |Rmail_Labels|,  Up: |Rmail|
==============================================================================

                                                              *Rmail_Attributes*

33.9 Rmail Attributes
===------------------

Some labels such as 'deleted' and 'filed' have built-in meanings, and
Rmail assigns them to messages automatically at appropriate times; these
labels are called "attributes".  Here is a list of Rmail attributes:

'unseen'
     Means the message has never been current.  Assigned to messages
     when they come from an inbox file, and removed when a message is
     made current.  When you start Rmail, it initially shows the first
     message that has this attribute.
'deleted'
     Means the message is deleted.  Assigned by deletion commands and
     removed by undeletion commands (*note Rmail Deletion::).
'filed'
     Means the message has been copied to some other file.  Assigned by
     the 'o' and 'C-o' file output commands (*note Rmail Output::).
'answered'
     Means you have mailed an answer to the message.  Assigned by the
     'r' command ('rmail-reply').  *Note Rmail Reply::.
'forwarded'
     Means you have forwarded the message.  Assigned by the 'f' command
     ('rmail-forward').  *Note Rmail Reply::.
'edited'
     Means you have edited the text of the message within Rmail.  *Note
     Rmail Editing::.
'resent'
     Means you have resent the message.  Assigned by the command 'M-x
     rmail-resend'.  *Note Rmail Reply::.
'retried'
     Means you have retried a failed outgoing message.  Assigned by the
     command 'M-x rmail-retry-failure'.  *Note Rmail Reply::.

   All other labels are assigned or removed only by users, and have no
standard meaning.

==============================================================================
File: emacs.info,  Node: |Rmail_Reply|,  Next: |Rmail_Summary|,  Prev: |Rmail_Attributes|,  Up: |Rmail|
==============================================================================

                                                                   *Rmail_Reply*

33.10 Sending Replies
===------------------

Rmail has several commands to send outgoing mail.  *Note Sending Mail::,
for information on using Message mode, including certain features meant
to work with Rmail.  What this section documents are the special
commands of Rmail for entering the mail buffer used to compose the
outgoing message.  Note that the usual keys for sending mail--'C-x m',
'C-x 4 m', and 'C-x 5 m'--also work normally in Rmail mode.

'm'
     Send a message ('rmail-mail').
'c'
     Continue editing the already started outgoing message
     ('rmail-continue').
'r'
     Send a reply to the current Rmail message ('rmail-reply').
'f'
     Forward the current message to other users ('rmail-forward').
'C-u f'
     Resend the current message to other users ('rmail-resend').
'M-m'
     Try sending a bounced message a second time
     ('rmail-retry-failure').

   The most common reason to send a message while in Rmail is to reply
to the message you are reading.  To do this, type 'r' ('rmail-reply').
This displays a mail composition buffer in another window, much like
'C-x 4 m', but preinitializes the 'Subject', 'To', 'CC', 'In-Reply-To'
and 'References' header fields based on the message you are replying to.
The 'To' field starts out as the address of the person who sent the
message you received, and the 'CC' field starts out with all the other
recipients of that message.

   You can exclude certain recipients from being included automatically
in replies, using the variable 'mail-dont-reply-to-names'.  Its value
should be a regular expression; any recipients that match are excluded
from the 'CC' field.  They are also excluded from the 'To' field, unless
this would leave the field empty.  If this variable is 'nil', then the
first time you compose a reply it is initialized to a default value that
matches your own address.

   To reply only to the sender of the original message, enter the reply
command with a numeric argument: 'C-u r' or '1 r'.  This omits the 'CC'
field completely for a particular reply.

   Once the mail composition buffer has been initialized, editing and
sending the mail goes as usual (*note Sending Mail::).  You can edit the
presupplied header fields if they are not what you want.  You can also
use commands such as 'C-c C-y', which yanks in the message that you are
replying to (*note Mail Commands::).  You can also switch to the Rmail
buffer, select a different message there, switch back, and yank the new
current message.

   Sometimes a message does not reach its destination.  Mailers usually
send the failed message back to you, enclosed in a "failure message".
The Rmail command 'M-m' ('rmail-retry-failure') prepares to send the
same message a second time: it sets up a mail composition buffer with
the same text and header fields as before.  If you type 'C-c C-c' right
away, you send the message again exactly the same as the first time.
Alternatively, you can edit the text or headers and then send it.  The
variable 'rmail-retry-ignored-headers', in the same format as
'rmail-ignored-headers' (*note Rmail Display::), controls which headers
are stripped from the failed message when retrying it.

   Another frequent reason to send mail in Rmail is to "forward" the
current message to other users.  'f' ('rmail-forward') makes this easy
by preinitializing the mail composition buffer with the current message
as the text, and a subject of the form '[FROM: SUBJECT]', where FROM and
SUBJECT are the sender and subject of the original message.  All you
have to do is fill in the recipients and send.  When you forward a
message, recipients get a message which is from you, and which has the
original message in its contents.

   Rmail offers two formats for forwarded messages.  The default is to
use the MIME format (*note Rmail Display::).  This includes the original
message as a separate part.  You can use a simpler format if you prefer,
by setting the variable 'rmail-enable-mime-composing' to 'nil'.  In this
case, Rmail just includes the original message enclosed between two
delimiter lines.  It also modifies every line that starts with a dash,
by inserting '- ' at the start of the line.  When you receive a
forwarded message in this format, if it contains something besides
ordinary text--for example, program source code--you might find it useful
to undo that transformation.  You can do this by selecting the forwarded
message and typing 'M-x unforward-rmail-message'.  This command extracts
the original forwarded message, deleting the inserted '- ' strings, and
inserts it into the Rmail file as a separate message immediately
following the current one.

   "Resending" is an alternative similar to forwarding; the difference
is that resending sends a message that is from the original sender, just
as it reached you--with a few added header fields ('Resent-From' and
'Resent-To') to indicate that it came via you.  To resend a message in
Rmail, use 'C-u f'.  ('f' runs 'rmail-forward', which invokes
'rmail-resend' if you provide a numeric argument.)

   Use the 'm' ('rmail-mail') command to start editing an outgoing
message that is not a reply.  It leaves the header fields empty.  Its
only difference from 'C-x 4 m' is that it makes the Rmail buffer
accessible for 'C-c C-y', just as 'r' does.

   The 'c' ('rmail-continue') command resumes editing the mail
composition buffer, to finish editing an outgoing message you were
already composing, or to alter a message you have sent.

   If you set the variable 'rmail-mail-new-frame' to a non-'nil' value,
then all the Rmail commands to start sending a message create a new
frame to edit it in.  This frame is deleted when you send the message.

   All the Rmail commands to send a message use the mail-composition
method that you have chosen (*note Mail Methods::).

==============================================================================
File: emacs.info,  Node: |Rmail_Summary|,  Next: |Rmail_Sorting|,  Prev: |Rmail_Reply|,  Up: |Rmail|
==============================================================================

                                                                 *Rmail_Summary*

33.11 Summaries
===------------

A "summary" is a buffer containing one line per message to give you an
overview of the mail in an Rmail file.  Each line shows the message
number and date, the sender, the line count, the labels, and the
subject.  Moving point in the summary buffer selects messages as you
move to their summary lines.  Almost all Rmail commands are valid in the
summary buffer also; when used there, they apply to the message
described by the current line of the summary.

   A summary buffer applies to a single Rmail file only; if you are
editing multiple Rmail files, each one can have its own summary buffer.
The summary buffer name is made by appending '-summary' to the Rmail
buffer's name.  Normally only one summary buffer is displayed at a time.

MENU

* |Rmail_Make_Summary|::       Making various sorts of summaries.
* |Rmail_Summary_Edit|::       Manipulating messages from the summary.

==============================================================================
File: emacs.info,  Node: |Rmail_Make_Summary|,  Next: |Rmail_Summary_Edit|,  Up: |Rmail_Summary|
==============================================================================

                                                            *Rmail_Make_Summary*

33.11.1 Making Summaries
------------------------

Here are the commands to create a summary for the current Rmail buffer.
Once the Rmail buffer has a summary, changes in the Rmail buffer (such
as deleting or expunging messages, and getting new mail) automatically
update the summary.

'h'
'C-M-h'
     Summarize all messages ('rmail-summary').
'l LABELS <RET>'
'C-M-l LABELS <RET>'
     Summarize messages that have one or more of the specified labels
     ('rmail-summary-by-labels').
'C-M-r RCPTS <RET>'
     Summarize messages that match the specified recipients
     ('rmail-summary-by-recipients').
'C-M-t TOPIC <RET>'
     Summarize messages that have a match for the specified regexp TOPIC
     in their subjects ('rmail-summary-by-topic').
'C-M-s REGEXP <RET>'
     Summarize messages whose headers match the specified regular
     expression REGEXP ('rmail-summary-by-regexp').
'C-M-f SENDERS <RET>'
     Summarize messages that match the specified senders.
     ('rmail-summary-by-senders').

   The 'h' or 'C-M-h' ('rmail-summary') command fills the summary buffer
for the current Rmail buffer with a summary of all the messages in the
buffer.  It then displays and selects the summary buffer in another
window.

   'C-M-l LABELS <RET>' ('rmail-summary-by-labels') makes a partial
summary mentioning only the messages that have one or more of the labels
LABELS.  LABELS should contain label names separated by commas.

   'C-M-r RCPTS <RET>' ('rmail-summary-by-recipients') makes a partial
summary mentioning only the messages that have one or more recipients
matching the regular expression RCPTS.  This is matched against the
'To', 'From', and 'CC' headers (supply a prefix argument to exclude the
'CC' header).

   'C-M-t TOPIC <RET>' ('rmail-summary-by-topic') makes a partial
summary mentioning only the messages whose subjects have a match for the
regular expression TOPIC.  With a prefix argument, the match is against
the whole message, not just the subject.

   'C-M-s REGEXP <RET>' ('rmail-summary-by-regexp') makes a partial
summary that mentions only the messages whose headers (including the
date and the subject lines) match the regular expression REGEXP.

   'C-M-f SENDERS <RET>' ('rmail-summary-by-senders') makes a partial
summary that mentions only the messages whose 'From' fields match the
regular expression SENDERS.

   Note that there is only one summary buffer for any Rmail buffer;
making any kind of summary discards any previous summary.

   The variable 'rmail-summary-window-size' says how many lines to use
for the summary window.  The variable 'rmail-summary-line-count-flag'
controls whether the summary line for a message should include the line
count of the message.  Setting this option to 'nil' might speed up the
generation of summaries.

==============================================================================
File: emacs.info,  Node: |Rmail_Summary_Edit|,  Prev: |Rmail_Make_Summary|,  Up: |Rmail_Summary|
==============================================================================

                                                            *Rmail_Summary_Edit*

33.11.2 Editing in Summaries
----------------------------

You can use the Rmail summary buffer to do almost anything you can do in
the Rmail buffer itself.  In fact, once you have a summary buffer,
there's no need to switch back to the Rmail buffer.

   You can select and display various messages in the Rmail buffer, from
the summary buffer, just by moving point in the summary buffer to
different lines.  It doesn't matter what Emacs command you use to move
point; whichever line point is on at the end of the command, that
message is selected in the Rmail buffer.

   Almost all Rmail commands work in the summary buffer as well as in
the Rmail buffer.  Thus, 'd' in the summary buffer deletes the current
message, 'u' undeletes, and 'x' expunges.  (However, in the summary
buffer, if there are no more undeleted messages in the relevant
direction, the delete commands go to the first or last message, rather
than staying on the current message.)  'o' and 'C-o' output the current
message to a FILE; 'r' starts a reply to it; etc.  You can scroll the
current message while remaining in the summary buffer using <SPC> and
<DEL>.  However, in the summary buffer scrolling past the end or the
beginning of a message with <SPC> or <DEL> goes, respectively, to the
next or previous undeleted message.  Customize the
'rmail-summary-scroll-between-messages' option to 'nil' to disable
scrolling to next/previous messages.

   'M-u' ('rmail-summary-undelete-many') undeletes all deleted messages
in the summary.  A prefix argument means to undelete that many of the
previous deleted messages.

   The Rmail commands to move between messages also work in the summary
buffer, but with a twist: they move through the set of messages included
in the summary.  They also ensure the Rmail buffer appears on the screen
(unlike cursor motion commands, which update the contents of the Rmail
buffer but don't display it in a window unless it already appears).
Here is a list of these commands:

'n'
     Move to next line, skipping lines saying "deleted", and select its
     message ('rmail-summary-next-msg').
'p'
     Move to previous line, skipping lines saying "deleted", and select
     its message ('rmail-summary-previous-msg').
'M-n'
     Move to next line and select its message
     ('rmail-summary-next-all').
'M-p'
     Move to previous line and select its message
     ('rmail-summary-previous-all').
'>'
     Move to the last line, and select its message
     ('rmail-summary-last-message').
'<'
     Move to the first line, and select its message
     ('rmail-summary-first-message').
'j'
'<RET>'
     Select the message on the current line (ensuring that the Rmail
     buffer appears on the screen; 'rmail-summary-goto-msg').  With
     argument N, select message number N and move to its line in the
     summary buffer; this signals an error if the message is not listed
     in the summary buffer.
'M-s PATTERN <RET>'
     Search through messages for PATTERN starting with the current
     message; select the message found, and move point in the summary
     buffer to that message's line ('rmail-summary-search').  A prefix
     argument acts as a repeat count; a negative argument means search
     backward (equivalent to 'rmail-summary-search-backward'.)
'C-M-n LABELS <RET>'
     Move to the next message with at least one of the specified labels
     ('rmail-summary-next-labeled-message').  LABELS is a
     comma-separated list of labels.  A prefix argument acts as a repeat
     count.
'C-M-p LABELS <RET>'
     Move to the previous message with at least one of the specified
     labels ('rmail-summary-previous-labeled-message').
'C-c C-n <RET>'
     Move to the next message with the same subject as the current
     message ('rmail-summary-next-same-subject').  A prefix argument
     acts as a repeat count.
'C-c C-p <RET>'
     Move to the previous message with the same subject as the current
     message ('rmail-summary-previous-same-subject').

   Deletion, undeletion, and getting new mail, and even selection of a
different message all update the summary buffer when you do them in the
Rmail buffer.  If the variable 'rmail-redisplay-summary' is non-'nil',
these actions also bring the summary buffer back onto the screen.

   When you are finished using the summary, type 'Q'
('rmail-summary-wipe') to delete the summary buffer's window.  You can
also exit Rmail while in the summary: 'q' ('rmail-summary-quit') deletes
the summary window, then exits from Rmail by saving the Rmail file and
switching to another buffer.  Alternatively, 'b' ('rmail-summary-bury')
simply buries the Rmail summary and buffer.

==============================================================================
File: emacs.info,  Node: |Rmail_Sorting|,  Next: |Rmail_Display|,  Prev: |Rmail_Summary|,  Up: |Rmail|
==============================================================================

                                                                 *Rmail_Sorting*

33.12 Sorting the Rmail File
===-------------------------

'C-c C-s C-d'
'M-x rmail-sort-by-date'
     Sort messages of current Rmail buffer by date.

'C-c C-s C-s'
'M-x rmail-sort-by-subject'
     Sort messages of current Rmail buffer by subject.

'C-c C-s C-a'
'M-x rmail-sort-by-author'
     Sort messages of current Rmail buffer by author's name.

'C-c C-s C-r'
'M-x rmail-sort-by-recipient'
     Sort messages of current Rmail buffer by recipient's name.

'C-c C-s C-c'
'M-x rmail-sort-by-correspondent'
     Sort messages of current Rmail buffer by the name of the other
     correspondent.

'C-c C-s C-l'
'M-x rmail-sort-by-lines'
     Sort messages of current Rmail buffer by number of lines.

'C-c C-s C-k <RET> LABELS <RET>'
'M-x rmail-sort-by-labels <RET> LABELS <RET>'
     Sort messages of current Rmail buffer by labels.  The argument
     LABELS should be a comma-separated list of labels.  The order of
     these labels specifies the order of messages; messages with the
     first label come first, messages with the second label come second,
     and so on.  Messages that have none of these labels come last.

   The Rmail sort commands perform a _stable sort_: if there is no
reason to prefer either one of two messages, their order remains
unchanged.  You can use this to sort by more than one criterion.  For
example, if you use 'rmail-sort-by-date' and then
'rmail-sort-by-author', messages from the same author appear in order by
date.

   With a prefix argument, all these commands reverse the order of
comparison.  This means they sort messages from newest to oldest, from
biggest to smallest, or in reverse alphabetical order.

   The same keys in the summary buffer run similar functions; for
example, 'C-c C-s C-l' runs 'rmail-summary-sort-by-lines'.  These
commands always sort the whole Rmail buffer, even if the summary is only
showing a subset of messages.

   Note that you cannot undo a sort, so you may wish to save the Rmail
buffer before sorting it.

==============================================================================
File: emacs.info,  Node: |Rmail_Display|,  Next: |Rmail_Coding|,  Prev: |Rmail_Sorting|,  Up: |Rmail|
==============================================================================

                                                                 *Rmail_Display*

33.13 Display of Messages
===----------------------

This section describes how Rmail displays mail headers, MIME sections
and attachments, URLs, and encrypted messages.

't'
     Toggle display of complete header ('rmail-toggle-header').

   Before displaying each message for the first time, Rmail reformats
its header, hiding uninteresting header fields to reduce clutter.  The
't' ('rmail-toggle-header') command toggles this, switching between
showing the reformatted header fields and showing the complete, original
header.  With a positive prefix argument, the command shows the
reformatted header; with a zero or negative prefix argument, it shows
the full header.  Selecting the message again also reformats it if
necessary.

   The variable 'rmail-ignored-headers' holds a regular expression
specifying the header fields to hide; any matching header line will be
hidden.  The variable 'rmail-nonignored-headers' overrides this: any
header field matching that regular expression is shown even if it
matches 'rmail-ignored-headers' too.  The variable
'rmail-displayed-headers' is an alternative to these two variables; if
non-'nil', this should be a regular expression specifying which headers
to display (the default is 'nil').

   Rmail highlights certain header fields that are especially
interesting--by default, the 'From' and 'Subject' fields.  This
highlighting uses the 'rmail-highlight' face.  The variable
'rmail-highlighted-headers' holds a regular expression specifying the
header fields to highlight; if it matches the beginning of a header
field, that whole field is highlighted.  To disable this feature, set
'rmail-highlighted-headers' to 'nil'.

   If a message is in MIME (Multipurpose Internet Mail Extensions)
format and contains multiple parts (MIME entities), Rmail displays each
part with a "tagline".  The tagline summarizes the part's index, size,
and content type.  Depending on the content type, it may also contain
one or more buttons; these perform actions such as saving the part into
a file.

'<RET>'
     Hide or show the MIME part at point ('rmail-mime-toggle-hidden').

'<TAB>'
     Move point to the next MIME tagline button.
     ('rmail-mime-next-item').

'S-<TAB>'
     Move point to the previous MIME part ('rmail-mime-previous-item').

'v'
     Toggle between MIME display and raw message ('rmail-mime').

   Each plain-text MIME part is initially displayed immediately after
its tagline, as part of the Rmail buffer (unless the message has an HTML
part, see below), while MIME parts of other types are represented only
by their taglines, with their actual contents hidden.  In either case,
you can toggle a MIME part between its displayed and hidden states by
typing <RET> anywhere in the part--or anywhere in its tagline (except for
buttons for other actions, if there are any).  Type <RET> (or click with
the mouse) to activate a tagline button, and <TAB> to cycle point
between tagline buttons.

   The 'v' ('rmail-mime') command toggles between the default MIME
display described above, and a raw display showing the undecoded MIME
data.  With a prefix argument, this command toggles the display of only
an entity at point.

   If the message has an HTML MIME part, Rmail displays it in preference
to the plain-text part, if Emacs can render HTML(1).  To prevent that,
and have the plain-text part displayed instead, customize the variable
'rmail-mime-prefer-html' to a 'nil' value.

   To prevent Rmail from handling MIME decoded messages, change the
variable 'rmail-enable-mime' to 'nil'.  When this is the case, the 'v'
('rmail-mime') command instead creates a temporary buffer to display the
current MIME message.

   If the current message is an encrypted one, use the command 'M-x
rmail-epa-decrypt' to decrypt it, using the EasyPG library (*note
EasyPG: (epa)Top.).

   You can highlight and activate URLs in the Rmail buffer using Goto
Address mode:

     (add-hook 'rmail-show-message-hook 'goto-address-mode)

Then you can browse these URLs by clicking on them with 'mouse-2' (or
'mouse-1' quickly) or by moving to one and typing 'C-c <RET>'.  *Note
Activating URLs: Goto Address mode.

   ---------- Footnotes ----------

   (1) This capability requires that Emacs be built with 'libxml2'
support or that you have the Lynx browser installed.

==============================================================================
File: emacs.info,  Node: |Rmail_Coding|,  Next: |Rmail_Editing|,  Prev: |Rmail_Display|,  Up: |Rmail|
==============================================================================

                                                                  *Rmail_Coding*

33.14 Rmail and Coding Systems
===---------------------------

Rmail automatically decodes messages which contain non-ASCII characters,
just as Emacs does with files you visit and with subprocess output.
Rmail uses the standard 'charset=CHARSET' header in the message, if any,
to determine how the message was encoded by the sender.  It maps CHARSET
into the corresponding Emacs coding system (*note Coding Systems::), and
uses that coding system to decode message text.  If the message header
doesn't have the 'charset' specification, or if CHARSET is not
recognized, Rmail chooses the coding system with the usual Emacs
heuristics and defaults (*note Recognize Coding::).

   Occasionally, a message is decoded incorrectly, either because Emacs
guessed the wrong coding system in the absence of the 'charset'
specification, or because the specification was inaccurate.  For
example, a misconfigured mailer could send a message with a
'charset=iso-8859-1' header when the message is actually encoded in
'koi8-r'.  When you see the message text garbled, or some of its
characters displayed as hex codes or empty boxes, this may have
happened.

   You can correct the problem by decoding the message again using the
right coding system, if you can figure out or guess which one is right.
To do this, invoke the 'M-x rmail-redecode-body' command.  It reads the
name of a coding system, and then redecodes the message using the coding
system you specified.  If you specified the right coding system, the
result should be readable.

   When you get new mail in Rmail, each message is translated
automatically from the coding system it is written in, as if it were a
separate file.  This uses the priority list of coding systems that you
have specified.  If a MIME message specifies a character set, Rmail
obeys that specification.  For reading and saving Rmail files
themselves, Emacs uses the coding system specified by the variable
'rmail-file-coding-system'.  The default value is 'nil', which means
that Rmail files are not translated (they are read and written in the
Emacs internal character code).

==============================================================================
File: emacs.info,  Node: |Rmail_Editing|,  Next: |Rmail_Digest|,  Prev: |Rmail_Coding|,  Up: |Rmail|
==============================================================================

                                                                 *Rmail_Editing*

33.15 Editing Within a Message
===---------------------------

Most of the usual Emacs key bindings are available in Rmail mode, though
a few, such as 'C-M-n' and 'C-M-h', are redefined by Rmail for other
purposes.  However, the Rmail buffer is normally read only, and most of
the letters are redefined as Rmail commands.  If you want to edit the
text of a message, you must use the Rmail command 'e'.

'e'
     Edit the current message as ordinary text.

   The 'e' command ('rmail-edit-current-message') switches from Rmail
mode into Rmail Edit mode, another major mode which is nearly the same
as Text mode.  The mode line indicates this change.

   In Rmail Edit mode, letters insert themselves as usual and the Rmail
commands are not available.  You can edit the message body and header
fields.  When you are finished editing the message, type 'C-c C-c'
('rmail-cease-edit') to switch back to Rmail mode.  Alternatively, you
can return to Rmail mode but cancel any editing that you have done, by
typing 'C-c C-]' ('rmail-abort-edit').

   Entering Rmail Edit mode runs the hook 'text-mode-hook'; then it runs
the hook 'rmail-edit-mode-hook' (*note Hooks::).  Returning to ordinary
Rmail mode adds the attribute 'edited' to the message, if you have made
any changes in it (*note Rmail Attributes::).

==============================================================================
File: emacs.info,  Node: |Rmail_Digest|,  Next: |Rmail_Rot13|,  Prev: |Rmail_Editing|,  Up: |Rmail|
==============================================================================

                                                                  *Rmail_Digest*

33.16 Digest Messages
===------------------

A "digest message" is a message which exists to contain and carry
several other messages.  Digests are used on some mailing lists; all the
messages that arrive for the list during a period of time such as one
day are put inside a single digest which is then sent to the
subscribers.  Transmitting the single digest uses less computer time
than transmitting the individual messages even though the total size is
the same, because of the per-message overhead in network mail
transmission.

   When you receive a digest message, the most convenient way to read it
is to "undigestify" it: to turn it back into many individual messages.
Then you can read and delete the individual messages as it suits you.
To do this, select the digest message and type the command 'M-x
undigestify-rmail-message'.  This extracts the submessages as separate
Rmail messages, and inserts them following the digest.  The digest
message itself is flagged as deleted.

==============================================================================
File: emacs.info,  Node: |Rmail_Rot13|,  Next: |Movemail|,  Prev: |Rmail_Digest|,  Up: |Rmail|
==============================================================================

                                                                   *Rmail_Rot13*

33.17 Reading Rot13 Messages
===-------------------------

Mailing list messages that might offend or annoy some readers are
sometimes encoded in a simple code called "rot13"--so named because it
rotates the alphabet by 13 letters.  This code is not for secrecy, as it
provides none; rather, it enables those who wish to avoid seeing the
real text of the message.  For example, a review of a film might use
rot13 to hide important plot points.

   To view a buffer that uses the rot13 code, use the command 'M-x
rot13-other-window'.  This displays the current buffer in another window
which applies the code when displaying the text.

==============================================================================
File: emacs.info,  Node: |Movemail|,  Next: |Remote_Mailboxes|,  Prev: |Rmail_Rot13|,  Up: |Rmail|
==============================================================================

                                                                      *Movemail*

33.18 'movemail' program
===---------------------

Rmail uses the 'movemail' program to move mail from your inbox to your
Rmail file (*note Rmail Inbox::).  When loaded for the first time, Rmail
attempts to locate the 'movemail' program and determine its version.
There are two versions of the 'movemail' program: the GNU Mailutils
version (*note (mailutils)movemail::), and an Emacs-specific version
that is built and installed unless Emacs was configured
'--with-mailutils' in effect.  The two 'movemail' versions support the
same command line syntax and the same basic subset of options.  However,
the Mailutils version offers additional features and is more secure.

   The Emacs version of 'movemail' can retrieve mail from the usual Unix
mailbox formats.  Warning: Although it can also use the POP3 protocol,
this is not recommended because it does not support POP3 via encrypted
TLS channels.

   The Mailutils version is able to handle a wide set of mailbox
formats, such as plain Unix mailboxes, 'maildir' and 'MH' mailboxes,
etc.  It is able to access remote mailboxes using the POP3 or IMAP4
protocol, and can retrieve mail from them using a TLS encrypted channel.
It also accepts mailbox arguments in URL form.  The detailed description
of mailbox URLs can be found in *note (mailutils)URL::.  In short, a URL
is:

     PROTO://[USER[:PASSWORD]@]HOST-OR-FILE-NAME[:PORT]

where square brackets denote optional elements.

PROTO
     Specifies the "mailbox protocol", or "format" to use.  The exact
     semantics of the rest of URL elements depends on the actual value
     of PROTO (see below).

USER
     User name to access the remote mailbox.

PASSWORD
     User password to access the remote mailbox.

HOST-OR-FILE-NAME
     Hostname of the remote server for remote mailboxes or file name of
     a local mailbox.

PORT
     Optional port number, if not the default for that protocol.

PROTO can be one of:

'mbox'
     Usual Unix mailbox format.  In this case, USER, PASS and PORT are
     not used, and HOST-OR-FILE-NAME denotes the file name of the
     mailbox file, e.g., 'mbox:///var/spool/mail/smith'.

'mh'
     A local mailbox in the MH format.  USER, PASS and PORT are not
     used.  HOST-OR-FILE-NAME denotes the name of MH folder, e.g.,
     'mh:///Mail/inbox'.

'maildir'
     A local mailbox in the maildir format.  USER, PASS and PORT are not
     used, and HOST-OR-FILE-NAME denotes the name of 'maildir' mailbox,
     e.g., 'maildir:///mail/inbox'.

'file'
     Any local file in mailbox format.  Its actual format is detected
     automatically by 'movemail'.

'pop'
'pops'
     A remote mailbox to be accessed via POP3 protocol.  USER specifies
     the remote user name to use, PASS may be used to specify the user
     password, HOST-OR-FILE-NAME is the name or IP address of the remote
     mail server to connect to, and PORT is the port number; e.g.,
     'pop://smith:guessme@remote.server.net:995'.  If the server
     supports it, 'movemail' tries to use an encrypted connection--use
     the 'pops' form to require one.

'imap'
'imaps'
     A remote mailbox to be accessed via IMAP4 protocol.  USER specifies
     the remote user name to use, PASS may be used to specify the user
     password, HOST-OR-FILE-NAME is the name or IP address of the remote
     mail server to connect to, and PORT is the port number; e.g.,
     'imap://smith:guessme@remote.server.net:993'.  If the server
     supports it, 'movemail' tries to use an encrypted connection--use
     the 'imaps' form to require one.

   Alternatively, you can specify the file name of the mailbox to use.
This is equivalent to specifying the 'file' protocol:

     /var/spool/mail/USER ??? file:///var/spool/mail/USER

   The variable 'rmail-movemail-program' controls which version of
'movemail' to use.  If that is a string, it specifies the absolute file
name of the 'movemail' executable.  If it is 'nil', Rmail searches for
'movemail' in the directories listed in 'rmail-movemail-search-path',
then in 'exec-path' (*note Shell::), then in 'exec-directory'.

==============================================================================
File: emacs.info,  Node: |Remote_Mailboxes|,  Next: |Other_Mailbox_Formats|,  Prev: |Movemail|,  Up: |Rmail|
==============================================================================

                                                              *Remote_Mailboxes*

33.19 Retrieving Mail from Remote Mailboxes
===----------------------------------------

Some sites use a method called POP3 for accessing users' inbox data
instead of storing the data in inbox files.  The Mailutils 'movemail' by
default supports POP3 with TLS encryption.  Warning: Although the
'Emacs movemail' supports POP3, its use for this is not recommended
since it does not support encrypted connections--the Mailutils version
does.  Both versions of 'movemail' work only with POP3, not with older
versions of POP.

   You can specify a POP3 inbox by using a POP3 "URL" (*note
Movemail::).  A POP3 URL is of the form 'pop://USERNAME@HOSTNAME:PORT',
where HOSTNAME and PORT are the host name (or IP address) and port
number of the remote mail server and USERNAME is the user name on that
server.  Additionally, you may specify the password in the mailbox URL:
'pop://USERNAME:PASSWORD@HOSTNAME:PORT'.  In this case, PASSWORD takes
preference over the one set by 'rmail-remote-password' (see below).
This is especially useful if you have several remote mailboxes with
different passwords.  If using Mailutils 'movemail', you may wish to use
'pops' in place of 'pop'.

   For backward compatibility, Rmail also supports an alternative way of
specifying remote POP3 mailboxes.  Specifying an inbox name in the form
'po:USERNAME:HOSTNAME:PORT' is equivalent to
'pop://USERNAME@HOSTNAME:PORT'.  If you omit the :HOSTNAME part, the
'MAILHOST' environment variable specifies the machine on which to look
for the POP3 server.

   Another method for accessing remote mailboxes is IMAP.  This method
is supported only by the Mailutils 'movemail'.  To specify an IMAP
mailbox in the inbox list, use the following mailbox URL:
'imap://USERNAME[:PASSWORD]@HOSTNAME:PORT'.  The PASSWORD part is
optional, as described above.  You may wish to use 'imaps' in place of
'imap'.

   Accessing a remote mailbox may require a password.  Rmail uses the
following algorithm to retrieve it:

  1. If a PASSWORD is present in the mailbox URL (see above), it is
     used.
  2. If the variable 'rmail-remote-password-required' is 'nil', Rmail
     assumes no password is required.
  3. If the variable 'rmail-remote-password' is non-'nil', its value is
     used.
  4. Otherwise, Rmail will ask you for the password to use.

   If you need to pass additional command-line flags to 'movemail', set
the variable 'rmail-movemail-flags' a list of the flags you wish to use.
Do not use this variable to pass the '-p' flag to preserve your inbox
contents; use 'rmail-preserve-inbox' instead.

   The 'movemail' program installed at your site may support Kerberos
authentication.  If it is supported, it is used by default whenever you
attempt to retrieve POP3 mail when 'rmail-remote-password' and
'rmail-remote-password-required' are unset.

   Some POP3 servers store messages in reverse order.  If your server
does this, and you would rather read your mail in the order in which it
was received, you can tell 'movemail' to reverse the order of downloaded
messages by adding the '-r' flag to 'rmail-movemail-flags'.

   Mailutils 'movemail' supports TLS encryption.  If you wish to use it,
add the '--tls' flag to 'rmail-movemail-flags'.

==============================================================================
File: emacs.info,  Node: |Other_Mailbox_Formats|,  Prev: |Remote_Mailboxes|,  Up: |Rmail|
==============================================================================

                                                         *Other_Mailbox_Formats*

33.20 Retrieving Mail from Local Mailboxes in Various Formats
===----------------------------------------------------------

If your incoming mail is stored on a local machine in a format other
than Unix mailbox, you will need the Mailutils 'movemail' to retrieve
it.  *Note Movemail::, for the detailed description of 'movemail'
versions.  For example, to access mail from an inbox in 'maildir' format
located in '/var/spool/mail/in', you would include the following in the
Rmail inbox list:

     maildir:///var/spool/mail/in

==============================================================================
File: emacs.info,  Node: |Gnus|,  Next: |Host_Security|,  Prev: |Rmail|,  Up: |Top|
==============================================================================

                                                                          *Gnus*

34 Email and Usenet News with Gnus
***===============================

Gnus is an Emacs package primarily designed for reading and posting
Usenet news.  It can also be used to read and respond to messages from a
number of other sources--email, remote directories, digests, and so on.
Here we introduce Gnus and describe several basic features.  For full
details, see *note Gnus: (gnus)Top.

MENU

* |Buffers_of_Gnus|::     The group, summary, and article buffers.
* |Gnus_Startup|::        What you should know about starting Gnus.
* |Gnus_Group_Buffer|::   A short description of Gnus group commands.
* |Gnus_Summary_Buffer|:: A short description of Gnus summary commands.

==============================================================================
File: emacs.info,  Node: |Buffers_of_Gnus|,  Next: |Gnus_Startup|,  Up: |Gnus|
==============================================================================

                                                               *Buffers_of_Gnus*

34.1 Gnus Buffers
===--------------

Gnus uses several buffers to display information and to receive
commands.  The three most commonly-used Gnus buffers are the "group
buffer", the "summary buffer" and the "article buffer".

   The "group buffer" contains a list of article sources (e.g.,
newsgroups and email inboxes), which are collectively referred to as
"groups".  This is the first buffer Gnus displays when it starts up.  It
normally displays only the groups to which you subscribe and that
contain unread articles.  From this buffer, you can select a group to
read.

   The "summary buffer" lists the articles in a single group, showing
one article per line.  By default, it displays each article's author,
subject, and line number, but this is customizable; *Note (gnus)Summary
Buffer Format::.  The summary buffer is created when you select a group
in the group buffer, and is killed when you exit the group.

   From the summary buffer, you can choose an article to view.  The
article is displayed in the "article buffer".  In normal Gnus usage, you
view this buffer but do not select it--all useful Gnus commands can be
invoked from the summary buffer.  But you can select the article buffer,
and execute Gnus commands from it, if you wish.

==============================================================================
File: emacs.info,  Node: |Gnus_Startup|,  Next: |Gnus_Group_Buffer|,  Prev: |Buffers_of_Gnus|,  Up: |Gnus|
==============================================================================

                                                                  *Gnus_Startup*

34.2 When Gnus Starts Up
===---------------------

If your system has been set up for reading Usenet news, getting started
with Gnus is easy--just type 'M-x gnus'.

   On starting up, Gnus reads your "news initialization file": a file
named '.newsrc' in your home directory which lists your Usenet
newsgroups and subscriptions (this file is not unique to Gnus; it is
used by many other newsreader programs).  It then tries to contact the
system's default news server, which is typically specified by the
'NNTPSERVER' environment variable.

   If your system does not have a default news server, or if you wish to
use Gnus for reading email, then before invoking 'M-x gnus' you need to
tell Gnus where to get news and/or mail.  To do this, customize the
variables 'gnus-select-method' and/or 'gnus-secondary-select-methods'.
*Note (gnus)Finding the News::.

   Once Gnus has started up, it displays the group buffer.  By default,
the group buffer shows only a small number of "subscribed groups".
Groups with other statuses--"unsubscribed", "killed", or "zombie"--are
hidden.  The first time you start Gnus, any group to which you are not
subscribed is made into a killed group; any group that subsequently
appears on the news server becomes a zombie group.

   To proceed, you must select a group in the group buffer to open the
summary buffer for that group; then, select an article in the summary
buffer to view its article buffer in a separate window.  The following
sections explain how to use the group and summary buffers to do this.

   To quit Gnus, type 'q' in the group buffer.  This automatically
records your group statuses in the files '.newsrc' and '.newsrc.eld', so
that they take effect in subsequent Gnus sessions.

==============================================================================
File: emacs.info,  Node: |Gnus_Group_Buffer|,  Next: |Gnus_Summary_Buffer|,  Prev: |Gnus_Startup|,  Up: |Gnus|
==============================================================================

                                                             *Gnus_Group_Buffer*

34.3 Using the Gnus Group Buffer
===-----------------------------

The following commands are available in the Gnus group buffer:

'<SPC>'
     Switch to the summary buffer for the group on the current line
     ('gnus-group-read-group').

'l'
'A s'
     In the group buffer, list only the groups to which you subscribe
     and which contain unread articles ('gnus-group-list-groups'; this
     is the default listing).

'L'
'A u'
     List all subscribed and unsubscribed groups, but not killed or
     zombie groups ('gnus-group-list-all-groups').

'A k'
     List killed groups ('gnus-group-list-killed').

'A z'
     List zombie groups ('gnus-group-list-zombies').

'u'
     Toggle the subscription status of the group
     ('gnus-group-unsubscribe-current-group') on the current line (i.e.,
     turn a subscribed group into an unsubscribed group, or vice versa).
     Invoking this on a killed or zombie group turns it into an
     unsubscribed group.

'C-k'
     Kill the group on the current line ('gnus-group-kill-group').
     Killed groups are not recorded in the '.newsrc' file, and they are
     not shown in the 'l' or 'L' listings.

'<DEL>'
     Move point to the previous group containing unread articles
     ('gnus-group-prev-unread-group').

'n'
     Move point to the next unread group
     ('gnus-group-next-unread-group').

'p'
     Move point to the previous unread group
     ('gnus-group-prev-unread-group').

'q'
     Update your Gnus settings, and quit Gnus ('gnus-group-exit').

==============================================================================
File: emacs.info,  Node: |Gnus_Summary_Buffer|,  Prev: |Gnus_Group_Buffer|,  Up: |Gnus|
==============================================================================

                                                           *Gnus_Summary_Buffer*

34.4 Using the Gnus Summary Buffer
===-------------------------------

The following commands are available in the Gnus summary buffer:

'<SPC>'
     If there is no article selected, select the article on the current
     line and display its article buffer.  Otherwise, try scrolling the
     selected article buffer in its window; on reaching the end of the
     buffer, select the next unread article ('gnus-summary-next-page').

     Thus, you can read through all articles by repeatedly typing <SPC>.

'<DEL>'
     Scroll the text of the article backwards
     ('gnus-summary-prev-page').

'n'
     Select the next unread article
     ('gnus-summary-next-unread-article').

'p'
     Select the previous unread article
     ('gnus-summary-prev-unread-article').

's'
     Do an incremental search on the selected article buffer
     ('gnus-summary-isearch-article'), as if you switched to the buffer
     and typed 'C-s' (*note Incremental Search::).

'M-s REGEXP <RET>'
     Search forward for articles containing a match for REGEXP
     ('gnus-summary-search-article-forward').

'M-r REGEXP <RET>'
     Search back for articles containing a match for REGEXP
     ('gnus-summary-search-article-backward').

'q'
     Exit the summary buffer and return to the group buffer
     ('gnus-summary-exit').

==============================================================================
File: emacs.info,  Node: |Host_Security|,  Next: |Network_Security|,  Prev: |Gnus|,  Up: |Top|
==============================================================================

                                                                 *Host_Security*

35 Host Security
***=============

Emacs runs inside an operating system such as GNU/Linux, and relies on
the operating system to check security constraints such as accesses to
files.  The default settings for Emacs are designed for typical use;
they may require some tailoring in environments where security is more
of a concern, or less of a concern, than usual.  For example, file-local
variables can be risky, and you can set the variable
'enable-local-variables' to ':safe' or (even more conservatively) to
'nil'; conversely, if your files can all be trusted and the default
checking for these variables is irritating, you can set
'enable-local-variables' to ':all'.  *Note Safe File Variables::.

   *Note (elisp)Security Considerations::, for more information about
security considerations when using Emacs as part of a larger
application.

==============================================================================
File: emacs.info,  Node: |Network_Security|,  Next: |Document_View|,  Prev: |Host_Security|,  Up: |Top|
==============================================================================

                                                              *Network_Security*

36 Network Security
***================

Whenever Emacs establishes any network connection, it passes the
established connection to the "Network Security Manager" (NSM).  NSM is
responsible for enforcing the network security under your control.
Currently, this works by using the Transport Layer Security (TLS)
features.

   The 'network-security-level' variable determines the security level
that NSM enforces.  If its value is 'low', no security checks are
performed.  This is not recommended, and will basically mean that your
network connections can't be trusted.  However, the setting can be
useful in limited circumstances, as when testing network issues.

   If this variable is 'medium' (which is the default), a number of
checks will be performed.  If as result NSM determines that the network
connection might not be trustworthy, it will make you aware of that, and
will ask you what to do about the network connection.

   You can decide to register a permanent security exception for an
unverified connection, a temporary exception, or refuse the connection
entirely.

   In addition to the basic certificate correctness checks, several TLS
algorithm checks are available.  Some encryption technologies that were
previously thought to be secure have shown themselves to be fragile, so
Emacs (by default) warns you about some of these problems.

   The protocol network checks is controlled via the
'network-security-protocol-checks' variable.

   It's an alist where the first element of each association is the name
of the check, and the second element is the security level where the
check should be used.

   An element like '(rc4 medium)' will result in the function
'nsm-protocol-check--rc4' being called like thus:
'(nsm-protocol-check--rc4 host port status settings)'.  The function
should return non-'nil' if the connection should proceed and 'nil'
otherwise.

   Below is a list of the checks done on the default 'medium' level.

unable to verify a TLS certificate
     If the connection is a TLS, SSL or STARTTLS connection, NSM will
     check whether the certificate used to establish the identity of the
     server we're connecting to can be verified.

     While an invalid certificate is often the cause for concern (there
     could be a Man-in-the-Middle hijacking your network connection and
     stealing your password), there may be valid reasons for going ahead
     with the connection anyway.  For instance, the server may be using
     a self-signed certificate, or the certificate may have expired.
     It's up to you to determine whether it's acceptable to continue
     with the connection.

a self-signed certificate has changed
     If you've previously accepted a self-signed certificate, but it has
     now changed, that could mean that the server has just changed the
     certificate, but it might also mean that the network connection has
     been hijacked.

previously encrypted connection now unencrypted
     If the connection is unencrypted, but it was encrypted in previous
     sessions, this might mean that there is a proxy between you and the
     server that strips away STARTTLS announcements, leaving the
     connection unencrypted.  This is usually very suspicious.

talking to an unencrypted service when sending a password
     When connecting to an IMAP or POP3 server, these should usually be
     encrypted, because it's common to send passwords over these
     connections.  Similarly, if you're sending email via SMTP that
     requires a password, you usually want that connection to be
     encrypted.  If the connection isn't encrypted, NSM will warn you.

Diffie-Hellman low prime bits
     When doing the public key exchange, the number of prime bits should
     be high enough to ensure that the channel can't be eavesdropped on
     by third parties.  If this number is too low, Emacs will warn you.
     (This is the 'diffie-hellman-prime-bits' check in
     'network-security-protocol-checks').

RC4 stream cipher
     The RC4 stream cipher is believed to be of low quality and may
     allow eavesdropping by third parties.  (This is the 'rc4' check in
     'network-security-protocol-checks').

SHA1 in the host certificate or in intermediate certificates
     It is believed that if an intermediate certificate uses the SHA1
     hashing algorithm, then third parties can issue certificates
     pretending to be that issuing instance.  These connections are
     therefore vulnerable to man-in-the-middle attacks.  (These are the
     'signature-sha1' and 'intermediate-sha1' checks in
     'network-security-protocol-checks').

SSL1, SSL2 and SSL3
     The protocols older than TLS1.0 are believed to be vulnerable to a
     variety of attacks, and you may want to avoid using these if what
     you're doing requires higher security.  (This is the 'ssl' check in
     'network-security-protocol-checks').

   If 'network-security-level' is 'high', the following checks will be
made, in addition to the above:

3DES cipher
     The 3DES stream cipher provides at most 112 bits of effective
     security, which is considered to be towards the low end.  (This is
     the '3des' check in 'network-security-protocol-checks').

a validated certificate changes the public key
     Servers change their keys occasionally, and that is normally
     nothing to be concerned about.  However, if you are worried that
     your network connections are being hijacked by agencies who have
     access to pliable Certificate Authorities which issue new
     certificates for third-party services, you may want to keep track
     of these changes.

   Finally, if 'network-security-level' is 'paranoid', you will also be
notified the first time NSM sees any new certificate.  This will allow
you to inspect all the certificates from all the connections that Emacs
makes.

   The following additional variables can be used to control details of
NSM operation:

'nsm-settings-file'
     This is the file where NSM stores details about connections.  It
     defaults to '~/.emacs.d/network-security.data'.

'nsm-save-host-names'
     By default, host names will not be saved for non-'STARTTLS'
     connections.  Instead a host/port hash is used to identify
     connections.  This means that one can't casually read the settings
     file to see what servers the user has connected to.  If this
     variable is 't', NSM will also save host names in the
     'nsm-settings-file'.

==============================================================================
File: emacs.info,  Node: |Document_View|,  Next: |Shell|,  Prev: |Network_Security|,  Up: |Top|
==============================================================================

                                                                 *Document_View*

37 Document Viewing
***================

DocView mode is a major mode for viewing DVI, PostScript (PS), PDF,
OpenDocument, and Microsoft Office documents.  It provides features such
as slicing, zooming, and searching inside documents.  It works by
converting the document to a set of images using the 'gs' (GhostScript)
or 'mudraw'/'pdfdraw' (MuPDF) commands and other external tools (1), and
displaying those images.

   When you visit a document file that can be displayed with DocView
mode, Emacs automatically uses that mode (2).  As an exception, when you
visit a PostScript file, Emacs switches to PS mode, a major mode for
editing PostScript files as text; however, it also enables DocView minor
mode, so you can type 'C-c C-c' to view the document with DocView.  In
either DocView mode or DocView minor mode, repeating 'C-c C-c'
('doc-view-toggle-display') toggles between DocView and the underlying
file contents.

   When you visit a file which would normally be handled by DocView mode
but some requirement is not met (e.g., you operate in a terminal frame
or Emacs has no PNG support), you are queried if you want to view the
document's contents as plain text.  If you confirm, the buffer is put in
text mode and DocView minor mode is activated.  Thus, by typing 'C-c
C-c' you switch to the fallback mode.  With another 'C-c C-c' you return
to DocView mode.  The plain text contents can also be displayed from
within DocView mode by typing 'C-c C-t' ('doc-view-open-text').

   You can explicitly enable DocView mode with the command 'M-x
doc-view-mode'.  You can toggle DocView minor mode with 'M-x
doc-view-minor-mode'.

   When DocView mode starts, it displays a welcome screen and begins
formatting the file, page by page.  It displays the first page once that
has been formatted.

   To kill the DocView buffer, type 'k'
('doc-view-kill-proc-and-buffer').  To bury it, type 'q'
('quit-window').

MENU

* Navigation: DocView Navigation.  Navigating DocView buffers.
* Searching: DocView Searching.    Searching inside documents.
* Slicing: DocView Slicing.        Specifying which part of a page is displayed.
* Conversion: DocView Conversion.  Influencing and triggering conversion.

   ---------- Footnotes ----------

   (1) For PostScript files, GhostScript is a hard requirement.  For DVI
files, 'dvipdf' or 'dvipdfm' is needed.  For OpenDocument and Microsoft
Office documents, the 'unoconv' tool is needed.

   (2) The needed external tools for the document type must be
available, and Emacs must be running in a graphical frame and have PNG
image support.  If these requirements is not fulfilled, Emacs falls back
to another major mode.

==============================================================================
File: emacs.info,  Node: |DocView_Navigation|,  Next: |DocView_Searching|,  Up: |Document_View|
==============================================================================

                                                            *DocView_Navigation*

37.1 DocView Navigation
===--------------------

In DocView mode, you can scroll the current page using the usual Emacs
movement keys: 'C-p', 'C-n', 'C-b', 'C-f', and the arrow keys.

   By default, the line-motion keys 'C-p' and 'C-n' stop scrolling at
the beginning and end of the current page, respectively.  However, if
you change the variable 'doc-view-continuous' to a non-'nil' value, then
'C-p' displays the previous page if you are already at the beginning of
the current page, and 'C-n' displays the next page if you are at the end
of the current page.

   You can also display the next page by typing 'n', <PageDown>, <next>
or 'C-x ]' ('doc-view-next-page').  To display the previous page, type
'p', <PageUp>, <prior> or 'C-x [' ('doc-view-previous-page').

   <SPC> ('doc-view-scroll-up-or-next-page') is a convenient way to
advance through the document.  It scrolls within the current page or
advances to the next.  <DEL> moves backwards in a similar way
('doc-view-scroll-down-or-previous-page').

   To go to the first page, type 'M-<' ('doc-view-first-page'); to go to
the last one, type 'M->' ('doc-view-last-page').  To jump to a page by
its number, type 'M-g M-g' or 'M-g g' ('doc-view-goto-page').

   You can enlarge or shrink the document with '+' ('doc-view-enlarge')
and '-' ('doc-view-shrink').  By default, these commands just rescale
the already-rendered image.  If you instead want the image to be
re-rendered at the new size, set 'doc-view-scale-internally' to 'nil'.
To specify the default size for DocView, customize the variable
'doc-view-resolution'.

==============================================================================
File: emacs.info,  Node: |DocView_Searching|,  Next: |DocView_Slicing|,  Prev: |DocView_Navigation|,  Up: |Document_View|
==============================================================================

                                                             *DocView_Searching*

37.2 DocView Searching
===-------------------

In DocView mode, you can search the file's text for a regular expression
(*note Regexps::).  The interface for searching is inspired by 'isearch'
(*note Incremental Search::).

   To begin a search, type 'C-s' ('doc-view-search') or 'C-r'
('doc-view-search-backward').  This reads a regular expression using a
minibuffer, then echoes the number of matches found within the document.
You can move forward and back among the matches by typing 'C-s' and
'C-r'.  DocView mode has no way to show the match inside the page image;
instead, it displays a tooltip (at the mouse position) listing all
matching lines in the current page.  To force display of this tooltip,
type 'C-t' ('doc-view-show-tooltip').

   To start a new search, use the search command with a prefix argument;
i.e., 'C-u C-s' for a forward search or 'C-u C-r' for a backward search.

==============================================================================
File: emacs.info,  Node: |DocView_Slicing|,  Next: |DocView_Conversion|,  Prev: |DocView_Searching|,  Up: |Document_View|
==============================================================================

                                                               *DocView_Slicing*

37.3 DocView Slicing
===-----------------

Documents often have wide margins for printing.  They are annoying when
reading the document on the screen, because they use up screen space and
can cause inconvenient scrolling.

   With DocView you can hide these margins by selecting a "slice" of
pages to display.  A slice is a rectangle within the page area; once you
specify a slice in DocView, it applies to whichever page you look at.

   To specify the slice numerically, type 'c s' ('doc-view-set-slice');
then enter the top left pixel position and the slice's width and height.

   A more convenient graphical way to specify the slice is with 'c m'
('doc-view-set-slice-using-mouse'), where you use the mouse to select
the slice.  Simply press and hold the left mouse button at the
upper-left corner of the region you want to have in the slice, then move
the mouse pointer to the lower-right corner and release the button.

   The most convenient way is to set the optimal slice by using
BoundingBox information automatically determined from the document by
typing 'c b' ('doc-view-set-slice-from-bounding-box').

   To cancel the selected slice, type 'c r' ('doc-view-reset-slice').
Then DocView shows the entire page including its entire margins.

==============================================================================
File: emacs.info,  Node: |DocView_Conversion|,  Prev: |DocView_Slicing|,  Up: |Document_View|
==============================================================================

                                                            *DocView_Conversion*

37.4 DocView Conversion
===--------------------

For efficiency, DocView caches the images produced by 'gs'.  The name of
the directory where it caches images is given by the variable
'doc-view-cache-directory'.  You can clear the cache directory by typing
'M-x doc-view-clear-cache'.

   To force reconversion of the currently viewed document, type 'r' or
'g' ('revert-buffer').  To kill the converter process associated with
the current buffer, type 'K' ('doc-view-kill-proc').  The command 'k'
('doc-view-kill-proc-and-buffer') kills the converter process and the
DocView buffer.

==============================================================================
File: emacs.info,  Node: |Shell|,  Next: |Emacs_Server|,  Prev: |Document_View|,  Up: |Top|
==============================================================================

                                                                         *Shell*

38 Running Shell Commands from Emacs
***=================================

Emacs has commands for passing single command lines to shell
subprocesses, and for running a shell interactively with input and
output to an Emacs buffer, and for running a shell in a terminal
emulator window.

'M-! CMD <RET>'
     Run the shell command CMD and display the output ('shell-command').
'M-| CMD <RET>'
     Run the shell command CMD with region contents as input; optionally
     replace the region with the output ('shell-command-on-region').
'M-& CMD <RET>'
     Run the shell command CMD asynchronously, and display the output
     ('async-shell-command').
'M-x shell'
     Run a subshell with input and output through an Emacs buffer.  You
     can then give commands interactively.
'M-x term'
     Run a subshell with input and output through an Emacs buffer.  You
     can then give commands interactively.  Full terminal emulation is
     available.

   Whenever you specify a relative file name for an executable program
(either in the CMD argument to one of the above commands, or in other
contexts), Emacs searches for the program in the directories specified
by the variable 'exec-path'.  The value of this variable must be a list
of directories; the default value is initialized from the environment
variable 'PATH' when Emacs is started (*note General Variables::).

   'M-x eshell' invokes a shell implemented entirely in Emacs.  It is
documented in its own manual.  *Note Eshell: (eshell)Top.

MENU

* |Single_Shell|::           How to run one shell command and return.
* |Interactive_Shell|::      Permanent shell taking input via Emacs.
* |Shell_Mode|::             Special Emacs commands used with permanent shell.
* |Shell_Prompts|::          Two ways to recognize shell prompts.
* History: Shell History.  Repeating previous commands in a shell buffer.
* |Directory_Tracking|::     Keeping track when the subshell changes directory.
* Options: Shell Options.  Options for customizing Shell mode.
* |Terminal_emulator|::      An Emacs window as a terminal emulator.
* |Term_Mode|::              Special Emacs commands used in Term mode.
* |Remote_Host|::            Connecting to another computer.
* |Serial_Terminal|::        Connecting to a serial port.

==============================================================================
File: emacs.info,  Node: |Single_Shell|,  Next: |Interactive_Shell|,  Up: |Shell|
==============================================================================

                                                                  *Single_Shell*

38.1 Single Shell Commands
===-----------------------

'M-!' ('shell-command') reads a line of text using the minibuffer and
executes it as a shell command, in a subshell made just for that
command.  Standard input for the command comes from the null device.  If
the shell command produces any output, the output appears either in the
echo area (if it is short), or in an Emacs buffer named '*Shell Command
Output*', displayed in another window (if the output is long).  The
variables 'resize-mini-windows' and 'max-mini-window-height' (*note
Minibuffer Edit::) control when Emacs should consider the output to be
too long for the echo area.

   For instance, one way to decompress a file named 'foo.gz' is to type
'M-! gunzip foo.gz <RET>'.  That shell command normally creates the file
'foo' and produces no terminal output.

   A numeric argument to 'shell-command', e.g., 'M-1 M-!', causes it to
insert terminal output into the current buffer instead of a separate
buffer.  By default, it puts point before the output, and sets the mark
after the output (but a non-default value of
'shell-command-dont-erase-buffer' can change that, see below).  For
instance, 'M-1 M-! gunzip < foo.gz <RET>' would insert the uncompressed
form of the file 'foo.gz' into the current buffer.

   Provided the specified shell command does not end with '&', it runs
"synchronously", and you must wait for it to exit before continuing to
use Emacs.  To stop waiting, type 'C-g' to quit; this sends a 'SIGINT'
signal to terminate the shell command (this is the same signal that
'C-c' normally generates in the shell).  Emacs then waits until the
command actually terminates.  If the shell command doesn't stop (because
it ignores the 'SIGINT' signal), type 'C-g' again; this sends the
command a 'SIGKILL' signal, which is impossible to ignore.

   A shell command that ends in '&' is executed "asynchronously", and
you can continue to use Emacs as it runs.  You can also type 'M-&'
('async-shell-command') to execute a shell command asynchronously; this
is exactly like calling 'M-!' with a trailing '&', except that you do
not need the '&'.  The default output buffer for asynchronous shell
commands is named '*Async Shell Command*'.  Emacs inserts the output
into this buffer as it comes in, whether or not the buffer is visible in
a window.

   If you want to run more than one asynchronous shell command at the
same time, they could end up competing for the output buffer.  The
option 'async-shell-command-buffer' specifies what to do about this;
e.g., whether to rename the pre-existing output buffer, or to use a
different buffer for the new command.  Consult the variable's
documentation for more possibilities.

   If you want the output buffer for asynchronous shell commands to be
displayed only when the command generates output, set
'async-shell-command-display-buffer' to 'nil'.

   The option 'async-shell-command-width' defines the number of display
columns available for output of asynchronous shell commands.  A positive
integer tells the shell to use that number of columns for command
output.  The default value is 'nil' that means to use the same number of
columns as provided by the shell.

   To make the above commands show the current directory in their
prompts, customize the variable 'shell-command-prompt-show-cwd' to a
non-'nil' value.

   'M-|' ('shell-command-on-region') is like 'M-!', but passes the
contents of the region as the standard input to the shell command,
instead of no input.  With a numeric argument, it deletes the old region
and replaces it with the output from the shell command.

   For example, you can use 'M-|' with the 'gpg' program to see what
keys are in the buffer.  If the buffer contains a GnuPG key, type 'C-x h
M-| gpg <RET>' to feed the entire buffer contents to 'gpg'.  This will
output the list of keys to the '*Shell Command Output*' buffer.

   The above commands use the shell specified by the variable
'shell-file-name'.  Its default value is determined by the 'SHELL'
environment variable when Emacs is started.  If the file name is
relative, Emacs searches the directories listed in 'exec-path' (*note
Shell::).

   If the default directory is remote (*note Remote Files::), the
default value is '/bin/sh'.  This can be changed by declaring
'shell-file-name' connection-local (*note Connection Variables::).

   To specify a coding system for 'M-!' or 'M-|', use the command 'C-x
<RET> c' immediately beforehand.  *Note Communication Coding::.

   By default, error output is intermixed with the regular output in the
output buffer.  But if you change the value of the variable
'shell-command-default-error-buffer' to a string, error output is
inserted into a buffer of that name.

   By default, the output buffer is erased between shell commands,
except when the output goes to the current buffer.  If you change the
value of the option 'shell-command-dont-erase-buffer' to 'erase', then
the output buffer is always erased.  Other non-'nil' values prevent
erasing of the output buffer, and--if the output buffer is not the
current buffer--also control where to put point after inserting the
output of the shell command:

'beg-last-out'
     Puts point at the beginning of the last shell-command output.
'end-last-out'
     Puts point at the end of the last shell-command output, i.e. at the
     end of the output buffer.
'save-point'
     Restores the position of point as it was before inserting the
     shell-command output.

==============================================================================
File: emacs.info,  Node: |Interactive_Shell|,  Next: |Shell_Mode|,  Prev: |Single_Shell|,  Up: |Shell|
==============================================================================

                                                             *Interactive_Shell*

38.2 Interactive Subshell
===----------------------

To run a subshell interactively, type 'M-x shell'.  This creates (or
reuses) a buffer named 'shell', and runs a shell subprocess with input
coming from and output going to that buffer.  That is to say, any
terminal output from the subshell goes into the buffer, advancing point,
and any terminal input for the subshell comes from text in the buffer.
To give input to the subshell, go to the end of the buffer and type the
input, terminated by <RET>.

   By default, when the subshell is invoked interactively, the 'shell'
buffer is displayed in a new window, unless the current window already
shows the 'shell' buffer.  This behavior can be customized via
'display-buffer-alist' (*note Window Choice::).

   While the subshell is waiting or running a command, you can switch
windows or buffers and perform other editing in Emacs.  Emacs inserts
the output from the subshell into the Shell buffer whenever it has time
to process it (e.g., while waiting for keyboard input).

   In the Shell buffer, prompts are displayed with the face
'comint-highlight-prompt', and submitted input lines are displayed with
the face 'comint-highlight-input'.  This makes it easier to distinguish
input lines from the shell output.  *Note Faces::.

   To make multiple subshells, invoke 'M-x shell' with a prefix argument
(e.g., 'C-u M-x shell').  Then the command will read a buffer name, and
create (or reuse) a subshell in that buffer.  You can also rename the
'shell' buffer using 'M-x rename-uniquely', then create a new
'shell' buffer using plain 'M-x shell'.  Subshells in different
buffers run independently and in parallel.

   To specify the shell file name used by 'M-x shell', customize the
variable 'explicit-shell-file-name'.  If this is 'nil' (the default),
Emacs uses the environment variable 'ESHELL' if it exists.  Otherwise,
it usually uses the variable 'shell-file-name' (*note Single Shell::);
but if the default directory is remote (*note Remote Files::), it
prompts you for the shell file name.  *Note Minibuffer File::, for hints
how to type remote file names effectively.

   Emacs sends the new shell the contents of the file
'~/.emacs_SHELLNAME' as input, if it exists, where SHELLNAME is the name
of the file that the shell was loaded from.  For example, if you use
bash, the file sent to it is '~/.emacs_bash'.  If this file is not
found, Emacs tries with '~/.emacs.d/init_SHELLNAME.sh'.

   To specify a coding system for the shell, you can use the command
'C-x <RET> c' immediately before 'M-x shell'.  You can also change the
coding system for a running subshell by typing 'C-x <RET> p' in the
shell buffer.  *Note Communication Coding::.

   Emacs sets the environment variable 'INSIDE_EMACS' in the subshell to
'VERSION,comint', where VERSION is the Emacs version (e.g., '24.1').
Programs can check this variable to determine whether they are running
inside an Emacs subshell.

==============================================================================
File: emacs.info,  Node: |Shell_Mode|,  Next: |Shell_Prompts|,  Prev: |Interactive_Shell|,  Up: |Shell|
==============================================================================

                                                                    *Shell_Mode*

38.3 Shell Mode
===------------

The major mode for Shell buffers is Shell mode.  Many of its special
commands are bound to the 'C-c' prefix, and resemble the usual editing
and job control characters present in ordinary shells, except that you
must type 'C-c' first.  Here is a list of Shell mode commands:

'<RET>'
     Send the current line as input to the subshell
     ('comint-send-input').  Any shell prompt at the beginning of the
     line is omitted (*note Shell Prompts::).  If point is at the end of
     buffer, this is like submitting the command line in an ordinary
     interactive shell.  However, you can also invoke <RET> elsewhere in
     the shell buffer to submit the current line as input.

'<TAB>'
     Complete the command name or file name before point in the shell
     buffer ('completion-at-point').  This uses the usual Emacs
     completion rules (*note Completion::), with the completion
     alternatives being file names, environment variable names, the
     shell command history, and history references (*note History
     References::).  For options controlling the completion, *note Shell
     Options::.

'M-?'
     Display temporarily a list of the possible completions of the file
     name before point ('comint-dynamic-list-filename-completions').

'C-d'
     Either delete a character or send EOF
     ('comint-delchar-or-maybe-eof').  Typed at the end of the shell
     buffer, this sends EOF to the subshell.  Typed at any other
     position in the buffer, this deletes a character as usual.

'C-c C-a'
     Move to the beginning of the line, but after the prompt if any
     ('comint-bol-or-process-mark').  If you repeat this command twice
     in a row, the second time it moves back to the process mark, which
     is the beginning of the input that you have not yet sent to the
     subshell.  (Normally that is the same place--the end of the prompt
     on this line--but after 'C-c <SPC>' the process mark may be in a
     previous line.)

'C-c <SPC>'
     Accumulate multiple lines of input, then send them together
     ('comint-accumulate').  This command inserts a newline before
     point, but does not send the preceding text as input to the
     subshell--at least, not yet.  Both lines, the one before this
     newline and the one after, will be sent together (along with the
     newline that separates them), when you type <RET>.

'C-c C-u'
     Kill all text pending at end of buffer to be sent as input
     ('comint-kill-input').  If point is not at end of buffer, this only
     kills the part of this text that precedes point.

'C-c C-w'
     Kill a word before point ('backward-kill-word').

'C-c C-c'
     Interrupt the shell or its current subjob if any
     ('comint-interrupt-subjob').  This command also kills any shell
     input pending in the shell buffer and not yet sent.

'C-c C-z'
     Stop the shell or its current subjob if any ('comint-stop-subjob').
     This command also kills any shell input pending in the shell buffer
     and not yet sent.

'C-c C-\'
     Send quit signal to the shell or its current subjob if any
     ('comint-quit-subjob').  This command also kills any shell input
     pending in the shell buffer and not yet sent.

'C-c C-o'
     Delete the last batch of output from a shell command
     ('comint-delete-output').  This is useful if a shell command spews
     out lots of output that just gets in the way.

'C-c C-s'
     Write the last batch of output from a shell command to a file
     ('comint-write-output').  With a prefix argument, the file is
     appended to instead.  Any prompt at the end of the output is not
     written.

'C-c C-r'
'C-M-l'
     Scroll to display the beginning of the last batch of output at the
     top of the window; also move the cursor there
     ('comint-show-output').

'C-c C-e'
     Scroll to put the last line of the buffer at the bottom of the
     window ('comint-show-maximum-output').

'C-c C-f'
     Move forward across one shell command, but not beyond the current
     line ('shell-forward-command').  The variable
     'shell-command-regexp' specifies how to recognize the end of a
     command.

'C-c C-b'
     Move backward across one shell command, but not beyond the current
     line ('shell-backward-command').

'M-x dirs'
     Ask the shell for its working directory, and update the Shell
     buffer's default directory.  *Note Directory Tracking::.

'M-x comint-send-invisible <RET> TEXT <RET>'
     Send TEXT as input to the shell, after reading it without echoing.
     This is useful when a shell command runs a program that asks for a
     password.

     Please note that Emacs will not echo passwords by default.  If you
     really want them to be echoed, evaluate (*note Lisp Eval::) the
     following Lisp expression:

          (remove-hook 'comint-output-filter-functions
                       'comint-watch-for-password-prompt)

'M-x comint-continue-subjob'
     Continue the shell process.  This is useful if you accidentally
     suspend the shell process.(1)

'M-x comint-strip-ctrl-m'
     Discard all control-M characters from the current group of shell
     output.  The most convenient way to use this command is to make it
     run automatically when you get output from the subshell.  To do
     that, evaluate this Lisp expression:

          (add-hook 'comint-output-filter-functions
                    'comint-strip-ctrl-m)

'M-x comint-truncate-buffer'
     This command truncates the shell buffer to a certain maximum number
     of lines, specified by the variable 'comint-buffer-maximum-size'.
     Here's how to do this automatically each time you get output from
     the subshell:

          (add-hook 'comint-output-filter-functions
                    'comint-truncate-buffer)

   Shell mode is a derivative of Comint mode, a general-purpose mode for
communicating with interactive subprocesses.  Most of the features of
Shell mode actually come from Comint mode, as you can see from the
command names listed above.  The special features of Shell mode include
the directory tracking feature, and a few user commands.

   Other Emacs features that use variants of Comint mode include GUD
(*note Debuggers::) and 'M-x run-lisp' (*note External Lisp::).

   You can use 'M-x comint-run' to execute any program of your choice in
a subprocess using unmodified Comint mode--without the specializations of
Shell mode.  To pass arguments to the program, use 'C-u M-x comint-run'.

   ---------- Footnotes ----------

   (1) You should not suspend the shell process.  Suspending a subjob of
the shell is a completely different matter--that is normal practice, but
you must use the shell to continue the subjob; this command won't do it.

==============================================================================
File: emacs.info,  Node: |Shell_Prompts|,  Next: |Shell_History|,  Prev: |Shell_Mode|,  Up: |Shell|
==============================================================================

                                                                 *Shell_Prompts*

38.4 Shell Prompts
===---------------

A prompt is text output by a program to show that it is ready to accept
new user input.  Normally, Comint mode (and thus Shell mode)
automatically figures out which part of the buffer is a prompt, based on
the output of the subprocess.  (Specifically, it assumes that any
received output line which doesn't end with a newline is a prompt.)

   Comint mode divides the buffer into two types of "fields": input
fields (where user input is typed) and output fields (everywhere else).
Prompts are part of the output fields.  Most Emacs motion commands do
not cross field boundaries, unless they move over multiple lines.  For
instance, when point is in the input field on a shell command line,
'C-a' puts point at the beginning of the input field, after the prompt.
Internally, the fields are implemented using the 'field' text property
(*note (elisp)Text Properties::).

   If you change the variable 'comint-use-prompt-regexp' to a non-'nil'
value, then Comint mode will recognize prompts using a regular
expression (*note Regexps::).  In Shell mode, the regular expression is
specified by the variable 'shell-prompt-pattern'.  The default value of
'comint-use-prompt-regexp' is 'nil', because this method for recognizing
prompts is unreliable, but you may want to set it to a non-'nil' value
in unusual circumstances.  In that case, Emacs does not divide the
Comint buffer into fields, so the general motion commands behave as they
normally do in buffers without special text properties.  However, you
can use the paragraph motion commands to conveniently navigate the
buffer (*note Paragraphs::); in Shell mode, Emacs uses
'shell-prompt-pattern' as paragraph boundaries.

==============================================================================
File: emacs.info,  Node: |Shell_History|,  Next: |Directory_Tracking|,  Prev: |Shell_Prompts|,  Up: |Shell|
==============================================================================

                                                                 *Shell_History*

38.5 Shell Command History
===-----------------------

Shell buffers support three ways of repeating earlier commands.  You can
use keys like those used for the minibuffer history; these work much as
they do in the minibuffer, inserting text from prior commands while
point remains always at the end of the buffer.  You can move through the
buffer to previous inputs in their original place, then resubmit them or
copy them to the end.  Or you can use a '!'-style history reference.

MENU

* Ring: Shell Ring.             Fetching commands from the history list.
* Copy: Shell History Copying.  Moving to a command and then copying it.
* |History_References|::          Expanding '!'-style history references.

==============================================================================
File: emacs.info,  Node: |Shell_Ring|,  Next: |Shell_History_Copying|,  Up: |Shell_History|
==============================================================================

                                                                    *Shell_Ring*

38.5.1 Shell History Ring
-------------------------

'M-p'
'C-<UP>'
     Fetch the next earlier old shell command ('comint-previous-input').

'M-n'
'C-<DOWN>'
     Fetch the next later old shell command ('comint-next-input').

'M-r'
     Begin an incremental regexp search of old shell commands
     ('comint-history-isearch-backward-regexp').

'C-c C-x'
     Fetch the next subsequent command from the history
     ('comint-get-next-from-history').

'C-c .'
     Fetch one argument from an old shell command
     ('comint-input-previous-argument').

'C-c C-l'
     Display the buffer's history of shell commands in another window
     ('comint-dynamic-list-input-ring').

   Shell buffers provide a history of previously entered shell commands.
To reuse shell commands from the history, use the editing commands
'M-p', 'M-n', and 'M-r'.  These work similar to the minibuffer history
commands (*note Minibuffer History::), except that they operate within
the Shell buffer rather than the minibuffer, and 'M-r' in a Shell buffer
invokes incremental search through shell command history.

   'M-p' fetches an earlier shell command to the end of the shell
buffer.  Successive use of 'M-p' fetches successively earlier shell
commands, each replacing any text that was already present as potential
shell input.  'M-n' does likewise except that it finds successively more
recent shell commands from the buffer.  'C-<UP>' works like 'M-p', and
'C-<DOWN>' like 'M-n'.

   The history search command 'M-r' begins an incremental regular
expression search of previous shell commands.  After typing 'M-r', start
typing the desired string or regular expression; the last matching shell
command will be displayed in the current line.  Incremental search
commands have their usual effects--for instance, 'C-s' and 'C-r' search
forward and backward for the next match (*note Incremental Search::).
When you find the desired input, type <RET> to terminate the search.
This puts the input in the command line.  Any partial input you were
composing before navigating the history list is restored when you go to
the beginning or end of the history ring.

   Often it is useful to reexecute several successive shell commands
that were previously executed in sequence.  To do this, first find and
reexecute the first command of the sequence.  Then type 'C-c C-x'; that
will fetch the following command--the one that follows the command you
just repeated.  Then type <RET> to reexecute this command.  You can
reexecute several successive commands by typing 'C-c C-x <RET>' over and
over.

   The command 'C-c .' ('comint-insert-previous-argument') copies an
individual argument from a previous command, like '<ESC> .' in Bash and
'zsh'.  The simplest use copies the last argument from the previous
shell command.  With a prefix argument N, it copies the Nth argument
instead.  Repeating 'C-c .' copies from an earlier shell commands,
always using the same value of N (don't give a prefix argument when you
repeat the 'C-c .' command).

   If you set 'comint-insert-previous-argument-from-end' to a non-'nil'
value, 'C-c .' will instead copy the Nth argument counting from the last
one; this emulates '<ESC> .' in 'zsh'.

   These commands get the text of previous shell commands from a special
history list, not from the shell buffer itself.  Thus, editing the shell
buffer, or even killing large parts of it, does not affect the history
that these commands access.

   Some shells store their command histories in files so that you can
refer to commands from previous shell sessions.  Emacs reads the command
history file for your chosen shell, to initialize its own command
history.  The file name is '~/.bash_history' for bash, '~/.sh_history'
for ksh, and '~/.history' for other shells.

   If you run the shell on a remote host, this setting might be
overwritten by the variable 'tramp-histfile-override'.  It is
recommended to set this variable to 'nil'.

==============================================================================
File: emacs.info,  Node: |Shell_History_Copying|,  Next: |History_References|,  Prev: |Shell_Ring|,  Up: |Shell_History|
==============================================================================

                                                         *Shell_History_Copying*

38.5.2 Shell History Copying
----------------------------

'C-c C-p'
     Move point to the previous prompt ('comint-previous-prompt').

'C-c C-n'
     Move point to the following prompt ('comint-next-prompt').

'C-c <RET>'
     Copy the input command at point, inserting the copy at the end of
     the buffer ('comint-copy-old-input').  This is useful if you move
     point back to a previous command.  After you copy the command, you
     can submit the copy as input with <RET>.  If you wish, you can edit
     the copy before resubmitting it.  If you use this command on an
     output line, it copies that line to the end of the buffer.

'mouse-2'
     If 'comint-use-prompt-regexp' is 'nil' (the default), copy the old
     input command that you click on, inserting the copy at the end of
     the buffer ('comint-insert-input').  If 'comint-use-prompt-regexp'
     is non-'nil', or if the click is not over old input, just yank as
     usual.

   Moving to a previous input and then copying it with 'C-c <RET>' or
'mouse-2' produces the same results--the same buffer contents--that you
would get by using 'M-p' enough times to fetch that previous input from
the history list.  However, 'C-c <RET>' copies the text from the buffer,
which can be different from what is in the history list if you edit the
input text in the buffer after it has been sent.

==============================================================================
File: emacs.info,  Node: |History_References|,  Prev: |Shell_History_Copying|,  Up: |Shell_History|
==============================================================================

                                                            *History_References*

38.5.3 Shell History References
-------------------------------

Various shells, including csh and bash, support "history references"
that begin with '!' and '^'.  Shell mode recognizes these constructs,
and can perform the history substitution for you.

   If you insert a history reference and type <TAB>, this searches the
input history for a matching command, performs substitution if
necessary, and places the result in the buffer in place of the history
reference.  For example, you can fetch the most recent command beginning
with 'mv' with '! m v <TAB>'.  You can edit the command if you wish, and
then resubmit the command to the shell by typing <RET>.

   Shell mode can optionally expand history references in the buffer
when you send them to the shell.  To request this, set the variable
'comint-input-autoexpand' to 'input'.  You can make <SPC> perform
history expansion by binding <SPC> to the command 'comint-magic-space'.
*Note Rebinding::.

   Shell mode recognizes history references when they follow a prompt.
*Note Shell Prompts::, for how Shell mode recognizes prompts.

==============================================================================
File: emacs.info,  Node: |Directory_Tracking|,  Next: |Shell_Options|,  Prev: |Shell_History|,  Up: |Shell|
==============================================================================

                                                            *Directory_Tracking*

38.6 Directory Tracking
===--------------------

Shell mode keeps track of 'cd', 'pushd' and 'popd' commands given to the
subshell, in order to keep the Shell buffer's default directory (*note
File Names::) the same as the shell's working directory.  It recognizes
these commands by examining lines of input that you send.

   If you use aliases for these commands, you can tell Emacs to
recognize them also, by setting the variables 'shell-pushd-regexp',
'shell-popd-regexp', and 'shell-cd-regexp' to the appropriate regular
expressions (*note Regexps::).  For example, if 'shell-pushd-regexp'
matches the beginning of a shell command line, that line is regarded as
a 'pushd' command.  These commands are recognized only at the beginning
of a shell command line.

   If Emacs gets confused about changes in the working directory of the
subshell, type 'M-x dirs'.  This command asks the shell for its working
directory and updates the default directory accordingly.  It works for
shells that support the most common command syntax, but may not work for
unusual shells.

   You can also use Dirtrack mode, a buffer-local minor mode that
implements an alternative method of tracking the shell's working
directory.  To use this method, your shell prompt must contain the
working directory at all times, and you must supply a regular expression
for recognizing which part of the prompt contains the working directory;
see the documentation of the variable 'dirtrack-list' for details.  To
use Dirtrack mode, type 'M-x dirtrack-mode' in the Shell buffer, or add
'dirtrack-mode' to 'shell-mode-hook' (*note Hooks::).

==============================================================================
File: emacs.info,  Node: |Shell_Options|,  Next: |Terminal_emulator|,  Prev: |Directory_Tracking|,  Up: |Shell|
==============================================================================

                                                                 *Shell_Options*

38.7 Shell Mode Options
===--------------------

If the variable 'comint-scroll-to-bottom-on-input' is non-'nil',
insertion and yank commands scroll the selected window to the bottom
before inserting.  The default is 'nil'.

   If 'comint-scroll-show-maximum-output' is non-'nil', then arrival of
output when point is at the end tries to scroll the last line of text to
the bottom line of the window, showing as much useful text as possible.
(This mimics the scrolling behavior of most terminals.)  The default is
't'.

   By setting 'comint-move-point-for-output', you can opt for having
point jump to the end of the buffer whenever output arrives--no matter
where in the buffer point was before.  If the value is 'this', point
jumps in the selected window.  If the value is 'all', point jumps in
each window that shows the Comint buffer.  If the value is 'other',
point jumps in all nonselected windows that show the current buffer.
The default value is 'nil', which means point does not jump to the end.

   If you set 'comint-prompt-read-only', the prompts in the Comint
buffer are read-only.

   The variable 'comint-input-ignoredups' controls whether successive
identical inputs are stored in the input history.  A non-'nil' value
means to omit an input that is the same as the previous input.  The
default is 'nil', which means to store each input even if it is equal to
the previous input.

   Three variables customize file name completion.  The variable
'comint-completion-addsuffix' controls whether completion inserts a
space or a slash to indicate a fully completed file or directory name
(non-'nil' means do insert a space or slash).
'comint-completion-recexact', if non-'nil', directs <TAB> to choose the
shortest possible completion if the usual Emacs completion algorithm
cannot add even a single character.  'comint-completion-autolist', if
non-'nil', says to list all the possible completions whenever completion
is not exact.

   Command completion normally considers only executable files.  If you
set 'shell-completion-execonly' to 'nil', it considers nonexecutable
files as well.

   The variable 'shell-completion-fignore' specifies a list of file name
extensions to ignore in Shell mode completion.  The default setting is
'nil', but some users prefer '("~" "#" "%")' to ignore file names ending
in '~', '#' or '%'.  Other related Comint modes use the variable
'comint-completion-fignore' instead.

   Some implementation details of the shell command completion may also
be found in the lisp documentation of the
'shell-dynamic-complete-command' function.

   You can configure the behavior of 'pushd'.  Variables control whether
'pushd' behaves like 'cd' if no argument is given
('shell-pushd-tohome'), pop rather than rotate with a numeric argument
('shell-pushd-dextract'), and only add directories to the directory
stack if they are not already on it ('shell-pushd-dunique').  The values
you choose should match the underlying shell, of course.

   Comint mode sets the 'TERM' environment variable to a safe default
value, but this value disables some useful features.  For example, color
is disabled in applications that use 'TERM' to determine if color is
supported.  Therefore, Emacs provides an option
'comint-terminfo-terminal', which you can set to a terminal that is
present in your system's terminfo database, in order to take advantage
of advanced features of that terminal.

==============================================================================
File: emacs.info,  Node: |Terminal_emulator|,  Next: |Term_Mode|,  Prev: |Shell_Options|,  Up: |Shell|
==============================================================================

                                                             *Terminal_emulator*

38.8 Emacs Terminal Emulator
===-------------------------

To run a subshell in a text terminal emulator, use 'M-x term'.  This
creates (or reuses) a buffer named 'terminal', and runs a subshell
with input coming from your keyboard, and output going to that buffer.

   The terminal emulator uses Term mode, which has two input modes.  In
"line mode", Term basically acts like Shell mode (*note Shell Mode::).
In "char mode", each character is sent directly to the subshell, as
terminal input; the sole exception is the terminal escape character,
which by default is 'C-c' (*note Term Mode::).  Any echoing of your
input is the responsibility of the subshell; any terminal output from
the subshell goes into the buffer, advancing point.

   Some programs (such as Emacs itself) need to control the appearance
of the terminal screen in detail.  They do this by emitting special
control codes.  Term mode recognizes and handles ANSI-standard
VT100-style escape sequences, which are accepted by most modern
terminals, including 'xterm'.  (Hence, you can actually run Emacs inside
an Emacs Term window.)

   The 'term' face specifies the default appearance of text in the
terminal emulator (the default is the same appearance as the 'default'
face).  When terminal control codes are used to change the appearance of
text, these are represented in the terminal emulator by the faces
'term-color-black', 'term-color-red', 'term-color-green',
'term-color-yellow' 'term-color-blue', 'term-color-magenta',
'term-color-cyan', 'term-color-white', 'term-color-underline', and
'term-color-bold'.  *Note Faces::.

   You can also use Term mode to communicate with a device connected to
a serial port.  *Note Serial Terminal::.

   The file name used to load the subshell is determined the same way as
for Shell mode.  To make multiple terminal emulators, rename the buffer
'terminal' to something different using 'M-x rename-uniquely', just as
with Shell mode.

   Unlike Shell mode, Term mode does not track the current directory by
examining your input.  But some shells can tell Term what the current
directory is.  This is done automatically by 'bash' version 1.15 and
later.

==============================================================================
File: emacs.info,  Node: |Term_Mode|,  Next: |Remote_Host|,  Prev: |Terminal_emulator|,  Up: |Shell|
==============================================================================

                                                                     *Term_Mode*

38.9 Term Mode
===-----------

To switch between line and char mode in Term mode, use these commands:

'C-c C-j'
     Switch to line mode ('term-line-mode').  Do nothing if already in
     line mode.

'C-c C-k'
     Switch to char mode ('term-char-mode').  Do nothing if already in
     char mode.

   The following commands are only available in char mode:

'C-c C-c'
     Send a literal 'C-c' to the sub-shell ('term-interrupt-subjob').

'C-c CHAR'
     This is equivalent to 'C-x CHAR' in normal Emacs.  For example,
     'C-c o' invokes the global binding of 'C-x o', which is normally
     'other-window'.

   Term mode has a page-at-a-time feature.  When enabled, it makes
output pause at the end of each screenful:

'C-c C-q'
     Toggle the page-at-a-time feature ('term-pager-toggle').  This
     command works in both line and char modes.  When the feature is
     enabled, the mode-line displays the word 'page', and each time Term
     receives more than a screenful of output, it pauses and displays
     '*MORE*' in the mode-line.  Type <SPC> to display the next
     screenful of output, or '?' to see your other options.  The
     interface is similar to the 'more' program.

==============================================================================
File: emacs.info,  Node: |Remote_Host|,  Next: |Serial_Terminal|,  Prev: |Term_Mode|,  Up: |Shell|
==============================================================================

                                                                   *Remote_Host*

38.10 Remote Host Shell
===--------------------

You can login to a remote computer, using whatever commands you would
from a regular terminal (e.g., using the 'ssh' or 'telnet' or 'rlogin'
commands), from a Term window.

   A program that asks you for a password will normally suppress echoing
of the password, so the password will not show up in the buffer.  This
will happen just as if you were using a real terminal, if the buffer is
in char mode.  If it is in line mode, the password is temporarily
visible, but will be erased when you hit return.  (This happens
automatically; there is no special password processing.)

   When you log in to a different machine, you need to specify the type
of terminal you're using, by setting the 'TERM' environment variable in
the environment for the remote login command.  (If you use bash, you do
that by writing the variable assignment before the remote login command,
without a separating comma.)  Terminal types 'ansi' or 'vt100' will work
on most systems.

==============================================================================
File: emacs.info,  Node: |Serial_Terminal|,  Prev: |Remote_Host|,  Up: |Shell|
==============================================================================

                                                               *Serial_Terminal*

38.11 Serial Terminal
===------------------

If you have a device connected to a serial port of your computer, you
can communicate with it by typing 'M-x serial-term'.  This command asks
for a serial port name and speed, and switches to a new Term mode
buffer.  Emacs communicates with the serial device through this buffer
just like it does with a terminal in ordinary Term mode.

   The speed of the serial port is measured in bits per second.  The
most common speed is 9600 bits per second.  You can change the speed
interactively by clicking on the mode line.

   A serial port can be configured even more by clicking on '8N1' in the
mode line.  By default, a serial port is configured as '8N1', which
means that each byte consists of 8 data bits, No parity check bit, and 1
stopbit.

   If the speed or the configuration is wrong, you cannot communicate
with your device and will probably only see garbage output in the
window.

==============================================================================
File: emacs.info,  Node: |Emacs_Server|,  Next: |Printing|,  Prev: |Shell|,  Up: |Top|
==============================================================================

                                                                  *Emacs_Server*

39 Using Emacs as a Server
***=======================

Various programs can invoke your choice of editor to edit a particular
piece of text.  For instance, version control programs invoke an editor
to enter version control logs (*note Version Control::), and the Unix
'mail' utility invokes an editor to enter a message to send.  By
convention, your choice of editor is specified by the environment
variable 'EDITOR'.  If you set 'EDITOR' to 'emacs', Emacs would be
invoked, but in an inconvenient way--by starting a new Emacs process.
This is inconvenient because the new Emacs process doesn't share
buffers, a command history, or other kinds of information with any
existing Emacs process.

   You can solve this problem by setting up Emacs as an "edit server",
so that it "listens" for external edit requests and acts accordingly.
There are various ways to start an Emacs server:

   * Run the command 'server-start' in an existing Emacs process: either
     type 'M-x server-start', or put the expression '(server-start)' in
     your init file (*note Init File::).  The existing Emacs process is
     the server; when you exit Emacs, the server dies with the Emacs
     process.

   * Run Emacs as a "daemon", using one of the '--daemon' command-line
     options.  *Note Initial Options::.  When Emacs is started this way,
     it calls 'server-start' after initialization and does not open an
     initial frame.  It then waits for edit requests from clients.

   * If your operating system uses 'systemd' to manage startup, you can
     automatically start Emacs in daemon mode when you login using the
     supplied "systemd unit file".  To activate this:
          systemctl --user enable emacs
     (If your Emacs was installed into a non-standard location, you may
     need to copy the 'emacs.service' file to a standard directory such
     as '~/.config/systemd/user/'.)

   * An external process can invoke the Emacs server when a connection
     event occurs upon a specified socket and pass the socket to the new
     Emacs server process.  An instance of this is the socket
     functionality of 'systemd': the 'systemd' service creates a socket
     and listens for connections on it; when 'emacsclient' connects to
     it for the first time, 'systemd' can launch the Emacs server and
     hand over the socket to it for servicing 'emacsclient' connections.
     A setup to use this functionality could be:

     '~/.config/systemd/user/emacs.socket':
          [Socket]
          ListenStream=/path/to/.emacs.socket

          [Install]
          WantedBy=sockets.target

     (The 'emacs.service' file described above must also be installed.)

     The 'ListenStream' path will be the path that Emacs listens for
     connections from 'emacsclient'; this is a file of your choice.

   Once an Emacs server is started, you can use a shell command called
'emacsclient' to connect to the Emacs process and tell it to visit a
file.  You can then set the 'EDITOR' environment variable to
'emacsclient', so that external programs will use the existing Emacs
process for editing.(1)

   You can run multiple Emacs servers on the same machine by giving each
one a unique "server name", using the variable 'server-name'.  For
example, 'M-x set-variable <RET> server-name <RET> "foo" <RET>' sets the
server name to 'foo'.  The 'emacsclient' program can specify a server by
name, using the '-s' or the '-f' option (*note emacsclient Options::),
depending on whether or not the server uses a TCP socket (*note TCP
Emacs server::).

   If you want to run multiple Emacs daemons (*note Initial Options::),
you can give each daemon its own server name like this:

       emacs --daemon=foo

   If you have defined a server by a unique server name, it is possible
to connect to the server from another Emacs instance and evaluate Lisp
expressions on the server, using the 'server-eval-at' function.  For
instance, '(server-eval-at "foo" '(+ 1 2))' evaluates the expression '(+
1 2)' on the 'foo' server, and returns '3'.  (If there is no server with
that name, an error is signaled.)  Currently, this feature is mainly
useful for developers.

MENU

* |TCP_Emacs_server|::     Listening to a TCP socket.
* |Invoking_emacsclient|:: Connecting to the Emacs server.
* |emacsclient_Options|::  Emacs client startup options.

   ---------- Footnotes ----------

   (1) Some programs use a different environment variable; for example,
to make TeX use 'emacsclient', set the 'TEXEDIT' environment variable to
'emacsclient +%d %s'.

==============================================================================
File: emacs.info,  Node: |TCP_Emacs_server|,  Next: |Invoking_emacsclient|,  Up: |Emacs_Server|
==============================================================================

                                                              *TCP_Emacs_server*

39.1 TCP Emacs server
===------------------

An Emacs server usually listens to connections on a local Unix domain
socket.  Some operating systems, such as MS-Windows, do not support
local sockets; in that case, the server uses TCP sockets instead.  In
some cases it is useful to have the server listen on a TCP socket even
if local sockets are supported, e.g., if you need to contact the Emacs
server from a remote machine.  You can set 'server-use-tcp' to non-'nil'
to have Emacs listen on a TCP socket instead of a local socket.  This is
the default if your OS does not support local sockets.

   If the Emacs server is set to use TCP, it will by default listen on a
random port on the localhost interface.  This can be changed to another
interface and/or a fixed port using the variables 'server-host' and
'server-port'.

   A TCP socket is not subject to file system permissions.  To retain
some control over which users can talk to an Emacs server over TCP
sockets, the 'emacsclient' program must send an authorization key to the
server.  This key is normally randomly generated by the Emacs server.
This is the recommended mode of operation.

   If needed, you can set the authorization key to a static value by
setting the 'server-auth-key' variable.  The key must consist of 64
ASCII printable characters except for space (this means characters from
'!' to '~', or from decimal code 33 to 126).  You can use 'M-x
server-generate-key' to get a random key.

   When you start a TCP Emacs server, Emacs creates a "server file"
containing the TCP information to be used by 'emacsclient' to connect to
the server.  The variable 'server-auth-dir' specifies the default
directory containing the server file; by default, this is
'~/.emacs.d/server/'.  In the absence of a local socket with file
permissions, the permissions of this directory determine which users can
have their 'emacsclient' processes talk to the Emacs server.  If
'server-name' is an absolute file name, the server file is created where
specified by that file name.

   To tell 'emacsclient' to connect to the server over TCP with a
specific server file, use the '-f' or '--server-file' option, or set the
'EMACS_SERVER_FILE' environment variable (*note emacsclient Options::).
If 'server-auth-dir' is set to a non-standard value, or if 'server-name'
is set to an absolute file name, 'emacsclient' needs an absolute file
name to the server file, as the default 'server-auth-dir' is hard-coded
in 'emacsclient' to be used as the directory for resolving relative
filenames.

==============================================================================
File: emacs.info,  Node: |Invoking_emacsclient|,  Next: |emacsclient_Options|,  Prev: |TCP_Emacs_server|,  Up: |Emacs_Server|
==============================================================================

                                                          *Invoking_emacsclient*

39.2 Invoking 'emacsclient'
===------------------------

The simplest way to use the 'emacsclient' program is to run the shell
command 'emacsclient FILE', where FILE is a file name.  This connects to
an Emacs server, and tells that Emacs process to visit FILE in one of
its existing frames--either a graphical frame, or one in a text terminal
(*note Frames::).  You can then select that frame to begin editing.

   If there is no Emacs server, the 'emacsclient' program halts with an
error message (you can prevent this from happening by using the
'--alternate-editor=""' option to 'emacsclient', *note emacsclient
Options::).  If the Emacs process has no existing frame--which can happen
if it was started as a daemon (*note Emacs Server::)--then Emacs opens a
frame on the terminal in which you called 'emacsclient'.

   You can also force 'emacsclient' to open a new frame on a graphical
display using the '-c' option, or on a text terminal using the '-t'
option.  *Note emacsclient Options::.

   If you are running on a single text terminal, you can switch between
'emacsclient''s shell and the Emacs server using one of two methods: (i)
run the Emacs server and 'emacsclient' on different virtual terminals,
and switch to the Emacs server's virtual terminal after calling
'emacsclient'; or (ii) call 'emacsclient' from within the Emacs server
itself, using Shell mode (*note Interactive Shell::) or Term mode (*note
Term Mode::); 'emacsclient' blocks only the subshell under Emacs, and
you can still use Emacs to edit the file.

   When you finish editing FILE in the Emacs server, type 'C-x #'
('server-edit') in its buffer.  This saves the file and sends a message
back to the 'emacsclient' program, telling it to exit.  Programs that
use 'EDITOR' usually wait for the editor--in this case 'emacsclient'--to
exit before doing something else.

   You can also call 'emacsclient' with multiple file name arguments:
'emacsclient FILE1 FILE2 ...' tells the Emacs server to visit FILE1,
FILE2, and so forth.  Emacs selects the buffer visiting FILE1, and
buries the other buffers at the bottom of the buffer list (*note
Buffers::).  The 'emacsclient' program exits once all the specified
files are finished (i.e., once you have typed 'C-x #' in each server
buffer).

   Finishing with a server buffer also kills the buffer, unless it
already existed in the Emacs session before the server was asked to
create it.  However, if you set 'server-kill-new-buffers' to 'nil', then
a different criterion is used: finishing with a server buffer kills it
if the file name matches the regular expression
'server-temp-file-regexp'.  This is set up to distinguish certain
temporary files.

   Each 'C-x #' checks for other pending external requests to edit
various files, and selects the next such file.  You can switch to a
server buffer manually if you wish; you don't have to arrive at it with
'C-x #'.  But 'C-x #' is the way to tell 'emacsclient' that you are
finished.

   If you set the value of the variable 'server-window' to a window or a
frame, 'C-x #' always displays the next server buffer in that window or
in that frame.

==============================================================================
File: emacs.info,  Node: |emacsclient_Options|,  Prev: |Invoking_emacsclient|,  Up: |Emacs_Server|
==============================================================================

                                                           *emacsclient_Options*

39.3 'emacsclient' Options
===-----------------------

You can pass some optional arguments to the 'emacsclient' program, such
as:

     emacsclient -c +12 FILE1 +4:3 FILE2

The '+LINE' or '+LINE:COLUMN' arguments specify line numbers, or line
and column numbers, for the next file argument.  These behave like the
command line arguments for Emacs itself.  *Note Action Arguments::.

   The other optional arguments recognized by 'emacsclient' are listed
below:

'-a COMMAND'
'--alternate-editor=COMMAND'
     Specify a shell command to run if 'emacsclient' fails to contact
     Emacs.  This is useful when running 'emacsclient' in a script.  The
     command may include arguments, which may be quoted "like this".
     Currently, escaping of quotes is not supported.

     As a special exception, if COMMAND is the empty string, then
     'emacsclient' starts Emacs in daemon mode (as 'emacs --daemon') and
     then tries connecting again.

     The environment variable 'ALTERNATE_EDITOR' has the same effect as
     the '-a' option.  If both are present, the latter takes precedence.

'-c'
'--create-frame'
     Create a new graphical "client frame", instead of using an existing
     Emacs frame.  See below for the special behavior of 'C-x C-c' in a
     client frame.  If Emacs cannot create a new graphical frame (e.g.,
     if it cannot connect to the X server), it tries to create a text
     terminal client frame, as though you had supplied the '-t' option
     instead.

     On MS-Windows, a single Emacs session cannot display frames on both
     graphical and text terminals, nor on multiple text terminals.
     Thus, if the Emacs server is running on a text terminal, the '-c'
     option, like the '-t' option, creates a new frame in the server's
     current text terminal.  *Note Windows Startup::.

     If you omit a filename argument while supplying the '-c' option,
     the new frame displays the 'scratch' buffer by default.  You can
     customize this behavior with the variable 'initial-buffer-choice'
     (*note Entering Emacs::).

'-F ALIST'
'--frame-parameters=ALIST'
     Set the parameters for a newly-created graphical frame (*note Frame
     Parameters::).

'-d DISPLAY'
'--display=DISPLAY'
     Tell Emacs to open the given files on the X display DISPLAY
     (assuming there is more than one X display available).

'-e'
'--eval'
     Tell Emacs to evaluate some Emacs Lisp code, instead of visiting
     some files.  When this option is given, the arguments to
     'emacsclient' are interpreted as a list of expressions to evaluate,
     _not_ as a list of files to visit.

'-f SERVER-FILE'
'--server-file=SERVER-FILE'
     Specify a server file (*note TCP Emacs server::) for connecting to
     an Emacs server via TCP.  Alternatively, you can set the
     'EMACS_SERVER_FILE' environment variable to point to the server
     file.  (The command-line option overrides the environment
     variable.)

     An Emacs server usually uses a local socket to listen for
     connections, but also supports connections over TCP.  To connect to
     a TCP Emacs server, 'emacsclient' needs to read a "server file"
     containing the connection details of the Emacs server.  The name of
     this file is specified with this option, either as a file name
     relative to '~/.emacs.d/server' or as an absolute file name.  *Note
     TCP Emacs server::.

'-n'
'--no-wait'
     Let 'emacsclient' exit immediately, instead of waiting until all
     server buffers are finished.  You can take as long as you like to
     edit the server buffers within Emacs, and they are _not_ killed
     when you type 'C-x #' in them.

'--parent-id ID'
     Open an 'emacsclient' frame as a client frame in the parent X
     window with id ID, via the XEmbed protocol.  Currently, this option
     is mainly useful for developers.

'-q'
'--quiet'
     Do not let 'emacsclient' display messages about waiting for Emacs
     or connecting to remote server sockets.

'-u'
'--suppress-output'
     Do not let 'emacsclient' display results returned from the server.
     Mostly useful in combination with '-e' when the evaluation
     performed is for side-effect rather than result.

'-s SERVER-NAME'
'--socket-name=SERVER-NAME'
     Connect to the Emacs server named SERVER-NAME.  (This option is not
     supported on MS-Windows.)  The server name is given by the variable
     'server-name' on the Emacs server.  If this option is omitted,
     'emacsclient' connects to the first server it finds.  If you set
     'server-name' of the Emacs server to an absolute file name, give
     the same absolute file name as SERVER-NAME to this option to
     instruct 'emacsclient' to connect to that server.  You need to use
     this option if you started Emacs as daemon (*note Initial
     Options::) and specified the name for the server started by the
     daemon.

     Alternatively, you can set the 'EMACS_SOCKET_NAME' environment
     variable to point to the server socket.  (The command-line option
     overrides the environment variable.)

'-t'
'--tty'
'-nw'
     Create a new client frame on the current text terminal, instead of
     using an existing Emacs frame.  This behaves just like the '-c'
     option, described above, except that it creates a text terminal
     frame (*note Non-Window Terminals::).

     On MS-Windows, '-t' behaves just like '-c' if the Emacs server is
     using the graphical display, but if the Emacs server is running on
     a text terminal, it creates a new frame in the current text
     terminal.

'-T TRAMP-PREFIX'
'--tramp-prefix=TRAMP-PREFIX'
     Set the prefix to add to filenames for Emacs to locate files on
     remote machines (*note Remote Files::) using TRAMP (*note The Tramp
     Manual: (tramp)Top.).  This is mostly useful in combination with
     using the Emacs server over TCP (*note TCP Emacs server::).  By
     ssh-forwarding the listening port and making the SERVER-FILE
     available on a remote machine, programs on the remote machine can
     use 'emacsclient' as the value for the 'EDITOR' and similar
     environment variables, but instead of talking to an Emacs server on
     the remote machine, the files will be visited in the local Emacs
     session using TRAMP.

     Setting the environment variable 'EMACSCLIENT_TRAMP' has the same
     effect as using the '-T' option.  If both are specified, the
     command-line option takes precedence.

     For example, assume two hosts, 'local' and 'remote', and that the
     local Emacs listens on tcp port 12345.  Assume further that '/home'
     is on a shared file system, so that the server file
     '~/.emacs.d/server/server' is readable on both hosts.

          local$ ssh -R12345:localhost:12345 remote
          remote$ export EDITOR="emacsclient \
                  --server-file=server \
                  --tramp=/ssh:remote:"
          remote$ $EDITOR /tmp/foo.txt #Should open in local emacs.

   The new graphical or text terminal frames created by the '-c' or '-t'
options are considered "client frames".  Any new frame that you create
from a client frame is also considered a client frame.  If you type 'C-x
C-c' ('save-buffers-kill-terminal') in a client frame, that command does
not kill the Emacs session as it normally does (*note Exiting::).
Instead, Emacs deletes the client frame; furthermore, if the client
frame has an 'emacsclient' waiting to regain control (i.e., if you did
not supply the '-n' option), Emacs deletes all other frames of the same
client, and marks the client's server buffers as finished, as though you
had typed 'C-x #' in all of them.  If it so happens that there are no
remaining frames after the client frame(s) are deleted, the Emacs
session exits.

   As an exception, when Emacs is started as a daemon, all frames are
considered client frames, and 'C-x C-c' never kills Emacs.  To kill a
daemon session, type 'M-x kill-emacs'.

   Note that the '-t' and '-n' options are contradictory: '-t' says to
take control of the current text terminal to create a new client frame,
while '-n' says not to take control of the text terminal.  If you supply
both options, Emacs visits the specified files(s) in an existing frame
rather than a new client frame, negating the effect of '-t'.

==============================================================================
File: emacs.info,  Node: |Printing|,  Next: |Sorting|,  Prev: |Emacs_Server|,  Up: |Top|
==============================================================================

                                                                      *Printing*

40 Printing Hard Copies
***====================

Emacs provides commands for printing hardcopies of either an entire
buffer or part of one.  You can invoke the printing commands directly,
as detailed below, or using the 'File' menu on the menu bar.

   Aside from the commands described in this section, you can also print
hardcopies from Dired (*note Operating on Files::) and the diary (*note
Displaying the Diary::).  You can also "print" an Emacs buffer to HTML
with the command 'M-x htmlfontify-buffer', which converts the current
buffer to a HTML file, replacing Emacs faces with CSS-based markup.
Furthermore, Org mode allows you to print Org files to a variety of
formats, such as PDF (*note Org Mode::).

'M-x print-buffer'
     Print hardcopy of current buffer with page headings containing the
     file name and page number.
'M-x lpr-buffer'
     Print hardcopy of current buffer without page headings.
'M-x print-region'
     Like 'print-buffer' but print only the current region.
'M-x lpr-region'
     Like 'lpr-buffer' but print only the current region.

   On most operating systems, the above hardcopy commands submit files
for printing by calling the 'lpr' program.  To change the printer
program, customize the variable 'lpr-command'.  To specify extra
switches to give the printer program, customize the list variable
'lpr-switches'.  Its value should be a list of option strings, each of
which should start with '-' (e.g., the option string '"-w80"' specifies
a line width of 80 columns).  The default is the empty list, 'nil'.

   To specify the printer to use, set the variable 'printer-name'.  The
default, 'nil', specifies the default printer.  If you set it to a
printer name (a string), that name is passed to 'lpr' with the '-P'
switch; if you are not using 'lpr', you should specify the switch with
'lpr-printer-switch'.

   The variable 'lpr-headers-switches' similarly specifies the extra
switches to use to make page headers.  The variable 'lpr-add-switches'
controls whether to supply '-T' and '-J' options (suitable for 'lpr') to
the printer program: 'nil' means don't add them (this should be the
value if your printer program is not compatible with 'lpr').

MENU

* |PostScript|::           Printing buffers or regions as PostScript.
* |PostScript_Variables|:: Customizing the PostScript printing commands.
* |Printing_Package|::     An optional advanced printing interface.

==============================================================================
File: emacs.info,  Node: |PostScript|,  Next: |PostScript_Variables|,  Up: |Printing|
==============================================================================

                                                                    *PostScript*

40.1 PostScript Hardcopy
===---------------------

These commands convert buffer contents to PostScript, either printing it
or leaving it in another Emacs buffer.

'M-x ps-print-buffer'
     Print hardcopy of the current buffer in PostScript form.
'M-x ps-print-region'
     Print hardcopy of the current region in PostScript form.
'M-x ps-print-buffer-with-faces'
     Print hardcopy of the current buffer in PostScript form, showing
     the faces used in the text by means of PostScript features.
'M-x ps-print-region-with-faces'
     Print hardcopy of the current region in PostScript form, showing
     the faces used in the text.
'M-x ps-spool-buffer'
     Generate and spool a PostScript image for the current buffer text.
'M-x ps-spool-region'
     Generate and spool a PostScript image for the current region.
'M-x ps-spool-buffer-with-faces'
     Generate and spool a PostScript image for the current buffer,
     showing the faces used.
'M-x ps-spool-region-with-faces'
     Generate and spool a PostScript image for the current region,
     showing the faces used.
'M-x ps-despool'
     Send the spooled PostScript to the printer.
'M-x handwrite'
     Generate/print PostScript for the current buffer as if handwritten.

   The 'ps-print-buffer' and 'ps-print-region' commands print buffer
contents in PostScript form.  One command prints the entire buffer; the
other, just the region.  The commands 'ps-print-buffer-with-faces' and
'ps-print-region-with-faces' behave similarly, but use PostScript
features to show the faces (fonts and colors) of the buffer text.

   Interactively, when you use a prefix argument ('C-u'), these commands
prompt the user for a file name, and save the PostScript image in that
file instead of sending it to the printer.

   The commands whose names have 'spool' instead of 'print', generate
the PostScript output in an Emacs buffer instead of sending it to the
printer.

   Use the command 'ps-despool' to send the spooled images to the
printer.  This command sends the PostScript generated by '-spool-'
commands (see commands above) to the printer.  With a prefix argument
('C-u'), it prompts for a file name, and saves the spooled PostScript
image in that file instead of sending it to the printer.

   'M-x handwrite' is more frivolous.  It generates a PostScript
rendition of the current buffer as a cursive handwritten document.  It
can be customized in group 'handwrite'.  This function only supports ISO
8859-1 characters.

==============================================================================
File: emacs.info,  Node: |PostScript_Variables|,  Next: |Printing_Package|,  Prev: |PostScript|,  Up: |Printing|
==============================================================================

                                                          *PostScript_Variables*

40.2 Variables for PostScript Hardcopy
===-----------------------------------

All the PostScript hardcopy commands use the variables 'ps-lpr-command'
and 'ps-lpr-switches' to specify how to print the output.
'ps-lpr-command' specifies the command name to run, 'ps-lpr-switches'
specifies command line options to use, and 'ps-printer-name' specifies
the printer.  If you don't set the first two variables yourself, they
take their initial values from 'lpr-command' and 'lpr-switches'.  If
'ps-printer-name' is 'nil', 'printer-name' is used.

   The variable 'ps-print-header' controls whether these commands add
header lines to each page--set it to 'nil' to turn headers off.

   If your printer doesn't support colors, you should turn off color
processing by setting 'ps-print-color-p' to 'nil'.  By default, if the
display supports colors, Emacs produces hardcopy output with color
information; on black-and-white printers, colors are emulated with
shades of gray.  This might produce illegible output, even if your
screen colors only use shades of gray.

   Alternatively, you can set 'ps-print-color-p' to 'black-white' to
print colors on black/white printers.

   By default, PostScript printing ignores the background colors of the
faces, unless the variable 'ps-use-face-background' is non-'nil'.  This
is to avoid unwanted interference with the zebra stripes and background
image/text.

   The variable 'ps-paper-type' specifies which size of paper to format
for; legitimate values include 'a4', 'a3', 'a4small', 'b4', 'b5',
'executive', 'ledger', 'legal', 'letter', 'letter-small', 'statement',
'tabloid'.  The default is 'letter'.  You can define additional paper
sizes by changing the variable 'ps-page-dimensions-database'.

   The variable 'ps-landscape-mode' specifies the orientation of
printing on the page.  The default is 'nil', which stands for portrait
mode.  Any non-'nil' value specifies landscape mode.

   The variable 'ps-number-of-columns' specifies the number of columns;
it takes effect in both landscape and portrait mode.  The default is 1.

   The variable 'ps-font-family' specifies which font family to use for
printing ordinary text.  Legitimate values include 'Courier',
'Helvetica', 'NewCenturySchlbk', 'Palatino' and 'Times'.  The variable
'ps-font-size' specifies the size of the font for ordinary text and
defaults to 8.5 points.  The value of 'ps-font-size' can also be a cons
of 2 floats: one for landscape mode, the other for portrait mode.

   Emacs supports more scripts and characters than a typical PostScript
printer.  Thus, some of the characters in your buffer might not be
printable using the fonts built into your printer.  You can augment the
fonts supplied with the printer with those from the GNU Intlfonts
package, or you can instruct Emacs to use Intlfonts exclusively.  The
variable 'ps-multibyte-buffer' controls this: the default value, 'nil',
is appropriate for printing ASCII and Latin-1 characters; a value of
'non-latin-printer' is for printers which have the fonts for ASCII,
Latin-1, Japanese, and Korean characters built into them.  A value of
'bdf-font' arranges for the BDF fonts from the Intlfonts package to be
used for _all_ characters.  Finally, a value of 'bdf-font-except-latin'
instructs the printer to use built-in fonts for ASCII and Latin-1
characters, and Intlfonts BDF fonts for the rest.

   To be able to use the BDF fonts, Emacs needs to know where to find
them.  The variable 'bdf-directory-list' holds the list of directories
where Emacs should look for the fonts; the default value includes a
single directory '/usr/local/share/emacs/fonts/bdf'.

   Many other customization variables for these commands are defined and
described in the Lisp files 'ps-print.el' and 'ps-mule.el'.

==============================================================================
File: emacs.info,  Node: |Printing_Package|,  Prev: |PostScript_Variables|,  Up: |Printing|
==============================================================================

                                                              *Printing_Package*

40.3 Printing Package
===------------------

The basic Emacs facilities for printing hardcopy can be extended using
the Printing package.  This provides an easy-to-use interface for
choosing what to print, previewing PostScript files before printing, and
setting various printing options such as print headers, landscape or
portrait modes, duplex modes, and so forth.  On GNU/Linux or Unix
systems, the Printing package relies on the 'gs' and 'gv' utilities,
which are distributed as part of the GhostScript program.  On
MS-Windows, the 'gstools' port of Ghostscript can be used.

   To use the Printing package, add '(require 'printing)' to your init
file (*note Init File::), followed by '(pr-update-menus)'.  This
function replaces the usual printing commands in the menu bar with a
'Printing' submenu that contains various printing options.  You can also
type 'M-x pr-interface <RET>'; this creates a '*Printing Interface*'
buffer, similar to a customization buffer, where you can set the
printing options.  After selecting what and how to print, you start the
print job using the 'Print' button (click 'mouse-2' on it, or move point
over it and type <RET>).  For further information on the various
options, use the 'Interface Help' button.

==============================================================================
File: emacs.info,  Node: |Sorting|,  Next: |Picture_Mode|,  Prev: |Printing|,  Up: |Top|
==============================================================================

                                                                       *Sorting*

41 Sorting Text
***============

Emacs provides several commands for sorting text in the buffer.  All
operate on the contents of the region.  They divide the text of the
region into many "sort records", identify a "sort key" for each record,
and then reorder the records into the order determined by the sort keys.
The records are ordered so that their keys are in alphabetical order,
or, for numeric sorting, in numeric order.  In alphabetic sorting, all
upper-case letters 'A' through 'Z' come before lower-case 'a', in
accordance with the ASCII character sequence (but 'sort-fold-case',
described below, can change that).

   The various sort commands differ in how they divide the text into
sort records and in which part of each record is used as the sort key.
Most of the commands make each line a separate sort record, but some
commands use paragraphs or pages as sort records.  Most of the sort
commands use each entire sort record as its own sort key, but some use
only a portion of the record as the sort key.

'M-x sort-lines'
     Divide the region into lines, and sort by comparing the entire text
     of a line.  A numeric argument means sort into descending order.

'M-x sort-paragraphs'
     Divide the region into paragraphs, and sort by comparing the entire
     text of a paragraph (except for leading blank lines).  A numeric
     argument means sort into descending order.

'M-x sort-pages'
     Divide the region into pages, and sort by comparing the entire text
     of a page (except for leading blank lines).  A numeric argument
     means sort into descending order.

'M-x sort-fields'
     Divide the region into lines, and sort by comparing the contents of
     one field in each line.  Fields are defined as separated by
     whitespace, so the first run of consecutive non-whitespace
     characters in a line constitutes field 1, the second such run
     constitutes field 2, etc.

     Specify which field to sort by with a numeric argument: 1 to sort
     by field 1, etc.; the default is 1.  A negative argument means
     count fields from the right instead of from the left; thus, minus 1
     means sort by the last field.  If several lines have identical
     contents in the field being sorted, they keep the same relative
     order that they had in the original buffer.

'M-x sort-numeric-fields'
     Like 'M-x sort-fields' except the specified field is converted to
     an integer for each line, and the numbers are compared.  '10' comes
     before '2' when considered as text, but after it when considered as
     a number.  By default, numbers are interpreted according to
     'sort-numeric-base', but numbers beginning with '0x' or '0' are
     interpreted as hexadecimal and octal, respectively.

'M-x sort-columns'
     Like 'M-x sort-fields' except that the text within each line used
     for comparison comes from a fixed range of columns.  With a prefix
     argument, sort in reverse order.  See below for more details on
     this command.

'M-x reverse-region'
     Reverse the order of the lines in the region.  This is useful for
     sorting into descending order by fields, since those sort commands
     do not have a feature for doing that.

   For example, if the buffer contains this:

     On systems where clash detection (locking of files being edited) is
     implemented, Emacs also checks the first time you modify a buffer
     whether the file has changed on disk since it was last visited or
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.

applying 'M-x sort-lines' to the entire buffer produces this:

     On systems where clash detection (locking of files being edited) is
     implemented, Emacs also checks the first time you modify a buffer
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.
     whether the file has changed on disk since it was last visited or

where the upper-case 'O' sorts before all lower-case letters.  If you
use 'C-u 2 M-x sort-fields' instead, you get this:

     implemented, Emacs also checks the first time you modify a buffer
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.
     On systems where clash detection (locking of files being edited) is
     whether the file has changed on disk since it was last visited or

where the sort keys were 'Emacs', 'If', 'buffer', 'systems' and 'the'.

   'M-x sort-columns' requires more explanation.  You specify the
columns by putting point at one of the columns and the mark at the other
column.  Because this means you cannot put point or the mark at the
beginning of the first line of the text you want to sort, this command
uses an unusual definition of "region": all of the line point is in is
considered part of the region, and so is all of the line the mark is in,
as well as all the lines in between.

   For example, to sort a table by information found in columns 10 to
15, you could put the mark on column 10 in the first line of the table,
and point on column 15 in the last line of the table, and then run
'sort-columns'.  Equivalently, you could run it with the mark on column
15 in the first line and point on column 10 in the last line.

   This can be thought of as sorting the rectangle specified by point
and the mark, except that the text on each line to the left or right of
the rectangle moves along with the text inside the rectangle.  *Note
Rectangles::.

   Many of the sort commands ignore case differences when comparing, if
'sort-fold-case' is non-'nil'.

==============================================================================
File: emacs.info,  Node: |Picture_Mode|,  Next: |Editing_Binary_Files|,  Prev: |Sorting|,  Up: |Top|
==============================================================================

                                                                  *Picture_Mode*

42 Editing Pictures
***================

To edit a picture made out of text characters (for example, a picture of
the division of a register into fields, as a comment in a program), use
the command 'M-x picture-mode' to enter Picture mode.

   In Picture mode, editing is based on the "quarter-plane" model of
text, according to which the text characters lie studded on an area that
stretches infinitely far to the right and downward.  The concept of the
end of a line does not exist in this model; the most you can say is
where the last nonblank character on the line is found.

   Of course, Emacs really always considers text as a sequence of
characters, and lines really do have ends.  But Picture mode replaces
the most frequently-used commands with variants that simulate the
quarter-plane model of text.  They do this by inserting spaces or by
converting tabs to spaces.

   Most of the basic editing commands of Emacs are redefined by Picture
mode to do essentially the same thing but in a quarter-plane way.  In
addition, Picture mode defines various keys starting with the 'C-c'
prefix to run special picture editing commands.

   One of these keys, 'C-c C-c', is particularly important.  Often a
picture is part of a larger file that is usually edited in some other
major mode.  Picture mode records the name of the previous major mode so
you can use the 'C-c C-c' command ('picture-mode-exit') later to go back
to that mode.  'C-c C-c' also deletes spaces from the ends of lines,
unless given a numeric argument.

   The special commands of Picture mode all work in other modes
(provided the 'picture' library is loaded), but are not bound to keys
except in Picture mode.  The descriptions below talk of moving "one
column" and so on, but all the picture mode commands handle numeric
arguments as their normal equivalents do.

   Turning on Picture mode runs the hook 'picture-mode-hook'.
Additional extensions to Picture mode can be found in 'artist.el'.

MENU

* |Basic_Picture|::         Basic concepts and simple commands of Picture Mode.
* |Insert_in_Picture|::     Controlling direction of cursor motion
                            after self-inserting characters.
* |Tabs_in_Picture|::       Various features for tab stops and indentation.
* |Rectangles_in_Picture|:: Clearing and superimposing rectangles.

==============================================================================
File: emacs.info,  Node: |Basic_Picture|,  Next: |Insert_in_Picture|,  Up: |Picture_Mode|
==============================================================================

                                                                 *Basic_Picture*

42.1 Basic Editing in Picture Mode
===-------------------------------

Most keys do the same thing in Picture mode that they usually do, but do
it in a quarter-plane style.  For example, 'C-f' is rebound to run
'picture-forward-column', a command which moves point one column to the
right, inserting a space if necessary so that the actual end of the line
makes no difference.  'C-b' is rebound to run 'picture-backward-column',
which always moves point left one column, converting a tab to multiple
spaces if necessary.  'C-n' and 'C-p' are rebound to run
'picture-move-down' and 'picture-move-up', which can either insert
spaces or convert tabs as necessary to make sure that point stays in
exactly the same column.  'C-e' runs 'picture-end-of-line', which moves
to after the last nonblank character on the line.  'C-a' runs
'picture-beginning-of-line'.  (The choice of screen model does not
affect beginnings of lines; the only extra thing this command does is
update the current picture column to 0.)

   Insertion of text is adapted to the quarter-plane screen model
through the use of Overwrite mode (*note Minor Modes::.)  Self-inserting
characters replace existing text, column by column, rather than pushing
existing text to the right.  <RET> runs 'picture-newline', which just
moves to the beginning of the following line so that new text will
replace that line.

   In Picture mode, the commands that normally delete or kill text,
instead erase text (replacing it with spaces).  <DEL>
('picture-backward-clear-column') replaces the preceding character with
a space rather than removing it; this moves point backwards.  'C-d'
('picture-clear-column') replaces the next character or characters with
spaces, but does not move point.  (If you want to clear characters to
spaces and move forward over them, use <SPC>.)  'C-k'
('picture-clear-line') really kills the contents of lines, but does not
delete the newlines from the buffer.

   To do actual insertion, you must use special commands.  'C-o'
('picture-open-line') creates a blank line after the current line; it
never splits a line.  'C-M-o' ('split-line') makes sense in Picture
mode, so it is not changed.  'C-j' ('picture-duplicate-line') inserts
another line with the same contents below the current line.

   To do actual deletion in Picture mode, use 'C-w', 'C-c C-d' (which is
defined as 'delete-char', as 'C-d' is in other modes), or one of the
picture rectangle commands (*note Rectangles in Picture::).

==============================================================================
File: emacs.info,  Node: |Insert_in_Picture|,  Next: |Tabs_in_Picture|,  Prev: |Basic_Picture|,  Up: |Picture_Mode|
==============================================================================

                                                             *Insert_in_Picture*

42.2 Controlling Motion after Insert
===---------------------------------

Since self-inserting characters in Picture mode overwrite and move
point, there is no essential restriction on how point should be moved.
Normally point moves right, but you can specify any of the eight
orthogonal or diagonal directions for motion after a self-inserting
character.  This is useful for drawing lines in the buffer.

'C-c <'
'C-c <LEFT>'
     Move left after insertion ('picture-movement-left').
'C-c >'
'C-c <RIGHT>'
     Move right after insertion ('picture-movement-right').
'C-c ^'
'C-c <UP>'
     Move up after insertion ('picture-movement-up').
'C-c .'
'C-c <DOWN>'
     Move down after insertion ('picture-movement-down').
'C-c `'
'C-c <Home>'
     Move up and left ("northwest") after insertion
     ('picture-movement-nw').
'C-c ''
'C-c <PageUp>'
'C-c <prior>'
     Move up and right ("northeast") after insertion
     ('picture-movement-ne').
'C-c /'
'C-c <End>'
     Move down and left ("southwest") after insertion
     ('picture-movement-sw').
'C-c \'
'C-c <PageDown>'
'C-c <next>'
     Move down and right ("southeast") after insertion
     ('picture-movement-se').

   Two motion commands move based on the current Picture insertion
direction.  The command 'C-c C-f' ('picture-motion') moves in the same
direction as motion after insertion currently does, while 'C-c C-b'
('picture-motion-reverse') moves in the opposite direction.

==============================================================================
File: emacs.info,  Node: |Tabs_in_Picture|,  Next: |Rectangles_in_Picture|,  Prev: |Insert_in_Picture|,  Up: |Picture_Mode|
==============================================================================

                                                               *Tabs_in_Picture*

42.3 Picture Mode Tabs
===-------------------

Two kinds of tab-like action are provided in Picture mode.  Use
'M-<TAB>' ('picture-tab-search') for context-based tabbing.  With no
argument, it moves to a point underneath the next "interesting"
character that follows whitespace in the previous nonblank line.  "Next"
here means "appearing at a horizontal position greater than the one
point starts out at".  With prefix argument, as in 'C-u M-<TAB>', this
command moves to the next such interesting character in the current
line.  'M-<TAB>' does not change the text; it only moves point.
"Interesting" characters are defined by the variable
'picture-tab-chars', which should define a set of characters.  The
syntax for this variable is like the syntax used inside of '[...]' in a
regular expression--but without the '[' and the ']'.  Its default value
is '"!-~"'.

   <TAB> itself runs 'picture-tab', which operates based on the current
tab stop settings; it is the Picture mode equivalent of
'tab-to-tab-stop'.  Normally it just moves point, but with a numeric
argument it clears the text that it moves over.

   The context-based and tab-stop-based forms of tabbing are brought
together by the command 'C-c <TAB>' ('picture-set-tab-stops').  This
command sets the tab stops to the positions which 'M-<TAB>' would
consider significant in the current line.  The use of this command,
together with <TAB>, can get the effect of context-based tabbing.  But
'M-<TAB>' is more convenient in the cases where it is sufficient.

   It may be convenient to prevent use of actual tab characters in
pictures.  For example, this prevents 'C-x <TAB>' from messing up the
picture.  You can do this by setting the variable 'indent-tabs-mode' to
'nil'.

==============================================================================
File: emacs.info,  Node: |Rectangles_in_Picture|,  Prev: |Tabs_in_Picture|,  Up: |Picture_Mode|
==============================================================================

                                                         *Rectangles_in_Picture*

42.4 Picture Mode Rectangle Commands
===---------------------------------

Picture mode defines commands for working on rectangular pieces of the
text in ways that fit with the quarter-plane model.  The standard
rectangle commands may also be useful.  *Note Rectangles::.

'C-c C-k'
     Clear out the region-rectangle with spaces
     ('picture-clear-rectangle').  With a prefix argument, delete the
     text.
'C-c C-w R'
     Similar, but save rectangle contents in register R first
     ('picture-clear-rectangle-to-register').  *Note Registers::.

'C-c C-y'
     Copy last killed rectangle into the buffer by overwriting, with
     upper left corner at point ('picture-yank-rectangle').  With
     argument, insert instead.
'C-c C-x R'
     Similar, but use the rectangle in register R
     ('picture-yank-rectangle-from-register').

   The picture rectangle commands 'C-c C-k' ('picture-clear-rectangle')
and 'C-c C-w' ('picture-clear-rectangle-to-register') differ from the
standard rectangle commands in that they normally clear the rectangle
instead of deleting it; this is analogous with the way 'C-d' is changed
in Picture mode.

   However, deletion of rectangles can be useful in Picture mode, so
these commands delete the rectangle if given a numeric argument.  'C-c
C-k' either with or without a numeric argument saves the rectangle for
'C-c C-y'.

   The Picture mode commands for yanking rectangles differ from the
standard ones in that they overwrite instead of inserting.  This is the
same way that Picture mode insertion of other text differs from other
modes.  'C-c C-y' ('picture-yank-rectangle') inserts (by overwriting)
the rectangle that was most recently killed, while 'C-c C-x'
('picture-yank-rectangle-from-register') does likewise for the rectangle
found in a specified register.

==============================================================================
File: emacs.info,  Node: |Editing_Binary_Files|,  Next: |Saving_Emacs_Sessions|,  Prev: |Picture_Mode|,  Up: |Top|
==============================================================================

                                                          *Editing_Binary_Files*

43 Editing Binary Files
***====================

There is a special major mode for editing binary files: Hexl mode.  To
use it, use 'M-x hexl-find-file' instead of 'C-x C-f' to visit the file.
This command converts the file's contents to hexadecimal and lets you
edit the translation.  When you save the file, it is converted
automatically back to binary.

   You can also use 'M-x hexl-mode' to translate an existing buffer into
hex.  This is useful if you visit a file normally and then discover it
is a binary file.

   Inserting text always overwrites in Hexl mode.  This is to reduce the
risk of accidentally spoiling the alignment of data in the file.
Ordinary text characters insert themselves (i.e., overwrite with
themselves).  There are commands for insertion of special characters by
their code.  Most cursor motion keys, as well as 'C-x C-s', are bound in
Hexl mode to commands that produce the same effect.  Here is a list of
other important commands special to Hexl mode:

'C-M-d'
     Insert a byte with a code typed in decimal.

'C-M-o'
     Insert a byte with a code typed in octal.

'C-M-x'
     Insert a byte with a code typed in hex.

'C-M-a'
     Move to the beginning of a 512-byte page.

'C-M-e'
     Move to the end of a 512-byte page.

'C-x ['
     Move to the beginning of a 1k-byte page.

'C-x ]'
     Move to the end of a 1k-byte page.

'M-g'
     Move to an address specified in hex.

'M-j'
     Move to an address specified in decimal.

'C-c C-c'
     Leave Hexl mode, going back to the major mode this buffer had
     before you invoked 'hexl-mode'.

Other Hexl commands let you insert strings (sequences) of binary bytes,
move by 'short's or 'int's, etc.; type 'C-h a hexl-<RET>' for details.

==============================================================================
File: emacs.info,  Node: |Saving_Emacs_Sessions|,  Next: |Recursive_Edit|,  Prev: |Editing_Binary_Files|,  Up: |Top|
==============================================================================

                                                         *Saving_Emacs_Sessions*

44 Saving Emacs Sessions
***=====================

Use the desktop library to save the state of Emacs from one session to
another.  Once you save the Emacs "desktop"--the buffers, their file
names, major modes, buffer positions, and so on--then subsequent Emacs
sessions reload the saved desktop.  By default, the desktop also tries
to save the frame and window configuration.  To disable this, set
'desktop-restore-frames' to 'nil'.  (See that variable's documentation
for some related options that you can customize to fine-tune this
behavior.)

   Information about buffers visiting remote files is not saved by
default.  Customize the variable 'desktop-files-not-to-save' to change
this.

   When the desktop restores the frame and window configuration, it uses
the recorded values of frame parameters, disregarding any settings for
those parameters you have in your init file (*note Init File::).  This
means that frame parameters such as fonts and faces for the restored
frames will come from the desktop file, where they were saved when you
exited your previous Emacs session; any settings for those parameters in
your init file will be ignored.  To disable this, customize the value of
'frameset-filter-alist' to filter out the frame parameters you don't
want to be restored.

   You can save the desktop manually with the command 'M-x
desktop-save'.  You can also enable automatic saving of the desktop when
you exit Emacs, and automatic restoration of the last saved desktop when
Emacs starts: use the Customization buffer (*note Easy Customization::)
to set 'desktop-save-mode' to 't' for future sessions, or add this line
in your init file (*note Init File::):

     (desktop-save-mode 1)

   If you turn on 'desktop-save-mode' in your init file, then when Emacs
starts, it looks for a saved desktop in the current directory.  (More
precisely, it looks in the directories specified by 'desktop-path', and
uses the first desktop it finds.)  Thus, you can have separate saved
desktops in different directories, and the starting directory determines
which one Emacs reloads.  You can save the current desktop and reload
one saved in another directory by typing 'M-x desktop-change-dir'.
Typing 'M-x desktop-revert' reverts to the desktop previously reloaded.

   Specify the option '--no-desktop' on the command line when you don't
want it to reload any saved desktop.  This turns off 'desktop-save-mode'
for the current session.  Starting Emacs with the '--no-init-file'
option also disables desktop reloading, since it bypasses the init file,
where 'desktop-save-mode' is usually turned on.

   By default, all the buffers in the desktop are restored in one go.
However, this may be slow if there are a lot of buffers in the desktop.
You can specify the maximum number of buffers to restore immediately
with the variable 'desktop-restore-eager'; the remaining buffers are
restored lazily, when Emacs is idle.

   Type 'M-x desktop-clear' to empty the Emacs desktop.  This kills all
buffers except for internal ones, and clears the global variables listed
in 'desktop-globals-to-clear'.  If you want this to preserve certain
buffers, customize the variable 'desktop-clear-preserve-buffers-regexp',
whose value is a regular expression matching the names of buffers not to
kill.

   If you want to save minibuffer history from one session to another,
use the 'savehist' library.

   While Emacs runs with 'desktop-save-mode' turned on, it by default
auto-saves the desktop whenever any of it changes.  The variable
'desktop-auto-save-timeout' determines how frequently Emacs checks for
modifications to your desktop.

   The file in which Emacs saves the desktop is locked while the session
runs, to avoid inadvertently overwriting it from another Emacs session.
That lock is normally removed when Emacs exits, but if Emacs or your
system crashes, the lock stays, and when you restart Emacs, it will by
default ask you whether to use the locked desktop file.  You can avoid
the question by customizing the variable 'desktop-load-locked-desktop'
to either 'nil', which means never load the desktop in this case, or
't', which means load the desktop without asking.

   When Emacs starts in daemon mode, it cannot ask you any questions, so
if it finds the desktop file locked, it will not load it, unless
'desktop-load-locked-desktop' is 't'.  Note that restoring the desktop
in daemon mode is somewhat problematic for other reasons: e.g., the
daemon cannot use GUI features, so parameters such as frame position,
size, and decorations cannot be restored.  For that reason, you may wish
to delay restoring the desktop in daemon mode until the first client
connects, by calling 'desktop-read' in a hook function that you add to
'server-after-make-frame-hook' (*note (elisp)Creating Frames::).

==============================================================================
File: emacs.info,  Node: |Recursive_Edit|,  Next: |Hyperlinking|,  Prev: |Saving_Emacs_Sessions|,  Up: |Top|
==============================================================================

                                                                *Recursive_Edit*

45 Recursive Editing Levels
***========================

A "recursive edit" is a situation in which you are using Emacs commands
to perform arbitrary editing while in the middle of another Emacs
command.  For example, when you type 'C-r' inside of a 'query-replace',
you enter a recursive edit in which you can change the current buffer.
On exiting from the recursive edit, you go back to the 'query-replace'.
*Note Query Replace::.

   "Exiting" the recursive edit means returning to the unfinished
command, which continues execution.  The command to exit is 'C-M-c'
('exit-recursive-edit').

   You can also "abort" the recursive edit.  This is like exiting, but
also quits the unfinished command immediately.  Use the command 'C-]'
('abort-recursive-edit') to do this.  *Note Quitting::.

   The mode line shows you when you are in a recursive edit by
displaying square brackets around the parentheses that always surround
the major and minor mode names.  Every window's mode line shows this in
the same way, since being in a recursive edit is true of Emacs as a
whole rather than any particular window or buffer.

   It is possible to be in recursive edits within recursive edits.  For
example, after typing 'C-r' in a 'query-replace', you may type a command
that enters the debugger.  This begins a recursive editing level for the
debugger, within the recursive editing level for 'C-r'.  Mode lines
display a pair of square brackets for each recursive editing level
currently in progress.

   Exiting the inner recursive edit (such as with the debugger 'c'
command) resumes the command running in the next level up.  When that
command finishes, you can then use 'C-M-c' to exit another recursive
editing level, and so on.  Exiting applies to the innermost level only.
Aborting also gets out of only one level of recursive edit; it returns
immediately to the command level of the previous recursive edit.  If you
wish, you can then abort the next recursive editing level.

   Alternatively, the command 'M-x top-level' aborts all levels of
recursive edits, returning immediately to the top-level command reader.
It also exits the minibuffer, if it is active.

   The text being edited inside the recursive edit need not be the same
text that you were editing at top level.  It depends on what the
recursive edit is for.  If the command that invokes the recursive edit
selects a different buffer first, that is the buffer you will edit
recursively.  In any case, you can switch buffers within the recursive
edit in the normal manner (as long as the buffer-switching keys have not
been rebound).  You could probably do all the rest of your editing
inside the recursive edit, visiting files and all.  But this could have
surprising effects (such as stack overflow) from time to time.  So
remember to exit or abort the recursive edit when you no longer need it.

   In general, we try to minimize the use of recursive editing levels in
GNU Emacs.  This is because they constrain you to go back in a
particular order--from the innermost level toward the top level.  When
possible, we present different activities in separate buffers so that
you can switch between them as you please.  Some commands switch to a
new major mode which provides a command to switch back.  These
approaches give you more flexibility to go back to unfinished tasks in
the order you choose.

==============================================================================
File: emacs.info,  Node: |Hyperlinking|,  Next: |Amusements|,  Prev: |Recursive_Edit|,  Up: |Top|
==============================================================================

                                                                  *Hyperlinking*

46 Hyperlinking and Web Navigation Features
***========================================

The following subsections describe convenience features for handling
URLs and other types of links occurring in Emacs buffer text.

MENU

* |EWW|::                         A web browser in Emacs.
* |Embedded_WebKit_Widgets|::     Embedding browser widgets in Emacs buffers.
* |Browse_URL|::                  Following URLs.
* |Goto_Address_mode|::           Activating URLs.
* |FFAP|::                        Finding files etc. at point.

==============================================================================
File: emacs.info,  Node: |EWW|,  Next: |Embedded_WebKit_Widgets|,  Up: |Hyperlinking|
==============================================================================

                                                                           *EWW*

46.1 Web Browsing with EWW
===-----------------------

"EWW", the Emacs Web Wowser, is a web browser package for Emacs.  It
allows browsing URLs within an Emacs buffer.  The command 'M-x eww' will
open a URL or search the web.  You can open a file using the command
'M-x eww-open-file'.  You can use EWW as the web browser for
'browse-url', *note Browse-URL::.  For full details, *note EWW:
(eww)Top.

==============================================================================
File: emacs.info,  Node: |Embedded_WebKit_Widgets|,  Next: |Browse_URL|,  Prev: |EWW|,  Up: |Hyperlinking|
==============================================================================

                                                       *Embedded_WebKit_Widgets*

46.2 Embedded WebKit Widgets
===-------------------------

If Emacs was compiled with the appropriate support packages, it is able
to show browser widgets in its buffers.  The command 'M-x
xwidget-webkit-browse-url' asks for a URL to display in the browser
widget.  The URL normally defaults to the URL at or before point, but if
there is an active region (*note Mark::), the default URL comes from the
region instead, after removing any whitespace from it.  The command then
creates a new buffer with the embedded browser showing the specified
URL.  The buffer is put in the Xwidget-WebKit mode (similar to Image
mode, *note Image Mode::), which provides one-key commands for scrolling
the widget, changing its size, and reloading it.  Type 'C-h b' in that
buffer to see the key bindings.

==============================================================================
File: emacs.info,  Node: |Browse_URL|,  Next: |Goto_Address_mode|,  Prev: |Embedded_WebKit_Widgets|,  Up: |Hyperlinking|
==============================================================================

                                                                    *Browse_URL*

46.3 Following URLs
===----------------

'M-x browse-url <RET> URL <RET>'
     Load a URL into a Web browser.

   The Browse-URL package allows you to easily follow URLs from within
Emacs.  Most URLs are followed by invoking a web browser; 'mailto:' URLs
are followed by invoking the 'compose-mail' Emacs command to send mail
to the specified address (*note Sending Mail::).

   The command 'M-x browse-url' prompts for a URL, and follows it.  If
point is located near a plausible URL, that URL is offered as the
default.  The Browse-URL package also provides other commands which you
might like to bind to keys, such as 'browse-url-at-point' and
'browse-url-at-mouse'.

   You can customize Browse-URL's behavior via various options in the
'browse-url' Customize group.  In particular, the option
'browse-url-mailto-function' lets you define how to follow 'mailto:'
URLs, while 'browse-url-browser-function' lets you define how to follow
other types of URLs.  For more information, view the package commentary
by typing 'C-h P browse-url <RET>'.

==============================================================================
File: emacs.info,  Node: |Goto_Address_mode|,  Next: |FFAP|,  Prev: |Browse_URL|,  Up: |Hyperlinking|
==============================================================================

                                                             *Goto_Address_mode*

46.4 Activating URLs
===-----------------

'M-x goto-address-mode'
     Activate URLs and e-mail addresses in the current buffer.

   You can make Emacs mark out URLs specially in the current buffer, by
typing 'M-x goto-address-mode'.  When this buffer-local minor mode is
enabled, it finds all the URLs in the buffer, highlights them, and turns
them into clickable buttons.  You can follow the URL by typing 'C-c
<RET>' ('goto-address-at-point') while point is on its text; or by
clicking with 'mouse-2', or by clicking 'mouse-1' quickly (*note Mouse
References::).  Following a URL is done by calling 'browse-url' as a
subroutine (*note Browse-URL::).

   It can be useful to add 'goto-address-mode' to mode hooks and hooks
for displaying an incoming message (e.g., 'rmail-show-message-hook' for
Rmail).  This is not needed for Gnus or MH-E, which have similar
features of their own.

==============================================================================
File: emacs.info,  Node: |FFAP|,  Prev: |Goto_Address_mode|,  Up: |Hyperlinking|
==============================================================================

                                                                          *FFAP*

46.5 Finding Files and URLs at Point
===---------------------------------

The FFAP package replaces certain key bindings for finding files, such
as 'C-x C-f', with commands that provide more sensible defaults.  These
commands behave like the ordinary ones when given a prefix argument.
Otherwise, they get the default file name or URL from the text around
point.  If what is found in the buffer has the form of a URL rather than
a file name, the commands use 'browse-url' to view it (*note
Browse-URL::).

   This feature is useful for following references in mail or news
buffers, 'README' files, 'MANIFEST' files, and so on.  For more
information, view the package commentary by typing 'C-h P ffap <RET>'.

   To enable FFAP, type 'M-x ffap-bindings'.  This makes the following
key bindings, and also installs hooks for additional FFAP functionality
in Rmail, Gnus and VM article buffers.

'C-x C-f FILENAME <RET>'
     Find FILENAME, guessing a default from text around point
     ('find-file-at-point').
'C-x C-r FILENAME <RET>'
     'ffap-read-only', analogous to 'find-file-read-only'.
'C-x C-v FILENAME <RET>'
     'ffap-alternate-file', analogous to 'find-alternate-file'.
'C-x d DIRECTORY <RET>'
     Start Dired on DIRECTORY, defaulting to the directory at point
     ('dired-at-point').
'C-x C-d DIRECTORY <RET>'
     'ffap-list-directory', analogous to 'list-directory'.
'C-x 4 f FILENAME <RET>'
     'ffap-other-window', analogous to 'find-file-other-window'.
'C-x 4 r FILENAME <RET>'
     'ffap-read-only-other-window', analogous to
     'find-file-read-only-other-window'.
'C-x 4 d DIRECTORY <RET>'
     'ffap-dired-other-window', like 'dired-other-window'.
'C-x 5 f FILENAME <RET>'
     'ffap-other-frame', analogous to 'find-file-other-frame'.
'C-x 5 r FILENAME <RET>'
     'ffap-read-only-other-frame', analogous to
     'find-file-read-only-other-frame'.
'C-x 5 d DIRECTORY <RET>'
     'ffap-dired-other-frame', analogous to 'dired-other-frame'.
'M-x ffap-next'
     Search buffer for next file name or URL, then find that file or
     URL.
'S-mouse-3'
     'ffap-at-mouse' finds the file guessed from text around the
     position of a mouse click.
'C-S-mouse-3'
     Display a menu of files and URLs mentioned in current buffer, then
     find the one you select ('ffap-menu').

==============================================================================
File: emacs.info,  Node: |Amusements|,  Next: |Packages|,  Prev: |Hyperlinking|,  Up: |Top|
==============================================================================

                                                                    *Amusements*

47 Games and Other Amusements
***==========================

The 'animate' package makes text dance (e.g., 'M-x
animate-birthday-present').

   'M-x blackbox', 'M-x mpuz' and 'M-x 5x5' are puzzles.  'blackbox'
challenges you to determine the location of objects inside a box by
tomography.  'mpuz' displays a multiplication puzzle with letters
standing for digits in a code that you must guess--to guess a value, type
a letter and then the digit you think it stands for.  The aim of '5x5'
is to fill in all the squares.

   'M-x bubbles' is a game in which the object is to remove as many
bubbles as you can in the smallest number of moves.

   'M-x decipher' helps you to cryptanalyze a buffer which is encrypted
in a simple monoalphabetic substitution cipher.

   'M-x dissociated-press' scrambles the text in the current Emacs
buffer, word by word or character by character, writing its output to a
buffer named 'Dissociation'.  A positive argument tells it to operate
character by character, and specifies the number of overlap characters.
A negative argument tells it to operate word by word, and specifies the
number of overlap words.  Dissociated Press produces results fairly like
those of a Markov chain, but is however, an independent, ignoriginal
invention; it techniquitously copies several consecutive characters from
the sample text between random jumps, unlike a Markov chain which would
jump randomly after each word or character.  Keep dissociwords out of
your documentation, if you want it to be well userenced and properbose.

   'M-x dunnet' runs a text-based adventure game.

   If you want a little more personal involvement, try 'M-x gomoku',
which plays the game Go Moku with you.

   If you are a little bit bored, you can try 'M-x hanoi'.  If you are
considerably bored, give it a numeric argument.  If you are very, very
bored, try an argument of 9.  Sit back and watch.

   'M-x life' runs Conway's Game of Life cellular automaton.

   'M-x morse-region' converts the text in the region to Morse code;
'M-x unmorse-region' converts it back.  'M-x nato-region' converts the
text in the region to NATO phonetic alphabet; 'M-x denato-region'
converts it back.

   'M-x pong', 'M-x snake' and 'M-x tetris' are implementations of the
well-known Pong, Snake and Tetris games.

   'M-x solitaire' plays a game of solitaire in which you jump pegs
across other pegs.

   The command 'M-x zone' plays games with the display when Emacs is
idle.

   "Real Programmers" deploy 'M-x butterfly', which uses butterflies to
flip a bit on the drive platter, see <https://xkcd.com/378>.

   Finally, if you find yourself frustrated, try describing your
problems to the famous psychotherapist Eliza.  Just do 'M-x doctor'.
End each input by typing <RET> twice.

==============================================================================
File: emacs.info,  Node: |Packages|,  Next: |Customization|,  Prev: |Amusements|,  Up: |Top|
==============================================================================

                                                                      *Packages*

48 Emacs Lisp Packages
***===================

Emacs is extended by implementing additional features in "packages",
which are Emacs Lisp libraries.  These could be written by you or
provided by someone else.  If you want to install such a package so it
is available in your future Emacs session, you need to compile it and
put it in a directory where Emacs looks for Lisp libraries.  *Note Lisp
Libraries::, for more details about this manual installation method.
Many packages provide installation and usage instructions in the large
commentary near the beginning of the Lisp file; you can use those
instructions for installing and fine-tuning your use of the package.

   Packages can also be provided by "package archives", which are large
collections of Emacs Lisp packages.  Each package is a separate Emacs
Lisp program, sometimes including other components such as an Info
manual.  Emacs includes a facility that lets you easily download and
install packages from such archives.  The rest of this chapter describes
this facility.

   To list the packages available for installation from package
archives, type 'M-x list-packages <RET>'.  It brings up a buffer named
'Packages' with a list of all packages.  You can install or uninstall
packages via this buffer.  *Note Package Menu::.

   The command 'C-h P' ('describe-package') prompts for the name of a
package, and displays a help buffer describing the attributes of the
package and the features that it implements.

   By default, Emacs downloads packages from a package archive
maintained by the Emacs developers and hosted by the GNU project.
Optionally, you can also download packages from archives maintained by
third parties.  *Note Package Installation::.

   For information about turning an Emacs Lisp program into an
installable package, *Note (elisp)Packaging::.

MENU

* |Package_Menu|::         Buffer for viewing and managing packages.
* |Package_Statuses|::     Which statuses a package can have.
* |Package_Installation|:: Options for package installation.
* |Package_Files|::        Where packages are installed.

==============================================================================
File: emacs.info,  Node: |Package_Menu|,  Next: |Package_Statuses|,  Up: |Packages|
==============================================================================

                                                                  *Package_Menu*

48.1 The Package Menu Buffer
===-------------------------

The command 'M-x list-packages' brings up the "package menu".  This is a
buffer listing all the packages that Emacs knows about, one on each
line, with the following information:

   * The package name (e.g., 'auctex').

   * The package's version number (e.g., '11.86').

   * The package's status--normally one of 'available' (can be downloaded
     from the package archive), 'installed', or 'built-in' (included in
     Emacs by default).  *Note Package Statuses::.

   * Which package archive this package is from, if you have more than
     one package archive enabled.

   * A short description of the package.

The 'list-packages' command accesses the network, to retrieve the list
of available packages from package archive servers.  If the network is
unavailable, it falls back on the most recently retrieved list.

   The following commands are available in the package menu:

'h'
     Print a short message summarizing how to use the package menu
     ('package-menu-quick-help').

'?'
'<RET>'
     Display a help buffer for the package on the current line
     ('package-menu-describe-package'), similar to the help window
     displayed by the 'C-h P' command (*note Packages::).

'i'
     Mark the package on the current line for installation
     ('package-menu-mark-install').  If the package status is
     'available', this adds an 'I' character to the start of the line;
     typing 'x' (see below) will download and install the package.

'd'
     Mark the package on the current line for deletion
     ('package-menu-mark-delete').  If the package status is
     'installed', this adds a 'D' character to the start of the line;
     typing 'x' (see below) will delete the package.  *Note Package
     Files::, for information about what package deletion entails.

'~'
     Mark all obsolete packages for deletion
     ('package-menu-mark-obsolete-for-deletion').  This marks for
     deletion all the packages whose status is 'obsolete'.

'u'
'<DEL>'
     Remove any installation or deletion mark previously added to the
     current line by an 'i' or 'd' command ('package-menu-mark-unmark').

'U'
     Mark all package with a newer available version for upgrading
     ('package-menu-mark-upgrades').  This places an installation mark
     on the new available versions, and a deletion mark on the old
     installed versions (marked with status 'obsolete').

'x'
     Download and install all packages marked with 'i', and their
     dependencies; also, delete all packages marked with 'd'
     ('package-menu-execute').  This also removes the marks.

'g'
'r'
     Refresh the package list ('revert-buffer').  This fetches the list
     of available packages from the package archive again, and
     redisplays the package list.

'/ k'
     Filter the package list by keyword
     ('package-menu-filter-by-keyword').  This prompts for a keyword
     (e.g., 'games'), then shows only the packages that relate to that
     keyword.

'/ n'
     Filter the package list by name ('package-menu-filter-by-name').
     This prompts for a string, then shows only the packages whose names
     match a regexp with that value.

'/ /'
     Clear filter currently applied to the package list
     ('package-menu-clear-filter').

'H'
     Hide packages whose names match a regexp
     ('package-menu-hide-package').  This prompts for a regexp, and then
     hides the packages with matching names.  The default value of the
     regexp will hide only the package whose name is at point, so just
     pressing <RET> to the prompt will hide the current package.

'('
     Toggle visibility of old versions of packages and also of versions
     from lower-priority archives ('package-menu-toggle-hiding').

For example, you can install a package by typing 'i' on the line listing
that package, followed by 'x'.

==============================================================================
File: emacs.info,  Node: |Package_Statuses|,  Next: |Package_Installation|,  Prev: |Package_Menu|,  Up: |Packages|
==============================================================================

                                                              *Package_Statuses*

48.2 Package Statuses
===------------------

A package can have one of the following statuses:

'available'
     The package is not installed, but can be downloaded and installed
     from the package archive.

'avail-obso'
     The package is available for installation, but a newer version is
     also available.  Packages with this status are hidden by default.

'built-in'
     The package is included in Emacs by default.  It cannot be deleted
     through the package menu, and is not considered for upgrading.

'dependency'
     The package was installed automatically to satisfy a dependency of
     another package.

'disabled'
     The package has been disabled using the 'package-load-list'
     variable.

'external'
     The package is not built-in and not from the directory specified by
     'package-user-dir' (*note Package Files::).  External packages are
     treated much like 'built-in' packages and cannot be deleted.

'held'
     The package is held, *Note Package Installation::.

'incompat'
     The package cannot be installed for some reason, for example
     because it depends on uninstallable packages.

'installed'
     The package is installed.

'new'
     Equivalent to 'available', except that the package became newly
     available on the package archive after your last invocation of 'M-x
     list-packages'.

'obsolete'
     The package is an outdated installed version; in addition to this
     version of the package, a newer version is also installed.

==============================================================================
File: emacs.info,  Node: |Package_Installation|,  Next: |Package_Files|,  Prev: |Package_Statuses|,  Up: |Packages|
==============================================================================

                                                          *Package_Installation*

48.3 Package Installation
===----------------------

Packages are most conveniently installed using the package menu (*note
Package Menu::), but you can also use the command 'M-x package-install'.
This prompts for the name of a package with the 'available' status, then
downloads and installs it.

   A package may "require" certain other packages to be installed,
because it relies on functionality provided by them.  When Emacs
installs such a package, it also automatically downloads and installs
any required package that is not already installed.  (If a required
package is somehow unavailable, Emacs signals an error and stops
installation.)  A package's requirements list is shown in its help
buffer.

   By default, packages are downloaded from a single package archive
maintained by the Emacs developers.  This is controlled by the variable
'package-archives', whose value is a list of package archives known to
Emacs.  Each list element must have the form '(ID . LOCATION)', where ID
is the name of a package archive and LOCATION is the URL or name of the
package archive directory.  You can alter this list if you wish to use
third party package archives--but do so at your own risk, and use only
third parties that you think you can trust!

   The maintainers of package archives can increase the trust that you
can have in their packages by "signing" them.  They generate a
private/public pair of cryptographic keys, and use the private key to
create a "signature file" for each package.  With the public key, you
can use the signature files to verify the package creator and make sure
the package has not been tampered with.  Signature verification uses the
GnuPG package (https://www.gnupg.org/) via the EasyPG interface (*note
EasyPG: (epa)Top.).  A valid signature is not a cast-iron guarantee that
a package is not malicious, so you should still exercise caution.
Package archives should provide instructions on how you can obtain their
public key.  One way is to download the key from a server such as
<https://pgp.mit.edu/>.  Use 'M-x package-import-keyring' to import the
key into Emacs.  Emacs stores package keys in the directory specified by
the variable 'package-gnupghome-dir', by default in the 'gnupg'
subdirectory of 'package-user-dir', which causes Emacs to invoke GnuPG
with the option '--homedir' when verifying signatures.  If
'package-gnupghome-dir' is 'nil', GnuPG's option '--homedir' is omitted.
The public key for the GNU package archive is distributed with Emacs, in
the 'etc/package-keyring.gpg'.  Emacs uses it automatically.

   If the user option 'package-check-signature' is non-'nil', Emacs
attempts to verify signatures when you install packages.  If the option
has the value 'allow-unsigned', and a usable OpenPGP configuration is
found, signed packages will be checked, but you can still install a
package that is not signed.  If you use some archives that do not sign
their packages, you can add them to the list
'package-unsigned-archives'.  (If the value is 'allow-unsigned' and no
usable OpenPGP is found, this option is treated as if its value was
'nil'.)  If the value is 't', at least one signature must be valid; if
the value is 'all', all of them must be valid.

   For more information on cryptographic keys and signing, *note GnuPG:
(gnupg)Top.  Emacs comes with an interface to GNU Privacy Guard, *note
EasyPG: (epa)Top.

   If you have more than one package archive enabled, and some of them
offer different versions of the same package, you may find the option
'package-pinned-packages' useful.  You can add package/archive pairs to
this list, to ensure that the specified package is only ever downloaded
from the specified archive.

   Another option that is useful when you have several package archives
enabled is 'package-archive-priorities'.  It specifies the priority of
each archive (higher numbers specify higher priority archives).  By
default, archives have the priority of zero, unless specified otherwise
by this option's value.  Packages from lower-priority archives will not
be shown in the menu, if the same package is available from a
higher-priority archive.  (This is controlled by the value of
'package-menu-hide-low-priority'.)

   Once a package is downloaded and installed, it is made available to
the current Emacs session.  Making a package available adds its
directory to 'load-path' and loads its autoloads.  The effect of a
package's autoloads varies from package to package.  Most packages just
make some new commands available, while others have more wide-ranging
effects on the Emacs session.  For such information, consult the
package's help buffer.

   After a package is installed, it is automatically made available by
Emacs in all subsequent sessions.  This happens at startup, before
processing the init file but after processing the early init file (*note
Early Init File::).  As an exception, Emacs does not make packages
available at startup if invoked with the '-q' or '--no-init-file'
options (*note Initial Options::).

   To keep Emacs from automatically making packages available at
startup, change the variable 'package-enable-at-startup' to 'nil'.  You
must do this in the early init file, as the variable is read before
loading the regular init file.  Currently this variable cannot be set
via Customize.

   If you have set 'package-enable-at-startup' to 'nil', you can still
make packages available either during or after startup.  To make
installed packages available during startup, call the function
'package-activate-all' in your init file.  To make installed packages
available after startup, invoke the command 'M-: (package-activate-all)
RET'.

   For finer control over which packages are made available at startup,
you can use the variable 'package-load-list'.  Its value should be a
list.  A list element of the form '(NAME VERSION)' tells Emacs to make
available version VERSION of the package named NAME.  Here, VERSION
should be a version string (corresponding to a specific version of the
package), or 't' (which means to make available any installed version),
or 'nil' (which means no version; this disables the package, preventing
it from being made available).  A list element can also be the symbol
'all', which means to make available the latest installed version of any
package not named by the other list elements.  The default value is just
''(all)'.

   For example, if you set 'package-load-list' to
''((muse "3.20") all)', then Emacs only makes available version 3.20 of
the 'muse' package, plus any installed version of packages other than
'muse'.  Any other version of 'muse' that happens to be installed will
be ignored.  The 'muse' package will be listed in the package menu with
the 'held' status.

==============================================================================
File: emacs.info,  Node: |Package_Files|,  Prev: |Package_Installation|,  Up: |Packages|
==============================================================================

                                                                 *Package_Files*

48.4 Package Files and Directory Layout
===------------------------------------

Each package is downloaded from the package archive in the form of a
single "package file"--either an Emacs Lisp source file, or a tar file
containing multiple Emacs Lisp source and other files.  Package files
are automatically retrieved, processed, and disposed of by the Emacs
commands that install packages.  Normally, you will not need to deal
directly with them, unless you are making a package (*note
(elisp)Packaging::).  Should you ever need to install a package directly
from a package file, use the command 'M-x package-install-file'.

   Once installed, the contents of a package are placed in a
subdirectory of '~/.emacs.d/elpa/' (you can change the name of that
directory by changing the variable 'package-user-dir').  The package
subdirectory is named 'NAME-VERSION', where NAME is the package name and
VERSION is its version string.

   In addition to 'package-user-dir', Emacs looks for installed packages
in the directories listed in 'package-directory-list'.  These
directories are meant for system administrators to make Emacs packages
available system-wide; Emacs itself never installs packages there.  The
package subdirectories for 'package-directory-list' are laid out in the
same way as in 'package-user-dir'.

   Deleting a package (*note Package Menu::) involves deleting the
corresponding package subdirectory.  This only works for packages
installed in 'package-user-dir'; if told to act on a package in a
system-wide package directory, the deletion command signals an error.

==============================================================================
File: emacs.info,  Node: |Customization|,  Next: |Quitting|,  Prev: |Packages|,  Up: |Top|
==============================================================================

                                                                 *Customization*

49 Customization
***=============

This chapter describes some simple methods to customize the behavior of
Emacs.

   Apart from the methods described here, see *note X Resources:: for
information about using X resources to customize Emacs, and see *note
Keyboard Macros:: for information about recording and replaying keyboard
macros.  Making more far-reaching and open-ended changes involves
writing Emacs Lisp code; see *note Emacs Lisp: (elisp)Top.

MENU

* |Easy_Customization|::  Convenient way to browse and change settings.
* |Variables|::           Many Emacs commands examine Emacs variables
                          to decide what to do; by setting variables,
                          you can control their functioning.
* |Key_Bindings|::        The keymaps say what command each key runs.
                          By changing them, you can redefine keys.
* |Init_File|::           How to write common customizations in the
                          initialization file.
* |Authentication|::      Keeping persistent authentication information.

==============================================================================
File: emacs.info,  Node: |Easy_Customization|,  Next: |Variables|,  Up: |Customization|
==============================================================================

                                                            *Easy_Customization*

49.1 Easy Customization Interface
===------------------------------

Emacs has many "settings" which you can change.  Most settings are
"customizable variables" (*note Variables::), which are also called
"user options".  There is a huge number of customizable variables,
controlling numerous aspects of Emacs behavior; the variables documented
in this manual are listed in *note Variable Index::.  A separate class
of settings are the "faces", which determine the fonts, colors, and
other attributes of text (*note Faces::).

   To browse and alter settings (both variables and faces), type 'M-x
customize'.  This creates a "customization buffer", which lets you
navigate through a logically organized list of settings, edit and set
their values, and save them permanently.

MENU

* |Customization_Groups|::     How settings are classified.
* |Browsing_Custom|::          Browsing and searching for settings.
* |Changing_a_Variable|::      How to edit an option's value and set the option.
* |Saving_Customizations|::    Saving customizations for future Emacs sessions.
* |Face_Customization|::       How to edit the attributes of a face.
* |Specific_Customization|::   Customizing specific settings or groups.
* |Custom_Themes|::            Collections of customization settings.
* |Creating_Custom_Themes|::   How to create a new custom theme.

==============================================================================
File: emacs.info,  Node: |Customization_Groups|,  Next: |Browsing_Custom|,  Up: Easy Customization
==============================================================================

                                                          *Customization_Groups*

49.1.1 Customization Groups
---------------------------

Customization settings are organized into "customization groups".  These
groups are collected into bigger groups, all the way up to a master
group called 'Emacs'.

   'M-x customize' creates a customization buffer that shows the
top-level 'Emacs' group.  It looks like this, in part:

     For help using this buffer, see [Easy Customization] in the [Emacs manual].

     ________________________________________ [ Search ]

      Operate on all settings in this buffer:
      [ Revert... ] [ Apply ] [ Apply and Save ]


     Emacs group: Customization of the One True Editor.
           [State]: visible group members are all at standard values.
           See also [Manual].

     [Editing]      Basic text editing facilities.
     [Convenience]  Convenience features for faster editing.

     ...MORE SECOND-LEVEL GROUPS...

The main part of this buffer shows the 'Emacs' customization group,
which contains several other groups ('Editing', 'Convenience', etc.).
The contents of those groups are not listed here, only one line of
documentation each.

   The "state" of the group indicates whether setting in that group has
been edited, set, or saved.  *Note Changing a Variable::.

   Most of the customization buffer is read-only, but it includes some
"editable fields" that you can edit.  For example, at the top of the
customization buffer is an editable field for searching for settings
(*note Browsing Custom::).  There are also "buttons" and "links", which
you can activate by either clicking with the mouse, or moving point
there and typing '<RET>'.  For example, the group names like '[Editing]'
are links; activating one of these links brings up the customization
buffer for that group.

   In the customization buffer, you can type '<TAB>' ('widget-forward')
to move forward to the next button or editable field.  'S-<TAB>'
('widget-backward') moves back to the previous button or editable field.

==============================================================================
File: emacs.info,  Node: |Browsing_Custom|,  Next: |Changing_a_Variable|,  Prev: |Customization_Groups|,  Up: |Easy_Customization|
==============================================================================

                                                               *Browsing_Custom*

49.1.2 Browsing and Searching for Settings
------------------------------------------

From the top-level customization buffer created by 'M-x customize', you
can follow the links to the subgroups of the 'Emacs' customization
group.  These subgroups may contain settings for you to customize; they
may also contain further subgroups, dealing with yet more specialized
subsystems of Emacs.  As you navigate the hierarchy of customization
groups, you should find some settings that you want to customize.

   If you are interested in customizing a particular setting or
customization group, you can go straight there with the commands 'M-x
customize-option', 'M-x customize-face', or 'M-x customize-group'.
*Note Specific Customization::.

   If you don't know exactly what groups or settings you want to
customize, you can search for them using the editable search field at
the top of each customization buffer.  Here, you can type in a search
term--either one or more words separated by spaces, or a regular
expression (*note Regexps::).  Then type '<RET>' in the field, or
activate the 'Search' button next to it, to switch to a customization
buffer containing groups and settings that match those terms.  Note,
however, that this feature only finds groups and settings that are
loaded in the current Emacs session.

   If you don't want customization buffers to show the search field,
change the variable 'custom-search-field' to 'nil'.

   The command 'M-x customize-apropos' is similar to using the search
field, except that it reads the search term(s) using the minibuffer.
*Note Specific Customization::.

   'M-x customize-browse' is another way to browse the available
settings.  This command creates a special customization buffer, which
shows only the names of groups and settings, in a structured layout.
You can show the contents of a group, in the same buffer, by invoking
the '[+]' button next to the group name.  When the group contents are
shown, the button changes to '[-]'; invoking that hides the group
contents again.  Each group or setting in this buffer has a link which
says '[Group]', '[Option]' or '[Face]'.  Invoking this link creates an
ordinary customization buffer showing just that group, option, or face;
this is the way to change settings that you find with 'M-x
customize-browse'.

==============================================================================
File: emacs.info,  Node: |Changing_a_Variable|,  Next: |Saving_Customizations|,  Prev: |Browsing_Custom|,  Up: |Easy_Customization|
==============================================================================

                                                           *Changing_a_Variable*

49.1.3 Changing a Variable
--------------------------

Here is an example of what a variable, or user option, looks like in the
customization buffer:

     [Hide] Kill Ring Max: 60
        [State]: STANDARD.
        Maximum length of kill ring before oldest elements are thrown away.

   The first line shows that the variable is named 'kill-ring-max',
formatted as 'Kill Ring Max' for easier viewing.  Its value is '60'.
The button labeled '[Hide]', if activated, hides the variable's value
and state; this is useful to avoid cluttering up the customization
buffer with very long values (for this reason, variables that have very
long values may start out hidden).  If you use the '[Hide]' button, it
changes to '[Show Value]', which you can activate to reveal the value
and state.  On a graphical display, the '[Hide]' and '[Show Value]'
buttons are replaced with graphical triangles pointing downwards and
rightwards respectively.

   The line after the variable name indicates the "customization state"
of the variable: in this example, 'STANDARD' means you have not changed
the variable, so its value is the default one.  The '[State]' button
gives a menu of operations for customizing the variable.

   Below the customization state is the documentation for the variable.
This is the same documentation that would be shown by the 'C-h v'
command (*note Examining::).  If the documentation is more than one line
long, only one line may be shown.  If so, that line ends with a '[More]'
button; activate this to see the full documentation.

   To enter a new value for 'Kill Ring Max', just move point to the
value and edit it.  For example, type 'M-d' to delete the '60' and type
in another number.  As you begin to alter the text, the '[State]' line
will change:

     [State]: EDITED, shown value does not take effect until you
              set or save it.

Editing the value does not make it take effect right away.  To do that,
you must "set" the variable by activating the '[State]' button and
choosing 'Set for Current Session'.  Then the variable's state becomes:

     [State]: SET for current session only.

You don't have to worry about specifying a value that is not valid; the
'Set for Current Session' operation checks for validity and will not
install an unacceptable value.

   While editing certain kinds of values, such as file names, directory
names, and Emacs command names, you can perform completion with 'C-M-i'
('widget-complete'), or the equivalent keys 'M-<TAB>' or '<ESC> <TAB>'.
This behaves much like minibuffer completion (*note Completion::).

   Typing '<RET>' on an editable value field moves point forward to the
next field or button, like '<TAB>'.  You can thus type '<RET>' when you
are finished editing a field, to move on to the next button or field.
To insert a newline within an editable field, use 'C-o' or 'C-q C-j'.

   For some variables, there is only a fixed set of legitimate values,
and you are not allowed to edit the value directly.  Instead, a '[Value
Menu]' button appears before the value; activating this button presents
a choice of values.  For a boolean "on or off" value, the button says
'[Toggle]', and flips the value.  After using the '[Value Menu]' or
'[Toggle]' button, you must again set the variable to make the chosen
value take effect.

   Some variables have values with complex structure.  For example, the
value of 'minibuffer-frame-alist' is an association list.  Here is how
it appears in the customization buffer:

     [Hide] Minibuffer Frame Alist:
     [INS] [DEL] Parameter: width
                 Value: 80
     [INS] [DEL] Parameter: height
                 Value: 2
     [INS]
        [ State ]: STANDARD.
        Alist of parameters for the initial minibuffer frame. [Hide]
        [...more lines of documentation...]

In this case, each association in the list consists of two items, one
labeled 'Parameter' and one labeled 'Value'; both are editable fields.
You can delete an association from the list with the '[DEL]' button next
to it.  To add an association, use the '[INS]' button at the position
where you want to insert it; the very last '[INS]' button inserts at the
end of the list.

   When you set a variable, the new value takes effect only in the
current Emacs session.  To "save" the value for future sessions, use the
'[State]' button and select the 'Save for Future Sessions' operation.
*Note Saving Customizations::.

   You can also restore the variable to its standard value by using the
'[State]' button and selecting the 'Erase Customization' operation.
There are actually four reset operations:

'Undo Edits'
     If you have modified but not yet set the variable, this restores
     the text in the customization buffer to match the actual value.

'Revert This Session's Customizations'
     This restores the value of the variable to the last saved value, if
     there was one.  Otherwise it restores the standard value.  It
     updates the text accordingly.

'Erase Customization'
     This sets the variable to its standard value.  Any saved value that
     you have is also eliminated.

'Set to Backup Value'
     This sets the variable to a previous value that was set in the
     customization buffer in this session.  If you customize a variable
     and then reset it, which discards the customized value, you can get
     the discarded value back again with this operation.

   Sometimes it is useful to record a comment about a specific
customization.  Use the 'Add Comment' item from the '[State]' menu to
create a field for entering the comment.

   Near the top of the customization buffer are two lines of buttons:

      Operate on all settings in this buffer:
      [Revert...] [Apply] [Apply and Save]

The '[Revert...]' button drops a menu with the first 3 reset operations
described above.  The '[Apply]' button applies the settings for the
current session.  The '[Apply and Save]' button applies the settings and
saves them for future sessions; this button does not appear if Emacs was
started with the '-q' or '-Q' option (*note Initial Options::).

   The command 'C-c C-c' ('Custom-set') is equivalent to using the '[Set
for Current Session]' button.  The command 'C-x C-s' ('Custom-save') is
like using the '[Save for Future Sessions]' button.

   The '[Exit]' button switches out of the customization buffer, and
buries the buffer at the bottom of the buffer list.  To make it kill the
customization buffer instead, change the variable
'custom-buffer-done-kill' to 't'.

==============================================================================
File: emacs.info,  Node: |Saving_Customizations|,  Next: |Face_Customization|,  Prev: |Changing_a_Variable|,  Up: |Easy_Customization|
==============================================================================

                                                         *Saving_Customizations*

49.1.4 Saving Customizations
----------------------------

In the customization buffer, you can "save" a customization setting by
choosing the 'Save for Future Sessions' choice from its '[State]'
button.  The 'C-x C-s' ('Custom-save') command, or the '[Apply and
Save]' button at the top of the customization buffer, saves all
applicable settings in the buffer.

   Saving works by writing code to a file, usually your initialization
file (*note Init File::).  Future Emacs sessions automatically read this
file at startup, which sets up the customizations again.

   You can choose to save customizations somewhere other than your
initialization file.  To make this work, you must add a couple of lines
of code to your initialization file, to set the variable 'custom-file'
to the name of the desired file, and to load that file.  For example:

     (setq custom-file "~/.config/emacs-custom.el")
     (load custom-file)

   You can even specify different customization files for different
Emacs versions, like this:

     (cond ((< emacs-major-version 22)
            ;; Emacs 21 customization.
            (setq custom-file "~/.config/custom-21.el"))
           ((and (= emacs-major-version 22)
                 (< emacs-minor-version 3))
            ;; Emacs 22 customization, before version 22.3.
            (setq custom-file "~/.config/custom-22.el"))
           (t
            ;; Emacs version 22.3 or later.
            (setq custom-file "~/.config/emacs-custom.el")))

     (load custom-file)

   If Emacs was invoked with the '-q' or '--no-init-file' options (*note
Initial Options::), it will not let you save your customizations in your
initialization file.  This is because saving customizations from such a
session would wipe out all the other customizations you might have on
your initialization file.

   Please note that any customizations you have not chosen to save for
future sessions will be lost when you terminate Emacs.  If you'd like to
be prompted about unsaved customizations at termination time, add the
following to your initialization file:

     (add-hook 'kill-emacs-query-functions
               'custom-prompt-customize-unsaved-options)

==============================================================================
File: emacs.info,  Node: |Face_Customization|,  Next: |Specific_Customization|,  Prev: |Saving_Customizations|,  Up: |Easy_Customization|
==============================================================================

                                                            *Face_Customization*

49.1.5 Customizing Faces
------------------------

You can customize faces (*note Faces::), which determine how Emacs
displays different types of text.  Customization groups can contain both
variables and faces.

   For example, in programming language modes, source code comments are
shown with 'font-lock-comment-face' (*note Font Lock::).  In a
customization buffer, that face appears like this, after you click on
the '[Show All Attributes]' link:

     [Hide] Font Lock Comment Face:[sample]
        [State] : STANDARD.
        Font Lock mode face used to highlight comments.
        [ ] Font Family: --
        [ ] Font Foundry: --
        [ ] Width: --
        [ ] Height: --
        [ ] Weight: --
        [ ] Slant: --
        [ ] Underline: --
        [ ] Overline: --
        [ ] Strike-through: --
        [ ] Box around text: --
        [ ] Inverse-video: --
        [X] Foreground: Firebrick     [Choose]  (sample)
        [ ] Background: --
        [ ] Stipple: --
        [ ] Inherit: --
        [Hide Unused Attributes]

The first three lines show the name, '[State]' button, and documentation
for the face.  Below that is a list of "face attributes".  In front of
each attribute is a checkbox.  A filled checkbox, '[X]', means that the
face specifies a value for this attribute; an empty checkbox, '[ ]',
means that the face does not specify any special value for the
attribute.  You can activate a checkbox to specify or unspecify its
attribute.

   A face does not have to specify every single attribute; in fact, most
faces only specify a few attributes.  In the above example,
'font-lock-comment-face' only specifies the foreground color.  Any
unspecified attribute is taken from the special face named 'default',
whose attributes are all specified.  The 'default' face is the face used
to display any text that does not have an explicitly-assigned face;
furthermore, its background color attribute serves as the background
color of the frame.

   The '[Hide Unused Attributes]' button, at the end of the attribute
list, hides the unspecified attributes of the face.  When attributes are
being hidden, the button changes to '[Show All Attributes]', which
reveals the entire attribute list.  The customization buffer may start
out with unspecified attributes hidden, to avoid cluttering the
interface.

   When an attribute is specified, you can change its value in the usual
ways.

   Foreground and background colors can be specified using either color
names or RGB triplets (*note Colors::).  You can also use the '[Choose]'
button to switch to a list of color names; select a color with '<RET>'
in that buffer to put the color name in the value field.

   Setting, saving and resetting a face work like the same operations
for variables (*note Changing a Variable::).

   A face can specify different appearances for different types of
displays.  For example, a face can make text red on a color display, but
use a bold font on a monochrome display.  To specify multiple
appearances for a face, select 'For All Kinds of Displays' in the menu
you get from invoking '[State]'.

==============================================================================
File: emacs.info,  Node: |Specific_Customization|,  Next: |Custom_Themes|,  Prev: |Face_Customization|,  Up: |Easy_Customization|
==============================================================================

                                                        *Specific_Customization*

49.1.6 Customizing Specific Items
---------------------------------

'M-x customize-option <RET> OPTION <RET>'
'M-x customize-variable <RET> OPTION <RET>'
     Set up a customization buffer for just one user option, OPTION.

'M-x customize-face <RET> FACE <RET>'
     Set up a customization buffer for just one face, FACE.

'M-x customize-group <RET> GROUP <RET>'
     Set up a customization buffer for just one group, GROUP.

'M-x customize-apropos <RET> REGEXP <RET>'
     Set up a customization buffer for all the settings and groups that
     match REGEXP.

'M-x customize-changed <RET> VERSION <RET>'
     Set up a customization buffer with all the settings and groups
     whose meaning has changed since Emacs version VERSION.

'M-x customize-changed-options <RET> VERSION <RET>'
     Set up a customization buffer with all the options whose meaning or
     default values have changed since Emacs version VERSION.

'M-x customize-saved'
     Set up a customization buffer containing all settings that you have
     saved with customization buffers.

'M-x customize-unsaved'
     Set up a customization buffer containing all settings that you have
     set but not saved.

   If you want to customize a particular user option, type 'M-x
customize-option'.  This reads the variable name, and sets up the
customization buffer with just that one user option.  When entering the
variable name into the minibuffer, completion is available, but only for
the names of variables that have been loaded into Emacs.

   Likewise, you can customize a specific face using 'M-x
customize-face'.  You can set up a customization buffer for a specific
customization group using 'M-x customize-group'.

   'M-x customize-apropos' prompts for a search term--either one or more
words separated by spaces, or a regular expression--and sets up a
customization buffer for all _loaded_ settings and groups with matching
names.  This is like using the search field at the top of the
customization buffer (*note Customization Groups::).

   When you upgrade to a new Emacs version, you might want to consider
customizing new settings, and settings whose meanings or default values
have changed.  To do this, use 'M-x customize-changed' and specify a
previous Emacs version number using the minibuffer.  It creates a
customization buffer which shows all the settings and groups whose
definitions have been changed since the specified version, loading them
if necessary.

   If you change settings and then decide the change was a mistake, you
can use two commands to revisit your changes.  Use 'M-x customize-saved'
to customize settings that you have saved.  Use 'M-x customize-unsaved'
to customize settings that you have set but not saved.

==============================================================================
File: emacs.info,  Node: |Custom_Themes|,  Next: |Creating_Custom_Themes|,  Prev: |Specific_Customization|,  Up: |Easy_Customization|
==============================================================================

                                                                 *Custom_Themes*

49.1.7 Custom Themes
--------------------

"Custom themes" are collections of settings that can be enabled or
disabled as a unit.  You can use Custom themes to switch easily between
various collections of settings, and to transfer such collections from
one computer to another.

   A Custom theme is stored as an Emacs Lisp source file.  If the name
of the Custom theme is NAME, the theme file is named 'NAME-theme.el'.
*Note Creating Custom Themes::, for the format of a theme file and how
to make one.

   Type 'M-x customize-themes' to switch to a buffer named '*Custom
Themes*', which lists the Custom themes that Emacs knows about.  By
default, Emacs looks for theme files in two locations: the directory
specified by the variable 'custom-theme-directory' (which defaults to
'~/.emacs.d/'), and a directory named 'etc/themes' in your Emacs
installation (see the variable 'data-directory').  The latter contains
several Custom themes distributed with Emacs that customize Emacs's
faces to fit various color schemes.  (Note, however, that Custom themes
need not be restricted to this purpose; they can be used to customize
variables too.)

   If you want Emacs to look for Custom themes in some other directory,
add the directory to the list variable 'custom-theme-load-path'.  Its
default value is '(custom-theme-directory t)'; here, the symbol
'custom-theme-directory' has the special meaning of the value of the
variable 'custom-theme-directory', while 't' stands for the built-in
theme directory 'etc/themes'.  The themes listed in the '*Custom
Themes*' buffer are those found in the directories specified by
'custom-theme-load-path'.

   In the '*Custom Themes*' buffer, you can activate the checkbox next
to a Custom theme to enable or disable the theme for the current Emacs
session.  When a Custom theme is enabled, all of its settings (variables
and faces) take effect in the Emacs session.  To apply the choice of
theme(s) to future Emacs sessions, type 'C-x C-s' ('custom-theme-save')
or use the '[Save Theme Settings]' button.

   When you first enable a Custom theme, Emacs displays the contents of
the theme file and asks if you really want to load it.  Because loading
a Custom theme can execute arbitrary Lisp code, you should only say yes
if you know that the theme is safe; in that case, Emacs offers to
remember in the future that the theme is safe (this is done by saving
the theme file's SHA-256 hash to the variable 'custom-safe-themes'; if
you want to treat all themes as safe, change its value to 't').  Themes
that come with Emacs (in the 'etc/themes' directory) are exempt from
this check, and are always considered safe.

   Setting or saving Custom themes actually works by customizing the
variable 'custom-enabled-themes'.  The value of this variable is a list
of Custom theme names (as Lisp symbols, e.g., 'tango').  Instead of
using the '*Custom Themes*' buffer to set 'custom-enabled-themes', you
can customize the variable using the usual customization interface,
e.g., with 'M-x customize-option'.  Note that Custom themes are not
allowed to set 'custom-enabled-themes' themselves.

   Any customizations that you make through the customization buffer
take precedence over theme settings.  This lets you easily override
individual theme settings that you disagree with.  If settings from two
different themes overlap, the theme occurring earlier in
'custom-enabled-themes' takes precedence.  In the customization buffer,
if a setting has been changed from its default by a Custom theme, its
'State' display shows 'THEMED' instead of 'STANDARD'.

   You can enable a specific Custom theme in the current Emacs session
by typing 'M-x load-theme'.  This prompts for a theme name, loads the
theme from the theme file, and enables it.  If a theme file has been
loaded before, you can enable the theme without loading its file by
typing 'M-x enable-theme'.  To disable a Custom theme, type 'M-x
disable-theme'.

   To see a description of a Custom theme, type '?' on its line in the
'*Custom Themes*' buffer; or type 'M-x describe-theme' anywhere in Emacs
and enter the theme name.

==============================================================================
File: emacs.info,  Node: |Creating_Custom_Themes|,  Prev: |Custom_Themes|,  Up: |Easy_Customization|
==============================================================================

                                                        *Creating_Custom_Themes*

49.1.8 Creating Custom Themes
-----------------------------

You can define a Custom theme using an interface similar to the
customization buffer, by typing 'M-x customize-create-theme'.  This
switches to a buffer named '*Custom Theme*'.  It also offers to insert
some common Emacs faces into the theme (a convenience, since Custom
themes are often used to customize faces).  If you answer no, the theme
will initially contain no settings.

   Near the top of the '*Custom Theme*' buffer, there are editable
fields where you can enter the theme's name and description.  The name
can be anything except 'user'.  The description is the one that will be
shown when you invoke 'M-x describe-theme' for the theme.  Its first
line should be a brief one-sentence summary; in the buffer made by 'M-x
customize-themes', this sentence is displayed next to the theme name.

   To add a new setting to the theme, use the '[Insert Additional Face]'
or '[Insert Additional Variable]' buttons.  Each button reads a face or
variable name using the minibuffer, with completion, and inserts a
customization entry for the face or variable.  You can edit the variable
values or face attributes in the same way as in a normal customization
buffer.  To remove a face or variable from the theme, uncheck the
checkbox next to its name.

   After specifying the Custom theme's faces and variables, type 'C-x
C-s' ('custom-theme-write') or use the buffer's '[Save Theme]' button.
This saves the theme file, named 'NAME-theme.el' where NAME is the theme
name, in the directory named by 'custom-theme-directory'.

   From the '*Custom Theme*' buffer, you can view and edit an existing
Custom theme by activating the '[Visit Theme]' button and specifying the
theme name.  You can also add the settings of another theme into the
buffer, using the '[Merge Theme]' button.  You can import your non-theme
settings into a Custom theme by using the '[Merge Theme]' button and
specifying the special theme named 'user'.

   A theme file is simply an Emacs Lisp source file, and loading the
Custom theme works by loading the Lisp file.  Therefore, you can edit a
theme file directly instead of using the '*Custom Theme*' buffer.  *Note
(elisp)Custom Themes::, for details.

==============================================================================
File: emacs.info,  Node: |Variables|,  Next: |Key_Bindings|,  Prev: |Easy_Customization|,  Up: |Customization|
==============================================================================

                                                                     *Variables*

49.2 Variables
===-----------

A "variable" is a Lisp symbol which has a value.  The symbol's name is
also called the "variable name".  A variable name can contain any
characters that can appear in a file, but most variable names consist of
ordinary words separated by hyphens.

   The name of the variable serves as a compact description of its role.
Most variables also have a "documentation string", which describes what
the variable's purpose is, what kind of value it should have, and how
the value will be used.  You can view this documentation using the help
command 'C-h v' ('describe-variable').  *Note Examining::.

   Emacs uses many Lisp variables for internal record keeping, but the
most interesting variables for a non-programmer user are those meant for
users to change--these are called "customizable variables" or "user
options" (*note Easy Customization::).  In the following sections, we
will describe other aspects of Emacs variables, such as how to set them
outside Customize.

   Emacs Lisp allows any variable (with a few exceptions) to have any
kind of value.  However, many variables are meaningful only if assigned
values of a certain type.  For example, only numbers are meaningful
values for 'kill-ring-max', which specifies the maximum length of the
kill ring (*note Earlier Kills::); if you give 'kill-ring-max' a string
value, commands such as 'C-y' ('yank') will signal an error.  On the
other hand, some variables don't care about type; for instance, if a
variable has one effect for 'nil' values and another effect for
non-'nil' values, then any value that is not the symbol 'nil' induces
the second effect, regardless of its type (by convention, we usually use
the value 't'--a symbol which stands for "true"--to specify a non-'nil'
value).  If you set a variable using the customization buffer, you need
not worry about giving it an invalid type: the customization buffer
usually only allows you to enter meaningful values.  When in doubt, use
'C-h v' ('describe-variable') to check the variable's documentation
string to see what kind of value it expects (*note Examining::).

MENU

* |Examining|::           Examining or setting one variable's value.
* |Hooks|::               Hook variables let you specify programs for parts
                          of Emacs to run on particular occasions.
* |Locals|::              Per-buffer values of variables.
* |File_Variables|::      How files can specify variable values.
* |Directory_Variables|:: How variable values can be specified by directory.
* |Connection_Variables|:: Variables which are valid for buffers with a
                           remote default directory.

==============================================================================
File: emacs.info,  Node: |Examining|,  Next: |Hooks|,  Up: |Variables|
==============================================================================

                                                                     *Examining*

49.2.1 Examining and Setting Variables
--------------------------------------

'C-h v VAR <RET>'
     Display the value and documentation of variable VAR
     ('describe-variable').

'M-x set-variable <RET> VAR <RET> VALUE <RET>'
     Change the value of variable VAR to VALUE.

   To examine the value of a variable, use 'C-h v'
('describe-variable').  This reads a variable name using the minibuffer,
with completion, and displays both the value and the documentation of
the variable.  For example,

     C-h v fill-column <RET>

displays something like this:

     fill-column is a variable defined in 'C source code'.
     Its value is 70

       Automatically becomes buffer-local when set.
       This variable is safe as a file local variable if its value
       satisfies the predicate 'integerp'.
       Probably introduced at or before Emacs version 18.

     Documentation:
     Column beyond which automatic line-wrapping should happen.
     Interactively, you can set the buffer local value using C-x f.

     You can customize this variable.

The line that says 'You can customize the variable' indicates that this
variable is a user option.  'C-h v' is not restricted to user options;
it allows non-customizable variables too.

   The most convenient way to set a specific customizable variable is
with 'M-x set-variable'.  This reads the variable name with the
minibuffer (with completion), and then reads a Lisp expression for the
new value using the minibuffer a second time (you can insert the old
value into the minibuffer for editing via 'M-n').  For example,

     M-x set-variable <RET> fill-column <RET> 75 <RET>

sets 'fill-column' to 75.

   'M-x set-variable' is limited to customizable variables, but you can
set any variable with a Lisp expression like this:

     (setq fill-column 75)

To execute such an expression, type 'M-:' ('eval-expression') and enter
the expression in the minibuffer (*note Lisp Eval::).  Alternatively, go
to the 'scratch' buffer, type in the expression, and then type 'C-j'
(*note Lisp Interaction::).

   Setting variables, like all means of customizing Emacs except where
otherwise stated, affects only the current Emacs session.  The only way
to alter the variable in future sessions is to put something in your
initialization file (*note Init File::).

==============================================================================
File: emacs.info,  Node: |Hooks|,  Next: |Locals|,  Prev: |Examining|,  Up: |Variables|
==============================================================================

                                                                         *Hooks*

49.2.2 Hooks
------------

"Hooks" are an important mechanism for customizing Emacs.  A hook is a
Lisp variable which holds a list of functions, to be called on some
well-defined occasion.  (This is called "running the hook".)  The
individual functions in the list are called the "hook functions" of the
hook.  For example, the hook 'kill-emacs-hook' runs just before exiting
Emacs (*note Exiting::).

   Most hooks are "normal hooks".  This means that when Emacs runs the
hook, it calls each hook function in turn, with no arguments.  We have
made an effort to keep most hooks normal, so that you can use them in a
uniform way.  Every variable whose name ends in '-hook' is a normal
hook.

   A few hooks are "abnormal hooks".  Their names end in '-functions',
instead of '-hook' (some old code may also use the deprecated suffix
'-hooks').  What makes these hooks abnormal is the way its functions are
called--perhaps they are given arguments, or perhaps the values they
return are used in some way.  For example,
'find-file-not-found-functions' is abnormal because as soon as one hook
function returns a non-'nil' value, the rest are not called at all
(*note Visiting::).  The documentation of each abnormal hook variable
explains how its functions are used.

   You can set a hook variable with 'setq' like any other Lisp variable,
but the recommended way to add a function to a hook (either normal or
abnormal) is to use 'add-hook', as shown by the following examples.
*Note (elisp)Hooks::, for details.

   Most major modes run one or more "mode hooks" as the last step of
initialization.  Mode hooks are a convenient way to customize the
behavior of individual modes; they are always normal.  For example,
here's how to set up a hook to turn on Auto Fill mode in Text mode and
other modes based on Text mode:

     (add-hook 'text-mode-hook 'auto-fill-mode)

This works by calling 'auto-fill-mode', which enables the minor mode
when no argument is supplied (*note Minor Modes::).  Next, suppose you
don't want Auto Fill mode turned on in LaTeX mode, which is one of the
modes based on Text mode.  You can do this with the following additional
line:

     (add-hook 'latex-mode-hook (lambda () (auto-fill-mode -1)))

Here we have used the special macro 'lambda' to construct an anonymous
function (*note (elisp)Lambda Expressions::), which calls
'auto-fill-mode' with an argument of '-1' to disable the minor mode.
Because LaTeX mode runs 'latex-mode-hook' after running
'text-mode-hook', the result leaves Auto Fill mode disabled.

   Here is a more complex example, showing how to use a hook to
customize the indentation of C code:

     (setq my-c-style
       '((c-comment-only-line-offset . 4)
         (c-cleanup-list . (scope-operator
                            empty-defun-braces
                            defun-close-semi))))

     (add-hook 'c-mode-common-hook
       (lambda () (c-add-style "my-style" my-c-style t)))

   Major mode hooks also apply to other major modes "derived" from the
original mode (*note (elisp)Derived Modes::).  For instance, HTML mode
is derived from Text mode (*note HTML Mode::); when HTML mode is
enabled, it runs 'text-mode-hook' before running 'html-mode-hook'.  This
provides a convenient way to use a single hook to affect several related
modes.  In particular, if you want to apply a hook function to any
programming language mode, add it to 'prog-mode-hook'; Prog mode is a
major mode that does little else than to let other major modes inherit
from it, exactly for this purpose.

   It is best to design your hook functions so that the order in which
they are executed does not matter.  Any dependence on the order is
asking for trouble.  However, the order is predictable: the hook
functions are executed in the order they appear in the hook.

   If you play with adding various different versions of a hook function
by calling 'add-hook' over and over, remember that all the versions you
added will remain in the hook variable together.  You can clear out
individual functions by calling 'remove-hook', or do '(setq
HOOK-VARIABLE nil)' to remove everything.

   If the hook variable is buffer-local, the buffer-local variable will
be used instead of the global variable.  However, if the buffer-local
variable contains the element 't', the global hook variable will be run
as well.

==============================================================================
File: emacs.info,  Node: |Locals|,  Next: |File_Variables|,  Prev: |Hooks|,  Up: |Variables|
==============================================================================

                                                                        *Locals*

49.2.3 Local Variables
----------------------

'M-x make-local-variable <RET> VAR <RET>'
     Make variable VAR have a local value in the current buffer.

'M-x kill-local-variable <RET> VAR <RET>'
     Make variable VAR use its global value in the current buffer.

'M-x make-variable-buffer-local <RET> VAR <RET>'
     Mark variable VAR so that setting it will make it local to the
     buffer that is current at that time.

   Almost any variable can be made "local" to a specific Emacs buffer.
This means that its value in that buffer is independent of its value in
other buffers.  A few variables are always local in every buffer.  Every
other Emacs variable has a "global" value which is in effect in all
buffers that have not made the variable local.

   'M-x make-local-variable' reads the name of a variable and makes it
local to the current buffer.  Changing its value subsequently in this
buffer will not affect others, and changes in its global value will not
affect this buffer.

   'M-x make-variable-buffer-local' marks a variable so it will become
local automatically whenever it is set.  More precisely, once a variable
has been marked in this way, the usual ways of setting the variable
automatically do 'make-local-variable' first.  We call such variables
"per-buffer" variables.  Many variables in Emacs are normally
per-buffer; the variable's document string tells you when this is so.  A
per-buffer variable's global value is normally never effective in any
buffer, but it still has a meaning: it is the initial value of the
variable for each new buffer.

   Major modes (*note Major Modes::) always make variables local to the
buffer before setting the variables.  This is why changing major modes
in one buffer has no effect on other buffers.  Minor modes also work by
setting variables--normally, each minor mode has one controlling variable
which is non-'nil' when the mode is enabled (*note Minor Modes::).  For
many minor modes, the controlling variable is per buffer, and thus
always buffer-local.  Otherwise, you can make it local in a specific
buffer like any other variable.

   A few variables cannot be local to a buffer because they are always
local to each display instead (*note Multiple Displays::).  If you try
to make one of these variables buffer-local, you'll get an error
message.

   'M-x kill-local-variable' makes a specified variable cease to be
local to the current buffer.  The global value of the variable
henceforth is in effect in this buffer.  Setting the major mode kills
all the local variables of the buffer except for a few variables
specially marked as "permanent locals".

   To set the global value of a variable, regardless of whether the
variable has a local value in the current buffer, you can use the Lisp
construct 'setq-default'.  This construct is used just like 'setq', but
it sets variables' global values instead of their local values (if any).
When the current buffer does have a local value, the new global value
may not be visible until you switch to another buffer.  Here is an
example:

     (setq-default fill-column 75)

'setq-default' is the only way to set the global value of a variable
that has been marked with 'make-variable-buffer-local'.

   Lisp programs can use 'default-value' to look at a variable's default
value.  This function takes a symbol as argument and returns its default
value.  The argument is evaluated; usually you must quote it explicitly.
For example, here's how to obtain the default value of 'fill-column':

     (default-value 'fill-column)

==============================================================================
File: emacs.info,  Node: |File_Variables|,  Next: |Directory_Variables|,  Prev: |Locals|,  Up: |Variables|
==============================================================================

                                                                *File_Variables*

49.2.4 Local Variables in Files
-------------------------------

A file can specify local variable values to use when editing the file
with Emacs.  Visiting the file or setting a major mode checks for local
variable specifications; it automatically makes these variables local to
the buffer, and sets them to the values specified in the file.

   File local variables override directory local variables (*note
Directory Variables::), if any are specified for a file's directory.

MENU

* |Specifying_File_Variables|:: Specifying file local variables.
* |Safe_File_Variables|::       Making sure file local variables are safe.

==============================================================================
File: emacs.info,  Node: |Specifying_File_Variables|,  Next: |Safe_File_Variables|,  Up: File Variables
==============================================================================

                                                     *Specifying_File_Variables*

49.2.4.1 Specifying File Variables
...-------------------------------

There are two ways to specify file local variable values: in the first
line, or with a local variables list.  Here's how to specify them in the
first line:

     -*- mode: MODENAME; VAR: VALUE; ... -*-

You can specify any number of variable/value pairs in this way, each
pair with a colon and semicolon.  The special variable/value pair 'mode:
MODENAME;', if present, specifies a major mode.  The VALUEs are used
literally, and not evaluated.

   You can use 'M-x add-file-local-variable-prop-line' instead of adding
entries by hand.  This command prompts for a variable and value, and
adds them to the first line in the appropriate way.  'M-x
delete-file-local-variable-prop-line' prompts for a variable, and
deletes its entry from the line.  The command 'M-x
copy-dir-locals-to-file-locals-prop-line' copies the current
directory-local variables to the first line (*note Directory
Variables::).

   Here is an example first line that specifies Lisp mode and sets two
variables with numeric values:

     ;; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-

Aside from 'mode', other keywords that have special meanings as file
variables are 'coding', 'unibyte', and 'eval'.  These are described
below.

   In shell scripts, the first line is used to identify the script
interpreter, so you cannot put any local variables there.  To
accommodate this, Emacs looks for local variable specifications in the
_second_ line if the first line specifies an interpreter.  The same is
true for man pages which start with the magic string ''\"' to specify a
list of troff preprocessors (not all do, however).

   Apart from using a '-*-' line, you can define file local variables
using a "local variables list" near the end of the file.  The start of
the local variables list should be no more than 3000 characters from the
end of the file, and must be on the last page if the file is divided
into pages.

   If a file has both a local variables list and a '-*-' line, Emacs
processes _everything_ in the '-*-' line first, and _everything_ in the
local variables list afterward.  The exception to this is a major mode
specification.  Emacs applies this first, wherever it appears, since
most major modes kill all local variables as part of their
initialization.

   A local variables list starts with a line containing the string
'Local Variables:', and ends with a line containing the string 'End:'.
In between come the variable names and values, one set per line, like
this:

     /* Local Variables:  */
     /* mode: c           */
     /* comment-column: 0 */
     /* End:              */

In this example, each line starts with the prefix '/*' and ends with the
suffix '*/'.  Emacs recognizes the prefix and suffix by finding them
surrounding the magic string 'Local Variables:', on the first line of
the list; it then automatically discards them from the other lines of
the list.  The usual reason for using a prefix and/or suffix is to embed
the local variables list in a comment, so it won't confuse other
programs that the file is intended for.  The example above is for the C
programming language, where comments start with '/*' and end with '*/'.

   If some unrelated text might look to Emacs as a local variables list,
you can countermand that by inserting a form-feed character (a page
delimiter, *note Pages::) after that text.  Emacs only looks for
file-local variables in the last page of a file, after the last page
delimiter.

   Instead of typing in the local variables list directly, you can use
the command 'M-x add-file-local-variable'.  This prompts for a variable
and value, and adds them to the list, adding the 'Local Variables:'
string and start and end markers as necessary.  The command 'M-x
delete-file-local-variable' deletes a variable from the list.  'M-x
copy-dir-locals-to-file-locals' copies directory-local variables to the
list (*note Directory Variables::).

   As with the '-*-' line, the variables in a local variables list are
used literally, and are not evaluated first.  If you want to split a
long string value across multiple lines of the file, you can use
backslash-newline, which is ignored in Lisp string constants; you should
put the prefix and suffix on each line, even lines that start or end
within the string, as they will be stripped off when processing the
list.  Here is an example:

     # Local Variables:
     # compile-command: "cc foo.c -Dfoo=bar -Dhack=whatever \
     #   -Dmumble=blaah"
     # End:

   Some names have special meanings in a local variables list:

   * 'mode' enables the specified major mode.

   * 'eval' evaluates the specified Lisp expression (the value returned
     by that expression is ignored).

   * 'coding' specifies the coding system for character code conversion
     of this file.  *Note Coding Systems::.

   * 'unibyte' says to load or compile a file of Emacs Lisp in unibyte
   vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
