     mode, if the value is 't'.  *Note Disabling Multibyte Characters:
     (elisp)Disabling Multibyte.

These four keywords are not really variables; setting them in any other
context has no special meaning.

   Do not use the 'mode' keyword for minor modes.  To enable or disable
a minor mode in a local variables list, use the 'eval' keyword with a
Lisp expression that runs the mode command (*note Minor Modes::).  For
example, the following local variables list enables ElDoc mode (*note
Lisp Doc::) by calling 'eldoc-mode' with no argument (calling it with an
argument of 1 would do the same), and disables Font Lock mode (*note
Font Lock::) by calling 'font-lock-mode' with an argument of -1.

     ;; Local Variables:
     ;; eval: (eldoc-mode)
     ;; eval: (font-lock-mode -1)
     ;; End:

Note, however, that it is often a mistake to specify minor modes this
way.  Minor modes represent individual user preferences, and it may be
inappropriate to impose your preferences on another user who might edit
the file.  If you wish to automatically enable or disable a minor mode
in a situation-dependent way, it is often better to do it in a major
mode hook (*note Hooks::).

   Use the command 'M-x normal-mode' to reset the local variables and
major mode of a buffer according to the file name and contents,
including the local variables list if any.  *Note Choosing Modes::.

==============================================================================
File: emacs.info,  Node: |Safe_File_Variables|,  Prev: |Specifying_File_Variables|,  Up: |File_Variables|
==============================================================================

                                                           *Safe_File_Variables*

49.2.4.2 Safety of File Variables
.....----------------------------

File-local variables can be dangerous; when you visit someone else's
file, there's no telling what its local variables list could do to your
Emacs.  Improper values of the 'eval' "variable", and other variables
such as 'load-path', could execute Lisp code you didn't intend to run.

   Therefore, whenever Emacs encounters file local variable values that
are not known to be safe, it displays the file's entire local variables
list, and asks you for confirmation before setting them.  You can type
'y' or <SPC> to put the local variables list into effect, or 'n' to
ignore it.  When Emacs is run in batch mode (*note Initial Options::),
it can't really ask you, so it assumes the answer 'n'.

   Emacs normally recognizes certain variable/value pairs as safe.  For
instance, it is safe to give 'comment-column' or 'fill-column' any
integer value.  If a file specifies only known-safe variable/value
pairs, Emacs does not ask for confirmation before setting them.
Otherwise, you can tell Emacs to record all the variable/value pairs in
this file as safe, by typing '!' at the confirmation prompt.  When Emacs
encounters these variable/value pairs subsequently, in the same file or
others, it will assume they are safe.

   Some variables, such as 'load-path', are considered particularly
"risky": there is seldom any reason to specify them as local variables,
and changing them can be dangerous.  If a file contains only risky local
variables, Emacs neither offers nor accepts '!' as input at the
confirmation prompt.  If some of the local variables in a file are
risky, and some are only potentially unsafe, you can enter '!' at the
prompt.  It applies all the variables, but only marks the non-risky ones
as safe for the future.  If you really want to record safe values for
risky variables, do it directly by customizing
'safe-local-variable-values' (*note Easy Customization::).

   The variable 'enable-local-variables' allows you to change the way
Emacs processes local variables.  Its default value is 't', which
specifies the behavior described above.  If it is 'nil', Emacs simply
ignores all file local variables.  ':safe' means use only the safe
values and ignore the rest.  Any other value says to query you about
each file that has local variables, without trying to determine whether
the values are known to be safe.

   The variable 'enable-local-eval' controls whether Emacs processes
'eval' variables.  The three possibilities for the variable's value are
't', 'nil', and anything else, just as for 'enable-local-variables'.
The default is 'maybe', which is neither 't' nor 'nil', so normally
Emacs does ask for confirmation about processing 'eval' variables.

   As an exception, Emacs never asks for confirmation to evaluate any
'eval' form if that form occurs within the variable
'safe-local-eval-forms'.

==============================================================================
File: emacs.info,  Node: |Directory_Variables|,  Next: |Connection_Variables|,  Prev: |File_Variables|,  Up: |Variables|
==============================================================================

                                                           *Directory_Variables*

49.2.5 Per-Directory Local Variables
------------------------------------

Sometimes, you may wish to define the same set of local variables to all
the files in a certain directory and its subdirectories, such as the
directory tree of a large software project.  This can be accomplished
with "directory-local variables".  File local variables override
directory local variables, so if some of the files in a directory need
specialized settings, you can specify the settings for the majority of
the directory's files in directory variables, and then define file local
variables in a few files which need the general settings overridden.

   The usual way to define directory-local variables is to put a file
named '.dir-locals.el'(1) in a directory.  Whenever Emacs visits any
file in that directory or any of its subdirectories, it will apply the
directory-local variables specified in '.dir-locals.el', as though they
had been defined as file-local variables for that file (*note File
Variables::).  Emacs searches for '.dir-locals.el' starting in the
directory of the visited file, and moving up the directory tree.  To
avoid slowdown, this search is skipped for remote files.  If needed, the
search can be extended for remote files by setting the variable
'enable-remote-dir-locals' to 't'.

   You can also use '.dir-locals-2.el'; if found, Emacs loads it in
addition to '.dir-locals.el'.  This is useful when '.dir-locals.el' is
under version control in a shared repository and can't be used for
personal customizations.

   The '.dir-locals.el' file should hold a specially-constructed list,
which maps major mode names (symbols) to alists (*note
(elisp)Association Lists::).  Each alist entry consists of a variable
name and the directory-local value to assign to that variable, when the
specified major mode is enabled.  Instead of a mode name, you can
specify 'nil', which means that the alist applies to any mode; or you
can specify a subdirectory (a string), in which case the alist applies
to all files in that subdirectory.

   Here's an example of a '.dir-locals.el' file:

     ((nil . ((indent-tabs-mode . t)
              (fill-column . 80)
              (mode . auto-fill)))
      (c-mode . ((c-file-style . "BSD")
                 (subdirs . nil)))
      ("src/imported"
       . ((nil . ((change-log-default-name
                   . "ChangeLog.local"))))))

This sets the variables 'indent-tabs-mode' and 'fill-column' for any
file in the directory tree, and the indentation style for any C source
file.  The special 'mode' element specifies the minor mode to be
enabled.  So '(mode . auto-fill)' specifies that the minor mode
'auto-fill-mode' needs to be enabled.  The special 'subdirs' element is
not a variable, but a special keyword which indicates that the C mode
settings are only to be applied in the current directory, not in any
subdirectories.  Finally, it specifies a different 'ChangeLog' file name
for any file in the 'src/imported' subdirectory.

   If the '.dir-locals.el' file contains multiple different values for a
variable using different mode names or directories, the values will be
applied in an order such that the values for more specific modes take
priority over more generic modes.  Values specified under a directory
have even more priority.  For example:

     ((nil . ((fill-column . 40)))
      (c-mode . ((fill-column . 50)))
      (prog-mode . ((fill-column . 60)))
      ("narrow-files" . ((nil . ((fill-column . 20))))))

   Files that use 'c-mode' also match 'prog-mode' because the former
inherits from the latter.  The value used for 'fill-column' in C files
will however be '50' because the mode name is more specific than
'prog-mode'.  Files using other modes inheriting from 'prog-mode' will
use '60'.  Any file under the directory 'narrow-files' will use the
value '20' even if they use 'c-mode' because directory entries have
priority over mode entries.

   You can specify the variables 'mode', 'eval', and 'unibyte' in your
'.dir-locals.el', and they have the same meanings as they would have in
file local variables.  'coding' cannot be specified as a directory local
variable.  *Note File Variables::.

   Instead of editing the '.dir-locals.el' file by hand, you can use the
command 'M-x add-dir-local-variable'.  This prompts for a mode or
subdirectory, and for variable and value, and adds the entry defining
the directory-local variable.  'M-x delete-dir-local-variable' deletes
an entry.  'M-x copy-file-locals-to-dir-locals' copies the file-local
variables in the current file into '.dir-locals.el'.

   Another method of specifying directory-local variables is to define a
group of variables/value pairs in a "directory class", using the
'dir-locals-set-class-variables' function; then, tell Emacs which
directories correspond to the class by using the
'dir-locals-set-directory-class' function.  These function calls
normally go in your initialization file (*note Init File::).  This
method is useful when you can't put '.dir-locals.el' in a directory for
some reason.  For example, you could apply settings to an unwritable
directory this way:

     (dir-locals-set-class-variables 'unwritable-directory
        '((nil . ((some-useful-setting . value)))))

     (dir-locals-set-directory-class
        "/usr/include/" 'unwritable-directory)

   If a variable has both a directory-local and file-local value
specified, the file-local value takes effect.  Unsafe directory-local
variables are handled in the same way as unsafe file-local variables
(*note Safe File Variables::).

   Directory-local variables also take effect in certain buffers that do
not visit a file directly but perform work within a directory, such as
Dired buffers (*note Dired::).

   ---------- Footnotes ----------

   (1) On MS-DOS, the name of this file should be '_dir-locals.el', due
to limitations of the DOS filesystems.  If the filesystem is limited to
8+3 file names, the name of the file will be truncated by the OS to
'_dir-loc.el'.

==============================================================================
File: emacs.info,  Node: |Connection_Variables|,  Prev: |Directory_Variables|,  Up: |Variables|
==============================================================================

                                                          *Connection_Variables*

49.2.6 Per-Connection Local Variables
-------------------------------------

Most of the variables reflect the situation on the local machine.
Often, they must use a different value when you operate in buffers with
a remote default directory.  Think about the shell to be applied when
calling 'shell' - it might be '/bin/bash' on your local machine, and
'/bin/ksh' on a remote machine.

   This can be accomplished with "connection-local variables".
Directory and file local variables override connection-local variables.
Unsafe connection-local variables are handled in the same way as unsafe
file-local variables (*note Safe File Variables::).

   Connection-local variables are declared as a group of variables/value
pairs in a "profile", using the 'connection-local-set-profile-variables'
function.  The function 'connection-local-set-profiles' activates
profiles for a given criteria, identifying a remote machine:

     (connection-local-set-profile-variables 'remote-ksh
        '((shell-file-name . "/bin/ksh")
          (shell-command-switch . "-c")))

     (connection-local-set-profile-variables 'remote-bash
        '((shell-file-name . "/bin/bash")
          (shell-command-switch . "-c")))

     (connection-local-set-profiles
        '(:application tramp :machine "remotemachine") 'remote-ksh)

   This code declares two different profiles, 'remote-ksh' and
'remote-bash'.  The profile 'remote-ksh' is applied to all buffers which
have a remote default directory matching the regexp '"remotemachine' as
host name.  Such a criteria can also discriminate for the properties
':protocol' (this is the Tramp method) or ':user' (a remote user name).
The 'nil' criteria matches all buffers with a remote default directory.

==============================================================================
File: emacs.info,  Node: |Key_Bindings|,  Next: |Init_File|,  Prev: |Variables|,  Up: |Customization|
==============================================================================

                                                                  *Key_Bindings*

49.3 Customizing Key Bindings
=====------------------------

This section describes "key bindings", which map keys to commands, and
"keymaps", which record key bindings.  It also explains how to customize
key bindings, which is done by editing your init file (*note Init
Rebinding::).

   Since most modes define their own key bindings, activating a mode
might override your custom key bindings.  A small number of keys are
reserved for user-defined bindings, and should not be used by modes, so
key bindings using those keys are safer in this regard.  The reserved
key sequences are those consisting of 'C-c' followed by a letter (either
upper or lower case), and function keys <F5> through <F9> without
modifiers (*note Modifier Keys::).

MENU

* |Keymaps|::             Generalities.  The global keymap.
* |Prefix_Keymaps|::      Keymaps for prefix keys.
* |Local_Keymaps|::       Major and minor modes have their own keymaps.
* |Minibuffer_Maps|::     The minibuffer uses its own local keymaps.
* |Rebinding|::           How to redefine one key's meaning conveniently.
* |Init_Rebinding|::      Rebinding keys with your initialization file.
* |Modifier_Keys|::       Using modifier keys.
* |Function_Keys|::       Rebinding terminal function keys.
* |Named_ASCII_Chars|::   Distinguishing <TAB> from 'C-i', and so on.
* |Mouse_Buttons|::       Rebinding mouse buttons in Emacs.
* |Disabling|::           Disabling a command means confirmation is required
                          before it can be executed.  This is done to protect
                          beginners from surprises.

==============================================================================
File: emacs.info,  Node: |Keymaps|,  Next: |Prefix_Keymaps|,  Up: |Key_Bindings|
==============================================================================

                                                                       *Keymaps*

49.3.1 Keymaps
--------------

As described in *note Commands::, each Emacs command is a Lisp function
whose definition provides for interactive use.  Like every Lisp
function, a command has a function name, which usually consists of
lower-case letters and hyphens.

   A "key sequence" ("key", for short) is a sequence of "input events"
that have a meaning as a unit.  Input events include characters,
function keys, and mouse buttons--all the inputs that you can send to the
computer.  A key sequence gets its meaning from its "binding", which
says what command it runs.

   The bindings between key sequences and command functions are recorded
in data structures called "keymaps".  Emacs has many of these, each used
on particular occasions.

   The "global" keymap is the most important keymap because it is always
in effect.  The global keymap defines keys for Fundamental mode (*note
Major Modes::); most of these definitions are common to most or all
major modes.  Each major or minor mode can have its own keymap which
overrides the global definitions of some keys.

   For example, a self-inserting character such as 'g' is self-inserting
because the global keymap binds it to the command 'self-insert-command'.
The standard Emacs editing characters such as 'C-a' also get their
standard meanings from the global keymap.  Commands to rebind keys, such
as 'M-x global-set-key', work by storing the new binding in the proper
place in the global map (*note Rebinding::).  To view the current key
bindings, use the 'C-h b' command.

   Most modern keyboards have function keys as well as character keys.
Function keys send input events just as character keys do, and keymaps
can have bindings for them.  Key sequences can mix function keys and
characters.  For example, if your keyboard has a <Home> function key,
Emacs can recognize key sequences like 'C-x <Home>'.  You can even mix
mouse events with keyboard events, such as 'S-down-mouse-1'.

   On text terminals, typing a function key actually sends the computer
a sequence of characters; the precise details of the sequence depend on
the function key and on the terminal type.  (Often the sequence starts
with '<ESC> ['.)  If Emacs understands your terminal type properly, it
automatically handles such sequences as single input events.

==============================================================================
File: emacs.info,  Node: |Prefix_Keymaps|,  Next: |Local_Keymaps|,  Prev: |Keymaps|,  Up: |Key_Bindings|
==============================================================================

                                                                *Prefix_Keymaps*

49.3.2 Prefix Keymaps
---------------------

Internally, Emacs records only single events in each keymap.
Interpreting a key sequence of multiple events involves a chain of
keymaps: the first keymap gives a definition for the first event, which
is another keymap, which is used to look up the second event in the
sequence, and so on.  Thus, a prefix key such as 'C-x' or <ESC> has its
own keymap, which holds the definition for the event that immediately
follows that prefix.

   The definition of a prefix key is usually the keymap to use for
looking up the following event.  The definition can also be a Lisp
symbol whose function definition is the following keymap; the effect is
the same, but it provides a command name for the prefix key that can be
used as a description of what the prefix key is for.  Thus, the binding
of 'C-x' is the symbol 'Control-X-prefix', whose function definition is
the keymap for 'C-x' commands.  The definitions of 'C-c', 'C-x', 'C-h',
and <ESC> as prefix keys appear in the global map, so these prefix keys
are always available.

   Aside from ordinary prefix keys, there is a fictitious "prefix key"
which represents the menu bar; see *note (elisp)Menu Bar::, for special
information about menu bar key bindings.  Mouse button events that
invoke pop-up menus are also prefix keys; see *note (elisp)Menu
Keymaps::, for more details.

   Some prefix keymaps are stored in variables with names:

   * 'ctl-x-map' is the variable name for the map used for characters
     that follow 'C-x'.
   * 'help-map' is for characters that follow 'C-h'.
   * 'esc-map' is for characters that follow <ESC>.  Thus, all Meta
     characters are actually defined by this map.
   * 'ctl-x-4-map' is for characters that follow 'C-x 4'.
   * 'mode-specific-map' is for characters that follow 'C-c'.

==============================================================================
File: emacs.info,  Node: |Local_Keymaps|,  Next: |Minibuffer_Maps|,  Prev: |Prefix_Keymaps|,  Up: |Key_Bindings|
==============================================================================

                                                                 *Local_Keymaps*

49.3.3 Local Keymaps
--------------------

So far, we have explained the ins and outs of the global map.  Major
modes customize Emacs by providing their own key bindings in "local
keymaps".  For example, C mode overrides <TAB> to make it indent the
current line for C code.  Minor modes can also have local keymaps;
whenever a minor mode is in effect, the definitions in its keymap
override both the major mode's local keymap and the global keymap.  In
addition, portions of text in the buffer can specify their own keymaps,
which override all other keymaps.

   A local keymap can redefine a key as a prefix key by defining it as a
prefix keymap.  If the key is also defined globally as a prefix, its
local and global definitions (both keymaps) effectively combine: both
definitions are used to look up the event that follows the prefix key.
For example, if a local keymap defines 'C-c' as a prefix keymap, and
that keymap defines 'C-z' as a command, this provides a local meaning
for 'C-c C-z'.  This does not affect other sequences that start with
'C-c'; if those sequences don't have their own local bindings, their
global bindings remain in effect.

   Another way to think of this is that Emacs handles a multi-event key
sequence by looking in several keymaps, one by one, for a binding of the
whole key sequence.  First it checks the minor mode keymaps for minor
modes that are enabled, then it checks the major mode's keymap, and then
it checks the global keymap.  This is not precisely how key lookup
works, but it's good enough for understanding the results in ordinary
circumstances.

==============================================================================
File: emacs.info,  Node: |Minibuffer_Maps|,  Next: |Rebinding|,  Prev: |Local_Keymaps|,  Up: |Key_Bindings|
==============================================================================

                                                               *Minibuffer_Maps*

49.3.4 Minibuffer Keymaps
-------------------------

The minibuffer has its own set of local keymaps; they contain various
completion and exit commands.

   * 'minibuffer-local-map' is used for ordinary input (no completion).
   * 'minibuffer-local-ns-map' is similar, except that <SPC> exits just
     like <RET>.
   * 'minibuffer-local-completion-map' is for permissive completion.
   * 'minibuffer-local-must-match-map' is for strict completion and for
     cautious completion.
   * 'minibuffer-local-filename-completion-map' and
     'minibuffer-local-filename-must-match-map' are like the two
     previous ones, but they are specifically for file name completion.
     They do not bind <SPC>.

==============================================================================
File: emacs.info,  Node: |Rebinding|,  Next: |Init_Rebinding|,  Prev: |Minibuffer_Maps|,  Up: |Key_Bindings|
==============================================================================

                                                                     *Rebinding*

49.3.5 Changing Key Bindings Interactively
------------------------------------------

The way to redefine an Emacs key is to change its entry in a keymap.
You can change the global keymap, in which case the change is effective
in all major modes (except those that have their own overriding local
bindings for the same key).  Or you can change a local keymap, which
affects all buffers using the same major mode.

   In this section, we describe how to rebind keys for the present Emacs
session.  *Note Init Rebinding::, for a description of how to make key
rebindings affect future Emacs sessions.

'M-x global-set-key <RET> KEY CMD <RET>'
     Define KEY globally to run CMD.
'M-x local-set-key <RET> KEY CMD <RET>'
     Define KEY locally (in the major mode now in effect) to run CMD.
'M-x global-unset-key <RET> KEY'
     Make KEY undefined in the global map.
'M-x local-unset-key <RET> KEY'
     Make KEY undefined locally (in the major mode now in effect).

   For example, the following binds 'C-z' to the 'shell' command (*note
Interactive Shell::), replacing the normal global definition of 'C-z':

     M-x global-set-key <RET> C-z shell <RET>

The 'global-set-key' command reads the command name after the key.
After you press the key, a message like this appears so that you can
confirm that you are binding the key you want:

     Set key C-z to command:

   You can redefine function keys and mouse events in the same way; just
type the function key or click the mouse when it's time to specify the
key to rebind.

   You can rebind a key that contains more than one event in the same
way.  Emacs keeps reading the key to rebind until it is a complete key
(that is, not a prefix key).  Thus, if you type 'C-f' for KEY, that's
the end; it enters the minibuffer immediately to read CMD.  But if you
type 'C-x', since that's a prefix, it reads another character; if that
is '4', another prefix character, it reads one more character, and so
on.  For example,

     M-x global-set-key <RET> C-x 4 $ spell-other-window <RET>

redefines 'C-x 4 $' to run the (fictitious) command
'spell-other-window'.

   You can remove the global definition of a key with
'global-unset-key'.  This makes the key "undefined"; if you type it,
Emacs will just beep.  Similarly, 'local-unset-key' makes a key
undefined in the current major mode keymap, which makes the global
definition (or lack of one) come back into effect in that major mode.

   If you have redefined (or undefined) a key and you subsequently wish
to retract the change, undefining the key will not do the job--you need
to redefine the key with its standard definition.  To find the name of
the standard definition of a key, go to a Fundamental mode buffer in a
fresh Emacs and use 'C-h c'.  The documentation of keys in this manual
also lists their command names.

   If you want to prevent yourself from invoking a command by mistake,
it is better to disable the command than to undefine the key.  A
disabled command is less work to invoke when you really want to.  *Note
Disabling::.

==============================================================================
File: emacs.info,  Node: |Init_Rebinding|,  Next: |Modifier_Keys|,  Prev: |Rebinding|,  Up: |Key_Bindings|
==============================================================================

                                                                *Init_Rebinding*

49.3.6 Rebinding Keys in Your Init File
---------------------------------------

If you have a set of key bindings that you like to use all the time, you
can specify them in your initialization file by writing Lisp code.
*Note Init File::, for a description of the initialization file.

   There are several ways to write a key binding using Lisp.  The
simplest is to use the 'kbd' function, which converts a textual
representation of a key sequence--similar to how we have written key
sequences in this manual--into a form that can be passed as an argument
to 'global-set-key'.  For example, here's how to bind 'C-z' to the
'shell' command (*note Interactive Shell::):

     (global-set-key (kbd "C-z") 'shell)

The single-quote before the command name, 'shell', marks it as a
constant symbol rather than a variable.  If you omit the quote, Emacs
would try to evaluate 'shell' as a variable.  This probably causes an
error; it certainly isn't what you want.

   Here are some additional examples, including binding function keys
and mouse events:

     (global-set-key (kbd "C-c y") 'clipboard-yank)
     (global-set-key (kbd "C-M-q") 'query-replace)
     (global-set-key (kbd "<f5>") 'flyspell-mode)
     (global-set-key (kbd "C-<f5>") 'display-line-numbers-mode)
     (global-set-key (kbd "C-<right>") 'forward-sentence)
     (global-set-key (kbd "<mouse-2>") 'mouse-save-then-kill)

   Instead of using 'kbd', you can use a Lisp string or vector to
specify the key sequence.  Using a string is simpler, but only works for
ASCII characters and Meta-modified ASCII characters.  For example,
here's how to bind 'C-x M-l' to 'make-symbolic-link' (*note Copying and
Naming::):

     (global-set-key "\C-x\M-l" 'make-symbolic-link)

   To bind a key sequence including <TAB>, <RET>, <ESC>, or <DEL>, the
string should contain the Emacs Lisp escape sequence '\t', '\r', '\e',
or '\d' respectively.  Here is an example which binds 'C-x <TAB>' to
'indent-rigidly' (*note Indentation::):

     (global-set-key "\C-x\t" 'indent-rigidly)

   When the key sequence includes function keys or mouse button events,
or non-ASCII characters such as 'C-=' or 'H-a', you can use a vector to
specify the key sequence.  Each element in the vector stands for an
input event; the elements are separated by spaces and surrounded by a
pair of square brackets.  If a vector element is a character, write it
as a Lisp character constant: '?' followed by the character as it would
appear in a string.  Function keys are represented by symbols (*note
Function Keys::); simply write the symbol's name, with no other
delimiters or punctuation.  Here are some examples:

     (global-set-key [?\C-=] 'make-symbolic-link)
     (global-set-key [?\M-\C-=] 'make-symbolic-link)
     (global-set-key [?\H-a] 'make-symbolic-link)
     (global-set-key [f7] 'make-symbolic-link)
     (global-set-key [C-mouse-1] 'make-symbolic-link)

You can use a vector for the simple cases too:

     (global-set-key [?\C-z ?\M-l] 'make-symbolic-link)

   Language and coding systems may cause problems with key bindings for
non-ASCII characters.  *Note Init Non-ASCII::.

   As described in *note Local Keymaps::, major modes and minor modes
can define local keymaps.  These keymaps are constructed when the mode
is loaded for the first time in a session.  The function 'define-key'
can be used to make changes in a specific keymap.  This function can
also unset keys, when passed 'nil' as the binding.

   Since a mode's keymaps are not constructed until it has been loaded,
you must delay running code which modifies them, e.g., by putting it on
a "mode hook" (*note Hooks::).  For example, Texinfo mode runs the hook
'texinfo-mode-hook'.  Here's how you can use the hook to add local
bindings for 'C-c n' and 'C-c p', and remove the one for 'C-c C-x x' in
Texinfo mode:

     (add-hook 'texinfo-mode-hook
               (lambda ()
                 (define-key texinfo-mode-map "\C-cp"
                             'backward-paragraph)
                 (define-key texinfo-mode-map "\C-cn"
                             'forward-paragraph)))
                 (define-key texinfo-mode-map "\C-c\C-xx" nil)

==============================================================================
File: emacs.info,  Node: |Modifier_Keys|,  Next: |Function_Keys|,  Prev: |Init_Rebinding|,  Up: |Key_Bindings|
==============================================================================

                                                                 *Modifier_Keys*

49.3.7 Modifier Keys
--------------------

The default key bindings in Emacs are set up so that modified
alphabetical characters are case-insensitive.  In other words, 'C-A'
does the same thing as 'C-a', and 'M-A' does the same thing as 'M-a'.
This concerns only alphabetical characters, and does not apply to
shifted versions of other keys; for instance, 'C-@' is not the same as
'C-2'.

   A <Control>-modified alphabetical character is generally considered
case-insensitive: Emacs always treats 'C-A' as 'C-a', 'C-B' as 'C-b',
and so forth.  The reason for this is historical: In non-graphical
environments there is no distinction between those keystrokes.  However,
you can bind shifted <Control> alphabetical keystrokes in GUI frames:

     (global-set-key (kbd "C-S-n") #'previous-line)

   For all other modifiers, you can make the modified alphabetical
characters case-sensitive (even on non-graphical frames) when you
customize Emacs.  For instance, you could make 'M-a' and 'M-A' run
different commands.

   Although only the <Control> and <Meta> modifier keys are commonly
used, Emacs supports three other modifier keys.  These are called
<Super>, <Hyper>, and <Alt>.  Few terminals provide ways to use these
modifiers; the key labeled <Alt> on most keyboards usually issues the
<Meta> modifier, not <Alt>.  The standard key bindings in Emacs do not
include any characters with the <Super> and <Hyper> modifiers, and only
a small number of standard key bindings use <Alt>.  However, you can
customize Emacs to assign meanings to key bindings that use these
modifiers.  The modifier bits are labeled as 's-', 'H-' and 'A-'
respectively.

   Even if your keyboard lacks these additional modifier keys, you can
enter it using 'C-x @': 'C-x @ h' adds the Hyper flag to the next
character, 'C-x @ s' adds the Super flag, and 'C-x @ a' adds the Alt
flag.  For instance, 'C-x @ h C-a' is a way to enter 'Hyper-Control-a'.
(Unfortunately, there is no way to add two modifiers by using 'C-x @'
twice for the same character, because the first one goes to work on the
'C-x'.)

==============================================================================
File: emacs.info,  Node: |Function_Keys|,  Next: |Named_ASCII_Chars|,  Prev: |Modifier_Keys|,  Up: |Key_Bindings|
==============================================================================

                                                                 *Function_Keys*

49.3.8 Rebinding Function Keys
------------------------------

Key sequences can contain function keys as well as ordinary characters.
Just as Lisp characters (actually integers) represent keyboard
characters, Lisp symbols represent function keys.  If the function key
has a word as its label, then that word is also the name of the
corresponding Lisp symbol.  Here are the conventional Lisp names for
common function keys:

'left', 'up', 'right', 'down'
     Cursor arrow keys.

'begin', 'end', 'home', 'next', 'prior'
     Other cursor repositioning keys.

'select', 'print', 'execute', 'backtab'
'insert', 'undo', 'redo', 'clearline'
'insertline', 'deleteline', 'insertchar', 'deletechar'
     Miscellaneous function keys.

'f1', 'f2', ... 'f35'
     Numbered function keys (across the top of the keyboard).

'kp-add', 'kp-subtract', 'kp-multiply', 'kp-divide'
'kp-backtab', 'kp-space', 'kp-tab', 'kp-enter'
'kp-separator', 'kp-decimal', 'kp-equal'
'kp-prior', 'kp-next', 'kp-end', 'kp-home'
'kp-left', 'kp-up', 'kp-right', 'kp-down'
'kp-insert ', 'kp-delete'
     Keypad keys (to the right of the regular keyboard), with names or
     punctuation.

'kp-0', 'kp-1', ... 'kp-9'
     Keypad keys with digits.

'kp-f1', 'kp-f2', 'kp-f3', 'kp-f4'
     Keypad PF keys.

   These names are conventional, but some systems (especially when using
X) may use different names.  To make certain what symbol is used for a
given function key on your terminal, type 'C-h c' followed by that key.

   *Note Init Rebinding::, for examples of binding function keys.

   Many keyboards have a numeric keypad on the right-hand side.  The
numeric keys in the keypad double up as cursor motion keys, toggled by a
key labeled 'Num Lock'.  By default, Emacs translates these keys to the
corresponding keys on the main keyboard.  For example, when 'Num Lock'
is on, the key labeled '8' on the numeric keypad produces 'kp-8', which
is translated to '8'; when 'Num Lock' is off, the same key produces
'kp-up', which is translated to <UP>.  If you rebind a key such as '8'
or <UP>, it affects the equivalent keypad key too.  However, if you
rebind a 'kp-' key directly, that won't affect its non-keypad
equivalent.  Note that the modified keys are not translated: for
instance, if you hold down the <Meta> key while pressing the '8' key on
the numeric keypad, that generates 'M-<kp-8>'.

   Emacs provides a convenient method for binding the numeric keypad
keys, using the variables 'keypad-setup', 'keypad-numlock-setup',
'keypad-shifted-setup', and 'keypad-numlock-shifted-setup'.  These can
be found in the 'keyboard' customization group (*note Easy
Customization::).  You can rebind the keys to perform other tasks, such
as issuing numeric prefix arguments.

==============================================================================
File: emacs.info,  Node: |Named_ASCII_Chars|,  Next: |Mouse_Buttons|,  Prev: |Function_Keys|,  Up: |Key_Bindings|
==============================================================================

                                                             *Named_ASCII_Chars*

49.3.9 Named ASCII Control Characters
-------------------------------------

<TAB>, <RET>, <BS>, <LFD>, <ESC>, and <DEL> started out as names for
certain ASCII control characters, used so often that they have special
keys of their own.  For instance, <TAB> was another name for 'C-i'.
Later, users found it convenient to distinguish in Emacs between these
keys and the corresponding control characters typed with the <Ctrl> key.
Therefore, on most modern terminals, they are no longer the same: <TAB>
is different from 'C-i'.

   Emacs can distinguish these two kinds of input if the keyboard does.
It treats the special keys as function keys named 'tab', 'return',
'backspace', 'linefeed', 'escape', and 'delete'.  These function keys
translate automatically into the corresponding ASCII characters _if_
they have no bindings of their own.  As a result, neither users nor Lisp
programs need to pay attention to the distinction unless they care to.

   If you do not want to distinguish between (for example) <TAB> and
'C-i', make just one binding, for the ASCII character <TAB> (octal code
011).  If you do want to distinguish, make one binding for this ASCII
character, and another for the function key 'tab'.

   With an ordinary ASCII terminal, there is no way to distinguish
between <TAB> and 'C-i' (and likewise for other such pairs), because the
terminal sends the same character in both cases.

==============================================================================
File: emacs.info,  Node: |Mouse_Buttons|,  Next: |Disabling|,  Prev: |Named_ASCII_Chars|,  Up: |Key_Bindings|
==============================================================================

                                                                 *Mouse_Buttons*

49.3.10 Rebinding Mouse Buttons
-------------------------------

Emacs uses Lisp symbols to designate mouse buttons, too.  The ordinary
mouse events in Emacs are "click" events; these happen when you press a
button and release it without moving the mouse.  You can also get "drag"
events, when you move the mouse while holding the button down.  Drag
events happen when you finally let go of the button.

   The symbols for basic click events are 'mouse-1' for the leftmost
button, 'mouse-2' for the next, and so on.  Here is how you can redefine
the second mouse button to split the current window:

     (global-set-key [mouse-2] 'split-window-below)

   The symbols for drag events are similar, but have the prefix 'drag-'
before the word 'mouse'.  For example, dragging the first button
generates a 'drag-mouse-1' event.

   You can also define bindings for events that occur when a mouse
button is pressed down.  These events start with 'down-' instead of
'drag-'.  Such events are generated only if they have key bindings.
When you get a button-down event, a corresponding click or drag event
will always follow.

   If you wish, you can distinguish single, double, and triple clicks.
A double click means clicking a mouse button twice in approximately the
same place.  The first click generates an ordinary click event.  The
second click, if it comes soon enough, generates a double-click event
instead.  The event type for a double-click event starts with 'double-':
for example, 'double-mouse-3'.

   This means that you can give a special meaning to the second click at
the same place, but it must act on the assumption that the ordinary
single click definition has run when the first click was received.

   This constrains what you can do with double clicks, but user
interface designers say that this constraint ought to be followed in any
case.  A double click should do something similar to the single click,
only more so.  The command for the double-click event should perform the
extra work for the double click.

   If a double-click event has no binding, it changes to the
corresponding single-click event.  Thus, if you don't define a
particular double click specially, it executes the single-click command
twice.

   Emacs also supports triple-click events whose names start with
'triple-'.  Emacs does not distinguish quadruple clicks as event types;
clicks beyond the third generate additional triple-click events.
However, the full number of clicks is recorded in the event list, so if
you know Emacs Lisp you can distinguish if you really want to (*note
(elisp)Click Events::).  We don't recommend distinct meanings for more
than three clicks, but sometimes it is useful for subsequent clicks to
cycle through the same set of three meanings, so that four clicks are
equivalent to one click, five are equivalent to two, and six are
equivalent to three.

   Emacs also records multiple presses in drag and button-down events.
For example, when you press a button twice, then move the mouse while
holding the button, Emacs gets a 'double-drag-' event.  And at the
moment when you press it down for the second time, Emacs gets a
'double-down-' event (which is ignored, like all button-down events, if
it has no binding).

   The variable 'double-click-time' specifies how much time can elapse
between clicks and still allow them to be grouped as a multiple click.
Its value is in units of milliseconds.  If the value is 'nil', double
clicks are not detected at all.  If the value is 't', then there is no
time limit.  The default is 500.

   The variable 'double-click-fuzz' specifies how much the mouse can
move between clicks and still allow them to be grouped as a multiple
click.  Its value is in units of pixels on windowed displays and in
units of 1/8 of a character cell on text-mode terminals; the default is
3.

   The symbols for mouse events also indicate the status of the modifier
keys, with the usual prefixes 'C-', 'M-', 'H-', 's-', 'A-', and 'S-'.
These always precede 'double-' or 'triple-', which always precede
'drag-' or 'down-'.

   A frame includes areas that don't show text from the buffer, such as
the mode line and the scroll bar.  You can tell whether a mouse button
comes from a special area of the screen by means of dummy prefix keys.
For example, if you click the mouse in the mode line, you get the prefix
key 'mode-line' before the ordinary mouse-button symbol.  Thus, here is
how to define the command for clicking the first button in a mode line
to run 'scroll-up-command':

     (global-set-key [mode-line mouse-1] 'scroll-up-command)

   Here is the complete list of these dummy prefix keys and their
meanings:

'mode-line'
     The mouse was in the mode line of a window.
'vertical-line'
     The mouse was in the vertical line separating side-by-side windows.
     (If you use scroll bars, they appear in place of these vertical
     lines.)
'vertical-scroll-bar'
     The mouse was in a vertical scroll bar.  (This is the only kind of
     scroll bar Emacs currently supports.)
'menu-bar'
     The mouse was in the menu bar.
'tab-bar'
     The mouse was in a tab bar.
'tab-line'
     The mouse was in a tab line.
'header-line'
     The mouse was in a header line.

   You can put more than one mouse button in a key sequence, but it
isn't usual to do so.

==============================================================================
File: emacs.info,  Node: |Disabling|,  Prev: |Mouse_Buttons|,  Up: |Key_Bindings|
==============================================================================

                                                                     *Disabling*

49.3.11 Disabling Commands
--------------------------

Disabling a command means that invoking it interactively asks for
confirmation from the user.  The purpose of disabling a command is to
prevent users from executing it by accident; we do this for commands
that might be confusing to the uninitiated.

   Attempting to invoke a disabled command interactively in Emacs
displays a window containing the command's name, its documentation, and
some instructions on what to do immediately; then Emacs asks for input
saying whether to execute the command as requested, enable it and
execute it, or cancel.  If you decide to enable the command, you must
then answer another question--whether to do this permanently, or just for
the current session.  (Enabling permanently works by automatically
editing your initialization file.)  You can also type '!' to enable
_all_ commands, for the current session only.

   The direct mechanism for disabling a command is to put a non-'nil'
'disabled' property on the Lisp symbol for the command.  Here is the
Lisp program to do this:

     (put 'delete-region 'disabled t)

   If the value of the 'disabled' property is a string, that string is
included in the message displayed when the command is used:

     (put 'delete-region 'disabled
          "It's better to use `kill-region' instead.\n")

   You can make a command disabled either by editing the initialization
file directly, or with the command 'M-x disable-command', which edits
the initialization file for you.  Likewise, 'M-x enable-command' edits
the initialization file to enable a command permanently.  *Note Init
File::.

   If Emacs was invoked with the '-q' or '--no-init-file' options (*note
Initial Options::), it will not edit your initialization file.  Doing so
could lose information because Emacs has not read your initialization
file.

   Whether a command is disabled is independent of what key is used to
invoke it; disabling also applies if the command is invoked using 'M-x'.
However, disabling a command has no effect on calling it as a function
from Lisp programs.

==============================================================================
File: emacs.info,  Node: |Init_File|,  Next: |Authentication|,  Prev: |Key_Bindings|,  Up: |Customization|
==============================================================================

                                                                     *Init_File*

49.4 The Emacs Initialization File
=====-----------------------------

When Emacs is started, it normally tries to load a Lisp program from an
"initialization file", or "init file" for short.  This file, if it
exists, specifies how to initialize Emacs for you.  Traditionally, file
'~/.emacs' is used as the init file, although Emacs also looks at
'~/.emacs.el', '~/.emacs.d/init.el', '~/.config/emacs/init.el', or other
locations.  *Note Find Init::.

   You may find it convenient to have all your Emacs configuration in
one directory, in which case you should use '~/.emacs.d/init.el' or the
XDG-compatible '~/.config/emacs/init.el'.

   You can use the command line switch '-q' to prevent loading your init
file, and '-u' (or '--user') to specify a different user's init file
(*note Initial Options::).

   There can also be a "default init file", which is the library named
'default.el', found via the standard search path for libraries.  The
Emacs distribution contains no such library; your site may create one
for local customizations.  If this library exists, it is loaded whenever
you start Emacs (except when you specify '-q').  But your init file, if
any, is loaded first; if it sets 'inhibit-default-init' non-'nil', then
'default' is not loaded.

   Your site may also have a "site startup file"; this is named
'site-start.el', if it exists.  Like 'default.el', Emacs finds this file
via the standard search path for Lisp libraries.  Emacs loads this
library before it loads your init file.  To inhibit loading of this
library, use the option '--no-site-file'.  *Note Initial Options::.  We
recommend against using 'site-start.el' for changes that some users may
not like.  It is better to put them in 'default.el', so that users can
more easily override them.

   You can place 'default.el' and 'site-start.el' in any of the
directories which Emacs searches for Lisp libraries.  The variable
'load-path' (*note Lisp Libraries::) specifies these directories.  Many
sites put these files in a subdirectory named 'site-lisp' in the Emacs
installation directory, such as '/usr/local/share/emacs/site-lisp'.

   Byte-compiling your init file is not recommended (*note Byte
Compilation: (elisp)Byte Compilation.).  It generally does not speed up
startup very much, and often leads to problems when you forget to
recompile the file.  A better solution is to use the Emacs server to
reduce the number of times you have to start Emacs (*note Emacs
Server::).  If your init file defines many functions, consider moving
them to a separate (byte-compiled) file that you load in your init file.

   If you are going to write actual Emacs Lisp programs that go beyond
minor customization, you should read the 'Emacs Lisp Reference Manual'.
*Note Emacs Lisp: (elisp)Top.

MENU

* |Init_Syntax|::         Syntax of constants in Emacs Lisp.
* |Init_Examples|::       How to do some things with an init file.
* |Terminal_Init|::       Each terminal type can have an init file.
* |Find_Init|::           How Emacs finds the init file.
* |Init_Non_ASCII|::      Using non-ASCII characters in an init file.
* |Early_Init_File|::     Another init file, which is read early on.

==============================================================================
File: emacs.info,  Node: |Init_Syntax|,  Next: |Init_Examples|,  Up: |Init_File|
==============================================================================

                                                                   *Init_Syntax*

49.4.1 Init File Syntax
-----------------------

The init file contains one or more Lisp expressions.  Each of these
consists of a function name followed by arguments, all surrounded by
parentheses.  For example, '(setq fill-column 60)' calls the function
'setq' to set the variable 'fill-column' (*note Filling::) to 60.

   You can set any Lisp variable with 'setq', but with certain variables
'setq' won't do what you probably want in the init file.  Some variables
automatically become buffer-local when set with 'setq'; what you want in
the init file is to set the default value, using 'setq-default'.  Some
customizable minor mode variables do special things to enable the mode
when you set them with Customize, but ordinary 'setq' won't do that; to
enable the mode in your init file, call the minor mode command.  The
following section has examples of both of these methods.

   The second argument to 'setq' is an expression for the new value of
the variable.  This can be a constant, a variable, or a function call
expression.  In the init file, constants are used most of the time.
They can be:

Numbers:
     Numbers are written in decimal, with an optional initial minus
     sign.

Strings:
     Lisp string syntax is the same as C string syntax with a few extra
     features.  Use a double-quote character to begin and end a string
     constant.

     In a string, you can include newlines and special characters
     literally.  But often it is cleaner to use backslash sequences for
     them: '\n' for newline, '\b' for backspace, '\r' for carriage
     return, '\t' for tab, '\f' for formfeed (control-L), '\e' for
     escape, '\\' for a backslash, '\"' for a double-quote, or '\OOO'
     for the character whose octal code is OOO.  Backslash and
     double-quote are the only characters for which backslash sequences
     are mandatory.

     '\C-' can be used as a prefix for a control character, as in '\C-s'
     for ASCII control-S, and '\M-' can be used as a prefix for a Meta
     character, as in '\M-a' for '<Meta>-A' or '\M-\C-a' for
     '<Ctrl>-<Meta>-A'.

     *Note Init Non-ASCII::, for information about including non-ASCII
     in your init file.

Characters:
     Lisp character constant syntax consists of a '?' followed by either
     a character or an escape sequence starting with '\'.  Examples:
     '?x', '?\n', '?\"', '?\)'.  Note that strings and characters are
     not interchangeable in Lisp; some contexts require one and some
     contexts require the other.

     *Note Init Non-ASCII::, for information about binding commands to
     keys which send non-ASCII characters.

True:
     't' stands for "true".

False:
     'nil' stands for "false".

Other Lisp objects:
     Write a single-quote (''') followed by the Lisp object you want.

==============================================================================
File: emacs.info,  Node: |Init_Examples|,  Next: |Terminal_Init|,  Prev: |Init_Syntax|,  Up: |Init_File|
==============================================================================

                                                                 *Init_Examples*

49.4.2 Init File Examples
-------------------------

Here are some examples of doing certain commonly desired things with
Lisp expressions:

   * Add a directory to the variable 'load-path'.  You can then put Lisp
     libraries that are not included with Emacs in this directory, and
     load them with 'M-x load-library'.  *Note Lisp Libraries::.

          (add-to-list 'load-path "/path/to/lisp/libraries")

   * Make <TAB> in C mode just insert a tab if point is in the middle of
     a line.

          (setq c-tab-always-indent nil)

     Here we have a variable whose value is normally 't' for "true" and
     the alternative is 'nil' for "false".

   * Make searches case sensitive by default (in all buffers that do not
     override this).

          (setq-default case-fold-search nil)

     This sets the default value, which is effective in all buffers that
     do not have local values for the variable (*note Locals::).
     Setting 'case-fold-search' with 'setq' affects only the current
     buffer's local value, which is probably not what you want to do in
     an init file.

   * Specify your own email address, if Emacs can't figure it out
     correctly.

          (setq user-mail-address "cheney@torture.gov")

     Various Emacs packages, such as Message mode, consult
     'user-mail-address' when they need to know your email address.
     *Note Mail Headers::.

   * Make Text mode the default mode for new buffers.

          (setq-default major-mode 'text-mode)

     Note that 'text-mode' is used because it is the command for
     entering Text mode.  The single-quote before it makes the symbol a
     constant; otherwise, 'text-mode' would be treated as a variable
     name.

   * Set up defaults for the Latin-1 character set, which supports most
     of the languages of Western Europe.

          (set-language-environment "Latin-1")

   * Turn off Line Number mode, a global minor mode.

          (line-number-mode 0)

   * Turn on Auto Fill mode automatically in Text mode and related modes
     (*note Hooks::).

          (add-hook 'text-mode-hook 'auto-fill-mode)

   * Load the installed Lisp library named 'foo' (actually a file
     'foo.elc' or 'foo.el' in a standard Emacs directory).

          (load "foo")

     When the argument to 'load' is a relative file name, not starting
     with '/' or '~', 'load' searches the directories in 'load-path'
     (*note Lisp Libraries::).

   * Load the compiled Lisp file 'foo.elc' from your home directory.

          (load "~/foo.elc")

     Here a full file name is used, so no searching is done.

   * Tell Emacs to find the definition for the function 'myfunction' by
     loading a Lisp library named 'mypackage' (i.e., a file
     'mypackage.elc' or 'mypackage.el'):

          (autoload 'myfunction "mypackage" "Do what I say." t)

     Here the string '"Do what I say."' is the function's documentation
     string.  You specify it in the 'autoload' definition so it will be
     available for help commands even when the package is not loaded.
     The last argument, 't', indicates that this function is
     interactive; that is, it can be invoked interactively by typing
     'M-x myfunction <RET>' or by binding it to a key.  If the function
     is not interactive, omit the 't' or use 'nil'.

   * Rebind the key 'C-x l' to run the function 'make-symbolic-link'
     (*note Init Rebinding::).

          (global-set-key "\C-xl" 'make-symbolic-link)

     or

          (define-key global-map "\C-xl" 'make-symbolic-link)

     Note once again the single-quote used to refer to the symbol
     'make-symbolic-link' instead of its value as a variable.

   * Do the same thing for Lisp mode only.

          (define-key lisp-mode-map "\C-xl" 'make-symbolic-link)

   * Redefine all keys which now run 'next-line' in Fundamental mode so
     that they run 'forward-line' instead.

          (substitute-key-definition 'next-line 'forward-line
                                     global-map)

   * Make 'C-x C-v' undefined.

          (global-unset-key "\C-x\C-v")

     One reason to undefine a key is so that you can make it a prefix.
     Simply defining 'C-x C-v ANYTHING' will make 'C-x C-v' a prefix,
     but 'C-x C-v' must first be freed of its usual non-prefix
     definition.

   * Make '$' have the syntax of punctuation in Text mode.  Note the use
     of a character constant for '$'.

          (modify-syntax-entry ?\$ "." text-mode-syntax-table)

   * Enable the use of the command 'narrow-to-region' without
     confirmation.

          (put 'narrow-to-region 'disabled nil)

   * Adjusting the configuration to various platforms and Emacs
     versions.

     Users typically want Emacs to behave the same on all systems, so
     the same init file is right for all platforms.  However, sometimes
     it happens that a function you use for customizing Emacs is not
     available on some platforms or in older Emacs versions.  To deal
     with that situation, put the customization inside a conditional
     that tests whether the function or facility is available, like
     this:

          (if (fboundp 'blink-cursor-mode)
              (blink-cursor-mode 0))

          (if (boundp 'coding-category-utf-8)
              (set-coding-priority '(coding-category-utf-8)))

     You can also simply disregard the errors that occur if the function
     is not defined.

          (ignore-errors (set-face-background 'region "grey75"))

     A 'setq' on a variable which does not exist is generally harmless,
     so those do not need a conditional.

==============================================================================
File: emacs.info,  Node: |Terminal_Init|,  Next: |Find_Init|,  Prev: |Init_Examples|,  Up: |Init_File|
==============================================================================

                                                                 *Terminal_Init*

49.4.3 Terminal-specific Initialization
---------------------------------------

Each terminal type can have a Lisp library to be loaded into Emacs when
it is run on that type of terminal.  For a terminal type named TERMTYPE,
the library is called 'term/TERMTYPE'.  (If there is an entry of the
form '(TERMTYPE . ALIAS)' in the 'term-file-aliases' association list,
Emacs uses ALIAS in place of TERMTYPE.)  The library is found by
searching the directories 'load-path' as usual and trying the suffixes
'.elc' and '.el'.  Normally it appears in the subdirectory 'term' of the
directory where most Emacs libraries are kept.

   The usual purpose of the terminal-specific library is to map the
escape sequences used by the terminal's function keys onto more
meaningful names, using 'input-decode-map'.  See the file
'term/lk201.el' for an example of how this is done.  Many function keys
are mapped automatically according to the information in the Termcap
data base; the terminal-specific library needs to map only the function
keys that Termcap does not specify.

   When the terminal type contains a hyphen, only the part of the name
before the first hyphen is significant in choosing the library name.
Thus, terminal types 'aaa-48' and 'aaa-30-rv' both use the library
'term/aaa'.  The code in the library can use '(getenv "TERM")' to find
the full terminal type name.

   The library's name is constructed by concatenating the value of the
variable 'term-file-prefix' and the terminal type.  Your '.emacs' file
can prevent the loading of the terminal-specific library by setting
'term-file-prefix' to 'nil'.

   Emacs runs the hook 'tty-setup-hook' at the end of initialization,
after both your '.emacs' file and any terminal-specific library have
been read in.  Add hook functions to this hook if you wish to override
part of any of the terminal-specific libraries and to define
initializations for terminals that do not have a library.  *Note
Hooks::.

==============================================================================
File: emacs.info,  Node: |Find_Init|,  Next: |Init_Non_ASCII|,  Prev: |Terminal_Init|,  Up: |Init_File|
==============================================================================

                                                                     *Find_Init*

49.4.4 How Emacs Finds Your Init File
-------------------------------------

Emacs normally finds your init file in a location under your home
directory.  *Note Init File::.

   Emacs looks for your init file using the filenames '~/.emacs.el',
'~/.emacs', or '~/.emacs.d/init.el' in that order; you can choose to use
any one of these names.  (Note that only the locations directly in your
home directory have a leading dot in the location's basename.)

   Emacs can also look in an XDG-compatible location for 'init.el', the
default is the directory '~/.config/emacs'.  This can be overriden by
setting 'XDG_CONFIG_HOME' in your environment, its value replaces
'~/.config' in the name of the default XDG init file.  However
'~/.emacs.d', '~/.emacs', and '~/.emacs.el' are always preferred if they
exist, which means that you must delete or rename them in order to use
the XDG location.

   Note also that if neither the XDG location nor '~/.emacs.d' exist,
then Emacs will create '~/.emacs.d' (and therefore use it during
subsequent invocations).

   Emacs will set 'user-emacs-directory' to the directory it decides to
use.

   Although this is backward-compatible with older Emacs versions,
modern POSIX platforms prefer putting your initialization files under
'~/.config' so that troubleshooting a problem that might be due to a bad
init file, or archiving a collection of init files, can be done by
renaming that directory.  To help older Emacs versions find
configuration files in their current default locations, you can execute
the following Emacs Lisp code:

     (make-symbolic-link ".config/emacs" "~/.emacs.d")

   However, if you run Emacs from a shell started by 'su' and
'XDG_CONFIG_HOME' is not set in your environment, Emacs tries to find
your own initialization files, not that of the user you are currently
pretending to be.  The idea is that you should get your own editor
customizations even if you are running as the super user.

   More precisely, Emacs first determines which user's init file to use.
It gets your user name from the environment variables 'LOGNAME' and
'USER'; if neither of those exists, it uses the effective user-ID.  If
that user name matches the real user-ID, then Emacs uses 'HOME';
otherwise, it looks up the home directory corresponding to that user
name in the system's data base of users.

   For brevity the rest of the Emacs documentation generally uses just
the current default location '~/.emacs.d/init.el' for the init file.

==============================================================================
File: emacs.info,  Node: |Init_Non_ASCII|,  Next: |Early_Init_File|,  Prev: |Find_Init|,  Up: |Init_File|
==============================================================================

                                                                *Init_Non_ASCII*

49.4.5 Non-ASCII Characters in Init Files
-----------------------------------------

Language and coding systems may cause problems if your init file
contains non-ASCII characters, such as accented letters, in strings or
key bindings.

   If you want to use non-ASCII characters in your init file, you should
put a '-*-coding: CODING-SYSTEM-*-' tag on the first line of the init
file, and specify a coding system that supports the character(s) in
question.  *Note Recognize Coding::.  This is because the defaults for
decoding non-ASCII text might not yet be set up by the time Emacs reads
those parts of your init file which use such strings, possibly leading
Emacs to decode those strings incorrectly.  You should then avoid adding
Emacs Lisp code that modifies the coding system in other ways, such as
calls to 'set-language-environment'.

   To bind non-ASCII keys, you must use a vector (*note Init
Rebinding::).  The string syntax cannot be used, since the non-ASCII
characters will be interpreted as meta keys.  For instance:

     (global-set-key [?CHAR] 'some-function)

Type 'C-q', followed by the key you want to bind, to insert CHAR.

==============================================================================
File: emacs.info,  Node: |Early_Init_File|,  Prev: |Init_Non_ASCII|,  Up: |Init_File|
==============================================================================

                                                               *Early_Init_File*

49.4.6 The Early Init File
--------------------------

Most customizations for Emacs should be put in the normal init file.
*Note Init File::.  However, it is sometimes desirable to have
customizations that take effect during Emacs startup earlier than the
normal init file is processed.  Such customizations can be put in the
early init file, '~/.config/emacs/early-init.el' or
'~/.emacs.d/early-init.el'.  This file is loaded before the package
system and GUI is initialized, so in it you can customize variables that
affect frame appearance as well as the package initialization process,
such as 'package-enable-at-startup', 'package-load-list', and
'package-user-dir'.  Note that variables like 'package-archives' which
only affect the installation of new packages, and not the process of
making already-installed packages available, may be customized in the
regular init file.  *Note Package Installation::.

   We do not recommend that you move into 'early-init.el' customizations
that can be left in the normal init files.  That is because the early
init file is read before the GUI is initialized, so customizations
related to GUI features will not work reliably in 'early-init.el'.  By
contrast, the normal init files are read after the GUI is initialized.
If you must have customizations in the early init file that rely on GUI
features, make them run off hooks provided by the Emacs startup, such as
'window-setup-hook' or 'tty-setup-hook'.  *Note Hooks::.

   For more information on the early init file, *note (elisp)Init
File::.

==============================================================================
File: emacs.info,  Node: |Authentication|,  Prev: Init File,  Up: |Customization|
==============================================================================

                                                                *Authentication*

49.5 Keeping Persistent Authentication Information
=====---------------------------------------------

Some Emacs packages, which connect to other services, require
authentication (*note Passwords::), e.g., see *note Gnus: (gnus)Top, or
*note Tramp: (tramp)Top.  Because it might be annoying to provide the
same user name and password again and again, Emacs offers to keep this
information persistent via the 'auth-source' library.

   By default, the authentication information is taken from the file
'~/.authinfo' or '~/.authinfo.gpg' or '~/.netrc'.  These files have a
syntax similar to netrc files as known from the 'ftp' program, like
this:

     machine MYMACHINE login MYLOGINNAME password MYPASSWORD port MYPORT

   Similarly, the 'auth-source' library supports multiple storage
backend, currently either the classic netrc backend, JSON files, the
Secret Service API, and pass, the standard unix password manager.

   All these alternatives can be customized via the user option
'auth-sources', see *note Emacs auth-source: (auth)Help for users.

   When a password is entered interactively, which is not found via the
configured backend, some of the backends offer to save it persistently.
This can be changed by customizing the user option
'auth-source-save-behavior'.

==============================================================================
File: emacs.info,  Node: |Quitting|,  Next: |Lossage|,  Prev: |Customization|,  Up: |Top|
==============================================================================

                                                                      *Quitting*

50 Quitting and Aborting
*****===================

'C-g'
'C-<Break> (MS-DOS only)'
     Quit: cancel running or partially typed command.
'C-]'
     Abort innermost recursive editing level and cancel the command
     which invoked it ('abort-recursive-edit').
'<ESC> <ESC> <ESC>'
     Either quit or abort, whichever makes sense
     ('keyboard-escape-quit').
'M-x top-level'
     Abort all recursive editing levels that are currently executing.
'C-/'
'C-x u'
'C-_'
     Cancel a previously made change in the buffer contents ('undo').

   There are two ways of canceling a command before it has finished:
"quitting" with 'C-g', and "aborting" with 'C-]' or 'M-x top-level'.
Quitting cancels a partially typed command, or one which is still
running.  Aborting exits a recursive editing level and cancels the
command that invoked the recursive edit (*note Recursive Edit::).

   Quitting with 'C-g' is the way to get rid of a partially typed
command, or a numeric argument that you don't want.  Furthermore, if you
are in the middle of a command that is running, 'C-g' stops the command
in a relatively safe way.  For example, if you quit out of a kill
command that is taking a long time, either your text will _all_ still be
in the buffer, or it will _all_ be in the kill ring, or maybe both.  If
the region is active, 'C-g' deactivates the mark, unless Transient Mark
mode is off (*note Disabled Transient Mark::).  If you are in the middle
of an incremental search, 'C-g' behaves specially; it may take two
successive 'C-g' characters to get out of a search.  *Note Incremental
Search::, for details.

   On MS-DOS, the character 'C-<Break>' serves as a quit character like
'C-g'.  The reason is that it is not feasible, on MS-DOS, to recognize
'C-g' while a command is running, between interactions with the user.
By contrast, it _is_ feasible to recognize 'C-<Break>' at all times.
*Note MS-DOS Keyboard::.

   'C-g' works by setting the variable 'quit-flag' to 't' the instant
'C-g' is typed; Emacs Lisp checks this variable frequently, and quits if
it is non-'nil'.  'C-g' is only actually executed as a command if you
type it while Emacs is waiting for input.  In that case, the command it
runs is 'keyboard-quit'.

   On a text terminal, if you quit with 'C-g' a second time before the
first 'C-g' is recognized, you activate the emergency-escape feature and
return to the shell.  *Note Emergency Escape::.

   There are some situations where you cannot quit.  When Emacs is
waiting for the operating system to do something, quitting is impossible
unless special pains are taken for the particular system call within
Emacs where the waiting occurs.  We have done this for the system calls
that users are likely to want to quit from, but it's possible you will
encounter a case not handled.  In one very common case--waiting for file
input or output using NFS--Emacs itself knows how to quit, but many NFS
implementations simply do not allow user programs to stop waiting for
NFS when the NFS server is hung.

   Aborting with 'C-]' ('abort-recursive-edit') is used to get out of a
recursive editing level and cancel the command which invoked it.
Quitting with 'C-g' does not do this, and could not do this, because it
is used to cancel a partially typed command _within_ the recursive
editing level.  Both operations are useful.  For example, if you are in
a recursive edit and type 'C-u 8' to enter a numeric argument, you can
cancel that argument with 'C-g' and remain in the recursive edit.

   The sequence '<ESC> <ESC> <ESC>' ('keyboard-escape-quit') can either
quit or abort.  (We defined it this way because <ESC> means "get out" in
many PC programs.)  It can cancel a prefix argument, clear a selected
region, or get out of a Query Replace, like 'C-g'.  It can get out of
the minibuffer or a recursive edit, like 'C-]'.  It can also get out of
splitting the frame into multiple windows, as with 'C-x 1'.  One thing
it cannot do, however, is stop a command that is running.  That's
because it executes as an ordinary command, and Emacs doesn't notice it
until it is ready for the next command.

   The command 'M-x top-level' is equivalent to enough 'C-]' commands to
get you out of all the levels of recursive edits that you are in; it
also exits the minibuffer if it is active.  'C-]' gets you out one level
at a time, but 'M-x top-level' goes out all levels at once.  Both 'C-]'
and 'M-x top-level' are like all other commands, and unlike 'C-g', in
that they take effect only when Emacs is ready for a command.  'C-]' is
an ordinary key and has its meaning only because of its binding in the
keymap.  *Note Recursive Edit::.

   'C-/' ('undo') is not strictly speaking a way of canceling a command,
but you can think of it as canceling a command that already finished
executing.  *Note Undo::, for more information about the undo facility.

==============================================================================
File: emacs.info,  Node: |Lossage|,  Next: |Bugs|,  Prev: |Quitting|,  Up: |Top|
==============================================================================

                                                                       *Lossage*

51 Dealing with Emacs Trouble
*****========================

This section describes how to recognize and deal with situations in
which Emacs does not work as you expect, such as keyboard code mixups,
garbled displays, running out of memory, and crashes and hangs.

   *Note Bugs::, for what to do when you think you have found a bug in
Emacs.

MENU

* |DEL_Does_Not_Delete|::   What to do if <DEL> doesn't delete.
* |Stuck_Recursive|::       '[...]' in mode line around the parentheses.
* |Screen_Garbled|::        Garbage on the screen.
* |Text_Garbled|::          Garbage in the text.
* |Memory_Full|::           How to cope when you run out of memory.
* |Crashing|::              What Emacs does when it crashes.
* |After_a_Crash|::         Recovering editing in an Emacs session that crashed.
* |Emergency_Escape|::      What to do if Emacs stops responding.
* |Long_Lines|::            Mitigating slowness due to extremely long lines.

==============================================================================
File: emacs.info,  Node: |DEL_Does_Not_Delete|,  Next: |Stuck_Recursive|,  Up: |Lossage|
==============================================================================

                                                           *DEL_Does_Not_Delete*

51.1 If <DEL> Fails to Delete
=====------------------------

Every keyboard has a large key, usually labeled <BACKSPACE>, which is
ordinarily used to erase the last character that you typed.  In Emacs,
this key is supposed to be equivalent to <DEL>.

   When Emacs starts up on a graphical display, it determines
automatically which key should be <DEL>.  In some unusual cases, Emacs
gets the wrong information from the system, and <BACKSPACE> ends up
deleting forwards instead of backwards.

   Some keyboards also have a <Delete> key, which is ordinarily used to
delete forwards.  If this key deletes backward in Emacs, that too
suggests Emacs got the wrong information--but in the opposite sense.

   On a text terminal, if you find that <BACKSPACE> prompts for a Help
command, like 'Control-h', instead of deleting a character, it means
that key is actually sending the 'BS' character.  Emacs ought to be
treating <BS> as <DEL>, but it isn't.

   In all of those cases, the immediate remedy is the same: use the
command 'M-x normal-erase-is-backspace-mode'.  This toggles between the
two modes that Emacs supports for handling <DEL>, so if Emacs starts in
the wrong mode, this should switch to the right mode.  On a text
terminal, if you want to ask for help when <BS> is treated as <DEL>, use
<F1> instead of 'C-h'; 'C-?' may also work, if it sends character code
127.

   To fix the problem in every Emacs session, put one of the following
lines into your initialization file (*note Init File::).  For the first
case above, where <BACKSPACE> deletes forwards instead of backwards, use
this line to make <BACKSPACE> act as <DEL>:

     (normal-erase-is-backspace-mode 0)

For the other two cases, use this line:

     (normal-erase-is-backspace-mode 1)

   Another way to fix the problem for every Emacs session is to
customize the variable 'normal-erase-is-backspace': the value 't'
specifies the mode where <BS> or <BACKSPACE> is <DEL>, and 'nil'
specifies the other mode.  *Note Easy Customization::.

==============================================================================
File: emacs.info,  Node: |Stuck_Recursive|,  Next: |Screen_Garbled|,  Prev: |DEL_Does_Not_Delete|,  Up: |Lossage|
==============================================================================

                                                               *Stuck_Recursive*

51.2 Recursive Editing Levels
=====------------------------

Recursive editing levels are important and useful features of Emacs, but
they can seem like malfunctions if you do not understand them.

   If the mode line has square brackets '[...]' around the parentheses
that contain the names of the major and minor modes, you have entered a
recursive editing level.  If you did not do this on purpose, or if you
don't understand what that means, you should just get out of the
recursive editing level.  To do so, type 'M-x top-level'.  *Note
Recursive Edit::.

==============================================================================
File: emacs.info,  Node: |Screen_Garbled|,  Next: |Text_Garbled|,  Prev: |Stuck_Recursive|,  Up: |Lossage|
==============================================================================

                                                                *Screen_Garbled*

51.3 Garbage on the Screen
=====---------------------

If the text on a text terminal looks wrong, the first thing to do is see
whether it is wrong in the buffer.  Type 'C-l' ('recenter-top-bottom')
to redisplay the entire screen.  If the screen appears correct after
this, the problem was entirely in the previous screen update.
(Otherwise, see the following section.)

   Display updating problems often result from an incorrect terminfo
entry for the terminal you are using.  The file 'etc/TERMS' in the Emacs
distribution gives the fixes for known problems of this sort.  'INSTALL'
contains general advice for these problems in one of its sections.  If
you seem to be using the right terminfo entry, it is possible that there
is a bug in the terminfo entry, or a bug in Emacs that appears for
certain terminal types.

==============================================================================
File: emacs.info,  Node: |Text_Garbled|,  Next: |Memory_Full|,  Prev: |Screen_Garbled|,  Up: |Lossage|
==============================================================================

                                                                  *Text_Garbled*

51.4 Garbage in the Text
=====-------------------

If 'C-l' shows that the text is wrong, first type 'C-h l'
('view-lossage') to see what commands you typed to produce the observed
results.  Then try undoing the changes step by step using 'C-x u'
('undo'), until it gets back to a state you consider correct.

   If a large portion of text appears to be missing at the beginning or
end of the buffer, check for the word 'Narrow' in the mode line.  If it
appears, the text you don't see is probably still present, but
temporarily off-limits.  To make it accessible again, type 'C-x n w'
('widen').  *Note Narrowing::.

==============================================================================
File: emacs.info,  Node: |Memory_Full|,  Next: |Crashing|,  Prev: |Text_Garbled|,  Up: |Lossage|
==============================================================================

                                                                   *Memory_Full*

51.5 Running out of Memory
=====---------------------

If you get the error message 'Virtual memory exceeded', save your
modified buffers with 'C-x s' ('save-some-buffers').  This method of
saving them has the smallest need for additional memory.  Emacs keeps a
reserve of memory which it makes available when this error happens; that
should be enough to enable 'C-x s' to complete its work.  When the
reserve has been used, '!MEM FULL!' appears at the beginning of the mode
line, indicating there is no more reserve.

   Once you have saved your modified buffers, you can exit this Emacs
session and start another, or you can use 'M-x kill-some-buffers' to
free space in the current Emacs job.  If this frees up sufficient space,
Emacs will refill its memory reserve, and '!MEM FULL!' will disappear
from the mode line.  That means you can safely go on editing in the same
Emacs session.

   Do not use 'M-x buffer-menu' to save or kill buffers when you run out
of memory, because the Buffer Menu needs a fair amount of memory itself,
and the reserve supply may not be enough.

==============================================================================
File: emacs.info,  Node: |Crashing|,  Next: |After_a_Crash|,  Prev: |Memory_Full|,  Up: |Lossage|
==============================================================================

                                                                      *Crashing*

51.6 When Emacs Crashes
=====------------------

Emacs is not supposed to crash, but if it does, it produces a "crash
report" prior to exiting.  The crash report is printed to the standard
error stream.  If Emacs was started from a graphical desktop on a GNU or
Unix system, the standard error stream is commonly redirected to a file
such as '~/.xsession-errors', so you can look for the crash report
there.  On MS-Windows, the crash report is written to a file named
'emacs_backtrace.txt' in the current directory of the Emacs process, in
addition to the standard error stream.

   The format of the crash report depends on the platform.  On some
platforms, such as those using the GNU C Library, the crash report
includes a "backtrace" describing the execution state prior to crashing,
which can be used to help debug the crash.  Here is an example for a GNU
system:

     Fatal error 11: Segmentation fault
     Backtrace:
     emacs[0x5094e4]
     emacs[0x4ed3e6]
     emacs[0x4ed504]
     /lib64/libpthread.so.0[0x375220efe0]
     /lib64/libpthread.so.0(read+0xe)[0x375220e08e]
     emacs[0x509af6]
     emacs[0x5acc26]
     ...

The number '11' is the system signal number corresponding to the
crash--in this case a segmentation fault.  The hexadecimal numbers are
program addresses, which can be associated with source code lines using
a debugging tool.  For example, the GDB command 'list *0x509af6' prints
the source-code lines corresponding to the 'emacs[0x509af6]' entry.  If
your system has the 'addr2line' utility, the following shell command
outputs a backtrace with source-code line numbers:

     sed -n 's/.*\[\(.*\)]$/\1/p' BACKTRACE |
       addr2line -C -f -i -p -e BINDIR/EMACS-BINARY

Here, BACKTRACE is the name of a text file containing a copy of the
backtrace, BINDIR is the name of the directory that contains the Emacs
executable, and EMACS-BINARY is the name of the Emacs executable file,
normally 'emacs' on GNU and Unix systems and 'emacs.exe' on MS-Windows
and MS-DOS.  Omit the '-p' option if your version of 'addr2line' is too
old to have it.

   Optionally, Emacs can generate a "core dump" when it crashes, on
systems that support core files.  A core dump is a file containing
voluminous data about the state of the program prior to the crash,
usually examined by loading it into a debugger such as GDB.  On many
platforms, core dumps are disabled by default, and you must explicitly
enable them by running the shell command 'ulimit -c unlimited' (e.g., in
your shell startup script).

==============================================================================
File: emacs.info,  Node: |After_a_Crash|,  Next: |Emergency_Escape|,  Prev: |Crashing|,  Up: |Lossage|
==============================================================================

                                                                 *After_a_Crash*

51.7 Recovery After a Crash
=====----------------------

If Emacs or the computer crashes, you can recover the files you were
editing at the time of the crash from their auto-save files.  To do
this, start Emacs again and type the command 'M-x recover-session'.

   This command initially displays a buffer which lists interrupted
session files, each with its date.  You must choose which session to
recover from.  Typically the one you want is the most recent one.  Move
point to the one you choose, and type 'C-c C-c'.

   Then 'recover-session' considers each of the files that you were
editing during that session; for each such file, it asks whether to
recover that file.  If you answer 'y' for a file, it shows the dates of
that file and its auto-save file, then asks once again whether to
recover that file.  For the second question, you must confirm with
'yes'.  If you do, Emacs visits the file but gets the text from the
auto-save file.

   When 'recover-session' is done, the files you've chosen to recover
are present in Emacs buffers.  You should then save them.  Only
this--saving them--updates the files themselves.

   As a last resort, if you had buffers with content which were not
associated with any files, or if the autosave was not recent enough to
have recorded important changes, you can use the 'etc/emacs-buffer.gdb'
script with GDB (the GNU Debugger) to retrieve them from a core
dump-provided that a core dump was saved, and that the Emacs executable
was not stripped of its debugging symbols.

   As soon as you get the core dump, rename it to another name such as
'core.emacs', so that another crash won't overwrite it.

   To use this script, run 'gdb' with the file name of your Emacs
executable and the file name of the core dump, e.g., 'gdb /usr/bin/emacs
core.emacs'.  At the '(gdb)' prompt, load the recovery script: 'source
/usr/src/emacs/etc/emacs-buffer.gdb'.  Then type the command
'ybuffer-list' to see which buffers are available.  For each buffer, it
lists a buffer number.  To save a buffer, use 'ysave-buffer'; you
specify the buffer number, and the file name to write that buffer into.
You should use a file name which does not already exist; if the file
does exist, the script does not make a backup of its old contents.

==============================================================================
File: emacs.info,  Node: |Emergency_Escape|,  Next: |Long_Lines|,  Prev: |After_a_Crash|,  Up: |Lossage|
==============================================================================

                                                              *Emergency_Escape*

51.8 Emergency Escape
=====----------------

On text terminals, the "emergency escape" feature suspends Emacs
immediately if you type 'C-g' a second time before Emacs can actually
respond to the first one by quitting.  This is so you can always get out
of GNU Emacs no matter how badly it might be hung.  When things are
working properly, Emacs recognizes and handles the first 'C-g' so fast
that the second one won't trigger emergency escape.  However, if some
problem prevents Emacs from handling the first 'C-g' properly, then the
second one will get you back to the shell.

   When you resume Emacs after a suspension caused by emergency escape,
it reports the resumption and asks a question or two before going back
to what it had been doing:

     Emacs is resuming after an emergency escape.
     Auto-save? (y or n)
     Abort (and dump core)? (y or n)

Answer each question with 'y' or 'n' followed by <RET>.

   Saying 'y' to 'Auto-save?' causes immediate auto-saving of all
modified buffers in which auto-saving is enabled.  Saying 'n' skips
this.  This question is omitted if Emacs is in a state where auto-saving
cannot be done safely.

   Saying 'y' to 'Abort (and dump core)?' causes Emacs to crash, dumping
core.  This is to enable a wizard to figure out why Emacs was failing to
quit in the first place.  Execution does not continue after a core dump.

   If you answer this question 'n', Emacs execution resumes.  With luck,
Emacs will ultimately do the requested quit.  If not, each subsequent
'C-g' invokes emergency escape again.

   If Emacs is not really hung, just slow, you may invoke the double
'C-g' feature without really meaning to.  Then just resume and answer
'n' to both questions, and you will get back to the former state.  The
quit you requested will happen by and by.

   Emergency escape is active only for text terminals.  On graphical
displays, you can use the mouse to kill Emacs or switch to another
program.

   On MS-DOS, you must type 'C-<Break>' (twice) to cause emergency
escape--but there are cases where it won't work, when a system call hangs
or when Emacs is stuck in a tight loop in C code.

==============================================================================
File: emacs.info,  Node: |Long_Lines|,  Prev: |Emergency_Escape|,  Up: |Lossage|
==============================================================================

                                                                    *Long_Lines*

51.9 Long Lines
=====----------

For a variety of reasons (some of which are fundamental to the Emacs
redisplay code and the complex range of possibilities it handles; others
of which are due to modes and features which do not scale well in
unusual circumstances), Emacs can perform poorly when extremely long
lines are present (where "extremely long" usually means at least many
thousands of characters).

   A particular problem is that Emacs may "hang" for a long time at the
point of visiting a file with extremely long lines.  This can be
mitigated by enabling the 'so-long' library, which detects when a
visited file contains abnormally long lines, and takes steps to disable
features which are liable to cause slowness in that situation.  To
enable this library, type 'M-x global-so-long-mode <RET>', or turn on
the 'global-so-long-mode' in your init file (*note Init File::), or
customize the 'global-so-long-mode' option.  You can tailor this mode's
operation by customizing the variable 'so-long-action'.

   The 'so-long' library can also significantly improve performance when
moving and editing in a buffer with long lines.  Performance is still
likely to degrade as you get deeper into the long lines, but the
improvements from using this library can nevertheless be substantial.

   Use 'M-x so-long-commentary' to view the documentation for this
library and learn more about how to enable and configure it.

==============================================================================
File: emacs.info,  Node: |Bugs|,  Next: |Contributing|,  Prev: |Lossage|,  Up: |Top|
==============================================================================

                                                                          *Bugs*

52 Reporting Bugs
*****============

If you think you have found a bug in Emacs, please report it.  We cannot
promise to fix it, or always to agree that it is a bug, but we certainly
want to hear about it.  The same applies for new features you would like
to see added.  The following sections will help you to construct an
effective bug report.

MENU

* |Known_Problems|::               How to read about known problems and bugs.
* Criteria:  Bug Criteria.       Have you really found a bug?
* |Understanding_Bug_Reporting|::  How to report a bug effectively.
* |Checklist|::                    Steps to follow for a good bug report.
* |Sending_Patches|::              How to send a patch for GNU Emacs.

==============================================================================
File: emacs.info,  Node: |Known_Problems|,  Next: |Bug_Criteria|,  Up: |Bugs|
==============================================================================

                                                                *Known_Problems*

52.1 Reading Existing Bug Reports and Known Problems
=====-----------------------------------------------

Before reporting a bug, if at all possible please check to see if it is
already known about.  Indeed, it may already have been fixed in a later
release of Emacs, or in the development version.  Here is a list of the
main places you can read about known issues:

   * The 'etc/PROBLEMS' file; type 'C-h C-p' to read it.  This file
     contains a list of particularly well-known issues that have been
     encountered in compiling, installing and running Emacs.  Often,
     there are suggestions for workarounds and solutions.

   * The GNU Bug Tracker at <https://debbugs.gnu.org>.  Emacs bugs are
     filed in the tracker under the 'emacs' package.  The tracker
     records information about the status of each bug, the initial bug
     report, and the follow-up messages by the bug reporter and Emacs
     developers.  You can search for bugs by subject, severity, and
     other criteria.

     Instead of browsing the bug tracker as a webpage, you can browse it
     from Emacs using the 'debbugs' package, which can be downloaded via
     the Package Menu (*note Packages::).  This package provides the
     command 'M-x debbugs-gnu' to list bugs, and 'M-x
     debbugs-gnu-search' to search for a specific bug.  User tags,
     applied by the Emacs maintainers, are shown by 'M-x
     debbugs-gnu-usertags'.

   * The 'bug-gnu-emacs' mailing list (also available as the newsgroup
     'gnu.emacs.bug').  You can read the list archives at
     <https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs>.  This list
     works as a mirror of the Emacs bug reports and follow-up messages
     which are sent to the bug tracker.  It also contains old bug
     reports from before the bug tracker was introduced (in early 2008).

     If you like, you can subscribe to the list.  Be aware that its
     purpose is to provide the Emacs maintainers with information about
     bugs and feature requests, so reports may contain fairly large
     amounts of data; spectators should not complain about this.

   * The 'emacs-pretest-bug' mailing list.  This list is no longer used,
     and is mainly of historical interest.  At one time, it was used for
     bug reports in development (i.e., not yet released) versions of
     Emacs.  You can read the archives for 2003 to mid 2007 at
     <https://lists.gnu.org/r/emacs-pretest-bug/>.  Nowadays, it is an
     alias for 'bug-gnu-emacs'.

   * The 'emacs-devel' mailing list.  Sometimes people report bugs to
     this mailing list.  This is not the main purpose of the list,
     however, and it is much better to send bug reports to the bug list.
     You should not feel obliged to read this list before reporting a
     bug.

==============================================================================
File: emacs.info,  Node: |Bug_Criteria|,  Next: |Understanding_Bug_Reporting|,  Prev: |Known_Problems|,  Up: |Bugs|
==============================================================================

                                                                  *Bug_Criteria*

52.2 When Is There a Bug
=====-------------------

If Emacs accesses an invalid memory location (a.k.a. "segmentation
fault") or exits with an operating system error message that indicates a
problem in the program (as opposed to something like "disk full"), then
it is certainly a bug.

   If the Emacs display does not correspond properly to the contents of
the buffer, then it is a bug.  But you should check that features like
buffer narrowing (*note Narrowing::), which can hide parts of the buffer
or change how it is displayed, are not responsible.

   Taking forever to complete a command can be a bug, but you must make
sure that it is really Emacs's fault.  Some commands simply take a long
time.  Type 'C-g' ('C-<Break>' on MS-DOS) and then 'C-h l' to see
whether the input Emacs received was what you intended to type; if the
input was such that you _know_ it should have been processed quickly,
report a bug.  If you don't know whether the command should take a long
time, find out by looking in the manual or by asking for assistance.

   If a command you are familiar with causes an Emacs error message in a
case where its usual definition ought to be reasonable, it is probably a
bug.

   If a command does the wrong thing, that is a bug.  But be sure you
know for certain what it ought to have done.  If you aren't familiar
with the command, it might actually be working right.  If in doubt, read
the command's documentation (*note Name Help::).

   A command's intended definition may not be the best possible
definition for editing with.  This is a very important sort of problem,
but it is also a matter of judgment.  Also, it is easy to come to such a
conclusion out of ignorance of some of the existing features.  It is
probably best not to complain about such a problem until you have
checked the documentation in the usual ways, feel confident that you
understand it, and know for certain that what you want is not available.
Ask other Emacs users, too.  If you are not sure what the command is
supposed to do after a careful reading of the manual, check the index
and glossary for any terms that may be unclear.

   If after careful rereading of the manual you still do not understand
what the command should do, that indicates a bug in the manual, which
you should report.  The manual's job is to make everything clear to
people who are not Emacs experts--including you.  It is just as important
to report documentation bugs as program bugs.

   If the built-in documentation for a function or variable disagrees
with the manual, one of them must be wrong; that is a bug.

   For problems with packages that are not part of Emacs, it is better
to begin by reporting them to the package developers.

==============================================================================
File: emacs.info,  Node: |Understanding_Bug_Reporting|,  Next: |Checklist|,  Prev: |Bug_Criteria|,  Up: |Bugs|
==============================================================================

                                                   *Understanding_Bug_Reporting*

52.3 Understanding Bug Reporting
=====---------------------------

When you decide that there is a bug, it is important to report it and to
report it in a way which is useful.  What is most useful is an exact
description of what commands you type, starting with the shell command
to run Emacs, until the problem happens.

   The most important principle in reporting a bug is to report _facts_.
Hypotheses and verbal descriptions are no substitute for the detailed
raw data.  Reporting the facts is straightforward, but many people
strain to posit explanations and report them instead of the facts.  If
the explanations are based on guesses about how Emacs is implemented,
they will be useless; meanwhile, lacking the facts, we will have no real
information about the bug.  If you want to actually _debug_ the problem,
and report explanations that are more than guesses, that is useful--but
please include the raw facts as well.

   For example, suppose that you type 'C-x C-f /glorp/baz.ugh <RET>',
visiting a file which (you know) happens to be rather large, and Emacs
displays 'I feel pretty today'.  The bug report would need to provide
all that information.  You should not assume that the problem is due to
the size of the file and say, "I visited a large file, and Emacs
displayed 'I feel pretty today'." This is what we mean by "guessing
explanations".  The problem might be due to the fact that there is a 'z'
in the file name.  If this is so, then when we got your report, we would
try out the problem with some large file, probably with no 'z' in its
name, and not see any problem.  There is no way we could guess that we
should try visiting a file with a 'z' in its name.

   You should not even say "visit a file" instead of 'C-x C-f'.
Similarly, rather than saying "if I have three characters on the line",
say "after I type '<RET> A B C <RET> C-p'", if that is the way you
entered the text.

   If possible, try quickly to reproduce the bug by invoking Emacs with
'emacs -Q' (so that Emacs starts with no initial customizations; *note
Initial Options::), and repeating the steps that you took to trigger the
bug.  If you can reproduce the bug this way, that rules out bugs in your
personal customizations.  Then your bug report should begin by stating
that you started Emacs with 'emacs -Q', followed by the exact sequence
of steps for reproducing the bug.  If possible, inform us of the exact
contents of any file that is needed to reproduce the bug.

   Some bugs are not reproducible from 'emacs -Q'; some are not easily
reproducible at all.  In that case, you should report what you have--but,
as before, please stick to the raw facts about what you did to trigger
the bug the first time.

   If you have multiple issues that you want to report, please make a
separate bug report for each.

==============================================================================
File: emacs.info,  Node: |Checklist|,  Next: |Sending_Patches|,  Prev: |Understanding_Bug_Reporting|,  Up: |Bugs|
==============================================================================

                                                                     *Checklist*

52.4 Checklist for Bug Reports
=====-------------------------

Before reporting a bug, first try to see if the problem has already been
reported (*note Known Problems::).

   If you are able to, try the latest release of Emacs to see if the
problem has already been fixed.  Even better is to try the latest
development version.  We recognize that this is not easy for some
people, so do not feel that you absolutely must do this before making a
report.

   The best way to write a bug report for Emacs is to use the command
'M-x report-emacs-bug'.  This sets up a mail buffer (*note Sending
Mail::) and automatically inserts _some_ of the essential information.
However, it cannot supply all the necessary information; you should
still read and follow the guidelines below, so you can enter the other
crucial information by hand before you send the message.  You may feel
that some of the information inserted by 'M-x report-emacs-bug' is not
relevant, but unless you are absolutely sure it is best to leave it, so
that the developers can decide for themselves.

   When you have finished writing your report, type 'C-c C-c' and it
will be sent to the Emacs maintainers at <bug-gnu-emacs@gnu.org>.  (If
you want to suggest an improvement or new feature, use the same
address.)  If you cannot send mail from inside Emacs, you can copy the
text of your report to your normal mail client (if your system supports
it, you can type 'C-c M-i' to have Emacs do this for you) and send it to
that address.  Or you can simply send an email to that address
describing the problem.

   Your report will be sent to the 'bug-gnu-emacs' mailing list, and
stored in the GNU Bug Tracker at <https://debbugs.gnu.org>.  Please
include a valid reply email address, in case we need to ask you for more
information about your report.  Submissions are moderated, so there may
be a delay before your report appears.

   You do not need to know how the GNU Bug Tracker works in order to
report a bug, but if you want to, you can read the tracker's online
documentation to see the various features you can use.

   All mail sent to the 'bug-gnu-emacs' mailing list is also gatewayed
to the 'gnu.emacs.bug' newsgroup.  The reverse is also true, but we ask
you not to post bug reports (or replies) via the newsgroup.  It can make
it much harder to contact you if we need to ask for more information,
and it does not integrate well with the bug tracker.

   If your data is more than 500,000 bytes, please don't include it
directly in the bug report; instead, offer to send it on request, or
make it available online and say where.

   The GNU Bug Tracker will assign a bug number to your report; please
use it in the following discussions.

   To enable maintainers to investigate a bug, your report should
include all these things:

   * The version number of Emacs.  Without this, we won't know whether
     there is any point in looking for the bug in the current version of
     GNU Emacs.

     'M-x report-emacs-bug' includes this information automatically, but
     if you are not using that command for your report you can get the
     version number by typing 'M-x emacs-version <RET>'.  If that
     command does not work, you probably have something other than GNU
     Emacs, so you will have to report the bug somewhere else.

   * The type of machine you are using, and the operating system name
     and version number (again, automatically included by 'M-x
     report-emacs-bug').  'M-x emacs-version <RET>' provides this
     information too.  Copy its output from the 'Messages' buffer, so
     that you get it all and get it accurately.

   * The operands given to the 'configure' command when Emacs was
     installed (automatically included by 'M-x report-emacs-bug').

   * A complete list of any modifications you have made to the Emacs
     source.  (We may not have time to investigate the bug unless it
     happens in an unmodified Emacs.  But if you've made modifications
     and you don't tell us, you are sending us on a wild goose chase.)

     Be precise about these changes.  A description in English is not
     enough--send a unified context diff for them.

     Adding files of your own, or porting to another machine, is a
     modification of the source.

   * Details of any other deviations from the standard procedure for
     installing GNU Emacs.

   * The complete text of any files needed to reproduce the bug.

     If you can tell us a way to cause the problem without visiting any
     files, please do so.  This makes it much easier to debug.  If you
     do need files, make sure you arrange for us to see their exact
     contents.  For example, it can matter whether there are spaces at
     the ends of lines, or a newline after the last line in the buffer
     (nothing ought to care whether the last line is terminated, but try
     telling the bugs that).

   * The precise commands we need to type to reproduce the bug.  If at
     all possible, give a full recipe for an Emacs started with the '-Q'
     option (*note Initial Options::).  This bypasses your personal
     customizations.

     One way to record the input to Emacs precisely is to write a
     dribble file.  To start the file, use the 'M-x open-dribble-file'
     command.  From then on, Emacs copies all your input to the
     specified dribble file until the Emacs process is killed.  Be aware
     that sensitive information (such as passwords) may end up recorded
     in the dribble file.

   * For possible display bugs on text-mode terminals, the terminal type
     (the value of environment variable 'TERM'), the complete termcap
     entry for the terminal from '/etc/termcap' (since that file is not
     identical on all machines), and the output that Emacs actually sent
     to the terminal.

     The way to collect the terminal output is to execute the Lisp
     expression

          (open-termscript "~/termscript")

     using 'M-:' or from the 'scratch' buffer just after starting
     Emacs.  From then on, Emacs copies all terminal output to the
     specified termscript file as well, until the Emacs process is
     killed.  If the problem happens when Emacs starts up, put this
     expression into your Emacs initialization file so that the
     termscript file will be open when Emacs displays the screen for the
     first time.

     Be warned: it is often difficult, and sometimes impossible, to fix
     a terminal-dependent bug without access to a terminal of the type
     that stimulates the bug.

   * If non-ASCII text or internationalization is relevant, the locale
     that was current when you started Emacs.  On GNU/Linux and Unix
     systems, or if you use a POSIX-style shell such as Bash, you can
     use this shell command to view the relevant values:

          echo LC_ALL=$LC_ALL LC_COLLATE=$LC_COLLATE LC_CTYPE=$LC_CTYPE \
            LC_MESSAGES=$LC_MESSAGES LC_TIME=$LC_TIME LANG=$LANG

     Alternatively, use the 'locale' command, if your system has it, to
     display your locale settings.

     You can use the 'M-!' command to execute these commands from Emacs,
     and then copy the output from the 'Messages' buffer into the bug
     report.  Alternatively, 'M-x getenv <RET> LC_ALL <RET>' will
     display the value of 'LC_ALL' in the echo area, and you can copy
     its output from the 'Messages' buffer.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "The Emacs process gets a fatal signal",
     or, "The resulting text is as follows, which I think is wrong."

     Of course, if the bug is that Emacs gets a fatal signal, then one
     can't miss it.  But if the bug is incorrect text, the maintainer
     might fail to notice what is wrong.  Why leave it to chance?

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the source is out of sync, or you have
     encountered a bug in the C library on your system.  (This has
     happened!)  Your copy might crash and the copy here might not.  If
     you _said_ to expect a crash, then when Emacs here fails to crash,
     we would know that the bug was not happening.  If you don't say to
     expect a crash, then we would not know whether the bug was
     happening--we would not be able to draw any conclusion from our
     observations.

   * If the bug is that the Emacs Manual or the Emacs Lisp Reference
     Manual fails to describe the actual behavior of Emacs, or that the
     text is confusing, copy in the text from the manual which you think
     is at fault.  If the section is small, just the section name is
     enough.

   * If the manifestation of the bug is an Emacs error message, it is
     important to report the precise text of the error message, and a
     backtrace showing how the Lisp program in Emacs arrived at the
     error.

     To get the error message text accurately, copy it from the
     'Messages' buffer into the bug report.  Copy all of it, not just
     part.

     To make a backtrace for the error, use 'M-x toggle-debug-on-error'
     before the error happens (that is to say, you must give that
     command and then make the bug happen).  This causes the error to
     start the Lisp debugger, which shows you a backtrace.  Copy the
     text of the debugger's backtrace into the bug report.  *Note
     Edebug: (elisp)Edebug, for information on debugging Emacs Lisp
     programs with the Edebug package.

     This use of the debugger is possible only if you know how to make
     the bug happen again.  If you can't make it happen again, at least
     copy the whole error message.

     If Emacs appears to be stuck in an infinite loop or in a very long
     operation, typing 'C-g' with the variable 'debug-on-quit' non-'nil'
     will start the Lisp debugger and show a backtrace.  This backtrace
     is useful for debugging such long loops, so if you can produce it,
     copy it into the bug report.

     If you cannot get Emacs to respond to 'C-g' (e.g., because
     'inhibit-quit' is set), then you can try sending the signal
     specified by 'debug-on-event' (default SIGUSR2) from outside Emacs
     to cause it to enter the debugger.

   * Check whether any programs you have loaded into the Lisp world,
     including your initialization file, set any variables that may
     affect the functioning of Emacs.  Also, see whether the problem
     happens in a freshly started Emacs without loading your
     initialization file (start Emacs with the '-Q' switch to prevent
     loading the init files).  If the problem does _not_ occur then, you
     must report the precise contents of any programs that you must load
     into the Lisp world in order to cause the problem to occur.

   * If the problem does depend on an init file or other Lisp programs
     that are not part of the standard Emacs system, then you should
     make sure it is not a bug in those programs by complaining to their
     maintainers first.  After they verify that they are using Emacs in
     a way that is supposed to work, they should report the bug.

   * If you wish to mention something in the GNU Emacs source, show the
     line of code with a few lines of context.  Don't just give a line
     number.

     The line numbers in the development sources don't match those in
     your sources.  It would take extra work for the maintainers to
     determine what code is in your version at a given line number, and
     we could not be certain.

   * Additional information from a C debugger such as GDB might enable
     someone to find a problem on a machine which he does not have
     available.  If you don't know how to use GDB, please read the GDB
     manual--it is not very long, and using GDB is easy.  You can find
     the GDB distribution, including the GDB manual in online form, in
     most of the same places you can find the Emacs distribution.  To
     run Emacs under GDB, you should switch to the 'src' subdirectory in
     which Emacs was compiled, then do 'gdb emacs'.  It is important for
     the directory 'src' to be current so that GDB will read the
     '.gdbinit' file in this directory.

     However, you need to think when you collect the additional
     information if you want it to show what causes the bug.

     For example, many people send just a C-level backtrace, but that is
     not very useful by itself.  A simple backtrace with arguments often
     conveys little about what is happening inside GNU Emacs, because
     most of the arguments listed in the backtrace are pointers to Lisp
     objects.  The numeric values of these pointers have no significance
     whatever; all that matters is the contents of the objects they
     point to (and most of the contents are themselves pointers).

     To provide useful information, you need to show the values of Lisp
     objects in Lisp notation.  Do this for each variable which is a
     Lisp object, in several stack frames near the bottom of the stack.
     Look at the source to see which variables are Lisp objects, because
     the debugger thinks of them as integers.

     To show a variable's value in Lisp syntax, first print its value,
     then use the user-defined GDB command 'pr' to print the Lisp object
     in Lisp syntax.  (If you must use another debugger, call the
     function 'debug_print' with the object as an argument.)  The 'pr'
     command is defined by the file '.gdbinit', and it works only if you
     are debugging a running process (not with a core dump).

     To make Lisp errors stop Emacs and return to GDB, put a breakpoint
     at 'Fsignal'.

     For a short listing of Lisp functions running, type the GDB command
     'xbacktrace'.

     The file '.gdbinit' defines several other commands that are useful
     for examining the data types and contents of Lisp objects.  Their
     names begin with 'x'.  These commands work at a lower level than
     'pr', and are less convenient, but they may work even when 'pr'
     does not, such as when debugging a core dump or when Emacs has had
     a fatal signal.

     More detailed advice and other useful techniques for debugging
     Emacs are available in the file 'etc/DEBUG' in the Emacs
     distribution.  That file also includes instructions for
     investigating problems whereby Emacs stops responding (many people
     assume that Emacs is "hung", whereas in fact it might be in an
     infinite loop).

     To find the file 'etc/DEBUG' in your Emacs installation, use the
     directory name stored in the variable 'data-directory'.

   Here are some things that are not necessary in a bug report:

   * A description of the envelope of the bug--this is not necessary for
     a reproducible bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time-consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  You might as well save time by not searching for
     additional examples.  It is better to send the bug report right
     away, go back to editing, and find another bug to report.

     Of course, if you can find a simpler example to report _instead_ of
     the original one, that is a convenience.  Errors in the output will
     be easier to spot, running under the debugger will take less time,
     etc.

     However, simplification is not vital; if you can't do this or don't
     have time to try, please report the bug with your original test
     case.

   * A core dump file.

     Debugging the core dump might be useful, but it can only be done on
     your machine, with your Emacs executable.  Therefore, sending the
     core dump file to the Emacs maintainers won't be useful.  Above
     all, don't include the core file in an email bug report!  Such a
     large message can be extremely inconvenient.

   * A system-call trace of Emacs execution.

     System-call traces are very useful for certain special kinds of
     debugging, but in most cases they give little useful information.
     It is therefore strange that many people seem to think that _the_
     way to report information about a crash is to send a system-call
     trace.  Perhaps this is a habit formed from experience debugging
     programs that don't have source code or debugging symbols.

     In most programs, a backtrace is normally far, far more informative
     than a system-call trace.  Even in Emacs, a simple backtrace is
     generally more informative, though to give full information you
     should supplement the backtrace by displaying variable values and
     printing them as Lisp objects with 'pr' (see above).

   * A patch for the bug.

     A patch for the bug is useful if it is a good one.  But don't omit
     the other information that a bug report needs, such as the test
     case, on the assumption that a patch is sufficient.  We might see
     problems with your patch and decide to fix the problem another way,
     or we might not understand it at all.  And if we can't understand
     what bug you are trying to fix, or why your patch should be an
     improvement, we mustn't install it.

     *Note Sending Patches::, for guidelines on how to make it easy for
     us to understand and install your patches.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even experts can't guess right
     about such things without first using the debugger to find the
     facts.

==============================================================================
File: emacs.info,  Node: |Sending_Patches|,  Prev: |Checklist|,  Up: |Bugs|
==============================================================================

                                                               *Sending_Patches*

52.5 Sending Patches for GNU Emacs
=====-----------------------------

If you would like to write bug fixes or improvements for GNU Emacs, that
is very helpful.  When you send your changes, please follow these
guidelines to make it easy for the maintainers to use them.  If you
don't follow these guidelines, your information might still be useful,
but using it will take extra work.  Maintaining GNU Emacs is a lot of
work in the best of circumstances, and we can't keep up unless you do
your best to help.

   Every patch must have several pieces of information before we can
properly evaluate it.

   When you have all these pieces, bundle them up in a mail message and
send it to the developers.  Sending it to <bug-gnu-emacs@gnu.org> (which
is the bug/feature list) is recommended, because that list is coupled to
a tracking system that makes it easier to locate patches.  If your patch
is not complete and you think it needs more discussion, you might want
to send it to <emacs-devel@gnu.org> instead.  If you revise your patch,
send it as a followup to the initial topic.

   We prefer to get the patches as plain text, either inline (be careful
your mail client does not change line breaks) or as MIME attachments.

   * Include an explanation with your changes of what problem they fix
     or what improvement they bring about.

        * For a fix for an existing bug, it is best to reply to the
          relevant discussion on the 'bug-gnu-emacs' list, or the bug
          entry in the GNU Bug Tracker at <https://debbugs.gnu.org>.
          Explain why your change fixes the bug.

        * For a new feature, include a description of the feature and
          your implementation.

        * For a new bug, include a proper bug report for the problem you
          think you have fixed.  We need to convince ourselves that the
          change is right before installing it.  Even if it is correct,
          we might have trouble understanding it if we don't have a way
          to reproduce the problem.

   * Include all the comments that are appropriate to help people
     reading the source in the future understand why this change was
     needed.

   * Don't mix together changes made for different reasons.  Send them
     _individually_.

     If you make two changes for separate reasons, then we might not
     want to install them both.  We might want to install just one.  If
     you send them all jumbled together in a single set of diffs, we
     have to do extra work to disentangle them--to figure out which parts
     of the change serve which purpose.  If we don't have time for this,
     we might have to ignore your changes entirely.

     If you send each change as soon as you have written it, with its
     own explanation, then two changes never get tangled up, and we can
     consider each one properly without any extra work to disentangle
     them.

   * Send each change as soon as that change is finished.  Sometimes
     people think they are helping us by accumulating many changes to
     send them all together.  As explained above, this is absolutely the
     worst thing you could do.

     Since you should send each change separately, you might as well
     send it right away.  That gives us the option of installing it
     immediately if it is important.

   * The patch itself.

     Use 'diff -u' to make your diffs.  Diffs without context are hard
     to install reliably.  More than that, they are hard to study; we
     must always study a patch to decide whether we want to install it.
     Context format is better than contextless diffs, but we prefer the
     unified format.

     If you have GNU diff, use 'diff -u -F'^[_a-zA-Z0-9$]\+ *('' when
     making diffs of C code.  This shows the name of the function that
     each change occurs in.

     If you are using the Emacs repository, make sure your copy is
     up-to-date (e.g., with 'git pull').  You can commit your changes to
     a private branch and generate a patch from the master version by
     using 'git format-patch master'.  Or you can leave your changes
     uncommitted and use 'git diff'.

   * Avoid any ambiguity as to which is the old version and which is the
     new.  Please make the old version the first argument to diff, and
     the new version the second argument.  And please give one version
     or the other a name that indicates whether it is the old version or
     your new changed one.

   * Write the commit log entries for your changes.  This is both to
     save us the extra work of writing them, and to help explain your
     changes so we can understand them.

     The purpose of the commit log is to show people where to find what
     was changed.  So you need to be specific about what functions you
     changed; in large functions, it's often helpful to indicate where
     within the function the change was.

     On the other hand, once you have shown people where to find the
     change, you need not explain its purpose in the change log.  Thus,
     if you add a new function, all you need to say about it is that it
     is new.  If you feel that the purpose needs explaining, it probably
     does--but put the explanation in comments in the code.  It will be
     more useful there.

     Please look at the commit log entries of recent commits to see what
     sorts of information to put in, and to learn the style that we use.
     Note that, unlike some other projects, we do require commit logs
     for documentation, i.e., Texinfo files.  *Note Change Log::, *Note
     Change Log Concepts: (standards)Change Log Concepts.

   * When you write the fix, keep in mind that we can't install a change
     that would break other systems.  Please think about what effect
     your change will have if compiled on another type of system.

     Sometimes people send fixes that _might_ be an improvement in
     general--but it is hard to be sure of this.  It's hard to install
     such changes because we have to study them very carefully.  Of
     course, a good explanation of the reasoning by which you concluded
     the change was correct can help convince us.

     The safest changes are changes to the configuration files for a
     particular machine.  These are safe because they can't create new
     bugs on other machines.

     Please help us keep up with the workload by designing the patch in
     a form that is clearly safe to install.

==============================================================================
File: emacs.info,  Node: |Contributing|,  Next: |Service|,  Prev: |Bugs|,  Up: |Top|
==============================================================================

                                                                  *Contributing*

53 Contributing to Emacs Development
*****===============================

Emacs is a collaborative project and we encourage contributions from
anyone and everyone.

   There are many ways to contribute to Emacs:

   * find and report bugs; *Note Bugs::.

   * answer questions on the Emacs user mailing list
     <https://lists.gnu.org/mailman/listinfo/help-gnu-emacs>.

   * write documentation, either on the wiki
     (https://www.emacswiki.org/), or in the Emacs source repository
     (*note Sending Patches::).

   * check if existing bug reports are fixed in newer versions of Emacs
     <https://debbugs.gnu.org/cgi/pkgreport.cgi?which=pkg&data=emacs>.

   * fix existing bug reports.

   * implement a feature listed in the 'etc/TODO' file in the Emacs
     distribution, and submit a patch.

   * implement a new feature, and submit a patch.

   * develop a package that works with Emacs, and publish it on your own
     or in GNU ELPA (<https://elpa.gnu.org/>).

   * port Emacs to a new platform, but that is not common nowadays.

   If you would like to work on improving Emacs, please contact the
maintainers at <emacs-devel@gnu.org>.  You can ask for suggested
projects or suggest your own ideas.

   If you have a feature request or a suggestion for how to improve
Emacs, the best place to send it is to <bug-gnu-emacs@gnu.org> .  Please
explain as clearly as possible what change you would like to see, and
why and how you think it would improve Emacs.

   If you have already written an improvement, please tell us about it.
If you have not yet started work, it is useful to contact
<emacs-devel@gnu.org> before you start; it might be possible to suggest
ways to make your extension fit in better with the rest of Emacs.

   When implementing a feature, please follow the Emacs coding
standards; *Note Coding Standards::.  In addition, non-trivial
contributions require a copyright assignment to the FSF; *Note Copyright
Assignment::.

   The development version of Emacs can be downloaded from the
repository where it is actively maintained by a group of developers.
See the Emacs project page <https://savannah.gnu.org/projects/emacs/>
for access details.

   It is important to write your patch based on the current working
version.  If you start from an older version, your patch may be outdated
(so that maintainers will have a hard time applying it), or changes in
Emacs may have made your patch unnecessary.  After you have downloaded
the repository source, you should read the file 'INSTALL.REPO' for build
instructions (they differ to some extent from a normal build).

   If you would like to make more extensive contributions, see the
'CONTRIBUTE' file in the Emacs distribution for information on how to be
an Emacs developer.

   For documentation on Emacs (to understand how to implement your
desired change), refer to:

   * *Note Emacs Manual: (emacs)Top.

   * *Note Emacs Lisp Reference Manual: (elisp)Top.

   * <https://www.gnu.org/software/emacs>

   * <https://www.emacswiki.org/>

MENU

* |Coding_Standards|::        GNU Emacs coding standards
* |Copyright_Assignment|::    assigning copyright to the FSF

==============================================================================
File: emacs.info,  Node: |Coding_Standards|,  Next: |Copyright_Assignment|,  Up: |Contributing|
==============================================================================

                                                              *Coding_Standards*

53.1 Coding Standards
=====----------------

Contributed code should follow the GNU Coding Standards
<https://www.gnu.org/prep/standards/>.  This may also be available in
info on your system.

   If it doesn't, we'll need to find someone to fix the code before we
can use it.

   Emacs has additional style and coding conventions:

   * *Note "Tips and Conventions" Appendix in the Emacs Lisp Reference:
     (elisp)Tips.

   * Avoid using 'defadvice' or 'with-eval-after-load' for Lisp code to
     be included in Emacs.

   * Remove all trailing whitespace in all source and text files.

   * Emacs has no convention on whether to use tabs in source code;
     please don't change whitespace in the files you edit.

   * Use '?\s' instead of '? ' in Lisp code for a space character.

==============================================================================
File: emacs.info,  Node: |Copyright_Assignment|,  Prev: |Coding_Standards|,  Up: |Contributing|
==============================================================================

                                                          *Copyright_Assignment*

53.2 Copyright Assignment
=====--------------------

The FSF (Free Software Foundation) is the copyright holder for GNU
Emacs.  The FSF is a nonprofit with a worldwide mission to promote
computer user freedom and to defend the rights of all free software
users.  For general information, see the website <https://www.fsf.org/>.

   Generally speaking, for non-trivial contributions to GNU Emacs and
packages stored in GNU ELPA, we require that the copyright be assigned
to the FSF.  For the reasons behind this, see
<https://www.gnu.org/licenses/why-assign.html>.

   Copyright assignment is a simple process.  Residents of some
countries can do it entirely electronically.  We can help you get
started, including sending you the forms you should fill, and answer any
questions you may have (or point you to the people with the answers), at
the <emacs-devel@gnu.org> mailing list.

   (Please note: general discussion about why some GNU projects ask for
a copyright assignment is off-topic for emacs-devel.  See
gnu-misc-discuss instead.)

   A copyright disclaimer is also a possibility, but we prefer an
assignment.  Note that the disclaimer, like an assignment, involves you
sending signed paperwork to the FSF (simply saying "this is in the
public domain" is not enough).  Also, a disclaimer cannot be applied to
future work, it has to be repeated each time you want to send something
new.

   We can accept small changes (roughly, fewer than 15 lines) without an
assignment.  This is a cumulative limit (e.g., three separate 5 line
patches) over all your contributions.

==============================================================================
File: emacs.info,  Node: |Service|,  Next: |Copying|,  Prev: |Contributing|,  Up: |Top|
==============================================================================

                                                                       *Service*

54 How To Get Help with GNU Emacs
*****============================

If you need help installing, using or changing GNU Emacs, there are two
ways to find it:

   * Send a message to the mailing list <help-gnu-emacs@gnu.org>, or
     post your request on newsgroup 'gnu.emacs.help'.  (This mailing
     list and newsgroup interconnect, so it does not matter which one
     you use.)

   * Look in the service directory
     (https://www.fsf.org/resources/service/) for someone who might help
     you for a fee.

==============================================================================
File: emacs.info,  Node: |Copying|,  Next: |GNU_Free_Documentation_License|,  Prev: |Service|,  Up: |Top|
==============================================================================

                                                                       *Copying*

Appendix A GNU GENERAL PUBLIC LICENSE
*****================================

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
=====---

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
=====---------------

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
=====----------------------

How to Apply These Terms to Your New Programs
=====----------------------------------------

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <https://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/licenses/why-not-lgpl.html>.

==============================================================================
File: emacs.info,  Node: |GNU_Free_Documentation_License|,  Next: |Emacs_Invocation|,  Prev: |Copying|,  Up: |Top|
==============================================================================

                                                *GNU_Free_Documentation_License*

Appendix B GNU Free Documentation License
*****====================================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
=====-----------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

==============================================================================
File: emacs.info,  Node: |Emacs_Invocation|,  Next: |X_Resources|,  Prev: |GNU_Free_Documentation_License|,  Up: |Top|
==============================================================================

                                                              *Emacs_Invocation*

Appendix C Command Line Arguments for Emacs Invocation
*****=================================================

Emacs supports command line arguments to request various actions when
invoking Emacs.  These are for compatibility with other editors and for
sophisticated activities.  We don't recommend using them for ordinary
editing (*Note Emacs Server::, for a way to access an existing Emacs job
from the command line).

   Arguments starting with '-' are "options", and so is '+LINENUM'.  All
other arguments specify files to visit.  Emacs visits the specified
files while it starts up.  The last file specified on the command line
becomes the current buffer; the other files are also visited in other
buffers.  As with most programs, the special argument '--' says that all
subsequent arguments are file names, not options, even if they start
with '-'.

   Emacs command options can specify many things, such as the size and
position of the X window Emacs uses, its colors, and so on.  A few
options support advanced usage, such as running Lisp functions on files
in batch mode.  The sections of this chapter describe the available
options, arranged according to their purpose.

   There are two ways of writing options: the short forms that start
with a single '-', and the long forms that start with '--'.  For
example, '-d' is a short form and '--display' is the corresponding long
form.

   The long forms with '--' are easier to remember, but longer to type.
However, you don't have to spell out the whole option name; any
unambiguous abbreviation is enough.  When a long option requires an
argument, you can use either a space or an equal sign to separate the
option name and the argument.  Thus, for the option '--display', you can
write either '--display sugar-bombs:0.0' or '--display=sugar-bombs:0.0'.
We recommend an equal sign because it makes the relationship clearer,
and the tables below always show an equal sign.

   Most options specify how to initialize Emacs, or set parameters for
the Emacs session.  We call them "initial options".  A few options
specify things to do, such as loading libraries or calling Lisp
functions.  These are called "action options".  These and file names
together are called "action arguments".  The action arguments are stored
as a list of strings in the variable 'command-line-args'.  (Actually,
when Emacs starts up, 'command-line-args' contains all the arguments
passed from the command line; during initialization, the initial
arguments are removed from this list when they are processed, leaving
only the action arguments.)

MENU

* |Action_Arguments|::    Arguments to visit files, load libraries,
                          and call functions.
* |Initial_Options|::     Arguments that take effect while starting Emacs.
* |Command_Example|::     Examples of using command line arguments.
* |Environment|::         Environment variables that Emacs uses.
* |Display_X|::           Changing the default display and using remote login.
* |Font_X|::              Choosing a font for text, under X.
* |Colors_X|::            Choosing display colors.
* |Window_Size_X|::       Start-up window size, under X.
* |Borders_X|::           Internal and outer borders, under X.
* |Title_X|::             Specifying the initial frame's title.
* |Icons_X|::             Choosing what sort of icon to use, under X.
* |Misc_X|::              Other display options.

==============================================================================
File: emacs.info,  Node: |Action_Arguments|,  Next: |Initial_Options|,  Up: |Emacs_Invocation|
==============================================================================

                                                              *Action_Arguments*

C.1 Action Arguments
=====---------------

Here is a table of action arguments:

'FILE'
'--file=FILE'
'--find-file=FILE'
'--visit=FILE'
     Visit the specified FILE.  *Note Visiting::.

     When Emacs starts up, it displays the startup buffer in one window,
     and the buffer visiting FILE in another window (*note Windows::).
     If you supply more than one file argument, the displayed file is
     the last one specified on the command line; the other files are
     visited but their buffers are not shown.

     If the startup buffer is disabled (*note Entering Emacs::), then
     starting Emacs with one file argument displays the buffer visiting
     FILE in a single window.  With two file arguments, Emacs displays
     the files in two different windows.  With more than two file
     arguments, Emacs displays the last file specified in one window,
     plus another window with a Buffer Menu showing all the other files
     (*note Several Buffers::).  To inhibit using the Buffer Menu for
     this, change the variable 'inhibit-startup-buffer-menu' to 't'.

'+LINENUM FILE'
     Visit the specified FILE, then go to line number LINENUM in it.

'+LINENUM:COLUMNNUM FILE'
     Visit the specified FILE, then go to line number LINENUM and put
     point at column number COLUMNNUM.

'-l FILE'
'--load=FILE'
     Load a Lisp library named FILE with the function 'load'.  If FILE
     is not an absolute file name, Emacs first looks for it in the
     current directory, then in the directories listed in 'load-path'
     (*note Lisp Libraries::).

     Warning: If previous command-line arguments have visited files,
     the current directory is the directory of the last file visited.

'-L DIR'
'--directory=DIR'
     Prepend directory DIR to the variable 'load-path'.  If you specify
     multiple '-L' options, Emacs preserves the relative order; i.e.,
     using '-L /foo -L /bar' results in a 'load-path' of the form
     '("/foo" "/bar" ...)'.  If DIR begins with ':', Emacs removes the
     ':' and appends (rather than prepends) the remainder to
     'load-path'.  (On MS Windows, use ';' instead of ':'; i.e., use the
     value of 'path-separator'.)

'-f FUNCTION'
'--funcall=FUNCTION'
     Call Lisp function FUNCTION.  If it is an interactive function (a
     command), it reads the arguments interactively just as if you had
     called the same function with a key sequence.  Otherwise, it calls
     the function with no arguments.

'--eval=EXPRESSION'
'--execute=EXPRESSION'
     Evaluate Lisp expression EXPRESSION.

'--insert=FILE'
     Insert the contents of FILE into the buffer that is current when
     this command-line argument is processed.  Usually, this is the
     'scratch' buffer (*note Lisp Interaction::), but if arguments
     earlier on the command line visit files or switch buffers, that
     might be a different buffer.  The effect of this command-line
     argument is like what 'M-x insert-file' does (*note Misc File
     Ops::).

'--kill'
     Exit from Emacs without asking for confirmation.

'--help'
     Print a usage message listing all available options, then exit
     successfully.

'--version'
     Print Emacs version, then exit successfully.

==============================================================================
File: emacs.info,  Node: |Initial_Options|,  Next: |Command_Example|,  Prev: |Action_Arguments|,  Up: |Emacs_Invocation|
==============================================================================

                                                               *Initial_Options*

C.2 Initial Options
=====--------------

The initial options specify parameters for the Emacs session.  This
section describes the more general initial options; some other options
specifically related to the X Window System appear in the following
sections.

   Some initial options affect the loading of the initialization file.
Normally, Emacs first loads 'site-start.el' if it exists, then your own
initialization file if it exists, and finally the default initialization
file 'default.el' if it exists (*note Init File::).  Certain options
prevent loading of some of these files or substitute other files for
them.

'-chdir DIRECTORY'
'--chdir=DIRECTORY'
     Change to DIRECTORY before doing anything else.  This is mainly
     used by session management in X so that Emacs starts in the same
     directory as it stopped.  This makes desktop saving and restoring
     easier.

'-t DEVICE'
'--terminal=DEVICE'
     Use DEVICE as the device for terminal input and output.  This
     option implies '--no-window-system'.

'-d DISPLAY'
'--display=DISPLAY'
     Use the X Window System and use the display named DISPLAY to open
     the initial Emacs frame.  *Note Display X::, for more details.

'-nw'
'--no-window-system'
     Don't communicate directly with the window system, disregarding the
     'DISPLAY' environment variable even if it is set.  This means that
     Emacs uses the terminal from which it was launched for all its
     display and input.

'-batch'
'--batch'
     Run Emacs in "batch mode".  Batch mode is used for running programs
     written in Emacs Lisp from shell scripts, makefiles, and so on.  To
     invoke a Lisp program, use the '-batch' option in conjunction with
     one or more of '-l', '-f' or '--eval' (*note Action Arguments::).
     *Note Command Example::, for an example.

     In batch mode, Emacs does not display the text being edited, and
     the standard terminal interrupt characters such as 'C-z' and 'C-c'
     have their usual effect.  Emacs functions that normally print a
     message in the echo area will print to either the standard output
     stream ('stdout') or the standard error stream ('stderr') instead.
     (To be precise, functions like 'prin1', 'princ' and 'print' print
     to 'stdout', while 'message' and 'error' print to 'stderr'.)
     Functions that normally read keyboard input from the minibuffer
     take their input from the terminal's standard input stream
     ('stdin') instead.

     '--batch' implies '-q' (do not load an initialization file), but
     'site-start.el' is loaded nonetheless.  It also causes Emacs to
     exit after processing all the command options.  In addition, it
     disables auto-saving except in buffers for which auto-saving is
     explicitly requested, and when saving files it omits the 'fsync'
     system call unless otherwise requested.

'--script FILE'
     Run Emacs in batch mode, like '--batch', and then read and execute
     the Lisp code in FILE.

     The normal use of this option is in executable script files that
     run Emacs.  They can start with this text on the first line

          #!/usr/bin/emacs --script

     which will invoke Emacs with '--script' and supply the name of the
     script file as FILE.  Emacs Lisp then treats the '#!' on this first
     line as a comment delimiter.

'--no-build-details'
     Omit details like system name and build time from the Emacs
     executable, so that builds are more deterministic.  This switch is
     not meant for regular (or interactive) use, since it makes commands
     like 'system-name' return 'nil'.

'-q'
'--no-init-file'
     Do not load any initialization file (*note Init File::).  When
     Emacs is invoked with this option, the Customize facility does not
     allow options to be saved (*note Easy Customization::).  This
     option does not disable loading 'site-start.el'.

'--no-site-file'
'-nsl'
     Do not load 'site-start.el' (*note Init File::).  The '-Q' option
     does this too, but other options like '-q' do not.

'--no-site-lisp'
     Do not include the 'site-lisp' directories in 'load-path' (*note
     Init File::).  The '-Q' option does this too.

'--no-splash'
     Do not display a startup screen.  You can also achieve this effect
     by setting the variable 'inhibit-startup-screen' to non-'nil' in
     your initialization file (*note Entering Emacs::).

'--no-x-resources'
     Do not load X resources.  You can also achieve this effect by
     setting the variable 'inhibit-x-resources' to 't' in your
     initialization file (*note Resources::).

'-Q'
'--quick'
     Start Emacs with minimum customizations.  This is similar to using
     '-q', '--no-site-file', '--no-site-lisp', '--no-x-resources', and
     '--no-splash' together.

'-daemon'
'--daemon[=NAME]'
'--bg-daemon[=NAME]'
'--fg-daemon[=NAME]'
     Start Emacs as a daemon: after Emacs starts up, it starts the Emacs
     server without opening any frames.  You can then use the
     'emacsclient' command to connect to Emacs for editing.
     (Optionally, you can specify an explicit NAME for the server; if
     you do, you will need to specify the same NAME when you invoke
     'emacsclient', via its '--socket-name' option, see *note
     emacsclient Options::.)  *Note Emacs Server::, for information
     about using Emacs as a daemon.  A "background" daemon disconnects
     from the terminal and runs in the background ('--daemon' is an
     alias for '--bg-daemon').

'--no-desktop'
     Do not reload any saved desktop.  *Note Saving Emacs Sessions::.

'-u USER'
'--user=USER'
     Load USER's initialization file instead of your own(1).

'--debug-init'
     Enable the Emacs Lisp debugger for errors in the init file.  *Note
     Entering the Debugger on an Error: (elisp)Error Debugging.

'--module-assertions'
     Enable expensive correctness checks when dealing with dynamically
     loadable modules.  This is intended for module authors that wish to
     verify that their module conforms to the module API requirements.
     The option makes Emacs abort if a module-related assertion
     triggers.  *Note Writing Dynamically-Loaded Modules: (elisp)Writing
     Dynamic Modules.

'--dump-file=FILE'
     Load the dumped Emacs state from the named FILE.  By default, an
     installed Emacs will look for its dump state in a file named
     'EMACS.pdmp' in the directory where the Emacs installation puts the
     architecture-dependent files; the variable 'exec-directory' holds
     the name of that directory.  EMACS is the name of the Emacs
     executable file, normally just 'emacs'.  (When you invoke Emacs
     from the 'src' directory where it was built without installing it,
     it will look for the dump file in the directory of the executable.)
     If you rename or move the dump file to a different place, you can
     use this option to tell Emacs where to find that file.

   ---------- Footnotes ----------

   (1) This option has no effect on MS-Windows.

==============================================================================
File: emacs.info,  Node: |Command_Example|,  Next: |Environment|,  Prev: |Initial_Options|,  Up: |Emacs_Invocation|
==============================================================================

                                                               *Command_Example*

C.3 Command Argument Example
=====-----------------------

Here is an example of using Emacs with arguments and options.  It
assumes you have a Lisp program file called 'hack-c.el' which, when
loaded, performs some useful operation on the current buffer, expected
to be a C program.

     emacs --batch foo.c -l hack-c -f save-buffer >& log

This says to visit 'foo.c', load 'hack-c.el' (which makes changes in the
visited file), save 'foo.c' (note that 'save-buffer' is the function
that 'C-x C-s' is bound to), and then exit back to the shell (because of
'--batch').  '--batch' also guarantees there will be no problem
redirecting output to 'log', because Emacs will not assume that it has a
display terminal to work with.

==============================================================================
File: emacs.info,  Node: |Environment|,  Next: |Display_X|,  Prev: |Command_Example|,  Up: |Emacs_Invocation|
==============================================================================

                                                                   *Environment*

C.4 Environment Variables
=====--------------------

The "environment" is a feature of the operating system; it consists of a
collection of variables with names and values.  Each variable is called
an "environment variable"; environment variable names are
case-sensitive, and it is conventional to use upper case letters only.
The values are all text strings.

   What makes the environment useful is that subprocesses inherit the
environment automatically from their parent process.  This means you can
set up an environment variable in your login shell, and all the programs
you run (including Emacs) will automatically see it.  Subprocesses of
Emacs (such as shells, compilers, and version control programs) inherit
the environment from Emacs, too.

   Inside Emacs, the command 'M-x getenv' reads the name of an
environment variable, and prints its value in the echo area.  'M-x
setenv' sets a variable in the Emacs environment, and 'C-u M-x setenv'
removes a variable.  (Environment variable substitutions with '$' work
in the value just as in file names; see *note File Names with $::.)  The
variable 'initial-environment' stores the initial environment inherited
by Emacs.

   The way to set environment variables outside of Emacs depends on the
operating system, and especially the shell that you are using.  For
example, here's how to set the environment variable 'ORGANIZATION' to
'not very much' using Bash:

     export ORGANIZATION="not very much"

and here's how to do it in csh or tcsh:

     setenv ORGANIZATION "not very much"

   When Emacs is using the X Window System, various environment
variables that control X work for Emacs as well.  See the X
documentation for more information.

MENU

* |General_Variables|::   Environment variables that all versions of Emacs use.
* |Misc_Variables|::      Certain system-specific variables.
* |MS_Windows_Registry|:: An alternative to the environment on MS-Windows.

==============================================================================
File: emacs.info,  Node: |General_Variables|,  Next: |Misc_Variables|,  Up: |Environment|
==============================================================================

                                                             *General_Variables*

C.4.1 General Variables
-----------------------

Here is an alphabetical list of environment variables that have special
meanings in Emacs.  Most of these variables are also used by some other
programs.  Emacs does not require any of these environment variables to
be set, but it uses their values if they are set.

'CDPATH'
     Used by the 'cd' command to search for the directory you specify,
     when you specify a relative directory,
'DBUS_SESSION_BUS_ADDRESS'
     Used by D-Bus when Emacs is compiled with it.  Usually, there is no
     need to change it.  Setting it to a dummy address, like
     'unix:path=/dev/null', suppresses connections to the D-Bus session
     bus as well as autolaunching the D-Bus session bus if not running
     yet.
'EMACSDATA'
     Directory for the architecture-independent files that come with
     Emacs.  This is used to initialize the variable 'data-directory'.
'EMACSDOC'
     Directory for the documentation string file, which is used to
     initialize the Lisp variable 'doc-directory'.
'EMACSLOADPATH'
     A colon-separated list of directories(1) to search for Emacs Lisp
     files.  If set, it modifies the usual initial value of the
     'load-path' variable (*note Lisp Libraries::).  An empty element
     stands for the default value of 'load-path'; e.g., using
     'EMACSLOADPATH="/tmp:"' adds '/tmp' to the front of the default
     'load-path'.  To specify an empty element in the middle of the
     list, use 2 colons in a row, as in 'EMACSLOADPATH="/tmp::/foo"'.
'EMACSPATH'
     A colon-separated list of directories to search for executable
     files.  If set, Emacs uses this in addition to 'PATH' (see below)
     when initializing the variable 'exec-path' (*note Shell::).
'EMAIL'
     Your email address; used to initialize the Lisp variable
     'user-mail-address', which the Emacs mail interface puts into the
     'From' header of outgoing messages (*note Mail Headers::).
'ESHELL'
     Used for shell-mode to override the 'SHELL' environment variable
     (*note Interactive Shell::).
'HISTFILE'
     The name of the file that shell commands are saved in between
     logins.  This variable defaults to '~/.bash_history' if you use
     Bash, to '~/.sh_history' if you use ksh, and to '~/.history'
     otherwise.
'HOME'
     The location of your files in the directory tree; used for
     expansion of file names starting with a tilde ('~').  If set, it
     should be set to an absolute file name.  (If set to a relative file
     name, Emacs interprets it relative to the directory where Emacs was
     started, but we don't recommend to use this feature.)  If unset,
     'HOME' normally defaults to the home directory of the user given by
     'LOGNAME', 'USER' or your user ID, or to '/' if all else fails.  On
     MS-DOS, it defaults to the directory from which Emacs was started,
     with '/bin' removed from the end if it was present.  On Windows,
     the default value of 'HOME' is the 'Application Data' subdirectory
     of the user profile directory (normally, this is 'C:/Documents and
     Settings/USERNAME/Application Data', where USERNAME is your user
     name), though for backwards compatibility 'C:/' will be used
     instead if a '.emacs' file is found there.
'HOSTNAME'
     The name of the machine that Emacs is running on.
'INFOPATH'
     A colon-separated list of directories in which to search for Info
     files.
'LC_ALL'
'LC_COLLATE'
'LC_CTYPE'
'LC_MESSAGES'
'LC_MONETARY'
'LC_NUMERIC'
'LC_TIME'
'LANG'
     The user's preferred locale.  The locale has six categories,
     specified by the environment variables 'LC_COLLATE' for sorting,
     'LC_CTYPE' for character encoding, 'LC_MESSAGES' for system
     messages, 'LC_MONETARY' for monetary formats, 'LC_NUMERIC' for
     numbers, and 'LC_TIME' for dates and times.  If one of these
     variables is not set, the category defaults to the value of the
     'LANG' environment variable, or to the default 'C' locale if 'LANG'
     is not set.  But if 'LC_ALL' is specified, it overrides the
     settings of all the other locale environment variables.

     On MS-Windows and macOS, if 'LANG' is not already set in the
     environment, Emacs sets it based on the system-wide default.  You
     can set this in the "Regional Settings" Control Panel on some
     versions of MS-Windows, and in the "Language and Region" System
     Preference on macOS.

     The value of the 'LC_CTYPE' category is matched against entries in
     'locale-language-names', 'locale-charset-language-names', and
     'locale-preferred-coding-systems', to select a default language
     environment and coding system.  *Note Language Environments::.
'LOGNAME'
     The user's login name.  See also 'USER'.
'MAIL'
     The name of your system mail inbox.
'MH'
     Name of setup file for the mh system.  *Note MH-E: (mh-e)Top.
'NAME'
     Your real-world name.  This is used to initialize the variable
     'user-full-name' (*note Mail Headers::).
'NNTPSERVER'
     The name of the news server.  Used by the mh and Gnus packages.
'ORGANIZATION'
     The name of the organization to which you belong.  Used for setting
     the 'Organization:' header in your posts from the Gnus package.
'PATH'
     A colon-separated list of directories containing executable files.
     This is used to initialize the variable 'exec-path' (*note
     Shell::).
'PWD'
     If set, this should be the default directory when Emacs was
     started.
'REPLYTO'
     If set, this specifies an initial value for the variable
     'mail-default-reply-to' (*note Mail Headers::).
'SAVEDIR'
     The name of a directory in which news articles are saved by
     default.  Used by the Gnus package.
'SHELL'
     The name of an interpreter used to parse and execute programs run
     from inside Emacs.
'SMTPSERVER'
     The name of the outgoing mail server.  This is used to initialize
     the variable 'smtpmail-smtp-server' (*note Mail Sending::).
'TERM'
     The type of the terminal that Emacs is using.  This variable must
     be set unless Emacs is run in batch mode.  On MS-DOS, it defaults
     to 'internal', which specifies a built-in terminal emulation that
     handles the machine's own display.
'TERMCAP'
     The name of the termcap library file describing how to program the
     terminal specified by 'TERM'.  This defaults to '/etc/termcap'.
'TMPDIR'
'TMP'
'TEMP'
     These environment variables are used to initialize the variable
     'temporary-file-directory', which specifies a directory in which to
     put temporary files (*note Backup::).  Emacs tries to use 'TMPDIR'
     first.  If that is unset, Emacs normally falls back on '/tmp', but
     on MS-Windows and MS-DOS it instead falls back on 'TMP', then
     'TEMP', and finally 'c:/temp'.
'TZ'
     This specifies the default time zone and possibly also daylight
     saving time information.  *Note (elisp)Time Zone Rules::.  On
     MS-DOS, if 'TZ' is not set in the environment when Emacs starts,
     Emacs defines a default value as appropriate for the country code
     returned by DOS.  On MS-Windows, Emacs does not use 'TZ' at all.
'USER'
     The user's login name.  See also 'LOGNAME'.  On MS-DOS, this
     defaults to 'root'.
'VERSION_CONTROL'
     Used to initialize the 'version-control' variable (*note Backup
     Names::).

   ---------- Footnotes ----------

   (1) Here and below, whenever we say "colon-separated list of
directories", it pertains to Unix and GNU/Linux systems.  On MS-DOS and
MS-Windows, the directories are separated by semi-colons instead, since
DOS/Windows file names might include a colon after a drive letter.

==============================================================================
File: emacs.info,  Node: |Misc_Variables|,  Next: |MS_Windows_Registry|,  Prev: |General_Variables|,  Up: |Environment|
==============================================================================

                                                                *Misc_Variables*

C.4.2 Miscellaneous Variables
-----------------------------

These variables are used only on particular configurations:

'COMSPEC'
     On MS-DOS and MS-Windows, the name of the command interpreter to
     use when invoking batch files and commands internal to the shell.
     On MS-DOS this is also used to make a default value for the 'SHELL'
     environment variable.

'NAME'
     On MS-DOS, this variable defaults to the value of the 'USER'
     variable.

'EMACSTEST'
     On MS-DOS, this specifies a file to use to log the operation of the
     internal terminal emulator.  This feature is useful for submitting
     bug reports.

'EMACSCOLORS'
     On MS-DOS, this specifies the screen colors.  It is useful to set
     them this way, since otherwise Emacs would display the default
     colors momentarily when it starts up.

     The value of this variable should be the two-character encoding of
     the foreground (the first character) and the background (the second
     character) colors of the default face.  Each character should be
     the hexadecimal code for the desired color on a standard PC
     text-mode display.  For example, to get blue text on a light gray
     background, specify 'EMACSCOLORS=17', since 1 is the code of the
     blue color and 7 is the code of the light gray color.

     The PC display usually supports only eight background colors.
     However, Emacs switches the DOS display to a mode where all 16
     colors can be used for the background, so all four bits of the
     background color are actually used.

'PRELOAD_WINSOCK'
     On MS-Windows, if you set this variable, Emacs will load and
     initialize the network library at startup, instead of waiting until
     the first time it is required.

'emacs_dir'
     On MS-Windows, 'emacs_dir' is a special environment variable, which
     indicates the full path of the directory in which Emacs is
     installed.  If Emacs is installed in the standard directory
     structure, it calculates this value automatically.  It is not much
     use setting this variable yourself unless your installation is
     non-standard, since unlike other environment variables, it will be
     overridden by Emacs at startup.  When setting other environment
     variables, such as 'EMACSLOADPATH', you may find it useful to use
     'emacs_dir' rather than hard-coding an absolute path.  This allows
     multiple versions of Emacs to share the same environment variable
     settings, and it allows you to move the Emacs installation
     directory, without changing any environment or registry settings.

==============================================================================
File: emacs.info,  Node: |MS_Windows_Registry|,  Prev: |Misc_Variables|,  Up: |Environment|
==============================================================================

                                                           *MS_Windows_Registry*

C.4.3 The MS-Windows System Registry
------------------------------------

On MS-Windows, the installation program 'addpm.exe' adds values for
'emacs_dir', 'EMACSLOADPATH', 'EMACSDATA', 'EMACSPATH', 'EMACSDOC',
'SHELL' and 'TERM' to the 'HKEY_LOCAL_MACHINE' section of the system
registry, under '/Software/GNU/Emacs'.  It does this because there is no
standard place to set environment variables across different versions of
Windows.  Running 'addpm.exe' is no longer strictly necessary in recent
versions of Emacs, but if you are upgrading from an older version,
running 'addpm.exe' ensures that you do not have older registry entries
from a previous installation, which may not be compatible with the
latest version of Emacs.

   When Emacs starts, as well as checking the environment, it also
checks the System Registry for those variables and for 'HOME', 'LANG'
and 'PRELOAD_WINSOCK'.

   To determine the value of those variables, Emacs goes through the
following procedure.  First, the environment is checked.  If the
variable is not found there, Emacs looks for registry keys by that name
under '/Software/GNU/Emacs'; first in the 'HKEY_CURRENT_USER' section of
the registry, and if not found there, in the 'HKEY_LOCAL_MACHINE'
section.  Finally, if Emacs still cannot determine the values,
compiled-in defaults are used.

   In addition to the environment variables above, you can also add
settings to the '/Software/GNU/Emacs' registry key to specify X
resources (*note X Resources::).  Most of the settings you can specify
in your '.Xdefaults' file can be set from that registry key.

==============================================================================
File: emacs.info,  Node: |Display_X|,  Next: |Font_X|,  Prev: |Environment|,  Up: |Emacs_Invocation|
==============================================================================

                                                                     *Display_X*

C.5 Specifying the Display Name
=====--------------------------

The environment variable 'DISPLAY' tells all X clients, including Emacs,
where to display their windows.  Its value is set by default in ordinary
circumstances, when you start an X server and run jobs locally.  You can
specify the display yourself; one reason to do this is if you want to
log into another system and run Emacs there, and have the window
displayed at your local terminal.

   'DISPLAY' has the syntax 'HOST:DISPLAY.SCREEN', where HOST is the
host name of the X Window System server machine, DISPLAY is an
arbitrarily-assigned number that distinguishes your server (X terminal)
from other servers on the same machine, and SCREEN is a field that
allows an X server to control multiple terminal screens.  The period and
the SCREEN field are optional.  If included, SCREEN is usually zero.

   For example, if your host is named 'glasperle' and your server is the
first (or perhaps the only) server listed in the configuration, your
'DISPLAY' is 'glasperle:0.0'.

   You can specify the display name explicitly when you run Emacs,
either by changing the 'DISPLAY' variable, or with the option '-d
DISPLAY' or '--display=DISPLAY'.  Here is an example:

     emacs --display=glasperle:0 &

   You can inhibit the use of the X window system with the '-nw' option.
Then Emacs uses its controlling text terminal for display.  *Note
Initial Options::.

   Sometimes, security arrangements prevent a program on a remote system
from displaying on your local system.  In this case, trying to run Emacs
produces messages like this:

     Xlib:  connection to "glasperle:0.0" refused by server

You might be able to overcome this problem by using the 'xhost' command
on the local system to give permission for access from your remote
machine.

==============================================================================
File: emacs.info,  Node: |Font_X|,  Next: |Colors_X|,  Prev: |Display_X|,  Up: |Emacs_Invocation|
==============================================================================

                                                                        *Font_X*

C.6 Font Specification Options
=====-------------------------

You can use the command line option '-fn FONT' (or '--font', which is an
alias for '-fn') to specify a default font:

'-fn FONT'
'--font=FONT'
     Use FONT as the default font.

   When passing a font name to Emacs on the command line, you may need
to quote it, by enclosing it in quotation marks, if it contains
characters that the shell treats specially (e.g., spaces).  For example:

     emacs -fn "DejaVu Sans Mono-12"

   *Note Fonts::, for details about font names and other ways to specify
the default font.

==============================================================================
File: emacs.info,  Node: |Colors_X|,  Next: |Window_Size_X|,  Prev: |Font_X|,  Up: |Emacs_Invocation|
==============================================================================

                                                                      *Colors_X*

C.7 Window Color Options
=====-------------------

You can use the following command-line options to specify the colors to
use for various parts of the Emacs display.  Colors may be specified
using either color names or RGB triplets (*note Colors::).

'-fg COLOR'
'--foreground-color=COLOR'
     Specify the foreground color, overriding the color specified by the
     'default' face (*note Faces::).
'-bg COLOR'
'--background-color=COLOR'
     Specify the background color, overriding the color specified by the
     'default' face.
'-bd COLOR'
'--border-color=COLOR'
     Specify the color of the border of the X window.  This has no
     effect if Emacs is compiled with GTK+ support.
'-cr COLOR'
'--cursor-color=COLOR'
     Specify the color of the Emacs cursor which indicates where point
     is.
'-ms COLOR'
'--mouse-color=COLOR'
     Specify the color for the mouse cursor when the mouse is in the
     Emacs window.
'-r'
'-rv'
'--reverse-video'
     Reverse video: swap the foreground and background colors.
'--color=MODE'
     Set the "color support mode" when Emacs is run on a text terminal.
     This option overrides the number of supported colors that the
     character terminal advertises in its 'termcap' or 'terminfo'
     database.  The parameter MODE can be one of the following:
     'never'
     'no'
          Don't use colors even if the terminal's capabilities specify
          color support.
     'default'
     'auto'
          Same as when '--color' is not used at all: Emacs detects at
          startup whether the terminal supports colors, and if it does,
          turns on colored display.
     'always'
     'yes'
     'ansi8'
          Turn on the color support unconditionally, and use color
          commands specified by the ANSI escape sequences for the 8
          standard colors.
     'NUM'
          Use color mode for NUM colors.  If NUM is -1, turn off color
          support (equivalent to 'never'); if it is 0, use the default
          color support for this terminal (equivalent to 'auto');
          otherwise use an appropriate standard mode for NUM colors.
          Depending on your terminal's capabilities, Emacs might be able
          to turn on a color mode for 8, 16, 88, or 256 as the value of
          NUM.  If there is no mode that supports NUM colors, Emacs acts
          as if NUM were 0, i.e., it uses the terminal's default color
          support mode.
     If MODE is omitted, it defaults to ANSI8.

   For example, to use a coral mouse cursor and a slate blue text
cursor, enter:

     emacs -ms coral -cr 'slate blue' &

   You can reverse the foreground and background colors through the
'-rv' option or with the X resource 'reverseVideo'.

   The '-fg', '-bg', and '-rv' options function on text terminals as
well as on graphical displays.

==============================================================================
File: emacs.info,  Node: |Window_Size_X|,  Next: |Borders_X|,  Prev: |Colors_X|,  Up: |Emacs_Invocation|
==============================================================================

                                                                 *Window_Size_X*

C.8 Options for Window Size and Position
=====-----------------------------------

Here is a list of the command-line options for specifying size and
position of the initial Emacs frame:

'-g WIDTHxHEIGHT[{+-}XOFFSET{+-}YOFFSET]]'
'--geometry=WIDTHxHEIGHT[{+-}XOFFSET{+-}YOFFSET]]'
     Specify the size WIDTH and HEIGHT (measured in character columns
     and lines), and positions XOFFSET and YOFFSET (measured in pixels).
     The WIDTH and HEIGHT parameters apply to all frames, whereas
     XOFFSET and YOFFSET only to the initial frame.

'-fs'
'--fullscreen'
     Specify that width and height should be that of the screen.
     Normally no window manager decorations are shown.  (After starting
     Emacs, you can toggle this state using <F11>,
     'toggle-frame-fullscreen'.)

'-mm'
'--maximized'
     Specify that the Emacs frame should be maximized.  This normally
     means that the frame has window manager decorations.  (After
     starting Emacs, you can toggle this state using 'M-F10',
     'toggle-frame-maximized'.)

'-fh'
'--fullheight'
     Specify that the height should be the height of the screen.

'-fw'
'--fullwidth'
     Specify that the width should be the width of the screen.

In the '--geometry' option, '{+-}' means either a plus sign or a minus
sign.  A plus sign before XOFFSET means it is the distance from the left
side of the screen; a minus sign means it counts from the right side.  A
plus sign before YOFFSET means it is the distance from the top of the
screen, and a minus sign there indicates the distance from the bottom.
The values XOFFSET and YOFFSET may themselves be positive or negative,
but that doesn't change their meaning, only their direction.

   Emacs uses the same units as 'xterm' does to interpret the geometry.
The WIDTH and HEIGHT are measured in characters, so a large font creates
a larger frame than a small font.  (If you specify a proportional font,
Emacs uses its maximum bounds width as the width unit.)  The XOFFSET and
YOFFSET are measured in pixels.

   You do not have to specify all of the fields in the geometry
specification.  If you omit both XOFFSET and YOFFSET, the window manager
decides where to put the Emacs frame, possibly by letting you place it
with the mouse.  For example, '164x55' specifies a window 164 columns
wide, enough for two ordinary width windows side by side, and 55 lines
tall.

   The default frame width is 80 characters and the default height is
between 35 and 40 lines, depending on the OS and the window manager.
You can omit either the width or the height or both.  If you start the
geometry with an integer, Emacs interprets it as the width.  If you
start with an 'x' followed by an integer, Emacs interprets it as the
height.  Thus, '81' specifies just the width; 'x45' specifies just the
height.

   If you start the geometry with '+' or '-', that introduces an offset,
which means both sizes are omitted.  Thus, '-3' specifies the XOFFSET
only.  (If you give just one offset, it is always XOFFSET.)  '+3-3'
specifies both the XOFFSET and the YOFFSET, placing the frame near the
bottom left of the screen.

   You can specify a default for any or all of the fields in your X
resource file (*note Resources::), and then override selected fields
with a '--geometry' option.

   Since the mode line and the echo area occupy the last 2 lines of the
frame, the height of the initial text window is 2 less than the height
specified in your geometry.  In non-X-toolkit versions of Emacs, the
menu bar also takes one line of the specified number.  But in the X
toolkit version, the menu bar is additional and does not count against
the specified height.  The tool bar, if present, is also additional.

   Enabling or disabling the menu bar or tool bar alters the amount of
space available for ordinary text.  Therefore, if Emacs starts up with a
tool bar (which is the default), and handles the geometry specification
assuming there is a tool bar, and then your initialization file disables
the tool bar, you will end up with a frame geometry different from what
you asked for.  To get the intended size with no tool bar, use an X
resource to specify "no tool bar" (*note Table of Resources::); then
Emacs will already know there's no tool bar when it processes the
specified geometry.

   When using one of '--fullscreen', '--maximized', '--fullwidth' or
'--fullheight', some window managers require you to set the variable
'frame-resize-pixelwise' to a non-'nil' value to make a frame appear
truly maximized or full-screen.

   Some window managers have options that can make them ignore both
program-specified and user-specified positions.  If these are set, Emacs
fails to position the window correctly.

==============================================================================
File: emacs.info,  Node: |Borders_X|,  Next: |Title_X|,  Prev: |Window_Size_X|,  Up: |Emacs_Invocation|
==============================================================================

                                                                     *Borders_X*

C.9 Internal and Outer Borders
=====-------------------------

An Emacs frame has an internal border and an outer border.  The internal
border is an extra strip of the background color around the text portion
of the frame.  Emacs itself draws the internal border.  The outer border
is drawn by X outside the tool and menu bars of the frame.  There is
also an external border which is drawn by the window manager.  The size
of the external border cannot be set from within Emacs.

'-ib WIDTH'
'--internal-border=WIDTH'
     Specify WIDTH as the width of the internal border (around the
     frame's text area), in pixels.

'-bw WIDTH'
'--border-width=WIDTH'
     Specify WIDTH as the width of the outer border, in pixels.

   When you specify the size of the frame, that does not count the
borders.  The frame's position is measured from the outside edge of the
external border.

   Use the '-ib N' option to specify an internal border N pixels wide.
The default is 1.  Use '-bw N' to specify the width of the outer border
(though the window manager may not pay attention to what you specify).
The default width of the outer border is 2.

==============================================================================
File: emacs.info,  Node: |Title_X|,  Next: |Icons_X|,  Prev: |Borders_X|,  Up: |Emacs_Invocation|
==============================================================================

                                                                       *Title_X*

C.10 Frame Titles
=====------------

Each Emacs frame always has a title, which appears in window decorations
and icons as the name of the frame.  The default title is of the form
'INVOCATION-NAME@MACHINE' (if there is only one frame) or shows the
selected window's buffer name (if there is more than one frame).

   You can specify a non-default title for the initial Emacs frame with
a command line option:

'-T TITLE'
'--title=TITLE'
     Specify TITLE as the title for the initial Emacs frame.

   The '--name' option (*note Resources::) also specifies the title for
the initial Emacs frame.

==============================================================================
File: emacs.info,  Node: |Icons_X|,  Next: |Misc_X|,  Prev: |Title_X|,  Up: |Emacs_Invocation|
==============================================================================

                                                                       *Icons_X*

C.11 Icons
=====-----

'-iconic'
'--iconic'
     Start Emacs in an iconified state.

'-nbi'
'--no-bitmap-icon'
     Disable the use of the Emacs icon.

   Most window managers allow you to iconify (or "minimize") an Emacs
frame, hiding it from sight.  Some window managers replace iconified
windows with tiny icons, while others remove them entirely from sight.
The '-iconic' option tells Emacs to begin running in an iconified state,
rather than showing a frame right away.  The text frame doesn't appear
until you deiconify (or "un-minimize") it.

   By default, Emacs uses an icon containing the Emacs logo.  On desktop
environments such as Gnome, this icon is also displayed in other
contexts, e.g., when switching into an Emacs frame.  The '-nbi' or
'--no-bitmap-icon' option tells Emacs to let the window manager choose
what sort of icon to use--usually just a small rectangle containing the
frame's title.

==============================================================================
File: emacs.info,  Node: |Misc_X|,  Prev: |Icons_X|,  Up: |Emacs_Invocation|
==============================================================================

                                                                        *Misc_X*

C.12 Other Display Options
=====---------------------

'--parent-id ID'
     Open Emacs as a client X window via the XEmbed protocol, with ID as
     the parent X window id.  Currently, this option is mainly useful
     for developers.

'-vb'
'--vertical-scroll-bars'
     Enable vertical scroll bars.

'-lsp PIXELS'
'--line-spacing=PIXELS'
     Specify PIXELS as additional space to put between lines, in pixels.

'-nbc'
'--no-blinking-cursor'
     Disable the blinking cursor on graphical displays.

'-D'
'--basic-display'
     Disable the menu-bar, the tool-bar, the scroll-bars, tool tips, and
     turn off font-lock-mode and the blinking cursor.  This can be
     useful for making a test case that simplifies debugging of display
     problems.

   The '--xrm' option (*note Resources::) specifies additional X
resource values.

==============================================================================
File: emacs.info,  Node: |X_Resources|,  Next: |Antinews|,  Prev: |Emacs_Invocation|,  Up: |Top|
==============================================================================

                                                                   *X_Resources*

Appendix D X Options and Resources
*****=============================

You can customize some X-related aspects of Emacs behavior using X
resources, as is usual for programs that use X.

   When Emacs is compiled with GTK+ support, the appearance of various
graphical widgets, such as the menu-bar, scroll-bar, and dialog boxes,
is determined by GTK+ resources, which we will also describe.  When
Emacs is built without GTK+ support, the appearance of these widgets is
determined by additional X resources.

   On MS-Windows, you can customize some of the same aspects using the
system registry (*note MS-Windows Registry::).

MENU

* |Resources|::           Using X resources with Emacs (in general).
* |Table_of_Resources|::  Table of specific X resources that affect Emacs.
* |Lucid_Resources|::     X resources for Lucid menus.
* |Motif_Resources|::     X resources for Motif and LessTif menus.
* |GTK_resources|::       Resources for GTK+ widgets.

==============================================================================
File: emacs.info,  Node: |Resources|,  Next: |Table_of_Resources|,  Up: |X_Resources|
==============================================================================

                                                                     *Resources*

D.1 X Resources
=====----------

Programs running under the X Window System organize their user options
under a hierarchy of classes and resources.  You can specify default
values for these options in your "X resource file", usually named
'~/.Xdefaults' or '~/.Xresources'.  Changes in this file do not take
effect immediately, because the X server stores its own list of
resources; to update it, use the command 'xrdb'--for instance, 'xrdb
~/.Xdefaults'.

   Settings specified via X resources in general override the equivalent
settings in Emacs init files (*note Init File::), in particular for
parameters of the initial frame (*note Frame Parameters::).

   (MS-Windows systems do not support X resource files; on such systems,
Emacs looks for X resources in the Windows Registry, first under the key
'HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs', which affects only the current
user and override the system-wide settings, and then under the key
'HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs', which affects all users of the
system.  The menu and scroll bars are native widgets on MS-Windows, so
they are only customizable via the system-wide settings in the Display
Control Panel.  You can also set resources using the '-xrm' command line
option, as explained below.)

   Each line in the X resource file specifies a value for one option or
for a collection of related options.  The order in which the lines
appear in the file does not matter.  Each resource specification
consists of a "program name" and a "resource name".  Case distinctions
are significant in each of these names.  Here is an example:

     emacs.cursorColor: dark green

   The program name is the name of the executable file to which the
resource applies.  For Emacs, this is normally 'emacs'.  To specify a
definition that applies to all instances of Emacs, regardless of the
name of the Emacs executable, use 'Emacs'.

   The resource name is the name of a program setting.  For instance,
Emacs recognizes a 'cursorColor' resource that controls the color of the
text cursor.

   Resources are grouped into named classes.  For instance, the
'Foreground' class contains the 'cursorColor', 'foreground' and
'pointerColor' resources (*note Table of Resources::).  Instead of using
a resource name, you can use a class name to specify the default value
for all resources in that class, like this:

     emacs.Foreground: dark green

   Emacs does not process X resources at all if you set the variable
'inhibit-x-resources' to a non-'nil' value.  If you invoke Emacs with
the '-Q' (or '--quick') command-line option, 'inhibit-x-resources' is
automatically set to 't' (*note Initial Options::).

   In addition, you can use the following command-line options to
override the X resources file:

'-name NAME'
'--name=NAME'
     This option sets the program name of the initial Emacs frame to
     NAME.  It also sets the title of the initial frame to NAME.  This
     option does not affect subsequent frames.

     If you don't specify this option, the default is to use the Emacs
     executable's name as the program name.

     For consistency, '-name' also specifies the name to use for other
     resource values that do not belong to any particular frame.

     The resources that name Emacs invocations also belong to a class,
     named 'Emacs'.  If you write 'Emacs' instead of 'emacs', the
     resource applies to all frames in all Emacs jobs, regardless of
     frame titles and regardless of the name of the executable file.

'-xrm RESOURCE-VALUE'
'--xrm=RESOURCE-VALUE'
     This option specifies X resource values for the present Emacs job.

     RESOURCE-VALUE should have the same format that you would use
     inside a file of X resources.  Several '-xrm' options are possible
     to include multiple resource specifications.  You can also use
     '#include "FILENAME"' as RESOURCE-VALUE to include a file full of
     resource specifications.  Resource values specified with '-xrm'
     take precedence over all other resource specifications.

==============================================================================
File: emacs.info,  Node: |Table_of_Resources|,  Next: |Lucid_Resources|,  Prev: |Resources|,  Up: |X_Resources|
==============================================================================

                                                            *Table_of_Resources*

D.2 Table of X Resources for Emacs
=====-----------------------------

The table below lists the X resource names that Emacs recognizes.  Note
that some of the resources have no effect in Emacs compiled with various
X toolkits (GTK+, Lucid, etc.)--we indicate below when this is the case.

'background' (class 'Background')
     Background color (*note Colors::).

'bitmapIcon' (class 'BitmapIcon')
     Tell the window manager to display the Emacs icon if 'on'; don't do
     so if 'off'.  *Note Icons X::, for a description of the icon.

'borderColor' (class 'BorderColor')
     Color of the frame's external border.  This has no effect if Emacs
     is compiled with GTK+ support.

'borderWidth' (class 'BorderWidth')
     Width of the frame's external border, in pixels.  This has no
     effect if Emacs is compiled with GTK+ support.

'cursorBlink' (class 'CursorBlink')
     If the value of this resource is 'off' or 'false' or '0' at
     startup, Emacs disables Blink Cursor mode (*note Cursor Display::).

'cursorColor' (class 'Foreground')
     Text cursor color.  If this resource is specified when Emacs starts
     up, Emacs sets its value as the background color of the 'cursor'
     face (*note Faces::).

'font' (class 'Font')
     Font name for the 'default' face (*note Fonts::).  You can also
     specify a fontset name (*note Fontsets::).

'fontBackend' (class 'FontBackend')
     Comma-delimited list of backend(s) to use for drawing fonts, in
     order of precedence.  For instance, the value 'x,xft' tells Emacs
     to draw fonts using the X core font driver, falling back on the Xft
     font driver if that fails.  Normally, you should leave this
     resource unset, in which case Emacs tries using all available font
     backends.

'foreground' (class 'Foreground')
     Default foreground color for text.

'fullscreen' (class 'Fullscreen')
     The desired fullscreen size.  The value can be one of 'fullboth',
     'maximized', 'fullwidth' or 'fullheight', which correspond to the
     command-line options '-fs', '-mm', '-fw', and '-fh' (*note Window
     Size X::).  Note that this applies to the initial frame only.

'geometry' (class 'Geometry')
     Window size and position.  The value should be a size and position
     specification, of the same form as in the '-g' or '--geometry'
     command-line option (*note Window Size X::).

     The size applies to all frames in the Emacs session, but the
     position applies only to the initial Emacs frame (or, in the case
     of a resource for a specific frame name, only that frame).

     Be careful not to specify this resource as 'emacs*geometry', as
     that may affect individual menus as well as the main Emacs frame.

'horizontalScrollBars' (class 'ScrollBars')
     If the value of this resource is 'off' or 'false' or '0', Emacs
     vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
