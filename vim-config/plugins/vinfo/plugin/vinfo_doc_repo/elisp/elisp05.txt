
20.6.5 Reading File Names
-------------------------

The high-level completion functions 'read-file-name',
'read-directory-name', and 'read-shell-command' are designed to read
file names, directory names, and shell commands, respectively.  They
provide special features, including automatic insertion of the default
directory.

 -- Function: read-file-name prompt &optional directory default
          require-match initial predicate
     This function reads a file name, prompting with PROMPT and
     providing completion.

     As an exception, this function reads a file name using a graphical
     file dialog instead of the minibuffer, if all of the following are
     true:

       1. It is invoked via a mouse command.

       2. The selected frame is on a graphical display supporting such
          dialogs.

       3. The variable 'use-dialog-box' is non-'nil'.  *Note Dialog
          Boxes: (emacs)Dialog Boxes.

       4. The DIRECTORY argument, described below, does not specify a
          remote file.  *Note Remote Files: (emacs)Remote Files.

     The exact behavior when using a graphical file dialog is
     platform-dependent.  Here, we simply document the behavior when
     using the minibuffer.

     'read-file-name' does not automatically expand the returned file
     name.  You can call 'expand-file-name' yourself if an absolute file
     name is required.

     The optional argument REQUIRE-MATCH has the same meaning as in
     'completing-read'.  *Note Minibuffer Completion::.

     The argument DIRECTORY specifies the directory to use for
     completing relative file names.  It should be an absolute directory
     name.  If the variable 'insert-default-directory' is non-'nil',
     DIRECTORY is also inserted in the minibuffer as initial input.  It
     defaults to the current buffer's value of 'default-directory'.

     If you specify INITIAL, that is an initial file name to insert in
     the buffer (after DIRECTORY, if that is inserted).  In this case,
     point goes at the beginning of INITIAL.  The default for INITIAL is
     'nil'--don't insert any file name.  To see what INITIAL does, try
     the command 'C-x C-v' in a buffer visiting a file.  *Please note:*
     we recommend using DEFAULT rather than INITIAL in most cases.

     If DEFAULT is non-'nil', then the function returns DEFAULT if the
     user exits the minibuffer with the same non-empty contents that
     'read-file-name' inserted initially.  The initial minibuffer
     contents are always non-empty if 'insert-default-directory' is
     non-'nil', as it is by default.  DEFAULT is not checked for
     validity, regardless of the value of REQUIRE-MATCH.  However, if
     REQUIRE-MATCH is non-'nil', the initial minibuffer contents should
     be a valid file (or directory) name.  Otherwise 'read-file-name'
     attempts completion if the user exits without any editing, and does
     not return DEFAULT.  DEFAULT is also available through the history
     commands.

     If DEFAULT is 'nil', 'read-file-name' tries to find a substitute
     default to use in its place, which it treats in exactly the same
     way as if it had been specified explicitly.  If DEFAULT is 'nil',
     but INITIAL is non-'nil', then the default is the absolute file
     name obtained from DIRECTORY and INITIAL.  If both DEFAULT and
     INITIAL are 'nil' and the buffer is visiting a file,
     'read-file-name' uses the absolute file name of that file as
     default.  If the buffer is not visiting a file, then there is no
     default.  In that case, if the user types <RET> without any
     editing, 'read-file-name' simply returns the pre-inserted contents
     of the minibuffer.

     If the user types <RET> in an empty minibuffer, this function
     returns an empty string, regardless of the value of REQUIRE-MATCH.
     This is, for instance, how the user can make the current buffer
     visit no file using 'M-x set-visited-file-name'.

     If PREDICATE is non-'nil', it specifies a function of one argument
     that decides which file names are acceptable completion
     alternatives.  A file name is an acceptable value if PREDICATE
     returns non-'nil' for it.

     Here is an example of using 'read-file-name':

          (read-file-name "The file is ")

          ;; After evaluation of the preceding expression,
          ;;   the following appears in the minibuffer:

          ---------- Buffer: Minibuffer ----------
          The file is /gp/gnu/elisp/-!-
          ---------- Buffer: Minibuffer ----------

     Typing 'manual <TAB>' results in the following:

          ---------- Buffer: Minibuffer ----------
          The file is /gp/gnu/elisp/manual.texi-!-
          ---------- Buffer: Minibuffer ----------

     If the user types <RET>, 'read-file-name' returns the file name as
     the string '"/gp/gnu/elisp/manual.texi"'.

 -- Variable: read-file-name-function
     If non-'nil', this should be a function that accepts the same
     arguments as 'read-file-name'.  When 'read-file-name' is called, it
     calls this function with the supplied arguments instead of doing
     its usual work.

 -- User Option: read-file-name-completion-ignore-case
     If this variable is non-'nil', 'read-file-name' ignores case when
     performing completion.

 -- Function: read-directory-name prompt &optional directory default
          require-match initial
     This function is like 'read-file-name' but allows only directory
     names as completion alternatives.

     If DEFAULT is 'nil' and INITIAL is non-'nil', 'read-directory-name'
     constructs a substitute default by combining DIRECTORY (or the
     current buffer's default directory if DIRECTORY is 'nil') and
     INITIAL.  If both DEFAULT and INITIAL are 'nil', this function uses
     DIRECTORY as substitute default, or the current buffer's default
     directory if DIRECTORY is 'nil'.

 -- User Option: insert-default-directory
     This variable is used by 'read-file-name', and thus, indirectly, by
     most commands reading file names.  (This includes all commands that
     use the code letters 'f' or 'F' in their interactive form.  *Note
     Code Characters for interactive: Interactive Codes.)  Its value
     controls whether 'read-file-name' starts by placing the name of the
     default directory in the minibuffer, plus the initial file name, if
     any.  If the value of this variable is 'nil', then 'read-file-name'
     does not place any initial input in the minibuffer (unless you
     specify initial input with the INITIAL argument).  In that case,
     the default directory is still used for completion of relative file
     names, but is not displayed.

     If this variable is 'nil' and the initial minibuffer contents are
     empty, the user may have to explicitly fetch the next history
     element to access a default value.  If the variable is non-'nil',
     the initial minibuffer contents are always non-empty and the user
     can always request a default value by immediately typing <RET> in
     an unedited minibuffer.  (See above.)

     For example:

          ;; Here the minibuffer starts out with the default directory.
          (let ((insert-default-directory t))
            (read-file-name "The file is "))

          ---------- Buffer: Minibuffer ----------
          The file is ~lewis/manual/-!-
          ---------- Buffer: Minibuffer ----------

          ;; Here the minibuffer is empty and only the prompt
          ;;   appears on its line.
          (let ((insert-default-directory nil))
            (read-file-name "The file is "))

          ---------- Buffer: Minibuffer ----------
          The file is -!-
          ---------- Buffer: Minibuffer ----------

 -- Function: read-shell-command prompt &optional initial history &rest
          args
     This function reads a shell command from the minibuffer, prompting
     with PROMPT and providing intelligent completion.  It completes the
     first word of the command using candidates that are appropriate for
     command names, and the rest of the command words as file names.

     This function uses 'minibuffer-local-shell-command-map' as the
     keymap for minibuffer input.  The HISTORY argument specifies the
     history list to use; if is omitted or 'nil', it defaults to
     'shell-command-history' (*note shell-command-history: Minibuffer
     History.).  The optional argument INITIAL specifies the initial
     content of the minibuffer (*note Initial Input::).  The rest of
     ARGS, if present, are used as the DEFAULT and INHERIT-INPUT-METHOD
     arguments in 'read-from-minibuffer' (*note Text from Minibuffer::).

 -- Variable: minibuffer-local-shell-command-map
     This keymap is used by 'read-shell-command' for completing command
     and file names that are part of a shell command.  It uses
     'minibuffer-local-map' as its parent keymap, and binds <TAB> to
     'completion-at-point'.

==============================================================================
File: elisp.info,  Node: |Completion_Variables|,  Next: |Programmed_Completion|,  Prev: |Reading_File_Names|,  Up: |Completion|
==============================================================================

                                                          *Completion_Variables*

20.6.6 Completion Variables
---------------------------

Here are some variables that can be used to alter the default completion
behavior.

 -- User Option: completion-styles
     The value of this variable is a list of completion style (symbols)
     to use for performing completion.  A "completion style" is a set of
     rules for generating completions.  Each symbol occurring this list
     must have a corresponding entry in 'completion-styles-alist'.

 -- Variable: completion-styles-alist
     This variable stores a list of available completion styles.  Each
     element in the list has the form

          (STYLE TRY-COMPLETION ALL-COMPLETIONS DOC)

     Here, STYLE is the name of the completion style (a symbol), which
     may be used in the 'completion-styles' variable to refer to this
     style; TRY-COMPLETION is the function that does the completion;
     ALL-COMPLETIONS is the function that lists the completions; and DOC
     is a string describing the completion style.

     The TRY-COMPLETION and ALL-COMPLETIONS functions should each accept
     four arguments: STRING, COLLECTION, PREDICATE, and POINT.  The
     STRING, COLLECTION, and PREDICATE arguments have the same meanings
     as in 'try-completion' (*note Basic Completion::), and the POINT
     argument is the position of point within STRING.  Each function
     should return a non-'nil' value if it performed its job, and 'nil'
     if it did not (e.g., if there is no way to complete STRING
     according to the completion style).

     When the user calls a completion command like 'minibuffer-complete'
     (*note Completion Commands::), Emacs looks for the first style
     listed in 'completion-styles' and calls its TRY-COMPLETION
     function.  If this function returns 'nil', Emacs moves to the next
     listed completion style and calls its TRY-COMPLETION function, and
     so on until one of the TRY-COMPLETION functions successfully
     performs completion and returns a non-'nil' value.  A similar
     procedure is used for listing completions, via the ALL-COMPLETIONS
     functions.

     *Note (emacs)Completion Styles::, for a description of the
     available completion styles.

 -- User Option: completion-category-overrides
     This variable specifies special completion styles and other
     completion behaviors to use when completing certain types of text.
     Its value should be an alist with elements of the form '(CATEGORY .
     ALIST)'.  CATEGORY is a symbol describing what is being completed;
     currently, the 'buffer', 'file', and 'unicode-name' categories are
     defined, but others can be defined via specialized completion
     functions (*note Programmed Completion::).  ALIST is an association
     list describing how completion should behave for the corresponding
     category.  The following alist keys are supported:

     'styles'
          The value should be a list of completion styles (symbols).

     'cycle'
          The value should be a value for 'completion-cycle-threshold'
          (*note (emacs)Completion Options::) for this category.

     Additional alist entries may be defined in the future.

 -- Variable: completion-extra-properties
     This variable is used to specify extra properties of the current
     completion command.  It is intended to be let-bound by specialized
     completion commands.  Its value should be a list of property and
     value pairs.  The following properties are supported:

     ':annotation-function'
          The value should be a function to add annotations in the
          completions buffer.  This function must accept one argument, a
          completion, and should either return 'nil' or a string to be
          displayed next to the completion.

     ':exit-function'
          The value should be a function to run after performing
          completion.  The function should accept two arguments, STRING
          and STATUS, where STRING is the text to which the field was
          completed, and STATUS indicates what kind of operation
          happened: 'finished' if text is now complete, 'sole' if the
          text cannot be further completed but completion is not
          finished, or 'exact' if the text is a valid completion but may
          be further completed.

==============================================================================
File: elisp.info,  Node: |Programmed_Completion|,  Next: |Completion_in_Buffers|,  Prev: |Completion_Variables|,  Up: |Completion|
==============================================================================

                                                         *Programmed_Completion*

20.6.7 Programmed Completion
----------------------------

Sometimes it is not possible or convenient to create an alist or an
obarray containing all the intended possible completions ahead of time.
In such a case, you can supply your own function to compute the
completion of a given string.  This is called "programmed completion".
Emacs uses programmed completion when completing file names (*note File
Name Completion::), among many other cases.

   To use this feature, pass a function as the COLLECTION argument to
'completing-read'.  The function 'completing-read' arranges to pass your
completion function along to 'try-completion', 'all-completions', and
other basic completion functions, which will then let your function do
all the work.

   The completion function should accept three arguments:

   * The string to be completed.

   * A predicate function with which to filter possible matches, or
     'nil' if none.  The function should call the predicate for each
     possible match, and ignore the match if the predicate returns
     'nil'.

   * A flag specifying the type of completion operation to perform; see
     *note Basic Completion::, for the details of those operations.
     This flag may be one of the following values.

     'nil'
          This specifies a 'try-completion' operation.  The function
          should return 'nil' if there are no matches; it should return
          't' if the specified string is a unique and exact match; and
          it should return the longest common prefix substring of all
          matches otherwise.

     't'
          This specifies an 'all-completions' operation.  The function
          should return a list of all possible completions of the
          specified string.

     'lambda'
          This specifies a 'test-completion' operation.  The function
          should return 't' if the specified string is an exact match
          for some completion alternative; 'nil' otherwise.

     '(boundaries . SUFFIX)'
          This specifies a 'completion-boundaries' operation.  The
          function should return '(boundaries START . END)', where START
          is the position of the beginning boundary in the specified
          string, and END is the position of the end boundary in SUFFIX.

     'metadata'
          This specifies a request for information about the state of
          the current completion.  The return value should have the form
          '(metadata . ALIST)', where ALIST is an alist whose elements
          are described below.

     If the flag has any other value, the completion function should
     return 'nil'.

   The following is a list of metadata entries that a completion
function may return in response to a 'metadata' flag argument:

'category'
     The value should be a symbol describing what kind of text the
     completion function is trying to complete.  If the symbol matches
     one of the keys in 'completion-category-overrides', the usual
     completion behavior is overridden.  *Note Completion Variables::.

'annotation-function'
     The value should be a function for "annotating" completions.  The
     function should take one argument, STRING, which is a possible
     completion.  It should return a string, which is displayed after
     the completion STRING in the 'Completions' buffer.

'display-sort-function'
     The value should be a function for sorting completions.  The
     function should take one argument, a list of completion strings,
     and return a sorted list of completion strings.  It is allowed to
     alter the input list destructively.

'cycle-sort-function'
     The value should be a function for sorting completions, when
     'completion-cycle-threshold' is non-'nil' and the user is cycling
     through completion alternatives.  *Note (emacs)Completion
     Options::.  Its argument list and return value are the same as for
     'display-sort-function'.

 -- Function: completion-table-dynamic function &optional switch-buffer
     This function is a convenient way to write a function that can act
     as a programmed completion function.  The argument FUNCTION should
     be a function that takes one argument, a string, and returns a
     completion table (*note Basic Completion::) containing all the
     possible completions.  The table returned by FUNCTION can also
     include elements that don't match the string argument; they are
     automatically filtered out by 'completion-table-dynamic'.  In
     particular, FUNCTION can ignore its argument and return a full list
     of all possible completions.  You can think of
     'completion-table-dynamic' as a transducer between FUNCTION and the
     interface for programmed completion functions.

     If the optional argument SWITCH-BUFFER is non-'nil', and completion
     is performed in the minibuffer, FUNCTION will be called with
     current buffer set to the buffer from which the minibuffer was
     entered.

     The return value of 'completion-table-dynamic' is a function that
     can be used as the 2nd argument to 'try-completion' and
     'all-completions'.  Note that this function will always return
     empty metadata and trivial boundaries (*note Programmed
     Completion::).

 -- Function: completion-table-with-cache function &optional ignore-case
     This is a wrapper for 'completion-table-dynamic' that saves the
     last argument-result pair.  This means that multiple lookups with
     the same argument only need to call FUNCTION once.  This can be
     useful when a slow operation is involved, such as calling an
     external process.

==============================================================================
File: elisp.info,  Node: |Completion_in_Buffers|,  Prev: |Programmed_Completion|,  Up: |Completion|
==============================================================================

                                                         *Completion_in_Buffers*

20.6.8 Completion in Ordinary Buffers
-------------------------------------

Although completion is usually done in the minibuffer, the completion
facility can also be used on the text in ordinary Emacs buffers.  In
many major modes, in-buffer completion is performed by the 'C-M-i' or
'M-<TAB>' command, bound to 'completion-at-point'.  *Note (emacs)Symbol
Completion::.  This command uses the abnormal hook variable
'completion-at-point-functions':

 -- Variable: completion-at-point-functions
     The value of this abnormal hook should be a list of functions,
     which are used to compute a completion table (*note Basic
     Completion::) for completing the text at point.  It can be used by
     major modes to provide mode-specific completion tables (*note Major
     Mode Conventions::).

     When the command 'completion-at-point' runs, it calls the functions
     in the list one by one, without any argument.  Each function should
     return 'nil' unless it can and wants to take responsibility for the
     completion data for the text at point.  Otherwise it should return
     a list of the following form:

          (START END COLLECTION . PROPS)

     START and END delimit the text to complete (which should enclose
     point).  COLLECTION is a completion table for completing that text,
     in a form suitable for passing as the second argument to
     'try-completion' (*note Basic Completion::); completion
     alternatives will be generated from this completion table in the
     usual way, via the completion styles defined in 'completion-styles'
     (*note Completion Variables::).  PROPS is a property list for
     additional information; any of the properties in
     'completion-extra-properties' are recognized (*note Completion
     Variables::), as well as the following additional ones:

     ':predicate'
          The value should be a predicate that completion candidates
          need to satisfy.

     ':exclusive'
          If the value is 'no', then if the completion table fails to
          match the text at point, 'completion-at-point' moves on to the
          next function in 'completion-at-point-functions' instead of
          reporting a completion failure.

     The functions on this hook should generally return quickly, since
     they may be called very often (e.g., from 'post-command-hook').
     Supplying a function for COLLECTION is strongly recommended if
     generating the list of completions is an expensive operation.
     Emacs may internally call functions in
     'completion-at-point-functions' many times, but care about the
     value of COLLECTION for only some of these calls.  By supplying a
     function for COLLECTION, Emacs can defer generating completions
     until necessary.  You can use 'completion-table-dynamic' to create
     a wrapper function:

          ;; Avoid this pattern.
          (let ((beg ...) (end ...) (my-completions (my-make-completions)))
            (list beg end my-completions))

          ;; Use this instead.
          (let ((beg ...) (end ...))
            (list beg
                  end
                  (completion-table-dynamic
                    (lambda (_)
                      (my-make-completions)))))

     Additionally, the COLLECTION should generally not be pre-filtered
     based on the current text between START and END, because that is
     the responsibility of the caller of 'completion-at-point-functions'
     to do that according to the completion styles it decides to use.

     A function in 'completion-at-point-functions' may also return a
     function instead of a list as described above.  In that case, that
     returned function is called, with no argument, and it is entirely
     responsible for performing the completion.  We discourage this
     usage; it is only intended to help convert old code to using
     'completion-at-point'.

     The first function in 'completion-at-point-functions' to return a
     non-'nil' value is used by 'completion-at-point'.  The remaining
     functions are not called.  The exception to this is when there is
     an ':exclusive' specification, as described above.

   The following function provides a convenient way to perform
completion on an arbitrary stretch of text in an Emacs buffer:

 -- Function: completion-in-region start end collection &optional
          predicate
     This function completes the text in the current buffer between the
     positions START and END, using COLLECTION.  The argument COLLECTION
     has the same meaning as in 'try-completion' (*note Basic
     Completion::).

     This function inserts the completion text directly into the current
     buffer.  Unlike 'completing-read' (*note Minibuffer Completion::),
     it does not activate the minibuffer.

     For this function to work, point must be somewhere between START
     and END.

==============================================================================
File: elisp.info,  Node: |Yes_or_No_Queries|,  Next: |Multiple_Queries|,  Prev: |Completion|,  Up: |Minibuffers|
==============================================================================

                                                             *Yes_or_No_Queries*

20.7 Yes-or-No Queries
----------------------

This section describes functions used to ask the user a yes-or-no
question.  The function 'y-or-n-p' can be answered with a single
character; it is useful for questions where an inadvertent wrong answer
will not have serious consequences.  'yes-or-no-p' is suitable for more
momentous questions, since it requires three or four characters to
answer.

   If either of these functions is called in a command that was invoked
using the mouse--more precisely, if 'last-nonmenu-event' (*note Command
Loop Info::) is either 'nil' or a list--then it uses a dialog box or
pop-up menu to ask the question.  Otherwise, it uses keyboard input.
You can force use either of the mouse or of keyboard input by binding
'last-nonmenu-event' to a suitable value around the call.

   Both 'yes-or-no-p' and 'y-or-n-p' use the minibuffer.

 -- Function: y-or-n-p prompt
     This function asks the user a question, expecting input in the
     minibuffer.  It returns 't' if the user types 'y', 'nil' if the
     user types 'n'.  This function also accepts <SPC> to mean yes and
     <DEL> to mean no.  It accepts 'C-]' and 'C-g' to quit, because the
     question uses the minibuffer and for that reason the user might try
     to use 'C-]' to get out.  The answer is a single character, with no
     <RET> needed to terminate it.  Upper and lower case are equivalent.

     "Asking the question" means printing PROMPT in the minibuffer,
     followed by the string '(y or n) '.  If the input is not one of the
     expected answers ('y', 'n', '<SPC>', '<DEL>', or something that
     quits), the function responds 'Please answer y or n.', and repeats
     the request.

     This function actually uses the minibuffer, but does not allow
     editing of the answer.  The cursor moves to the minibuffer while
     the question is being asked.

     The answers and their meanings, even 'y' and 'n', are not
     hardwired, and are specified by the keymap 'query-replace-map'
     (*note Search and Replace::).  In particular, if the user enters
     the special responses 'recenter', 'scroll-up', 'scroll-down',
     'scroll-other-window', or 'scroll-other-window-down' (respectively
     bound to 'C-l', 'C-v', 'M-v', 'C-M-v' and 'C-M-S-v' in
     'query-replace-map'), this function performs the specified window
     recentering or scrolling operation, and poses the question again.

 -- Function: y-or-n-p-with-timeout prompt seconds default
     Like 'y-or-n-p', except that if the user fails to answer within
     SECONDS seconds, this function stops waiting and returns DEFAULT.
     It works by setting up a timer; see *note Timers::.  The argument
     SECONDS should be a number.

 -- Function: yes-or-no-p prompt
     This function asks the user a question, expecting input in the
     minibuffer.  It returns 't' if the user enters 'yes', 'nil' if the
     user types 'no'.  The user must type <RET> to finalize the
     response.  Upper and lower case are equivalent.

     'yes-or-no-p' starts by displaying PROMPT in the minibuffer,
     followed by '(yes or no) '.  The user must type one of the expected
     responses; otherwise, the function responds 'Please answer yes or
     no.', waits about two seconds and repeats the request.

     'yes-or-no-p' requires more work from the user than 'y-or-n-p' and
     is appropriate for more crucial decisions.

     Here is an example:

          (yes-or-no-p "Do you really want to remove everything? ")

          ;; After evaluation of the preceding expression,
          ;;   the following prompt appears,
          ;;   with an empty minibuffer:

          ---------- Buffer: minibuffer ----------
          Do you really want to remove everything? (yes or no)
          ---------- Buffer: minibuffer ----------

     If the user first types 'y <RET>', which is invalid because this
     function demands the entire word 'yes', it responds by displaying
     these prompts, with a brief pause between them:

          ---------- Buffer: minibuffer ----------
          Please answer yes or no.
          Do you really want to remove everything? (yes or no)
          ---------- Buffer: minibuffer ----------

==============================================================================
File: elisp.info,  Node: |Multiple_Queries|,  Next: |Reading_a_Password|,  Prev: |Yes_or_No_Queries|,  Up: |Minibuffers|
==============================================================================

                                                              *Multiple_Queries*

20.8 Asking Multiple-Choice Questions
-------------------------------------

This section describes facilities for asking the user more complex
questions or several similar questions.

   When you have a series of similar questions to ask, such as "Do you
want to save this buffer?" for each buffer in turn, you should use
'map-y-or-n-p' to ask the collection of questions, rather than asking
each question individually.  This gives the user certain convenient
facilities such as the ability to answer the whole series at once.

 -- Function: map-y-or-n-p prompter actor list &optional help
          action-alist no-cursor-in-echo-area
     This function asks the user a series of questions, reading a
     single-character answer in the echo area for each one.

     The value of LIST specifies the objects to ask questions about.  It
     should be either a list of objects or a generator function.  If it
     is a function, it should expect no arguments, and should return
     either the next object to ask about, or 'nil', meaning to stop
     asking questions.

     The argument PROMPTER specifies how to ask each question.  If
     PROMPTER is a string, the question text is computed like this:

          (format PROMPTER OBJECT)

     where OBJECT is the next object to ask about (as obtained from
     LIST).

     If not a string, PROMPTER should be a function of one argument (the
     next object to ask about) and should return the question text.  If
     the value is a string, that is the question to ask the user.  The
     function can also return 't', meaning do act on this object (and
     don't ask the user), or 'nil', meaning ignore this object (and
     don't ask the user).

     The argument ACTOR says how to act on the answers that the user
     gives.  It should be a function of one argument, and it is called
     with each object that the user says yes for.  Its argument is
     always an object obtained from LIST.

     If the argument HELP is given, it should be a list of this form:

          (SINGULAR PLURAL ACTION)

     where SINGULAR is a string containing a singular noun that
     describes the objects conceptually being acted on, PLURAL is the
     corresponding plural noun, and ACTION is a transitive verb
     describing what ACTOR does.

     If you don't specify HELP, the default is '("object" "objects" "act
     on")'.

     Each time a question is asked, the user may enter 'y', 'Y', or
     <SPC> to act on that object; 'n', 'N', or <DEL> to skip that
     object; '!' to act on all following objects; <ESC> or 'q' to exit
     (skip all following objects); '.' (period) to act on the current
     object and then exit; or 'C-h' to get help.  These are the same
     answers that 'query-replace' accepts.  The keymap
     'query-replace-map' defines their meaning for 'map-y-or-n-p' as
     well as for 'query-replace'; see *note Search and Replace::.

     You can use ACTION-ALIST to specify additional possible answers and
     what they mean.  It is an alist of elements of the form '(CHAR
     FUNCTION HELP)', each of which defines one additional answer.  In
     this element, CHAR is a character (the answer); FUNCTION is a
     function of one argument (an object from LIST); HELP is a string.

     When the user responds with CHAR, 'map-y-or-n-p' calls FUNCTION.
     If it returns non-'nil', the object is considered acted upon, and
     'map-y-or-n-p' advances to the next object in LIST.  If it returns
     'nil', the prompt is repeated for the same object.

     Normally, 'map-y-or-n-p' binds 'cursor-in-echo-area' while
     prompting.  But if NO-CURSOR-IN-ECHO-AREA is non-'nil', it does not
     do that.

     If 'map-y-or-n-p' is called in a command that was invoked using the
     mouse--more precisely, if 'last-nonmenu-event' (*note Command Loop
     Info::) is either 'nil' or a list--then it uses a dialog box or
     pop-up menu to ask the question.  In this case, it does not use
     keyboard input or the echo area.  You can force use either of the
     mouse or of keyboard input by binding 'last-nonmenu-event' to a
     suitable value around the call.

     The return value of 'map-y-or-n-p' is the number of objects acted
     on.

   If you need to ask the user a question that might have more than just
2 answers, use 'read-answer'.

 -- Function: read-answer question answers
     This function prompts the user with text in QUESTION, which should
     end in the 'SPC' character.  The function includes in the prompt
     the possible responses in ANSWERS by appending them to the end of
     QUESTION.  The possible responses are provided in ANSWERS as an
     alist whose elements are of the following form:

          (LONG-ANSWER SHORT-ANSWER HELP-MESSAGE)

     where LONG-ANSWER is the complete text of the user response, a
     string; SHORT-ANSWER is a short form of the same response, a single
     character or a function key; and HELP-MESSAGE is the text that
     describes the meaning of the answer.  If the variable
     'read-answer-short' is non-'nil', the prompt will show the short
     variants of the possible answers and the user is expected to type
     the single characters/keys shown in the prompt; otherwise the
     prompt will show the long variants of the answers, and the user is
     expected to type the full text of one of the answers and end by
     pressing <RET>.  If 'use-dialog-box' is non-'nil', and this
     function was invoked by mouse events, the question and the answers
     will be displayed in a GUI dialog box.

     The function returns the text of the LONG-ANSWER selected by the
     user, regardless of whether long or short answers were shown in the
     prompt and typed by the user.

     Here is an example of using this function:

          (let ((read-answer-short t))
            (read-answer "Foo "
               '(("yes"  ?y "perform the action")
                 ("no"   ?n "skip to the next")
                 ("all"  ?! "perform for the rest without more questions")
                 ("help" ?h "show help")
                 ("quit" ?q "exit"))))

 -- Function: read-char-from-minibuffer prompt &optional chars history
     This function uses the minibuffer to read and return a single
     character.  Optionally, it ignores any input that is not a member
     of CHARS, a list of accepted characters.  The HISTORY argument
     specifies the history list symbol to use; if it is omitted or
     'nil', this function doesn't use the history.

==============================================================================
File: elisp.info,  Node: |Reading_a_Password|,  Next: |Minibuffer_Commands|,  Prev: |Multiple_Queries|,  Up: |Minibuffers|
==============================================================================

                                                            *Reading_a_Password*

20.9 Reading a Password
-----------------------

To read a password to pass to another program, you can use the function
'read-passwd'.

 -- Function: read-passwd prompt &optional confirm default
     This function reads a password, prompting with PROMPT.  It does not
     echo the password as the user types it; instead, it echoes '*' for
     each character in the password.  If you want to apply another
     character to hide the password, let-bind the variable
     'read-hide-char' with that character.

     The optional argument CONFIRM, if non-'nil', says to read the
     password twice and insist it must be the same both times.  If it
     isn't the same, the user has to type it over and over until the
     last two times match.

     The optional argument DEFAULT specifies the default password to
     return if the user enters empty input.  If DEFAULT is 'nil', then
     'read-passwd' returns the null string in that case.

==============================================================================
File: elisp.info,  Node: |Minibuffer_Commands|,  Next: |Minibuffer_Windows|,  Prev: |Reading_a_Password|,  Up: |Minibuffers|
==============================================================================

                                                           *Minibuffer_Commands*

20.10 Minibuffer Commands
-------------------------

This section describes some commands meant for use in the minibuffer.

 -- Command: exit-minibuffer
     This command exits the active minibuffer.  It is normally bound to
     keys in minibuffer local keymaps.

 -- Command: self-insert-and-exit
     This command exits the active minibuffer after inserting the last
     character typed on the keyboard (found in 'last-command-event';
     *note Command Loop Info::).

 -- Command: previous-history-element n
     This command replaces the minibuffer contents with the value of the
     Nth previous (older) history element.

 -- Command: next-history-element n
     This command replaces the minibuffer contents with the value of the
     Nth more recent history element.  The position in the history can
     go beyond the current position and invoke "future history" (*note
     Text from Minibuffer::).

 -- Command: previous-matching-history-element pattern n
     This command replaces the minibuffer contents with the value of the
     Nth previous (older) history element that matches PATTERN (a
     regular expression).

 -- Command: next-matching-history-element pattern n
     This command replaces the minibuffer contents with the value of the
     Nth next (newer) history element that matches PATTERN (a regular
     expression).

 -- Command: previous-complete-history-element n
     This command replaces the minibuffer contents with the value of the
     Nth previous (older) history element that completes the current
     contents of the minibuffer before the point.

 -- Command: next-complete-history-element n
     This command replaces the minibuffer contents with the value of the
     Nth next (newer) history element that completes the current
     contents of the minibuffer before the point.

 -- Command: goto-history-element nabs
     This function puts element of the minibuffer history in the
     minibuffer.  The argument NABS specifies the absolute history
     position in descending order, where 0 means the current element and
     a positive number N means the Nth previous element.  NABS being a
     negative number -N means the Nth entry of "future history."

==============================================================================
File: elisp.info,  Node: |Minibuffer_Windows|,  Next: |Minibuffer_Contents|,  Prev: |Minibuffer_Commands|,  Up: |Minibuffers|
==============================================================================

                                                            *Minibuffer_Windows*

20.11 Minibuffer Windows
------------------------

These functions access and select minibuffer windows, test whether they
are active and control how they get resized.

 -- Function: minibuffer-window &optional frame
     This function returns the minibuffer window used for frame FRAME.
     If FRAME is 'nil', that stands for the selected frame.

     Note that the minibuffer window used by a frame need not be part of
     that frame--a frame that has no minibuffer of its own necessarily
     uses some other frame's minibuffer window.  The minibuffer window
     of a minibuffer-less frame can be changed by setting that frame's
     'minibuffer' frame parameter (*note Buffer Parameters::).

 -- Function: set-minibuffer-window window
     This function specifies WINDOW as the minibuffer window to use.
     This affects where the minibuffer is displayed if you put text in
     it without invoking the usual minibuffer commands.  It has no
     effect on the usual minibuffer input functions because they all
     start by choosing the minibuffer window according to the selected
     frame.

 -- Function: window-minibuffer-p &optional window
     This function returns 't' if WINDOW is a minibuffer window.  WINDOW
     defaults to the selected window.

   The following function returns the window showing the currently
active minibuffer.

 -- Function: active-minibuffer-window
     This function returns the window of the currently active
     minibuffer, or 'nil' if there is no active minibuffer.

   It is not sufficient to determine whether a given window shows the
currently active minibuffer by comparing it with the result of
'(minibuffer-window)', because there can be more than one minibuffer
window if there is more than one frame.

 -- Function: minibuffer-window-active-p window
     This function returns non-'nil' if WINDOW shows the currently
     active minibuffer.

   The following two options control whether minibuffer windows are
resized automatically and how large they can get in the process.

 -- User Option: resize-mini-windows
     This option specifies whether minibuffer windows are resized
     automatically.  The default value is 'grow-only', which means that
     a minibuffer window by default expands automatically to accommodate
     the text it displays and shrinks back to one line as soon as the
     minibuffer gets empty.  If the value is 't', Emacs will always try
     to fit the height of a minibuffer window to the text it displays
     (with a minimum of one line).  If the value is 'nil', a minibuffer
     window never changes size automatically.  In that case the window
     resizing commands (*note Resizing Windows::) can be used to adjust
     its height.

 -- User Option: max-mini-window-height
     This option provides a maximum height for resizing minibuffer
     windows automatically.  A floating-point number specifies a
     fraction of the frame's height; an integer specifies the maximum
     number of lines.  The default value is 0.25.

   Note that the values of the above two variables take effect at
display time, so let-binding them around code which produces echo-area
messages will not work.  If you want to prevent resizing of minibuffer
windows when displaying long messages, bind the 'message-truncate-lines'
variable instead (*note Echo Area Customization::).

   The option 'resize-mini-windows' does not affect the behavior of
minibuffer-only frames (*note Frame Layout::).  The following option
allows to automatically resize such frames as well.

 -- User Option: resize-mini-frames
     If this is 'nil', minibuffer-only frames are never resized
     automatically.

     If this is a function, that function is called with the
     minibuffer-only frame to be resized as sole argument.  At the time
     this function is called, the buffer of the minibuffer window of
     that frame is the buffer whose contents will be shown the next time
     that window is redisplayed.  The function is expected to fit the
     frame to the buffer in some appropriate way.

     Any other non-'nil' value means to resize minibuffer-only frames by
     calling 'fit-frame-to-buffer' (*note Resizing Windows::).

==============================================================================
File: elisp.info,  Node: |Minibuffer_Contents|,  Next: |Recursive_Mini|,  Prev: |Minibuffer_Windows|,  Up: |Minibuffers|
==============================================================================

                                                           *Minibuffer_Contents*

20.12 Minibuffer Contents
-------------------------

These functions access the minibuffer prompt and contents.

 -- Function: minibuffer-prompt
     This function returns the prompt string of the currently active
     minibuffer.  If no minibuffer is active, it returns 'nil'.

 -- Function: minibuffer-prompt-end
     This function returns the current position of the end of the
     minibuffer prompt, if a minibuffer is current.  Otherwise, it
     returns the minimum valid buffer position.

 -- Function: minibuffer-prompt-width
     This function returns the current display-width of the minibuffer
     prompt, if a minibuffer is current.  Otherwise, it returns zero.

 -- Function: minibuffer-contents
     This function returns the editable contents of the minibuffer (that
     is, everything except the prompt) as a string, if a minibuffer is
     current.  Otherwise, it returns the entire contents of the current
     buffer.

 -- Function: minibuffer-contents-no-properties
     This is like 'minibuffer-contents', except that it does not copy
     text properties, just the characters themselves.  *Note Text
     Properties::.

 -- Command: delete-minibuffer-contents
     This command erases the editable contents of the minibuffer (that
     is, everything except the prompt), if a minibuffer is current.
     Otherwise, it erases the entire current buffer.

==============================================================================
File: elisp.info,  Node: |Recursive_Mini|,  Next: |Minibuffer_Misc|,  Prev: |Minibuffer_Contents|,  Up: |Minibuffers|
==============================================================================

                                                                *Recursive_Mini*

20.13 Recursive Minibuffers
---------------------------

These functions and variables deal with recursive minibuffers (*note
Recursive Editing::):

 -- Function: minibuffer-depth
     This function returns the current depth of activations of the
     minibuffer, a nonnegative integer.  If no minibuffers are active,
     it returns zero.

 -- User Option: enable-recursive-minibuffers
     If this variable is non-'nil', you can invoke commands (such as
     'find-file') that use minibuffers even while the minibuffer is
     active.  Such invocation produces a recursive editing level for a
     new minibuffer.  The outer-level minibuffer is invisible while you
     are editing the inner one.

     If this variable is 'nil', you cannot invoke minibuffer commands
     when the minibuffer is active, not even if you switch to another
     window to do it.

   If a command name has a property 'enable-recursive-minibuffers' that
is non-'nil', then the command can use the minibuffer to read arguments
even if it is invoked from the minibuffer.  A command can also achieve
this by binding 'enable-recursive-minibuffers' to 't' in the interactive
declaration (*note Using Interactive::).  The minibuffer command
'next-matching-history-element' (normally 'M-s' in the minibuffer) does
the latter.

==============================================================================
File: elisp.info,  Node: |Minibuffer_Misc|,  Prev: |Recursive_Mini|,  Up: |Minibuffers|
==============================================================================

                                                               *Minibuffer_Misc*

20.14 Minibuffer Miscellany
---------------------------

 -- Function: minibufferp &optional buffer-or-name
     This function returns non-'nil' if BUFFER-OR-NAME is a minibuffer.
     If BUFFER-OR-NAME is omitted, it tests the current buffer.

 -- Variable: minibuffer-setup-hook
     This is a normal hook that is run whenever the minibuffer is
     entered.  *Note Hooks::.

 -- Macro: minibuffer-with-setup-hook function &rest body
     This macro executes BODY after arranging for the specified FUNCTION
     to be called via 'minibuffer-setup-hook'.  By default, FUNCTION is
     called before the other functions in the 'minibuffer-setup-hook'
     list, but if FUNCTION is of the form '(:append FUNC)', FUNC will be
     called _after_ the other hook functions.

     The BODY forms should not use the minibuffer more than once.  If
     the minibuffer is re-entered recursively, FUNCTION will only be
     called once, for the outermost use of the minibuffer.

 -- Variable: minibuffer-exit-hook
     This is a normal hook that is run whenever the minibuffer is
     exited.  *Note Hooks::.

 -- Variable: minibuffer-help-form
     The current value of this variable is used to rebind 'help-form'
     locally inside the minibuffer (*note Help Functions::).

 -- Variable: minibuffer-scroll-window
     If the value of this variable is non-'nil', it should be a window
     object.  When the function 'scroll-other-window' is called in the
     minibuffer, it scrolls this window (*note Textual Scrolling::).

 -- Function: minibuffer-selected-window
     This function returns the window that was selected just before the
     minibuffer window was selected.  If the selected window is not a
     minibuffer window, it returns 'nil'.

 -- Function: minibuffer-message string &rest args
     This function displays STRING temporarily at the end of the
     minibuffer text, for a few seconds, or until the next input event
     arrives, whichever comes first.  The variable
     'minibuffer-message-timeout' specifies the number of seconds to
     wait in the absence of input.  It defaults to 2.  If ARGS is
     non-'nil', the actual message is obtained by passing STRING and
     ARGS through 'format-message'.  *Note Formatting Strings::.

 -- Command: minibuffer-inactive-mode
     This is the major mode used in inactive minibuffers.  It uses
     keymap 'minibuffer-inactive-mode-map'.  This can be useful if the
     minibuffer is in a separate frame.  *Note Minibuffers and Frames::.

==============================================================================
File: elisp.info,  Node: |Command_Loop|,  Next: |Keymaps|,  Prev: |Minibuffers|,  Up: |Top|
==============================================================================

                                                                  *Command_Loop*

21 Command Loop
===============

When you run Emacs, it enters the "editor command loop" almost
immediately.  This loop reads key sequences, executes their definitions,
and displays the results.  In this chapter, we describe how these things
are done, and the subroutines that allow Lisp programs to do them.

MENU

* |Command_Overview|::    How the command loop reads commands.
* |Defining_Commands|::   Specifying how a function should read arguments.
* |Interactive_Call|::    Calling a command, so that it will read arguments.
* |Distinguish_Interactive|::     Making a command distinguish interactive calls.
* |Command_Loop_Info|::   Variables set by the command loop for you to examine.
* |Adjusting_Point|::     Adjustment of point after a command.
* |Input_Events|::        What input looks like when you read it.
* |Reading_Input|::       How to read input events from the keyboard or mouse.
* |Special_Events|::      Events processed immediately and individually.
* |Waiting|::             Waiting for user input or elapsed time.
* |Quitting|::            How 'C-g' works.  How to catch or defer quitting.
* |Prefix_Command_Arguments|::    How the commands to set prefix args work.
* |Recursive_Editing|::   Entering a recursive edit,
                          and why you usually shouldn't.
* |Disabling_Commands|::  How the command loop handles disabled commands.
* |Command_History|::     How the command history is set up, and how accessed.
* |Keyboard_Macros|::     How keyboard macros are implemented.

==============================================================================
File: elisp.info,  Node: |Command_Overview|,  Next: |Defining_Commands|,  Up: |Command_Loop|
==============================================================================

                                                              *Command_Overview*

21.1 Command Loop Overview
--------------------------

The first thing the command loop must do is read a key sequence, which
is a sequence of input events that translates into a command.  It does
this by calling the function 'read-key-sequence'.  Lisp programs can
also call this function (*note Key Sequence Input::).  They can also
read input at a lower level with 'read-key' or 'read-event' (*note
Reading One Event::), or discard pending input with 'discard-input'
(*note Event Input Misc::).

   The key sequence is translated into a command through the currently
active keymaps.  *Note Key Lookup::, for information on how this is
done.  The result should be a keyboard macro or an interactively
callable function.  If the key is 'M-x', then it reads the name of
another command, which it then calls.  This is done by the command
'execute-extended-command' (*note Interactive Call::).

   Prior to executing the command, Emacs runs 'undo-boundary' to create
an undo boundary.  *Note Maintaining Undo::.

   To execute a command, Emacs first reads its arguments by calling
'command-execute' (*note Interactive Call::).  For commands written in
Lisp, the 'interactive' specification says how to read the arguments.
This may use the prefix argument (*note Prefix Command Arguments::) or
may read with prompting in the minibuffer (*note Minibuffers::).  For
example, the command 'find-file' has an 'interactive' specification
which says to read a file name using the minibuffer.  The function body
of 'find-file' does not use the minibuffer, so if you call 'find-file'
as a function from Lisp code, you must supply the file name string as an
ordinary Lisp function argument.

   If the command is a keyboard macro (i.e., a string or vector), Emacs
executes it using 'execute-kbd-macro' (*note Keyboard Macros::).

 -- Variable: pre-command-hook
     This normal hook is run by the editor command loop before it
     executes each command.  At that time, 'this-command' contains the
     command that is about to run, and 'last-command' describes the
     previous command.  *Note Command Loop Info::.

 -- Variable: post-command-hook
     This normal hook is run by the editor command loop after it
     executes each command (including commands terminated prematurely by
     quitting or by errors).  At that time, 'this-command' refers to the
     command that just ran, and 'last-command' refers to the command
     before that.

     This hook is also run when Emacs first enters the command loop (at
     which point 'this-command' and 'last-command' are both 'nil').

   Quitting is suppressed while running 'pre-command-hook' and
'post-command-hook'.  If an error happens while executing one of these
hooks, it does not terminate execution of the hook; instead the error is
silenced and the function in which the error occurred is removed from
the hook.

   A request coming into the Emacs server (*note (emacs)Emacs Server::)
runs these two hooks just as a keyboard command does.

==============================================================================
File: elisp.info,  Node: |Defining_Commands|,  Next: |Interactive_Call|,  Prev: |Command_Overview|,  Up: |Command_Loop|
==============================================================================

                                                             *Defining_Commands*

21.2 Defining Commands
----------------------

The special form 'interactive' turns a Lisp function into a command.
The 'interactive' form must be located at top-level in the function
body, usually as the first form in the body; this applies to both lambda
expressions (*note Lambda Expressions::) and 'defun' forms (*note
Defining Functions::).  This form does nothing during the actual
execution of the function; its presence serves as a flag, telling the
Emacs command loop that the function can be called interactively.  The
argument of the 'interactive' form specifies how the arguments for an
interactive call should be read.

   Alternatively, an 'interactive' form may be specified in a function
symbol's 'interactive-form' property.  A non-'nil' value for this
property takes precedence over any 'interactive' form in the function
body itself.  This feature is seldom used.

   Sometimes, a function is only intended to be called interactively,
never directly from Lisp.  In that case, give the function a non-'nil'
'interactive-only' property, either directly or via 'declare' (*note
Declare Form::).  This causes the byte compiler to warn if the command
is called from Lisp.  The output of 'describe-function' will include
similar information.  The value of the property can be: a string, which
the byte-compiler will use directly in its warning (it should end with a
period, and not start with a capital, e.g., '"use (system-name)
instead."'); 't'; any other symbol, which should be an alternative
function to use in Lisp code.

   Generic functions (*note Generic Functions::) cannot be turned into
commands by adding the 'interactive' form to them.

MENU

* |Using_Interactive|::     General rules for 'interactive'.
* |Interactive_Codes|::     The standard letter-codes for reading arguments
                             in various ways.
* |Interactive_Examples|::  Examples of how to read interactive arguments.
* |Generic_Commands|::      Select among command alternatives.

==============================================================================
File: elisp.info,  Node: |Using_Interactive|,  Next: |Interactive_Codes|,  Up: |Defining_Commands|
==============================================================================

                                                             *Using_Interactive*

21.2.1 Using 'interactive'
--------------------------

This section describes how to write the 'interactive' form that makes a
Lisp function an interactively-callable command, and how to examine a
command's 'interactive' form.

 -- Special Form: interactive arg-descriptor
     This special form declares that a function is a command, and that
     it may therefore be called interactively (via 'M-x' or by entering
     a key sequence bound to it).  The argument ARG-DESCRIPTOR declares
     how to compute the arguments to the command when the command is
     called interactively.

     A command may be called from Lisp programs like any other function,
     but then the caller supplies the arguments and ARG-DESCRIPTOR has
     no effect.

     The 'interactive' form must be located at top-level in the function
     body, or in the function symbol's 'interactive-form' property
     (*note Symbol Properties::).  It has its effect because the command
     loop looks for it before calling the function (*note Interactive
     Call::).  Once the function is called, all its body forms are
     executed; at this time, if the 'interactive' form occurs within the
     body, the form simply returns 'nil' without even evaluating its
     argument.

     By convention, you should put the 'interactive' form in the
     function body, as the first top-level form.  If there is an
     'interactive' form in both the 'interactive-form' symbol property
     and the function body, the former takes precedence.  The
     'interactive-form' symbol property can be used to add an
     interactive form to an existing function, or change how its
     arguments are processed interactively, without redefining the
     function.

   There are three possibilities for the argument ARG-DESCRIPTOR:

   * It may be omitted or 'nil'; then the command is called with no
     arguments.  This leads quickly to an error if the command requires
     one or more arguments.

   * It may be a string; its contents are a sequence of elements
     separated by newlines, one for each argument(1).  Each element
     consists of a code character (*note Interactive Codes::) optionally
     followed by a prompt (which some code characters use and some
     ignore).  Here is an example:

          (interactive "P\nbFrobnicate buffer: ")

     The code letter 'P' sets the command's first argument to the raw
     command prefix (*note Prefix Command Arguments::).  'bFrobnicate
     buffer: ' prompts the user with 'Frobnicate buffer: ' to enter the
     name of an existing buffer, which becomes the second and final
     argument.

     The prompt string can use '%' to include previous argument values
     (starting with the first argument) in the prompt.  This is done
     using 'format-message' (*note Formatting Strings::).  For example,
     here is how you could read the name of an existing buffer followed
     by a new name to give to that buffer:

          (interactive "bBuffer to rename: \nsRename buffer %s to: ")

     If '*' appears at the beginning of the string, then an error is
     signaled if the buffer is read-only.

     If '@' appears at the beginning of the string, and if the key
     sequence used to invoke the command includes any mouse events, then
     the window associated with the first of those events is selected
     before the command is run.

     If '^' appears at the beginning of the string, and if the command
     was invoked through "shift-translation", set the mark and activate
     the region temporarily, or extend an already active region, before
     the command is run.  If the command was invoked without
     shift-translation, and the region is temporarily active, deactivate
     the region before the command is run.  Shift-translation is
     controlled on the user level by 'shift-select-mode'; see *note
     (emacs)Shift Selection::.

     You can use '*', '@', and '^' together; the order does not matter.
     Actual reading of arguments is controlled by the rest of the prompt
     string (starting with the first character that is not '*', '@', or
     '^').

   * It may be a Lisp expression that is not a string; then it should be
     a form that is evaluated to get a list of arguments to pass to the
     command.  Usually this form will call various functions to read
     input from the user, most often through the minibuffer (*note
     Minibuffers::) or directly from the keyboard (*note Reading
     Input::).

     Providing point or the mark as an argument value is also common,
     but if you do this _and_ read input (whether using the minibuffer
     or not), be sure to get the integer values of point or the mark
     after reading.  The current buffer may be receiving subprocess
     output; if subprocess output arrives while the command is waiting
     for input, it could relocate point and the mark.

     Here's an example of what _not_ to do:

          (interactive
           (list (region-beginning) (region-end)
                 (read-string "Foo: " nil 'my-history)))

     Here's how to avoid the problem, by examining point and the mark
     after reading the keyboard input:

          (interactive
           (let ((string (read-string "Foo: " nil 'my-history)))
             (list (region-beginning) (region-end) string)))

     Warning: the argument values should not include any data types
     that can't be printed and then read.  Some facilities save
     'command-history' in a file to be read in the subsequent sessions;
     if a command's arguments contain a data type that prints using
     '#<...>' syntax, those facilities won't work.

     There are, however, a few exceptions: it is ok to use a limited set
     of expressions such as '(point)', '(mark)', '(region-beginning)',
     and '(region-end)', because Emacs recognizes them specially and
     puts the expression (rather than its value) into the command
     history.  To see whether the expression you wrote is one of these
     exceptions, run the command, then examine '(car command-history)'.

 -- Function: interactive-form function
     This function returns the 'interactive' form of FUNCTION.  If
     FUNCTION is an interactively callable function (*note Interactive
     Call::), the value is the command's 'interactive' form
     '(interactive SPEC)', which specifies how to compute its arguments.
     Otherwise, the value is 'nil'.  If FUNCTION is a symbol, its
     function definition is used.

   ---------- Footnotes ----------

   (1) Some elements actually supply two arguments.

==============================================================================
File: elisp.info,  Node: |Interactive_Codes|,  Next: |Interactive_Examples|,  Prev: |Using_Interactive|,  Up: |Defining_Commands|
==============================================================================

                                                             *Interactive_Codes*

21.2.2 Code Characters for 'interactive'
----------------------------------------

The code character descriptions below contain a number of key words,
defined here as follows:

Completion
     Provide completion.  <TAB>, <SPC>, and <RET> perform name
     completion because the argument is read using 'completing-read'
     (*note Completion::).  '?' displays a list of possible completions.

Existing
     Require the name of an existing object.  An invalid name is not
     accepted; the commands to exit the minibuffer do not exit if the
     current input is not valid.

Default
     A default value of some sort is used if the user enters no text in
     the minibuffer.  The default depends on the code character.

No I/O
     This code letter computes an argument without reading any input.
     Therefore, it does not use a prompt string, and any prompt string
     you supply is ignored.

     Even though the code letter doesn't use a prompt string, you must
     follow it with a newline if it is not the last code character in
     the string.

Prompt
     A prompt immediately follows the code character.  The prompt ends
     either with the end of the string or with a newline.

Special
     This code character is meaningful only at the beginning of the
     interactive string, and it does not look for a prompt or a newline.
     It is a single, isolated character.

   Here are the code character descriptions for use with 'interactive':

'*'
     Signal an error if the current buffer is read-only.  Special.

'@'
     Select the window mentioned in the first mouse event in the key
     sequence that invoked this command.  Special.

'^'
     If the command was invoked through shift-translation, set the mark
     and activate the region temporarily, or extend an already active
     region, before the command is run.  If the command was invoked
     without shift-translation, and the region is temporarily active,
     deactivate the region before the command is run.  Special.

'a'
     A function name (i.e., a symbol satisfying 'fboundp').  Existing,
     Completion, Prompt.

'b'
     The name of an existing buffer.  By default, uses the name of the
     current buffer (*note Buffers::).  Existing, Completion, Default,
     Prompt.

'B'
     A buffer name.  The buffer need not exist.  By default, uses the
     name of a recently used buffer other than the current buffer.
     Completion, Default, Prompt.

'c'
     A character.  The cursor does not move into the echo area.  Prompt.

'C'
     A command name (i.e., a symbol satisfying 'commandp').  Existing,
     Completion, Prompt.

'd'
     The position of point, as an integer (*note Point::).  No I/O.

'D'
     A directory.  The default is the current default directory of the
     current buffer, 'default-directory' (*note File Name Expansion::).
     Existing, Completion, Default, Prompt.

'e'
     The first or next non-keyboard event in the key sequence that
     invoked the command.  More precisely, 'e' gets events that are
     lists, so you can look at the data in the lists.  *Note Input
     Events::.  No I/O.

     You use 'e' for mouse events and for special system events (*note
     Misc Events::).  The event list that the command receives depends
     on the event.  *Note Input Events::, which describes the forms of
     the list for each event in the corresponding subsections.

     You can use 'e' more than once in a single command's interactive
     specification.  If the key sequence that invoked the command has N
     events that are lists, the Nth 'e' provides the Nth such event.
     Events that are not lists, such as function keys and ASCII
     characters, do not count where 'e' is concerned.

'f'
     A file name of an existing file (*note File Names::).  The default
     directory is 'default-directory'.  Existing, Completion, Default,
     Prompt.

'F'
     A file name.  The file need not exist.  Completion, Default,
     Prompt.

'G'
     A file name.  The file need not exist.  If the user enters just a
     directory name, then the value is just that directory name, with no
     file name within the directory added.  Completion, Default, Prompt.

'i'
     An irrelevant argument.  This code always supplies 'nil' as the
     argument's value.  No I/O.

'k'
     A key sequence (*note Key Sequences::).  This keeps reading events
     until a command (or undefined command) is found in the current key
     maps.  The key sequence argument is represented as a string or
     vector.  The cursor does not move into the echo area.  Prompt.

     If 'k' reads a key sequence that ends with a down-event, it also
     reads and discards the following up-event.  You can get access to
     that up-event with the 'U' code character.

     This kind of input is used by commands such as 'describe-key' and
     'global-set-key'.

'K'
     A key sequence, whose definition you intend to change.  This works
     like 'k', except that it suppresses, for the last input event in
     the key sequence, the conversions that are normally used (when
     necessary) to convert an undefined key into a defined one.

'm'
     The position of the mark, as an integer.  No I/O.

'M'
     Arbitrary text, read in the minibuffer using the current buffer's
     input method, and returned as a string (*note (emacs)Input
     Methods::).  Prompt.

'n'
     A number, read with the minibuffer.  If the input is not a number,
     the user has to try again.  'n' never uses the prefix argument.
     Prompt.

'N'
     The numeric prefix argument; but if there is no prefix argument,
     read a number as with 'n'.  The value is always a number.  *Note
     Prefix Command Arguments::.  Prompt.

'p'
     The numeric prefix argument.  (Note that this 'p' is lower case.)
     No I/O.

'P'
     The raw prefix argument.  (Note that this 'P' is upper case.)  No
     I/O.

'r'
     Point and the mark, as two numeric arguments, smallest first.  This
     is the only code letter that specifies two successive arguments
     rather than one.  This will signal an error if the mark is not set
     in the buffer which is current when the command is invoked.  No
     I/O.

's'
     Arbitrary text, read in the minibuffer and returned as a string
     (*note Text from Minibuffer::).  Terminate the input with either
     'C-j' or <RET>.  ('C-q' may be used to include either of these
     characters in the input.)  Prompt.

'S'
     An interned symbol whose name is read in the minibuffer.  Terminate
     the input with either 'C-j' or <RET>.  Other characters that
     normally terminate a symbol (e.g., whitespace, parentheses and
     brackets) do not do so here.  Prompt.

'U'
     A key sequence or 'nil'.  Can be used after a 'k' or 'K' argument
     to get the up-event that was discarded (if any) after 'k' or 'K'
     read a down-event.  If no up-event has been discarded, 'U' provides
     'nil' as the argument.  No I/O.

'v'
     A variable declared to be a user option (i.e., satisfying the
     predicate 'custom-variable-p').  This reads the variable using
     'read-variable'.  *Note Definition of read-variable::.  Existing,
     Completion, Prompt.

'x'
     A Lisp object, specified with its read syntax, terminated with a
     'C-j' or <RET>.  The object is not evaluated.  *Note Object from
     Minibuffer::.  Prompt.

'X'
     A Lisp form's value.  'X' reads as 'x' does, then evaluates the
     form so that its value becomes the argument for the command.
     Prompt.

'z'
     A coding system name (a symbol).  If the user enters null input,
     the argument value is 'nil'.  *Note Coding Systems::.  Completion,
     Existing, Prompt.

'Z'
     A coding system name (a symbol)--but only if this command has a
     prefix argument.  With no prefix argument, 'Z' provides 'nil' as
     the argument value.  Completion, Existing, Prompt.

==============================================================================
File: elisp.info,  Node: |Interactive_Examples|,  Next: |Generic_Commands|,  Prev: |Interactive_Codes|,  Up: |Defining_Commands|
==============================================================================

                                                          *Interactive_Examples*

21.2.3 Examples of Using 'interactive'
--------------------------------------

Here are some examples of 'interactive':

     (defun foo1 ()              ; 'foo1' takes no arguments,
         (interactive)           ;   just moves forward two words.
         (forward-word 2))
          => foo1

     (defun foo2 (n)             ; 'foo2' takes one argument,
         (interactive "^p")      ;   which is the numeric prefix.
                                 ; under 'shift-select-mode',
                                 ;   will activate or extend region.
         (forward-word (* 2 n)))
          => foo2

     (defun foo3 (n)             ; 'foo3' takes one argument,
         (interactive "nCount:") ;   which is read with the Minibuffer.
         (forward-word (* 2 n)))
          => foo3

     (defun three-b (b1 b2 b3)
       "Select three existing buffers.
     Put them into three windows, selecting the last one."
         (interactive "bBuffer1:\nbBuffer2:\nbBuffer3:")
         (delete-other-windows)
         (split-window (selected-window) 8)
         (switch-to-buffer b1)
         (other-window 1)
         (split-window (selected-window) 8)
         (switch-to-buffer b2)
         (other-window 1)
         (switch-to-buffer b3))
          => three-b
     (three-b "scratch" "declarations.texi" "*mail*")
          => nil

==============================================================================
File: elisp.info,  Node: |Generic_Commands|,  Prev: |Interactive_Examples|,  Up: |Defining_Commands|
==============================================================================

                                                              *Generic_Commands*

21.2.4 Select among Command Alternatives
----------------------------------------

The macro 'define-alternatives' can be used to define "generic
commands".  These are interactive functions whose implementation can be
selected from several alternatives, as a matter of user preference.

 -- Macro: define-alternatives command &rest customizations
     Define the new command COMMAND, a symbol.

     When a user runs 'M-x COMMAND <RET>' for the first time, Emacs
     prompts for which real form of the command to use, and records the
     selection by way of a custom variable.  Using a prefix argument
     repeats this process of choosing an alternative.

     The variable 'COMMAND-alternatives' should contain an alist with
     alternative implementations of COMMAND.  Until this variable is
     set, 'define-alternatives' has no effect.

     If CUSTOMIZATIONS is non-'nil', it should consist of alternating
     'defcustom' keywords (typically ':group' and ':version') and values
     to add to the declaration of 'COMMAND-alternatives'.

==============================================================================
File: elisp.info,  Node: |Interactive_Call|,  Next: |Distinguish_Interactive|,  Prev: |Defining_Commands|,  Up: |Command_Loop|
==============================================================================

                                                              *Interactive_Call*

21.3 Interactive Call
---------------------

After the command loop has translated a key sequence into a command, it
invokes that command using the function 'command-execute'.  If the
command is a function, 'command-execute' calls 'call-interactively',
which reads the arguments and calls the command.  You can also call
these functions yourself.

   Note that the term "command", in this context, refers to an
interactively callable function (or function-like object), or a keyboard
macro.  It does not refer to the key sequence used to invoke a command
(*note Keymaps::).

 -- Function: commandp object &optional for-call-interactively
     This function returns 't' if OBJECT is a command.  Otherwise, it
     returns 'nil'.

     Commands include strings and vectors (which are treated as keyboard
     macros), lambda expressions that contain a top-level 'interactive'
     form (*note Using Interactive::), byte-code function objects made
     from such lambda expressions, autoload objects that are declared as
     interactive (non-'nil' fourth argument to 'autoload'), and some
     primitive functions.  Also, a symbol is considered a command if it
     has a non-'nil' 'interactive-form' property, or if its function
     definition satisfies 'commandp'.

     If FOR-CALL-INTERACTIVELY is non-'nil', then 'commandp' returns 't'
     only for objects that 'call-interactively' could call--thus, not for
     keyboard macros.

     See 'documentation' in *note Accessing Documentation::, for a
     realistic example of using 'commandp'.

 -- Function: call-interactively command &optional record-flag keys
     This function calls the interactively callable function COMMAND,
     providing arguments according to its interactive calling
     specifications.  It returns whatever COMMAND returns.

     If, for instance, you have a function with the following signature:

          (defun foo (begin end)
            (interactive "r")
            ...)

     then saying

          (call-interactively 'foo)

     will call 'foo' with the region ('point' and 'mark') as the
     arguments.

     An error is signaled if COMMAND is not a function or if it cannot
     be called interactively (i.e., is not a command).  Note that
     keyboard macros (strings and vectors) are not accepted, even though
     they are considered commands, because they are not functions.  If
     COMMAND is a symbol, then 'call-interactively' uses its function
     definition.

     If RECORD-FLAG is non-'nil', then this command and its arguments
     are unconditionally added to the list 'command-history'.
     Otherwise, the command is added only if it uses the minibuffer to
     read an argument.  *Note Command History::.

     The argument KEYS, if given, should be a vector which specifies the
     sequence of events to supply if the command inquires which events
     were used to invoke it.  If KEYS is omitted or 'nil', the default
     is the return value of 'this-command-keys-vector'.  *Note
     Definition of this-command-keys-vector::.

 -- Function: funcall-interactively function &rest arguments
     This function works like 'funcall' (*note Calling Functions::), but
     it makes the call look like an interactive invocation: a call to
     'called-interactively-p' inside FUNCTION will return 't'.  If
     FUNCTION is not a command, it is called without signaling an error.

 -- Function: command-execute command &optional record-flag keys special
     This function executes COMMAND.  The argument COMMAND must satisfy
     the 'commandp' predicate; i.e., it must be an interactively
     callable function or a keyboard macro.

     A string or vector as COMMAND is executed with 'execute-kbd-macro'.
     A function is passed to 'call-interactively' (see above), along
     with the RECORD-FLAG and KEYS arguments.

     If COMMAND is a symbol, its function definition is used in its
     place.  A symbol with an 'autoload' definition counts as a command
     if it was declared to stand for an interactively callable function.
     Such a definition is handled by loading the specified library and
     then rechecking the definition of the symbol.

     The argument SPECIAL, if given, means to ignore the prefix argument
     and not clear it.  This is used for executing special events (*note
     Special Events::).

 -- Command: execute-extended-command prefix-argument
     This function reads a command name from the minibuffer using
     'completing-read' (*note Completion::).  Then it uses
     'command-execute' to call the specified command.  Whatever that
     command returns becomes the value of 'execute-extended-command'.

     If the command asks for a prefix argument, it receives the value
     PREFIX-ARGUMENT.  If 'execute-extended-command' is called
     interactively, the current raw prefix argument is used for
     PREFIX-ARGUMENT, and thus passed on to whatever command is run.

     'execute-extended-command' is the normal definition of 'M-x', so it
     uses the string 'M-x ' as a prompt.  (It would be better to take
     the prompt from the events used to invoke
     'execute-extended-command', but that is painful to implement.)  A
     description of the value of the prefix argument, if any, also
     becomes part of the prompt.

          (execute-extended-command 3)
          ---------- Buffer: Minibuffer ----------
          3 M-x forward-word <RET>
          ---------- Buffer: Minibuffer ----------
               => t

==============================================================================
File: elisp.info,  Node: |Distinguish_Interactive|,  Next: |Command_Loop_Info|,  Prev: |Interactive_Call|,  Up: |Command_Loop|
==============================================================================

                                                       *Distinguish_Interactive*

21.4 Distinguish Interactive Calls
----------------------------------

Sometimes a command should display additional visual feedback (such as
an informative message in the echo area) for interactive calls only.
There are three ways to do this.  The recommended way to test whether
the function was called using 'call-interactively' is to give it an
optional argument 'print-message' and use the 'interactive' spec to make
it non-'nil' in interactive calls.  Here's an example:

     (defun foo (&optional print-message)
       (interactive "p")
       (when print-message
         (message "foo")))

We use '"p"' because the numeric prefix argument is never 'nil'.
Defined in this way, the function does display the message when called
from a keyboard macro.

   The above method with the additional argument is usually best,
because it allows callers to say "treat this call as interactive".  But
you can also do the job by testing 'called-interactively-p'.

 -- Function: called-interactively-p kind
     This function returns 't' when the calling function was called
     using 'call-interactively'.

     The argument KIND should be either the symbol 'interactive' or the
     symbol 'any'.  If it is 'interactive', then
     'called-interactively-p' returns 't' only if the call was made
     directly by the user--e.g., if the user typed a key sequence bound
     to the calling function, but _not_ if the user ran a keyboard macro
     that called the function (*note Keyboard Macros::).  If KIND is
     'any', 'called-interactively-p' returns 't' for any kind of
     interactive call, including keyboard macros.

     If in doubt, use 'any'; the only known proper use of 'interactive'
     is if you need to decide whether to display a helpful message while
     a function is running.

     A function is never considered to be called interactively if it was
     called via Lisp evaluation (or with 'apply' or 'funcall').

Here is an example of using 'called-interactively-p':

     (defun foo ()
       (interactive)
       (when (called-interactively-p 'any)
         (message "Interactive!")
         'foo-called-interactively))

     ;; Type 'M-x foo'.
          -| Interactive!

     (foo)
          => nil

Here is another example that contrasts direct and indirect calls to
'called-interactively-p'.

     (defun bar ()
       (interactive)
       (message "%s" (list (foo) (called-interactively-p 'any))))

     ;; Type 'M-x bar'.
          -| (nil t)

==============================================================================
File: elisp.info,  Node: |Command_Loop_Info|,  Next: |Adjusting_Point|,  Prev: |Distinguish_Interactive|,  Up: |Command_Loop|
==============================================================================

                                                             *Command_Loop_Info*

21.5 Information from the Command Loop
--------------------------------------

The editor command loop sets several Lisp variables to keep status
records for itself and for commands that are run.  With the exception of
'this-command' and 'last-command' it's generally a bad idea to change
any of these variables in a Lisp program.

 -- Variable: last-command
     This variable records the name of the previous command executed by
     the command loop (the one before the current command).  Normally
     the value is a symbol with a function definition, but this is not
     guaranteed.

     The value is copied from 'this-command' when a command returns to
     the command loop, except when the command has specified a prefix
     argument for the following command.

     This variable is always local to the current terminal and cannot be
     buffer-local.  *Note Multiple Terminals::.

 -- Variable: real-last-command
     This variable is set up by Emacs just like 'last-command', but
     never altered by Lisp programs.

 -- Variable: last-repeatable-command
     This variable stores the most recently executed command that was
     not part of an input event.  This is the command 'repeat' will try
     to repeat, *Note (emacs)Repeating::.

 -- Variable: this-command
     This variable records the name of the command now being executed by
     the editor command loop.  Like 'last-command', it is normally a
     symbol with a function definition.

     The command loop sets this variable just before running a command,
     and copies its value into 'last-command' when the command finishes
     (unless the command specified a prefix argument for the following
     command).

     Some commands set this variable during their execution, as a flag
     for whatever command runs next.  In particular, the functions for
     killing text set 'this-command' to 'kill-region' so that any kill
     commands immediately following will know to append the killed text
     to the previous kill.

   If you do not want a particular command to be recognized as the
previous command in the case where it got an error, you must code that
command to prevent this.  One way is to set 'this-command' to 't' at the
beginning of the command, and set 'this-command' back to its proper
value at the end, like this:

     (defun foo (args...)
       (interactive ...)
       (let ((old-this-command this-command))
         (setq this-command t)
         ...do the work...
         (setq this-command old-this-command)))

We do not bind 'this-command' with 'let' because that would restore the
old value in case of error--a feature of 'let' which in this case does
precisely what we want to avoid.

 -- Variable: this-original-command
     This has the same value as 'this-command' except when command
     remapping occurs (*note Remapping Commands::).  In that case,
     'this-command' gives the command actually run (the result of
     remapping), and 'this-original-command' gives the command that was
     specified to run but remapped into another command.

 -- Function: this-command-keys
     This function returns a string or vector containing the key
     sequence that invoked the present command, plus any previous
     commands that generated the prefix argument for this command.  Any
     events read by the command using 'read-event' without a timeout get
     tacked on to the end.

     However, if the command has called 'read-key-sequence', it returns
     the last read key sequence.  *Note Key Sequence Input::.  The value
     is a string if all events in the sequence were characters that fit
     in a string.  *Note Input Events::.

          (this-command-keys)
          ;; Now use 'C-u C-x C-e' to evaluate that.
               => "^U^X^E"

 -- Function: this-command-keys-vector
     Like 'this-command-keys', except that it always returns the events
     in a vector, so you don't need to deal with the complexities of
     storing input events in a string (*note Strings of Events::).

 -- Function: clear-this-command-keys &optional keep-record
     This function empties out the table of events for
     'this-command-keys' to return.  Unless KEEP-RECORD is non-'nil', it
     also empties the records that the function 'recent-keys' (*note
     Recording Input::) will subsequently return.  This is useful after
     reading a password, to prevent the password from echoing
     inadvertently as part of the next command in certain cases.

 -- Variable: last-nonmenu-event
     This variable holds the last input event read as part of a key
     sequence, not counting events resulting from mouse menus.

     One use of this variable is for telling 'x-popup-menu' where to pop
     up a menu.  It is also used internally by 'y-or-n-p' (*note
     Yes-or-No Queries::).

 -- Variable: last-command-event
     This variable is set to the last input event that was read by the
     command loop as part of a command.  The principal use of this
     variable is in 'self-insert-command', which uses it to decide which
     character to insert.

          last-command-event
          ;; Now use 'C-u C-x C-e' to evaluate that.
               => 5

     The value is 5 because that is the ASCII code for 'C-e'.

 -- Variable: last-event-frame
     This variable records which frame the last input event was directed
     to.  Usually this is the frame that was selected when the event was
     generated, but if that frame has redirected input focus to another
     frame, the value is the frame to which the event was redirected.
     *Note Input Focus::.

     If the last event came from a keyboard macro, the value is 'macro'.

==============================================================================
File: elisp.info,  Node: |Adjusting_Point|,  Next: |Input_Events|,  Prev: |Command_Loop_Info|,  Up: |Command_Loop|
==============================================================================

                                                               *Adjusting_Point*

21.6 Adjusting Point After Commands
-----------------------------------

Emacs cannot display the cursor when point is in the middle of a
sequence of text that has the 'display' or 'composition' property, or is
invisible.  Therefore, after a command finishes and returns to the
command loop, if point is within such a sequence, the command loop
normally moves point to the edge of the sequence, making this sequence
effectively intangible.

   A command can inhibit this feature by setting the variable
'disable-point-adjustment':

 -- Variable: disable-point-adjustment
     If this variable is non-'nil' when a command returns to the command
     loop, then the command loop does not check for those text
     properties, and does not move point out of sequences that have
     them.

     The command loop sets this variable to 'nil' before each command,
     so if a command sets it, the effect applies only to that command.

 -- Variable: global-disable-point-adjustment
     If you set this variable to a non-'nil' value, the feature of
     moving point out of these sequences is completely turned off.

==============================================================================
File: elisp.info,  Node: |Input_Events|,  Next: |Reading_Input|,  Prev: |Adjusting_Point|,  Up: |Command_Loop|
==============================================================================

                                                                  *Input_Events*

21.7 Input Events
-----------------

The Emacs command loop reads a sequence of "input events" that represent
keyboard or mouse activity, or system events sent to Emacs.  The events
for keyboard activity are characters or symbols; other events are always
lists.  This section describes the representation and meaning of input
events in detail.

 -- Function: eventp object
     This function returns non-'nil' if OBJECT is an input event or
     event type.

     Note that any non-'nil' symbol might be used as an event or an
     event type; 'eventp' cannot distinguish whether a symbol is
     intended by Lisp code to be used as an event.

MENU

* |Keyboard_Events|::             Ordinary characters - keys with symbols on them.
* |Function_Keys|::               Function keys - keys with names, not symbols.
* |Mouse_Events|::                Overview of mouse events.
* |Click_Events|::                Pushing and releasing a mouse button.
* |Drag_Events|::                 Moving the mouse before releasing the button.
* |Button_Down_Events|::          A button was pushed and not yet released.
* |Repeat_Events|::               Double and triple click (or drag, or down).
* |Motion_Events|::               Just moving the mouse, not pushing a button.
* |Focus_Events|::                Moving the mouse between frames.
* |Misc_Events|::                 Other events the system can generate.
* |Event_Examples|::              Examples of the lists for mouse events.
* |Classifying_Events|::          Finding the modifier keys in an event symbol.
                                Event types.
* |Accessing_Mouse|::             Functions to extract info from mouse events.
* |Accessing_Scroll|::            Functions to get info from scroll bar events.
* |Strings_of_Events|::           Special considerations for putting
                                  keyboard character events in a string.

==============================================================================
File: elisp.info,  Node: |Keyboard_Events|,  Next: |Function_Keys|,  Up: |Input_Events|
==============================================================================

                                                               *Keyboard_Events*

21.7.1 Keyboard Events
----------------------

There are two kinds of input you can get from the keyboard: ordinary
keys, and function keys.  Ordinary keys correspond to (possibly
modified) characters; the events they generate are represented in Lisp
as characters.  The event type of a "character event" is the character
itself (an integer), which might have some modifier bits set; see *note
Classifying Events::.

   An input character event consists of a "basic code" between 0 and
524287, plus any or all of these "modifier bits":

meta
     The 2**27 bit in the character code indicates a character typed
     with the meta key held down.

control
     The 2**26 bit in the character code indicates a non-ASCII control
     character.

     ASCII control characters such as 'C-a' have special basic codes of
     their own, so Emacs needs no special bit to indicate them.  Thus,
     the code for 'C-a' is just 1.

     But if you type a control combination not in ASCII, such as '%'
     with the control key, the numeric value you get is the code for '%'
     plus 2**26 (assuming the terminal supports non-ASCII control
     characters), i.e. with the 27th bit set.

shift
     The 2**25 bit (the 26th bit) in the character event code indicates
     an ASCII control character typed with the shift key held down.

     For letters, the basic code itself indicates upper versus lower
     case; for digits and punctuation, the shift key selects an entirely
     different character with a different basic code.  In order to keep
     within the ASCII character set whenever possible, Emacs avoids
     using the 2**25 bit for those character events.

     However, ASCII provides no way to distinguish 'C-A' from 'C-a', so
     Emacs uses the 2**25 bit in 'C-A' and not in 'C-a'.

hyper
     The 2**24 bit in the character event code indicates a character
     typed with the hyper key held down.

super
     The 2**23 bit in the character event code indicates a character
     typed with the super key held down.

alt
     The 2**22 bit in the character event code indicates a character
     typed with the alt key held down.  (The key labeled <Alt> on most
     keyboards is actually treated as the meta key, not this.)

   It is best to avoid mentioning specific bit numbers in your program.
To test the modifier bits of a character, use the function
'event-modifiers' (*note Classifying Events::).  When making key
bindings, you can use the read syntax for characters with modifier bits
('\C-', '\M-', and so on).  For making key bindings with 'define-key',
you can use lists such as '(control hyper ?x)' to specify the characters
(*note Changing Key Bindings::).  The function 'event-convert-list'
converts such a list into an event type (*note Classifying Events::).

==============================================================================
File: elisp.info,  Node: |Function_Keys|,  Next: |Mouse_Events|,  Prev: |Keyboard_Events|,  Up: |Input_Events|
==============================================================================

                                                                 *Function_Keys*

21.7.2 Function Keys
--------------------

Most keyboards also have "function keys"--keys that have names or symbols
that are not characters.  Function keys are represented in Emacs Lisp as
symbols; the symbol's name is the function key's label, in lower case.
For example, pressing a key labeled <F1> generates an input event
represented by the symbol 'f1'.

   The event type of a function key event is the event symbol itself.
*Note Classifying Events::.

   Here are a few special cases in the symbol-naming convention for
function keys:

'backspace', 'tab', 'newline', 'return', 'delete'
     These keys correspond to common ASCII control characters that have
     special keys on most keyboards.

     In ASCII, 'C-i' and <TAB> are the same character.  If the terminal
     can distinguish between them, Emacs conveys the distinction to Lisp
     programs by representing the former as the integer 9, and the
     latter as the symbol 'tab'.

     Most of the time, it's not useful to distinguish the two.  So
     normally 'local-function-key-map' (*note Translation Keymaps::) is
     set up to map 'tab' into 9.  Thus, a key binding for character code
     9 (the character 'C-i') also applies to 'tab'.  Likewise for the
     other symbols in this group.  The function 'read-char' likewise
     converts these events into characters.

     In ASCII, <BS> is really 'C-h'.  But 'backspace' converts into the
     character code 127 (<DEL>), not into code 8 (<BS>).  This is what
     most users prefer.

'left', 'up', 'right', 'down'
     Cursor arrow keys
'kp-add', 'kp-decimal', 'kp-divide', ...
     Keypad keys (to the right of the regular keyboard).
'kp-0', 'kp-1', ...
     Keypad keys with digits.
'kp-f1', 'kp-f2', 'kp-f3', 'kp-f4'
     Keypad PF keys.
'kp-home', 'kp-left', 'kp-up', 'kp-right', 'kp-down'
     Keypad arrow keys.  Emacs normally translates these into the
     corresponding non-keypad keys 'home', 'left', ...
'kp-prior', 'kp-next', 'kp-end', 'kp-begin', 'kp-insert', 'kp-delete'
     Additional keypad duplicates of keys ordinarily found elsewhere.
     Emacs normally translates these into the like-named non-keypad
     keys.

   You can use the modifier keys <ALT>, <CTRL>, <HYPER>, <META>,
<SHIFT>, and <SUPER> with function keys.  The way to represent them is
with prefixes in the symbol name:

'A-'
     The alt modifier.
'C-'
     The control modifier.
'H-'
     The hyper modifier.
'M-'
     The meta modifier.
'S-'
     The shift modifier.
's-'
     The super modifier.

   Thus, the symbol for the key <F3> with <META> held down is 'M-f3'.
When you use more than one prefix, we recommend you write them in
alphabetical order; but the order does not matter in arguments to the
key-binding lookup and modification functions.

==============================================================================
File: elisp.info,  Node: |Mouse_Events|,  Next: |Click_Events|,  Prev: |Function_Keys|,  Up: |Input_Events|
==============================================================================

                                                                  *Mouse_Events*

21.7.3 Mouse Events
-------------------

Emacs supports four kinds of mouse events: click events, drag events,
button-down events, and motion events.  All mouse events are represented
as lists.  The CAR of the list is the event type; this says which mouse
button was involved, and which modifier keys were used with it.  The
event type can also distinguish double or triple button presses (*note
Repeat Events::).  The rest of the list elements give position and time
information.

   For key lookup, only the event type matters: two events of the same
type necessarily run the same command.  The command can access the full
values of these events using the 'e' interactive code.  *Note
Interactive Codes::.

   A key sequence that starts with a mouse event is read using the
keymaps of the buffer in the window that the mouse was in, not the
current buffer.  This does not imply that clicking in a window selects
that window or its buffer--that is entirely under the control of the
command binding of the key sequence.

==============================================================================
File: elisp.info,  Node: |Click_Events|,  Next: |Drag_Events|,  Prev: |Mouse_Events|,  Up: |Input_Events|
==============================================================================

                                                                  *Click_Events*

21.7.4 Click Events
-------------------

When the user presses a mouse button and releases it at the same
location, that generates a "click" event.  All mouse click event share
the same format:

     (EVENT-TYPE POSITION CLICK-COUNT)

EVENT-TYPE
     This is a symbol that indicates which mouse button was used.  It is
     one of the symbols 'mouse-1', 'mouse-2', ..., where the buttons are
     numbered left to right.

     You can also use prefixes 'A-', 'C-', 'H-', 'M-', 'S-' and 's-' for
     modifiers alt, control, hyper, meta, shift and super, just as you
     would with function keys.

     This symbol also serves as the event type of the event.  Key
     bindings describe events by their types; thus, if there is a key
     binding for 'mouse-1', that binding would apply to all events whose
     EVENT-TYPE is 'mouse-1'.

POSITION
     This is a "mouse position list" specifying where the mouse click
     occurred; see below for details.

CLICK-COUNT
     This is the number of rapid repeated presses so far of the same
     mouse button.  *Note Repeat Events::.

   To access the contents of a mouse position list in the POSITION slot
of a click event, you should typically use the functions documented in
*note Accessing Mouse::.  The explicit format of the list depends on
where the click occurred.  For clicks in the text area, mode line,
header line, tab line, or in the fringe or marginal areas, the mouse
position list has the form

     (WINDOW POS-OR-AREA (X . Y) TIMESTAMP
      OBJECT TEXT-POS (COL . ROW)
      IMAGE (DX . DY) (WIDTH . HEIGHT))

The meanings of these list elements are as follows:

WINDOW
     The window in which the click occurred.

POS-OR-AREA
     The buffer position of the character clicked on in the text area;
     or, if the click was outside the text area, the window area where
     it occurred.  It is one of the symbols 'mode-line', 'header-line',
     'tab-line', 'vertical-line', 'left-margin', 'right-margin',
     'left-fringe', or 'right-fringe'.

     In one special case, POS-OR-AREA is a list containing a symbol (one
     of the symbols listed above) instead of just the symbol.  This
     happens after the imaginary prefix keys for the event are
     registered by Emacs.  *Note Key Sequence Input::.

X, Y
     The relative pixel coordinates of the click.  For clicks in the
     text area of a window, the coordinate origin '(0 . 0)' is taken to
     be the top left corner of the text area.  *Note Window Sizes::.
     For clicks in a mode line, header line or tab line, the coordinate
     origin is the top left corner of the window itself.  For fringes,
     margins, and the vertical border, X does not have meaningful data.
     For fringes and margins, Y is relative to the bottom edge of the
     header line.  In all cases, the X and Y coordinates increase
     rightward and downward respectively.

TIMESTAMP
     The time at which the event occurred, as an integer number of
     milliseconds since a system-dependent initial time.

OBJECT
     Either 'nil', which means the click occurred on buffer text, or a
     cons cell of the form (STRING . STRING-POS) if there is a string
     from a text property or an overlay at the click position.

     STRING
          The string which was clicked on, including any properties.

     STRING-POS
          The position in the string where the click occurred.

TEXT-POS
     For clicks on a marginal area or on a fringe, this is the buffer
     position of the first visible character in the corresponding line
     in the window.  For clicks on the mode line, the header line or the
     tab line, this is 'nil'.  For other events, it is the buffer
     position closest to the click.

COL, ROW
     These are the actual column and row coordinate numbers of the glyph
     under the X, Y position.  If X lies beyond the last column of
     actual text on its line, COL is reported by adding fictional extra
     columns that have the default character width.  Row 0 is taken to
     be the header line if the window has one, or Row 1 if the window
     also has the tab line, or the topmost row of the text area
     otherwise.  Column 0 is taken to be the leftmost column of the text
     area for clicks on a window text area, or the leftmost mode line or
     header line column for clicks there.  For clicks on fringes or
     vertical borders, these have no meaningful data.  For clicks on
     margins, COL is measured from the left edge of the margin area and
     ROW is measured from the top of the margin area.

IMAGE
     If there is an image at the click location, this is the image
     object as returned by 'find-image' (*note Defining Images::);
     otherwise this is 'nil'.

DX, DY
     These are the pixel coordinates of the click, relative to the top
     left corner of OBJECT, which is '(0 . 0)'.  If OBJECT is 'nil',
     which stands for a buffer, the coordinates are relative to the top
     left corner of the character glyph clicked on.

WIDTH, HEIGHT
     These are the pixel width and height of OBJECT or, if this is
     'nil', those of the character glyph clicked on.

   For clicks on a scroll bar, POSITION has this form:

     (WINDOW AREA (PORTION . WHOLE) TIMESTAMP PART)

WINDOW
     The window whose scroll bar was clicked on.

AREA
     This is the symbol 'vertical-scroll-bar'.

PORTION
     The number of pixels from the top of the scroll bar to the click
     position.  On some toolkits, including GTK+, Emacs cannot extract
     this data, so the value is always '0'.

WHOLE
     The total length, in pixels, of the scroll bar.  On some toolkits,
     including GTK+, Emacs cannot extract this data, so the value is
     always '0'.

TIMESTAMP
     The time at which the event occurred, in milliseconds.  On some
     toolkits, including GTK+, Emacs cannot extract this data, so the
     value is always '0'.

PART
     The part of the scroll bar on which the click occurred.  It is one
     of the symbols 'handle' (the scroll bar handle), 'above-handle'
     (the area above the handle), 'below-handle' (the area below the
     handle), 'up' (the up arrow at one end of the scroll bar), or
     'down' (the down arrow at one end of the scroll bar).

==============================================================================
File: elisp.info,  Node: |Drag_Events|,  Next: |Button_Down_Events|,  Prev: |Click_Events|,  Up: |Input_Events|
==============================================================================

                                                                   *Drag_Events*

21.7.5 Drag Events
------------------

With Emacs, you can have a drag event without even changing your
clothes.  A "drag event" happens every time the user presses a mouse
button and then moves the mouse to a different character position before
releasing the button.  Like all mouse events, drag events are
represented in Lisp as lists.  The lists record both the starting mouse
position and the final position, like this:

     (EVENT-TYPE
      (WINDOW1 START-POSITION)
      (WINDOW2 END-POSITION))

   For a drag event, the name of the symbol EVENT-TYPE contains the
prefix 'drag-'.  For example, dragging the mouse with button 2 held down
generates a 'drag-mouse-2' event.  The second and third elements of the
event give the starting and ending position of the drag, as mouse
position lists (*note Click Events::).  You can access the second
element of any mouse event in the same way.  However, the drag event may
end outside the boundaries of the frame that was initially selected.  In
that case, the third element's position list contains that frame in
place of a window.

   The 'drag-' prefix follows the modifier key prefixes such as 'C-' and
'M-'.

   If 'read-key-sequence' receives a drag event that has no key binding,
and the corresponding click event does have a binding, it changes the
drag event into a click event at the drag's starting position.  This
means that you don't have to distinguish between click and drag events
unless you want to.

==============================================================================
File: elisp.info,  Node: |Button_Down_Events|,  Next: |Repeat_Events|,  Prev: |Drag_Events|,  Up: |Input_Events|
==============================================================================

                                                            *Button_Down_Events*

21.7.6 Button-Down Events
-------------------------

Click and drag events happen when the user releases a mouse button.
They cannot happen earlier, because there is no way to distinguish a
click from a drag until the button is released.

   If you want to take action as soon as a button is pressed, you need
to handle "button-down" events.(1)  These occur as soon as a button is
pressed.  They are represented by lists that look exactly like click
events (*note Click Events::), except that the EVENT-TYPE symbol name
contains the prefix 'down-'.  The 'down-' prefix follows modifier key
prefixes such as 'C-' and 'M-'.

   The function 'read-key-sequence' ignores any button-down events that
don't have command bindings; therefore, the Emacs command loop ignores
them too.  This means that you need not worry about defining button-down
events unless you want them to do something.  The usual reason to define
a button-down event is so that you can track mouse motion (by reading
motion events) until the button is released.  *Note Motion Events::.

   ---------- Footnotes ----------

   (1) Button-down is the conservative antithesis of drag.

==============================================================================
File: elisp.info,  Node: |Repeat_Events|,  Next: |Motion_Events|,  Prev: |Button_Down_Events|,  Up: |Input_Events|
==============================================================================

                                                                 *Repeat_Events*

21.7.7 Repeat Events
--------------------

If you press the same mouse button more than once in quick succession
without moving the mouse, Emacs generates special "repeat" mouse events
for the second and subsequent presses.

   The most common repeat events are "double-click" events.  Emacs
generates a double-click event when you click a button twice; the event
happens when you release the button (as is normal for all click events).

   The event type of a double-click event contains the prefix 'double-'.
Thus, a double click on the second mouse button with <meta> held down
comes to the Lisp program as 'M-double-mouse-2'.  If a double-click
event has no binding, the binding of the corresponding ordinary click
event is used to execute it.  Thus, you need not pay attention to the
double click feature unless you really want to.

   When the user performs a double click, Emacs generates first an
ordinary click event, and then a double-click event.  Therefore, you
must design the command binding of the double click event to assume that
the single-click command has already run.  It must produce the desired
results of a double click, starting from the results of a single click.

   This is convenient, if the meaning of a double click somehow builds
on the meaning of a single click--which is recommended user interface
design practice for double clicks.

   If you click a button, then press it down again and start moving the
mouse with the button held down, then you get a "double-drag" event when
you ultimately release the button.  Its event type contains
'double-drag' instead of just 'drag'.  If a double-drag event has no
binding, Emacs looks for an alternate binding as if the event were an
ordinary drag.

   Before the double-click or double-drag event, Emacs generates a
"double-down" event when the user presses the button down for the second
time.  Its event type contains 'double-down' instead of just 'down'.  If
a double-down event has no binding, Emacs looks for an alternate binding
as if the event were an ordinary button-down event.  If it finds no
binding that way either, the double-down event is ignored.

   To summarize, when you click a button and then press it again right
away, Emacs generates a down event and a click event for the first
click, a double-down event when you press the button again, and finally
either a double-click or a double-drag event.

   If you click a button twice and then press it again, all in quick
succession, Emacs generates a "triple-down" event, followed by either a
"triple-click" or a "triple-drag".  The event types of these events
contain 'triple' instead of 'double'.  If any triple event has no
binding, Emacs uses the binding that it would use for the corresponding
double event.

   If you click a button three or more times and then press it again,
the events for the presses beyond the third are all triple events.
Emacs does not have separate event types for quadruple, quintuple, etc.
events.  However, you can look at the event list to find out precisely
how many times the button was pressed.

 -- Function: event-click-count event
     This function returns the number of consecutive button presses that
     led up to EVENT.  If EVENT is a double-down, double-click or
     double-drag event, the value is 2.  If EVENT is a triple event, the
     value is 3 or greater.  If EVENT is an ordinary mouse event (not a
     repeat event), the value is 1.

 -- User Option: double-click-fuzz
     To generate repeat events, successive mouse button presses must be
     at approximately the same screen position.  The value of
     'double-click-fuzz' specifies the maximum number of pixels the
     mouse may be moved (horizontally or vertically) between two
     successive clicks to make a double-click.

     This variable is also the threshold for motion of the mouse to
     count as a drag.

 -- User Option: double-click-time
     To generate repeat events, the number of milliseconds between
     successive button presses must be less than the value of
     'double-click-time'.  Setting 'double-click-time' to 'nil' disables
     multi-click detection entirely.  Setting it to 't' removes the time
     limit; Emacs then detects multi-clicks by position only.

==============================================================================
File: elisp.info,  Node: |Motion_Events|,  Next: |Focus_Events|,  Prev: |Repeat_Events|,  Up: |Input_Events|
==============================================================================

                                                                 *Motion_Events*

21.7.8 Motion Events
--------------------

Emacs sometimes generates "mouse motion" events to describe motion of
the mouse without any button activity.  Mouse motion events are
represented by lists that look like this:

     (mouse-movement POSITION)

POSITION is a mouse position list (*note Click Events::), specifying the
current position of the mouse cursor.  As with the end-position of a
drag event, this position list may represent a location outside the
boundaries of the initially selected frame, in which case the list
contains that frame in place of a window.

   The special form 'track-mouse' enables generation of motion events
within its body.  Outside of 'track-mouse' forms, Emacs does not
generate events for mere motion of the mouse, and these events do not
appear.  *Note Mouse Tracking::.

 -- Variable: mouse-fine-grained-tracking
     When non-'nil', mouse motion events are generated even for very
     small movements.  Otherwise, motion events are not generated as
     long as the mouse cursor remains pointing to the same glyph in the
     text.

==============================================================================
File: elisp.info,  Node: |Focus_Events|,  Next: |Misc_Events|,  Prev: |Motion_Events|,  Up: |Input_Events|
==============================================================================

                                                                  *Focus_Events*

21.7.9 Focus Events
-------------------

Window systems provide general ways for the user to control which window
gets keyboard input.  This choice of window is called the "focus".  When
the user does something to switch between Emacs frames, that generates a
"focus event".  The normal definition of a focus event, in the global
keymap, is to select a new frame within Emacs, as the user would expect.
*Note Input Focus::, which also describes hooks related to focus events.

   Focus events are represented in Lisp as lists that look like this:

     (switch-frame NEW-FRAME)

where NEW-FRAME is the frame switched to.

   Some X window managers are set up so that just moving the mouse into
a window is enough to set the focus there.  Usually, there is no need
for a Lisp program to know about the focus change until some other kind
of input arrives.  Emacs generates a focus event only when the user
actually types a keyboard key or presses a mouse button in the new
frame; just moving the mouse between frames does not generate a focus
event.

   A focus event in the middle of a key sequence would garble the
sequence.  So Emacs never generates a focus event in the middle of a key
sequence.  If the user changes focus in the middle of a key
sequence--that is, after a prefix key--then Emacs reorders the events so
that the focus event comes either before or after the multi-event key
sequence, and not within it.

==============================================================================
File: elisp.info,  Node: |Misc_Events|,  Next: |Event_Examples|,  Prev: |Focus_Events|,  Up: |Input_Events|
==============================================================================

                                                                   *Misc_Events*

21.7.10 Miscellaneous System Events
-----------------------------------

A few other event types represent occurrences within the system.

'(delete-frame (FRAME))'
     This kind of event indicates that the user gave the window manager
     a command to delete a particular window, which happens to be an
     Emacs frame.

     The standard definition of the 'delete-frame' event is to delete
     FRAME.

'(iconify-frame (FRAME))'
     This kind of event indicates that the user iconified FRAME using
     the window manager.  Its standard definition is 'ignore'; since the
     frame has already been iconified, Emacs has no work to do.  The
     purpose of this event type is so that you can keep track of such
     events if you want to.

'(make-frame-visible (FRAME))'
     This kind of event indicates that the user deiconified FRAME using
     the window manager.  Its standard definition is 'ignore'; since the
     frame has already been made visible, Emacs has no work to do.

'(wheel-up POSITION)'
'(wheel-down POSITION)'
     These kinds of event are generated by moving a mouse wheel.  The
     POSITION element is a mouse position list (*note Click Events::),
     specifying the position of the mouse cursor when the event
     occurred.

     This kind of event is generated only on some kinds of systems.  On
     some systems, 'mouse-4' and 'mouse-5' are used instead.  For
     portable code, use the variables 'mouse-wheel-up-event' and
     'mouse-wheel-down-event' defined in 'mwheel.el' to determine what
     event types to expect for the mouse wheel.

'(drag-n-drop POSITION FILES)'
     This kind of event is generated when a group of files is selected
     in an application outside of Emacs, and then dragged and dropped
     onto an Emacs frame.

     The element POSITION is a list describing the position of the
     event, in the same format as used in a mouse-click event (*note
     Click Events::), and FILES is the list of file names that were
     dragged and dropped.  The usual way to handle this event is by
     visiting these files.

     This kind of event is generated, at present, only on some kinds of
     systems.

'help-echo'
     This kind of event is generated when a mouse pointer moves onto a
     portion of buffer text which has a 'help-echo' text property.  The
     generated event has this form:

          (help-echo FRAME HELP WINDOW OBJECT POS)

     The precise meaning of the event parameters and the way these
     parameters are used to display the help-echo text are described in
     *note Text help-echo::.

'sigusr1'
'sigusr2'
     These events are generated when the Emacs process receives the
     signals 'SIGUSR1' and 'SIGUSR2'.  They contain no additional data
     because signals do not carry additional information.  They can be
     useful for debugging (*note Error Debugging::).

     To catch a user signal, bind the corresponding event to an
     interactive command in the 'special-event-map' (*note Controlling
     Active Maps::).  The command is called with no arguments, and the
     specific signal event is available in 'last-input-event' (*note
     Event Input Misc::.  For example:

          (defun sigusr-handler ()
            (interactive)
            (message "Caught signal %S" last-input-event))

          (define-key special-event-map [sigusr1] 'sigusr-handler)

     To test the signal handler, you can make Emacs send a signal to
     itself:

          (signal-process (emacs-pid) 'sigusr1)

'language-change'
     This kind of event is generated on MS-Windows when the input
     language has changed.  This typically means that the keyboard keys
     will send to Emacs characters from a different language.  The
     generated event has this form:

          (language-change FRAME CODEPAGE LANGUAGE-ID)

     Here FRAME is the frame which was current when the input language
     changed; CODEPAGE is the new codepage number; and LANGUAGE-ID is
     the numerical ID of the new input language.  The coding-system
     (*note Coding Systems::) that corresponds to CODEPAGE is
     'cpCODEPAGE' or 'windows-CODEPAGE'.  To convert LANGUAGE-ID to a
     string (e.g., to use it for various language-dependent features,
     such as 'set-language-environment'), use the 'w32-get-locale-info'
     function, like this:

          ;; Get the abbreviated language name, such as "ENU" for English
          (w32-get-locale-info language-id)
          ;; Get the full English name of the language,
          ;; such as "English (United States)"
          (w32-get-locale-info language-id 4097)
          ;; Get the full localized name of the language
          (w32-get-locale-info language-id t)

   If one of these events arrives in the middle of a key sequence--that
is, after a prefix key--then Emacs reorders the events so that this event
comes either before or after the multi-event key sequence, not within
it.

==============================================================================
File: elisp.info,  Node: |Event_Examples|,  Next: |Classifying_Events|,  Prev: |Misc_Events|,  Up: |Input_Events|
==============================================================================

                                                                *Event_Examples*

21.7.11 Event Examples
----------------------

If the user presses and releases the left mouse button over the same
location, that generates a sequence of events like this:

     (down-mouse-1 (#<window 18 on NEWS> 2613 (0 . 38) -864320))
     (mouse-1      (#<window 18 on NEWS> 2613 (0 . 38) -864180))

   While holding the control key down, the user might hold down the
second mouse button, and drag the mouse from one line to the next.  That
produces two events, as shown here:

     (C-down-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219))
     (C-drag-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219)
                     (#<window 18 on NEWS> 3510 (0 . 28) -729648))

   While holding down the meta and shift keys, the user might press the
second mouse button on the window's mode line, and then drag the mouse
into another window.  That produces a pair of events like these:

     (M-S-down-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844))
     (M-S-drag-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844)
                       (#<window 20 on carlton-sanskrit.tex> 161 (33 . 3)
                        -453816))

   The frame with input focus might not take up the entire screen, and
the user might move the mouse outside the scope of the frame.  Inside
the 'track-mouse' special form, that produces an event like this:

     (mouse-movement (#<frame ielm 0x102849a30> nil (563 . 205) 532301936))

   To handle a SIGUSR1 signal, define an interactive function, and bind
it to the 'signal usr1' event sequence:

     (defun usr1-handler ()
       (interactive)
       (message "Got USR1 signal"))
     (global-set-key [signal usr1] 'usr1-handler)

==============================================================================
File: elisp.info,  Node: |Classifying_Events|,  Next: |Accessing_Mouse|,  Prev: |Event_Examples|,  Up: |Input_Events|
==============================================================================

                                                            *Classifying_Events*

21.7.12 Classifying Events
--------------------------

Every event has an "event type", which classifies the event for key
binding purposes.  For a keyboard event, the event type equals the event
value; thus, the event type for a character is the character, and the
event type for a function key symbol is the symbol itself.  For events
that are lists, the event type is the symbol in the CAR of the list.
Thus, the event type is always a symbol or a character.

   Two events of the same type are equivalent where key bindings are
concerned; thus, they always run the same command.  That does not
necessarily mean they do the same things, however, as some commands look
at the whole event to decide what to do.  For example, some commands use
the location of a mouse event to decide where in the buffer to act.

   Sometimes broader classifications of events are useful.  For example,
you might want to ask whether an event involved the <META> key,
regardless of which other key or mouse button was used.

   The functions 'event-modifiers' and 'event-basic-type' are provided
to get such information conveniently.

 -- Function: event-modifiers event
     This function returns a list of the modifiers that EVENT has.  The
     modifiers are symbols; they include 'shift', 'control', 'meta',
     'alt', 'hyper' and 'super'.  In addition, the modifiers list of a
     mouse event symbol always contains one of 'click', 'drag', and
     'down'.  For double or triple events, it also contains 'double' or
     'triple'.

     The argument EVENT may be an entire event object, or just an event
     type.  If EVENT is a symbol that has never been used in an event
     that has been read as input in the current Emacs session, then
     'event-modifiers' can return 'nil', even when EVENT actually has
     modifiers.

     Here are some examples:

          (event-modifiers ?a)
               => nil
          (event-modifiers ?A)
               => (shift)
          (event-modifiers ?\C-a)
               => (control)
          (event-modifiers ?\C-%)
               => (control)
          (event-modifiers ?\C-\S-a)
               => (control shift)
          (event-modifiers 'f5)
               => nil
          (event-modifiers 's-f5)
               => (super)
          (event-modifiers 'M-S-f5)
               => (meta shift)
          (event-modifiers 'mouse-1)
               => (click)
          (event-modifiers 'down-mouse-1)
               => (down)

     The modifiers list for a click event explicitly contains 'click',
     but the event symbol name itself does not contain 'click'.
     Similarly, the modifiers list for an ASCII control character, such
     as 'C-a', contains 'control', even though reading such an event via
     'read-char' will return the value 1 with the control modifier bit
     removed.

 -- Function: event-basic-type event
     This function returns the key or mouse button that EVENT describes,
     with all modifiers removed.  The EVENT argument is as in
     'event-modifiers'.  For example:

          (event-basic-type ?a)
               => 97
          (event-basic-type ?A)
               => 97
          (event-basic-type ?\C-a)
               => 97
          (event-basic-type ?\C-\S-a)
               => 97
          (event-basic-type 'f5)
               => f5
          (event-basic-type 's-f5)
               => f5
          (event-basic-type 'M-S-f5)
               => f5
          (event-basic-type 'down-mouse-1)
               => mouse-1

 -- Function: mouse-movement-p object
     This function returns non-'nil' if OBJECT is a mouse movement
     event.  *Note Motion Events::.

 -- Function: event-convert-list list
     This function converts a list of modifier names and a basic event
     type to an event type which specifies all of them.  The basic event
     type must be the last element of the list.  For example,

          (event-convert-list '(control ?a))
               => 1
          (event-convert-list '(control meta ?a))
               => -134217727
          (event-convert-list '(control super f1))
               => C-s-f1

==============================================================================
File: elisp.info,  Node: |Accessing_Mouse|,  Next: |Accessing_Scroll|,  Prev: |Classifying_Events|,  Up: |Input_Events|
==============================================================================

                                                               *Accessing_Mouse*

21.7.13 Accessing Mouse Events
------------------------------

This section describes convenient functions for accessing the data in a
mouse button or motion event.  Keyboard event data can be accessed using
the same functions, but data elements that aren't applicable to keyboard
events are zero or 'nil'.

   The following two functions return a mouse position list (*note Click
Events::), specifying the position of a mouse event.

 -- Function: event-start event
     This returns the starting position of EVENT.

     If EVENT is a click or button-down event, this returns the location
     of the event.  If EVENT is a drag event, this returns the drag's
     starting position.

 -- Function: event-end event
     This returns the ending position of EVENT.

     If EVENT is a drag event, this returns the position where the user
     released the mouse button.  If EVENT is a click or button-down
     event, the value is actually the starting position, which is the
     only position such events have.

 -- Function: posnp object
     This function returns non-'nil' if OBJECT is a mouse position list,
     in the format documented in *note Click Events::); and 'nil'
     otherwise.

   These functions take a mouse position list as argument, and return
various parts of it:

 -- Function: posn-window position
     Return the window that POSITION is in.  If POSITION represents a
     location outside the frame where the event was initiated, return
     that frame instead.

 -- Function: posn-area position
     Return the window area recorded in POSITION.  It returns 'nil' when
     the event occurred in the text area of the window; otherwise, it is
     a symbol identifying the area in which the event occurred.

 -- Function: posn-point position
     Return the buffer position in POSITION.  When the event occurred in
     the text area of the window, in a marginal area, or on a fringe,
     this is an integer specifying a buffer position.  Otherwise, the
     value is undefined.

 -- Function: posn-x-y position
     Return the pixel-based x and y coordinates in POSITION, as a cons
     cell '(X . Y)'.  These coordinates are relative to the window given
     by 'posn-window'.

     This example shows how to convert the window-relative coordinates
     in the text area of a window into frame-relative coordinates:

          (defun frame-relative-coordinates (position)
            "Return frame-relative coordinates from POSITION.
          POSITION is assumed to lie in a window text area."
            (let* ((x-y (posn-x-y position))
                   (window (posn-window position))
                   (edges (window-inside-pixel-edges window)))
              (cons (+ (car x-y) (car edges))
                    (+ (cdr x-y) (cadr edges)))))

 -- Function: posn-col-row position
     This function returns a cons cell '(COL .  ROW)', containing the
     estimated column and row corresponding to buffer position described
     by POSITION.  The return value is given in units of the frame's
     default character width and default line height (including
     spacing), as computed from the X and Y values corresponding to
     POSITION.  (So, if the actual characters have non-default sizes,
     the actual row and column may differ from these computed values.)

     Note that ROW is counted from the top of the text area.  If the
     window given by POSITION possesses a header line (*note Header
     Lines::) or a tab line, they are _not_ included in the ROW count.

 -- Function: posn-actual-col-row position
     Return the actual row and column in POSITION, as a cons cell
     '(COL . ROW)'.  The values are the actual row and column numbers in
     the window given by POSITION.  *Note Click Events::, for details.
     The function returns 'nil' if POSITION does not include actual
     position values; in that case 'posn-col-row' can be used to get
     approximate values.

     Note that this function doesn't account for the visual width of
     characters on display, like the number of visual columns taken by a
     tab character or an image.  If you need the coordinates in
     canonical character units, use 'posn-col-row' instead.

 -- Function: posn-string position
     Return the string object described by POSITION, either 'nil' (which
     means POSITION describes buffer text), or a cons cell
     '(STRING . STRING-POS)'.

 -- Function: posn-image position
     Return the image object in POSITION, either 'nil' (if there's no
     image at POSITION), or an image spec '(image ...)'.

 -- Function: posn-object position
     Return the image or string object described by POSITION, either
     'nil' (which means POSITION describes buffer text), an image
     '(image ...)', or a cons cell '(STRING . STRING-POS)'.

 -- Function: posn-object-x-y position
     Return the pixel-based x and y coordinates relative to the upper
     left corner of the object described by POSITION, as a cons cell
     '(DX . DY)'.  If the POSITION describes buffer text, return the
     relative coordinates of the buffer-text character closest to that
     position.

 -- Function: posn-object-width-height position
     Return the pixel width and height of the object described by
     POSITION, as a cons cell '(WIDTH . HEIGHT)'.  If the POSITION
     describes a buffer position, return the size of the character at
     that position.

 -- Function: posn-timestamp position
     Return the timestamp in POSITION.  This is the time at which the
     event occurred, in milliseconds.

   These functions compute a position list given particular buffer
position or screen position.  You can access the data in this position
list with the functions described above.

 -- Function: posn-at-point &optional pos window
     This function returns a position list for position POS in WINDOW.
     POS defaults to point in WINDOW; WINDOW defaults to the selected
     window.

     'posn-at-point' returns 'nil' if POS is not visible in WINDOW.

 -- Function: posn-at-x-y x y &optional frame-or-window whole
     This function returns position information corresponding to pixel
     coordinates X and Y in a specified frame or window,
     FRAME-OR-WINDOW, which defaults to the selected window.  The
     coordinates X and Y are relative to the frame or window used.  If
     WHOLE is 'nil', the coordinates are relative to the window text
     area, otherwise they are relative to the entire window area
     including scroll bars, margins and fringes.

==============================================================================
File: elisp.info,  Node: |Accessing_Scroll|,  Next: |Strings_of_Events|,  Prev: |Accessing_Mouse|,  Up: |Input_Events|
==============================================================================

                                                              *Accessing_Scroll*

21.7.14 Accessing Scroll Bar Events
-----------------------------------

These functions are useful for decoding scroll bar events.

 -- Function: scroll-bar-event-ratio event
     This function returns the fractional vertical position of a scroll
     bar event within the scroll bar.  The value is a cons cell
     '(PORTION . WHOLE)' containing two integers whose ratio is the
     fractional position.

 -- Function: scroll-bar-scale ratio total
     This function multiplies (in effect) RATIO by TOTAL, rounding the
     result to an integer.  The argument RATIO is not a number, but
     rather a pair '(NUM . DENOM)'--typically a value returned by
     'scroll-bar-event-ratio'.

     This function is handy for scaling a position on a scroll bar into
     a buffer position.  Here's how to do that:

          (+ (point-min)
             (scroll-bar-scale
                (posn-x-y (event-start event))
                (- (point-max) (point-min))))

     Recall that scroll bar events have two integers forming a ratio, in
     place of a pair of x and y coordinates.

==============================================================================
File: elisp.info,  Node: |Strings_of_Events|,  Prev: |Accessing_Scroll|,  Up: |Input_Events|
==============================================================================

                                                             *Strings_of_Events*

21.7.15 Putting Keyboard Events in Strings
------------------------------------------

In most of the places where strings are used, we conceptualize the
string as containing text characters--the same kind of characters found
in buffers or files.  Occasionally Lisp programs use strings that
conceptually contain keyboard characters; for example, they may be key
sequences or keyboard macro definitions.  However, storing keyboard
characters in a string is a complex matter, for reasons of historical
compatibility, and it is not always possible.

   We recommend that new programs avoid dealing with these complexities
by not storing keyboard events in strings.  Here is how to do that:

   * Use vectors instead of strings for key sequences, when you plan to
     use them for anything other than as arguments to 'lookup-key' and
     'define-key'.  For example, you can use 'read-key-sequence-vector'
     instead of 'read-key-sequence', and 'this-command-keys-vector'
     instead of 'this-command-keys'.

   * Use vectors to write key sequence constants containing meta
     characters, even when passing them directly to 'define-key'.

   * When you have to look at the contents of a key sequence that might
     be a string, use 'listify-key-sequence' (*note Event Input Misc::)
     first, to convert it to a list.

   The complexities stem from the modifier bits that keyboard input
characters can include.  Aside from the Meta modifier, none of these
modifier bits can be included in a string, and the Meta modifier is
allowed only in special cases.

   The earliest GNU Emacs versions represented meta characters as codes
in the range of 128 to 255.  At that time, the basic character codes
ranged from 0 to 127, so all keyboard character codes did fit in a
string.  Many Lisp programs used '\M-' in string constants to stand for
meta characters, especially in arguments to 'define-key' and similar
functions, and key sequences and sequences of events were always
represented as strings.

   When we added support for larger basic character codes beyond 127,
and additional modifier bits, we had to change the representation of
meta characters.  Now the flag that represents the Meta modifier in a
character is 2**27 and such numbers cannot be included in a string.

   To support programs with '\M-' in string constants, there are special
rules for including certain meta characters in a string.  Here are the
rules for interpreting a string as a sequence of input characters:

   * If the keyboard character value is in the range of 0 to 127, it can
     go in the string unchanged.

   * The meta variants of those characters, with codes in the range of
     2**27 to 2**27+127, can also go in the string, but you must change
     their numeric values.  You must set the 2**7 bit instead of the
     2**27 bit, resulting in a value between 128 and 255.  Only a
     unibyte string can include these codes.

   * Non-ASCII characters above 256 can be included in a multibyte
     string.

   * Other keyboard character events cannot fit in a string.  This
     includes keyboard events in the range of 128 to 255.

   Functions such as 'read-key-sequence' that construct strings of
keyboard input characters follow these rules: they construct vectors
instead of strings, when the events won't fit in a string.

   When you use the read syntax '\M-' in a string, it produces a code in
the range of 128 to 255--the same code that you get if you modify the
corresponding keyboard event to put it in the string.  Thus, meta events
in strings work consistently regardless of how they get into the
strings.

   However, most programs would do well to avoid these issues by
following the recommendations at the beginning of this section.

==============================================================================
File: elisp.info,  Node: |Reading_Input|,  Next: |Special_Events|,  Prev: |Input_Events|,  Up: |Command_Loop|
==============================================================================

                                                                 *Reading_Input*

21.8 Reading Input
------------------

The editor command loop reads key sequences using the function
'read-key-sequence', which uses 'read-event'.  These and other functions
for event input are also available for use in Lisp programs.  See also
'momentary-string-display' in *note Temporary Displays::, and 'sit-for'
in *note Waiting::.  *Note Terminal Input::, for functions and variables
for controlling terminal input modes and debugging terminal input.

   For higher-level input facilities, see *note Minibuffers::.

MENU

* |Key_Sequence_Input|::          How to read one key sequence.
* |Reading_One_Event|::           How to read just one event.
* |Event_Mod|::                   How Emacs modifies events as they are read.
* |Invoking_the_Input_Method|::   How reading an event uses the input method.
* |Quoted_Character_Input|::      Asking the user to specify a character.
* |Event_Input_Misc|::            How to reread or throw away input events.

==============================================================================
File: elisp.info,  Node: |Key_Sequence_Input|,  Next: |Reading_One_Event|,  Up: |Reading_Input|
==============================================================================

                                                            *Key_Sequence_Input*

21.8.1 Key Sequence Input
-------------------------

The command loop reads input a key sequence at a time, by calling
'read-key-sequence'.  Lisp programs can also call this function; for
example, 'describe-key' uses it to read the key to describe.

 -- Function: read-key-sequence prompt &optional continue-echo
          dont-downcase-last switch-frame-ok command-loop
     This function reads a key sequence and returns it as a string or
     vector.  It keeps reading events until it has accumulated a
     complete key sequence; that is, enough to specify a non-prefix
     command using the currently active keymaps.  (Remember that a key
     sequence that starts with a mouse event is read using the keymaps
     of the buffer in the window that the mouse was in, not the current
     buffer.)

     If the events are all characters and all can fit in a string, then
     'read-key-sequence' returns a string (*note Strings of Events::).
     Otherwise, it returns a vector, since a vector can hold all kinds
     of events--characters, symbols, and lists.  The elements of the
     string or vector are the events in the key sequence.

     Reading a key sequence includes translating the events in various
     ways.  *Note Translation Keymaps::.

     The argument PROMPT is either a string to be displayed in the echo
     area as a prompt, or 'nil', meaning not to display a prompt.  The
     argument CONTINUE-ECHO, if non-'nil', means to echo this key as a
     continuation of the previous key.

     Normally any upper case event is converted to lower case if the
     original event is undefined and the lower case equivalent is
     defined.  The argument DONT-DOWNCASE-LAST, if non-'nil', means do
     not convert the last event to lower case.  This is appropriate for
     reading a key sequence to be defined.

     The argument SWITCH-FRAME-OK, if non-'nil', means that this
     function should process a 'switch-frame' event if the user switches
     frames before typing anything.  If the user switches frames in the
     middle of a key sequence, or at the start of the sequence but
     SWITCH-FRAME-OK is 'nil', then the event will be put off until
     after the current key sequence.

     The argument COMMAND-LOOP, if non-'nil', means that this key
     sequence is being read by something that will read commands one
     after another.  It should be 'nil' if the caller will read just one
     key sequence.

     In the following example, Emacs displays the prompt '?' in the echo
     area, and then the user types 'C-x C-f'.

          (read-key-sequence "?")

          ---------- Echo Area ----------
          ?C-x C-f
          ---------- Echo Area ----------

               => "^X^F"

     The function 'read-key-sequence' suppresses quitting: 'C-g' typed
     while reading with this function works like any other character,
     and does not set 'quit-flag'.  *Note Quitting::.

 -- Function: read-key-sequence-vector prompt &optional continue-echo
          dont-downcase-last switch-frame-ok command-loop
     This is like 'read-key-sequence' except that it always returns the
     key sequence as a vector, never as a string.  *Note Strings of
     Events::.

   If an input character is upper-case (or has the shift modifier) and
has no key binding, but its lower-case equivalent has one, then
'read-key-sequence' converts the character to lower case.  Note that
'lookup-key' does not perform case conversion in this way.

   When reading input results in such a "shift-translation", Emacs sets
the variable 'this-command-keys-shift-translated' to a non-'nil' value.
Lisp programs can examine this variable if they need to modify their
behavior when invoked by shift-translated keys.  For example, the
function 'handle-shift-selection' examines the value of this variable to
determine how to activate or deactivate the region (*note
handle-shift-selection: The Mark.).

   The function 'read-key-sequence' also transforms some mouse events.
It converts unbound drag events into click events, and discards unbound
button-down events entirely.  It also reshuffles focus events and
miscellaneous window events so that they never appear in a key sequence
with any other events.

   When mouse events occur in special parts of a window, such as a mode
line or a scroll bar, the event type shows nothing special--it is the
same symbol that would normally represent that combination of mouse
button and modifier keys.  The information about the window part is kept
elsewhere in the event--in the coordinates.  But 'read-key-sequence'
translates this information into imaginary prefix keys, all of which are
symbols: 'tab-line', 'header-line', 'horizontal-scroll-bar', 'menu-bar',
'tab-bar', 'mode-line', 'vertical-line', and 'vertical-scroll-bar'.  You
can define meanings for mouse clicks in special window parts by defining
key sequences using these imaginary prefix keys.

   For example, if you call 'read-key-sequence' and then click the mouse
on the window's mode line, you get two events, like this:

     (read-key-sequence "Click on the mode line: ")
          => [mode-line
              (mouse-1
               (#<window 6 on NEWS> mode-line
                (40 . 63) 5959987))]

 -- Variable: num-input-keys
     This variable's value is the number of key sequences processed so
     far in this Emacs session.  This includes key sequences read from
     the terminal and key sequences read from keyboard macros being
     executed.

==============================================================================
File: elisp.info,  Node: |Reading_One_Event|,  Next: |Event_Mod|,  Prev: |Key_Sequence_Input|,  Up: |Reading_Input|
==============================================================================

                                                             *Reading_One_Event*

21.8.2 Reading One Event
------------------------

The lowest level functions for command input are 'read-event',
'read-char', and 'read-char-exclusive'.

   If you need a function to read a character using the minibuffer, use
'read-char-from-minibuffer' (*note Multiple Queries::).

 -- Function: read-event &optional prompt inherit-input-method seconds
     This function reads and returns the next event of command input,
     waiting if necessary until an event is available.

     The returned event may come directly from the user, or from a
     keyboard macro.  It is not decoded by the keyboard's input coding
     system (*note Terminal I/O Encoding::).

     If the optional argument PROMPT is non-'nil', it should be a string
     to display in the echo area as a prompt.  If PROMPT is 'nil' or the
     string '""', 'read-event' does not display any message to indicate
     it is waiting for input; instead, it prompts by echoing: it
     displays descriptions of the events that led to or were read by the
     current command.  *Note The Echo Area::.

     If INHERIT-INPUT-METHOD is non-'nil', then the current input method
     (if any) is employed to make it possible to enter a non-ASCII
     character.  Otherwise, input method handling is disabled for
     reading this event.

     If 'cursor-in-echo-area' is non-'nil', then 'read-event' moves the
     cursor temporarily to the echo area, to the end of any message
     displayed there.  Otherwise 'read-event' does not move the cursor.

     If SECONDS is non-'nil', it should be a number specifying the
     maximum time to wait for input, in seconds.  If no input arrives
     within that time, 'read-event' stops waiting and returns 'nil'.  A
     floating point SECONDS means to wait for a fractional number of
     seconds.  Some systems support only a whole number of seconds; on
     these systems, SECONDS is rounded down.  If SECONDS is 'nil',
     'read-event' waits as long as necessary for input to arrive.

     If SECONDS is 'nil', Emacs is considered idle while waiting for
     user input to arrive.  Idle timers--those created with
     'run-with-idle-timer' (*note Idle Timers::)--can run during this
     period.  However, if SECONDS is non-'nil', the state of idleness
     remains unchanged.  If Emacs is non-idle when 'read-event' is
     called, it remains non-idle throughout the operation of
     'read-event'; if Emacs is idle (which can happen if the call
     happens inside an idle timer), it remains idle.

     If 'read-event' gets an event that is defined as a help character,
     then in some cases 'read-event' processes the event directly
     without returning.  *Note Help Functions::.  Certain other events,
     called "special events", are also processed directly within
     'read-event' (*note Special Events::).

     Here is what happens if you call 'read-event' and then press the
     right-arrow function key:

          (read-event)
               => right

 -- Function: read-char &optional prompt inherit-input-method seconds
     This function reads and returns a character input event.  If the
     user generates an event which is not a character (i.e., a mouse
     click or function key event), 'read-char' signals an error.  The
     arguments work as in 'read-event'.

     If the event has modifiers, Emacs attempts to resolve them and
     return the code of the corresponding character.  For example, if
     the user types 'C-a', the function returns 1, which is the ASCII
     code of the 'C-a' character.  If some of the modifiers cannot be
     reflected in the character code, 'read-char' leaves the unresolved
     modifier bits set in the returned event.  For example, if the user
     types 'C-M-a', the function returns 134217729, 8000001 in hex, i.e.
     'C-a' with the Meta modifier bit set.  This value is not a valid
     character code: it fails the 'characterp' test (*note Character
     Codes::).  Use 'event-basic-type' (*note Classifying Events::) to
     recover the character code with the modifier bits removed; use
     'event-modifiers' to test for modifiers in the character event
     returned by 'read-char'.

     In the first example below, the user types the character '1' (ASCII
     code 49).  The second example shows a keyboard macro definition
     that calls 'read-char' from the minibuffer using 'eval-expression'.
     'read-char' reads the keyboard macro's very next character, which
     is '1'.  Then 'eval-expression' displays its return value in the
     echo area.

          (read-char)
               => 49

          ;; We assume here you use 'M-:' to evaluate this.
          (symbol-function 'foo)
               => "^[:(read-char)^M1"
          (execute-kbd-macro 'foo)
               -| 49
               => nil

 -- Function: read-char-exclusive &optional prompt inherit-input-method
          seconds
     This function reads and returns a character input event.  If the
     user generates an event which is not a character event,
     'read-char-exclusive' ignores it and reads another event, until it
     gets a character.  The arguments work as in 'read-event'.  The
     returned value may include modifier bits, as with 'read-char'.

   None of the above functions suppress quitting.

 -- Variable: num-nonmacro-input-events
     This variable holds the total number of input events received so
     far from the terminal--not counting those generated by keyboard
     macros.

   We emphasize that, unlike 'read-key-sequence', the functions
'read-event', 'read-char', and 'read-char-exclusive' do not perform the
translations described in *note Translation Keymaps::.  If you wish to
read a single key taking these translations into account, use the
function 'read-key':

 -- Function: read-key &optional prompt
     This function reads a single key.  It is intermediate between
     'read-key-sequence' and 'read-event'.  Unlike the former, it reads
     a single key, not a key sequence.  Unlike the latter, it does not
     return a raw event, but decodes and translates the user input
     according to 'input-decode-map', 'local-function-key-map', and
     'key-translation-map' (*note Translation Keymaps::).

     The argument PROMPT is either a string to be displayed in the echo
     area as a prompt, or 'nil', meaning not to display a prompt.

 -- Function: read-char-choice prompt chars &optional inhibit-quit
     This function uses 'read-key' to read and return a single
     character.  It ignores any input that is not a member of CHARS, a
     list of accepted characters.  Optionally, it will also ignore
     keyboard-quit events while it is waiting for valid input.  If you
     bind 'help-form' (*note Help Functions::) to a non-'nil' value
     while calling 'read-char-choice', then pressing 'help-char' causes
     it to evaluate 'help-form' and display the result.  It then
     continues to wait for a valid input character, or keyboard-quit.

 -- Function: read-multiple-choice prompt choices
     Ask user a multiple choice question.  PROMPT should be a string
     that will be displayed as the prompt.

     CHOICES is an alist where the first element in each entry is a
     character to be entered, the second element is a short name for the
     entry to be displayed while prompting (if there's room, it might be
     shortened), and the third, optional entry is a longer explanation
     that will be displayed in a help buffer if the user requests more
     help.

     The return value is the matching value from CHOICES.

          (read-multiple-choice
           "Continue connecting?"
           '((?a "always" "Accept certificate for this and future sessions.")
             (?s "session only" "Accept certificate this session only.")
             (?n "no" "Refuse to use certificate, close connection.")))

     The 'read-multiple-choice-face' face is used to highlight the
     matching characters in the name string on graphical terminals.

==============================================================================
File: elisp.info,  Node: |Event_Mod|,  Next: |Invoking_the_Input_Method|,  Prev: |Reading_One_Event|,  Up: |Reading_Input|
==============================================================================

                                                                     *Event_Mod*

21.8.3 Modifying and Translating Input Events
---------------------------------------------

Emacs modifies every event it reads according to
'extra-keyboard-modifiers', then translates it through
'keyboard-translate-table' (if applicable), before returning it from
'read-event'.

 -- Variable: extra-keyboard-modifiers
     This variable lets Lisp programs "press" the modifier keys on the
     keyboard.  The value is a character.  Only the modifiers of the
     character matter.  Each time the user types a keyboard key, it is
     altered as if those modifier keys were held down.  For instance, if
     you bind 'extra-keyboard-modifiers' to '?\C-\M-a', then all
     keyboard input characters typed during the scope of the binding
     will have the control and meta modifiers applied to them.  The
     character '?\C-@', equivalent to the integer 0, does not count as a
     control character for this purpose, but as a character with no
     modifiers.  Thus, setting 'extra-keyboard-modifiers' to zero
     cancels any modification.

     When using a window system, the program can press any of the
     modifier keys in this way.  Otherwise, only the <CTL> and <META>
     keys can be virtually pressed.

     Note that this variable applies only to events that really come
     from the keyboard, and has no effect on mouse events or any other
     events.

 -- Variable: keyboard-translate-table
     This terminal-local variable is the translate table for keyboard
     characters.  It lets you reshuffle the keys on the keyboard without
     changing any command bindings.  Its value is normally a char-table,
     or else 'nil'.  (It can also be a string or vector, but this is
     considered obsolete.)

     If 'keyboard-translate-table' is a char-table (*note
     Char-Tables::), then each character read from the keyboard is
     looked up in this char-table.  If the value found there is
     non-'nil', then it is used instead of the actual input character.

     Note that this translation is the first thing that happens to a
     character after it is read from the terminal.  Record-keeping
     features such as 'recent-keys' and dribble files record the
     characters after translation.

     Note also that this translation is done before the characters are
     supplied to input methods (*note Input Methods::).  Use
     'translation-table-for-input' (*note Translation of Characters::),
     if you want to translate characters after input methods operate.

 -- Function: keyboard-translate from to
     This function modifies 'keyboard-translate-table' to translate
     character code FROM into character code TO.  It creates the
     keyboard translate table if necessary.

   Here's an example of using the 'keyboard-translate-table' to make
'C-x', 'C-c' and 'C-v' perform the cut, copy and paste operations:

     (keyboard-translate ?\C-x 'control-x)
     (keyboard-translate ?\C-c 'control-c)
     (keyboard-translate ?\C-v 'control-v)
     (global-set-key [control-x] 'kill-region)
     (global-set-key [control-c] 'kill-ring-save)
     (global-set-key [control-v] 'yank)

On a graphical terminal that supports extended ASCII input, you can
still get the standard Emacs meanings of one of those characters by
typing it with the shift key.  That makes it a different character as
far as keyboard translation is concerned, but it has the same usual
meaning.

   *Note Translation Keymaps::, for mechanisms that translate event
sequences at the level of 'read-key-sequence'.

==============================================================================
File: elisp.info,  Node: |Invoking_the_Input_Method|,  Next: |Quoted_Character_Input|,  Prev: |Event_Mod|,  Up: |Reading_Input|
==============================================================================

                                                     *Invoking_the_Input_Method*

21.8.4 Invoking the Input Method
--------------------------------

The event-reading functions invoke the current input method, if any
(*note Input Methods::).  If the value of 'input-method-function' is
non-'nil', it should be a function; when 'read-event' reads a printing
character (including <SPC>) with no modifier bits, it calls that
function, passing the character as an argument.

 -- Variable: input-method-function
     If this is non-'nil', its value specifies the current input method
     function.

     Warning: don't bind this variable with 'let'.  It is often
     buffer-local, and if you bind it around reading input (which is
     exactly when you _would_ bind it), switching buffers asynchronously
     while Emacs is waiting will cause the value to be restored in the
     wrong buffer.

   The input method function should return a list of events which should
be used as input.  (If the list is 'nil', that means there is no input,
so 'read-event' waits for another event.)  These events are processed
before the events in 'unread-command-events' (*note Event Input Misc::).
Events returned by the input method function are not passed to the input
method function again, even if they are printing characters with no
modifier bits.

   If the input method function calls 'read-event' or
'read-key-sequence', it should bind 'input-method-function' to 'nil'
first, to prevent recursion.

   The input method function is not called when reading the second and
subsequent events of a key sequence.  Thus, these characters are not
subject to input method processing.  The input method function should
test the values of 'overriding-local-map' and
'overriding-terminal-local-map'; if either of these variables is
non-'nil', the input method should put its argument into a list and
return that list with no further processing.

==============================================================================
File: elisp.info,  Node: |Quoted_Character_Input|,  Next: |Event_Input_Misc|,  Prev: |Invoking_the_Input_Method|,  Up: |Reading_Input|
==============================================================================

                                                        *Quoted_Character_Input*

21.8.5 Quoted Character Input
-----------------------------

You can use the function 'read-quoted-char' to ask the user to specify a
character, and allow the user to specify a control or meta character
conveniently, either literally or as an octal character code.  The
command 'quoted-insert' uses this function.

 -- Function: read-quoted-char &optional prompt
     This function is like 'read-char', except that if the first
     character read is an octal digit (0-7), it reads any number of
     octal digits (but stopping if a non-octal digit is found), and
     returns the character represented by that numeric character code.
     If the character that terminates the sequence of octal digits is
     <RET>, it is discarded.  Any other terminating character is used as
     input after this function returns.

     Quitting is suppressed when the first character is read, so that
     the user can enter a 'C-g'.  *Note Quitting::.

     If PROMPT is supplied, it specifies a string for prompting the
     user.  The prompt string is always displayed in the echo area,
     followed by a single '-'.

     In the following example, the user types in the octal number 177
     (which is 127 in decimal).

          (read-quoted-char "What character")

          ---------- Echo Area ----------
          What character 1 7 7-
          ---------- Echo Area ----------

               => 127

==============================================================================
File: elisp.info,  Node: |Event_Input_Misc|,  Prev: |Quoted_Character_Input|,  Up: |Reading_Input|
==============================================================================

                                                              *Event_Input_Misc*

21.8.6 Miscellaneous Event Input Features
-----------------------------------------

This section describes how to peek ahead at events without using them
up, how to check for pending input, and how to discard pending input.
See also the function 'read-passwd' (*note Reading a Password::).

 -- Variable: unread-command-events
     This variable holds a list of events waiting to be read as command
     input.  The events are used in the order they appear in the list,
     and removed one by one as they are used.

     The variable is needed because in some cases a function reads an
     event and then decides not to use it.  Storing the event in this
     variable causes it to be processed normally, by the command loop or
     by the functions to read command input.

     For example, the function that implements numeric prefix arguments
     reads any number of digits.  When it finds a non-digit event, it
     must unread the event so that it can be read normally by the
     command loop.  Likewise, incremental search uses this feature to
     unread events with no special meaning in a search, because these
     events should exit the search and then execute normally.

     The reliable and easy way to extract events from a key sequence so
     as to put them in 'unread-command-events' is to use
     'listify-key-sequence' (see below).

     Normally you add events to the front of this list, so that the
     events most recently unread will be reread first.

     Events read from this list are not normally added to the current
     command's key sequence (as returned by, e.g., 'this-command-keys'),
     as the events will already have been added once as they were read
     for the first time.  An element of the form '(t . EVENT)' forces
     EVENT to be added to the current command's key sequence.

     Elements read from this list are normally recorded by the
     record-keeping features (*note Recording Input::) and while
     defining a keyboard macro (*note Keyboard Macros::).  However, an
     element of the form '(no-record . EVENT)' causes EVENT to be
     processed normally without recording it.

 -- Function: listify-key-sequence key
     This function converts the string or vector KEY to a list of
     individual events, which you can put in 'unread-command-events'.

 -- Function: input-pending-p &optional check-timers
     This function determines whether any command input is currently
     available to be read.  It returns immediately, with value 't' if
     there is available input, 'nil' otherwise.  On rare occasions it
     may return 't' when no input is available.

     If the optional argument CHECK-TIMERS is non-'nil', then if no
     input is available, Emacs runs any timers which are ready.  *Note
     Timers::.

 -- Variable: last-input-event
     This variable records the last terminal input event read, whether
     as part of a command or explicitly by a Lisp program.

     In the example below, the Lisp program reads the character '1',
     ASCII code 49.  It becomes the value of 'last-input-event', while
     'C-e' (we assume 'C-x C-e' command is used to evaluate this
     expression) remains the value of 'last-command-event'.

          (progn (print (read-char))
                 (print last-command-event)
                 last-input-event)
               -| 49
               -| 5
               => 49

 -- Macro: while-no-input body...
     This construct runs the BODY forms and returns the value of the
     last one--but only if no input arrives.  If any input arrives during
     the execution of the BODY forms, it aborts them (working much like
     a quit).  The 'while-no-input' form returns 'nil' if aborted by a
     real quit, and returns 't' if aborted by arrival of other input.

     If a part of BODY binds 'inhibit-quit' to non-'nil', arrival of
     input during those parts won't cause an abort until the end of that
     part.

     If you want to be able to distinguish all possible values computed
     by BODY from both kinds of abort conditions, write the code like
     this:

          (while-no-input
            (list
              (progn . BODY)))

 -- Variable: while-no-input-ignore-events
     This variable allow setting which special events 'while-no-input'
     should ignore.  It is a list of event symbols (*note Event
     Examples::).

 -- Function: discard-input
     This function discards the contents of the terminal input buffer
     and cancels any keyboard macro that might be in the process of
     definition.  It returns 'nil'.

     In the following example, the user may type a number of characters
     right after starting the evaluation of the form.  After the
     'sleep-for' finishes sleeping, 'discard-input' discards any
     characters typed during the sleep.

          (progn (sleep-for 2)
                 (discard-input))
               => nil

==============================================================================
File: elisp.info,  Node: |Special_Events|,  Next: |Waiting|,  Prev: |Reading_Input|,  Up: |Command_Loop|
==============================================================================

                                                                *Special_Events*

21.9 Special Events
-------------------

Certain "special events" are handled at a very low level--as soon as they
are read.  The 'read-event' function processes these events itself, and
never returns them.  Instead, it keeps waiting for the first event that
is not special and returns that one.

   Special events do not echo, they are never grouped into key
sequences, and they never appear in the value of 'last-command-event' or
'(this-command-keys)'.  They do not discard a numeric argument, they
cannot be unread with 'unread-command-events', they may not appear in a
keyboard macro, and they are not recorded in a keyboard macro while you
are defining one.

   Special events do, however, appear in 'last-input-event' immediately
after they are read, and this is the way for the event's definition to
find the actual event.

   The events types 'iconify-frame', 'make-frame-visible',
'delete-frame', 'drag-n-drop', 'language-change', and user signals like
'sigusr1' are normally handled in this way.  The keymap which defines
how to handle special events--and which events are special--is in the
variable 'special-event-map' (*note Controlling Active Maps::).

==============================================================================
File: elisp.info,  Node: |Waiting|,  Next: |Quitting|,  Prev: |Special_Events|,  Up: |Command_Loop|
==============================================================================

                                                                       *Waiting*

21.10 Waiting for Elapsed Time or Input
---------------------------------------

The wait functions are designed to wait for a certain amount of time to
pass or until there is input.  For example, you may wish to pause in the
middle of a computation to allow the user time to view the display.
'sit-for' pauses and updates the screen, and returns immediately if
input comes in, while 'sleep-for' pauses without updating the screen.

 -- Function: sit-for seconds &optional nodisp
     This function performs redisplay (provided there is no pending
     input from the user), then waits SECONDS seconds, or until input is
     available.  The usual purpose of 'sit-for' is to give the user time
     to read text that you display.  The value is 't' if 'sit-for'
     waited the full time with no input arriving (*note Event Input
     Misc::).  Otherwise, the value is 'nil'.

     The argument SECONDS need not be an integer.  If it is floating
     point, 'sit-for' waits for a fractional number of seconds.  Some
     systems support only a whole number of seconds; on these systems,
     SECONDS is rounded down.

     The expression '(sit-for 0)' is equivalent to '(redisplay)', i.e.,
     it requests a redisplay, without any delay, if there is no pending
     input.  *Note Forcing Redisplay::.

     If NODISP is non-'nil', then 'sit-for' does not redisplay, but it
     still returns as soon as input is available (or when the timeout
     elapses).

     In batch mode (*note Batch Mode::), 'sit-for' cannot be
     interrupted, even by input from the standard input descriptor.  It
     is thus equivalent to 'sleep-for', which is described below.

     It is also possible to call 'sit-for' with three arguments, as
     '(sit-for SECONDS MILLISEC NODISP)', but that is considered
     obsolete.

 -- Function: sleep-for seconds &optional millisec
     This function simply pauses for SECONDS seconds without updating
     the display.  It pays no attention to available input.  It returns
     'nil'.

     The argument SECONDS need not be an integer.  If it is floating
     point, 'sleep-for' waits for a fractional number of seconds.  Some
     systems support only a whole number of seconds; on these systems,
     SECONDS is rounded down.

     The optional argument MILLISEC specifies an additional waiting
     period measured in milliseconds.  This adds to the period specified
     by SECONDS.  If the system doesn't support waiting fractions of a
     second, you get an error if you specify nonzero MILLISEC.

     Use 'sleep-for' when you wish to guarantee a delay.

   *Note Time of Day::, for functions to get the current time.

==============================================================================
File: elisp.info,  Node: |Quitting|,  Next: |Prefix_Command_Arguments|,  Prev: |Waiting|,  Up: |Command_Loop|
==============================================================================

                                                                      *Quitting*

21.11 Quitting
--------------

Typing 'C-g' while a Lisp function is running causes Emacs to "quit"
whatever it is doing.  This means that control returns to the innermost
active command loop.

   Typing 'C-g' while the command loop is waiting for keyboard input
does not cause a quit; it acts as an ordinary input character.  In the
simplest case, you cannot tell the difference, because 'C-g' normally
runs the command 'keyboard-quit', whose effect is to quit.  However,
when 'C-g' follows a prefix key, they combine to form an undefined key.
The effect is to cancel the prefix key as well as any prefix argument.

   In the minibuffer, 'C-g' has a different definition: it aborts out of
the minibuffer.  This means, in effect, that it exits the minibuffer and
then quits.  (Simply quitting would return to the command loop _within_
the minibuffer.)  The reason why 'C-g' does not quit directly when the
command reader is reading input is so that its meaning can be redefined
in the minibuffer in this way.  'C-g' following a prefix key is not
redefined in the minibuffer, and it has its normal effect of canceling
the prefix key and prefix argument.  This too would not be possible if
'C-g' always quit directly.

   When 'C-g' does directly quit, it does so by setting the variable
'quit-flag' to 't'.  Emacs checks this variable at appropriate times and
quits if it is not 'nil'.  Setting 'quit-flag' non-'nil' in any way thus
causes a quit.

   At the level of C code, quitting cannot happen just anywhere; only at
the special places that check 'quit-flag'.  The reason for this is that
quitting at other places might leave an inconsistency in Emacs's
internal state.  Because quitting is delayed until a safe place,
quitting cannot make Emacs crash.

   Certain functions such as 'read-key-sequence' or 'read-quoted-char'
prevent quitting entirely even though they wait for input.  Instead of
quitting, 'C-g' serves as the requested input.  In the case of
'read-key-sequence', this serves to bring about the special behavior of
'C-g' in the command loop.  In the case of 'read-quoted-char', this is
so that 'C-q' can be used to quote a 'C-g'.

   You can prevent quitting for a portion of a Lisp function by binding
the variable 'inhibit-quit' to a non-'nil' value.  Then, although 'C-g'
still sets 'quit-flag' to 't' as usual, the usual result of this--a
quit--is prevented.  Eventually, 'inhibit-quit' will become 'nil' again,
such as when its binding is unwound at the end of a 'let' form.  At that
time, if 'quit-flag' is still non-'nil', the requested quit happens
immediately.  This behavior is ideal when you wish to make sure that
quitting does not happen within a critical section of the program.

   In some functions (such as 'read-quoted-char'), 'C-g' is handled in a
special way that does not involve quitting.  This is done by reading the
input with 'inhibit-quit' bound to 't', and setting 'quit-flag' to 'nil'
before 'inhibit-quit' becomes 'nil' again.  This excerpt from the
definition of 'read-quoted-char' shows how this is done; it also shows
that normal quitting is permitted after the first character of input.

     (defun read-quoted-char (&optional prompt)
       "...DOCUMENTATION..."
       (let ((message-log-max nil) done (first t) (code 0) char)
         (while (not done)
           (let ((inhibit-quit first)
                 ...)
             (and prompt (message "%s-" prompt))
             (setq char (read-event))
             (if inhibit-quit (setq quit-flag nil)))
           ...set the variable 'code'...)
         code))

 -- Variable: quit-flag
     If this variable is non-'nil', then Emacs quits immediately, unless
     'inhibit-quit' is non-'nil'.  Typing 'C-g' ordinarily sets
     'quit-flag' non-'nil', regardless of 'inhibit-quit'.

 -- Variable: inhibit-quit
     This variable determines whether Emacs should quit when 'quit-flag'
     is set to a value other than 'nil'.  If 'inhibit-quit' is
     non-'nil', then 'quit-flag' has no special effect.

 -- Macro: with-local-quit body...
     This macro executes BODY forms in sequence, but allows quitting, at
     least locally, within BODY even if 'inhibit-quit' was non-'nil'
     outside this construct.  It returns the value of the last form in
     BODY, unless exited by quitting, in which case it returns 'nil'.

     If 'inhibit-quit' is 'nil' on entry to 'with-local-quit', it only
     executes the BODY, and setting 'quit-flag' causes a normal quit.
     However, if 'inhibit-quit' is non-'nil' so that ordinary quitting
     is delayed, a non-'nil' 'quit-flag' triggers a special kind of
     local quit.  This ends the execution of BODY and exits the
     'with-local-quit' body with 'quit-flag' still non-'nil', so that
     another (ordinary) quit will happen as soon as that is allowed.  If
     'quit-flag' is already non-'nil' at the beginning of BODY, the
     local quit happens immediately and the body doesn't execute at all.

     This macro is mainly useful in functions that can be called from
     timers, process filters, process sentinels, 'pre-command-hook',
     'post-command-hook', and other places where 'inhibit-quit' is
     normally bound to 't'.

 -- Command: keyboard-quit
     This function signals the 'quit' condition with '(signal 'quit
     nil)'.  This is the same thing that quitting does.  (See 'signal'
     in *note Errors::.)

   You can specify a character other than 'C-g' to use for quitting.
See the function 'set-input-mode' in *note Input Modes::.

==============================================================================
File: elisp.info,  Node: |Prefix_Command_Arguments|,  Next: |Recursive_Editing|,  Prev: |Quitting|,  Up: |Command_Loop|
==============================================================================

                                                      *Prefix_Command_Arguments*

21.12 Prefix Command Arguments
------------------------------

Most Emacs commands can use a "prefix argument", a number specified
before the command itself.  (Don't confuse prefix arguments with prefix
keys.)  The prefix argument is at all times represented by a value,
which may be 'nil', meaning there is currently no prefix argument.  Each
command may use the prefix argument or ignore it.

   There are two representations of the prefix argument: "raw" and
"numeric".  The editor command loop uses the raw representation
internally, and so do the Lisp variables that store the information, but
commands can request either representation.

   Here are the possible values of a raw prefix argument:

   * 'nil', meaning there is no prefix argument.  Its numeric value is
     1, but numerous commands make a distinction between 'nil' and the
     integer 1.

   * An integer, which stands for itself.

   * A list of one element, which is an integer.  This form of prefix
     argument results from one or a succession of 'C-u's with no digits.
     The numeric value is the integer in the list, but some commands
     make a distinction between such a list and an integer alone.

   * The symbol '-'.  This indicates that 'M--' or 'C-u -' was typed,
     without following digits.  The equivalent numeric value is -1, but
     some commands make a distinction between the integer -1 and the
     symbol '-'.

   We illustrate these possibilities by calling the following function
with various prefixes:

     (defun display-prefix (arg)
       "Display the value of the raw prefix arg."
       (interactive "P")
       (message "%s" arg))

Here are the results of calling 'display-prefix' with various raw prefix
arguments:

             M-x display-prefix  -| nil

     C-u     M-x display-prefix  -| (4)

     C-u C-u M-x display-prefix  -| (16)

     C-u 3   M-x display-prefix  -| 3

     M-3     M-x display-prefix  -| 3      ; (Same as 'C-u 3'.)

     C-u -   M-x display-prefix  -| -

     M--     M-x display-prefix  -| -      ; (Same as 'C-u -'.)

     C-u - 7 M-x display-prefix  -| -7

     M-- 7   M-x display-prefix  -| -7     ; (Same as 'C-u -7'.)

   Emacs uses two variables to store the prefix argument: 'prefix-arg'
and 'current-prefix-arg'.  Commands such as 'universal-argument' that
set up prefix arguments for other commands store them in 'prefix-arg'.
In contrast, 'current-prefix-arg' conveys the prefix argument to the
current command, so setting it has no effect on the prefix arguments for
future commands.

   Normally, commands specify which representation to use for the prefix
argument, either numeric or raw, in the 'interactive' specification.
(*Note Using Interactive::.)  Alternatively, functions may look at the
value of the prefix argument directly in the variable
'current-prefix-arg', but this is less clean.

 -- Function: prefix-numeric-value arg
     This function returns the numeric meaning of a valid raw prefix
     argument value, ARG.  The argument may be a symbol, a number, or a
     list.  If it is 'nil', the value 1 is returned; if it is '-', the
     value -1 is returned; if it is a number, that number is returned;
     if it is a list, the CAR of that list (which should be a number) is
     returned.

 -- Variable: current-prefix-arg
     This variable holds the raw prefix argument for the _current_
     command.  Commands may examine it directly, but the usual method
     for accessing it is with '(interactive "P")'.

 -- Variable: prefix-arg
     The value of this variable is the raw prefix argument for the
     _next_ editing command.  Commands such as 'universal-argument' that
     specify prefix arguments for the following command work by setting
     this variable.

 -- Variable: last-prefix-arg
     The raw prefix argument value used by the previous command.

   The following commands exist to set up prefix arguments for the
following command.  Do not call them for any other reason.

 -- Command: universal-argument
     This command reads input and specifies a prefix argument for the
     following command.  Don't call this command yourself unless you
     know what you are doing.

 -- Command: digit-argument arg
     This command adds to the prefix argument for the following command.
     The argument ARG is the raw prefix argument as it was before this
     command; it is used to compute the updated prefix argument.  Don't
     call this command yourself unless you know what you are doing.

 -- Command: negative-argument arg
     This command adds to the numeric argument for the next command.
     The argument ARG is the raw prefix argument as it was before this
     command; its value is negated to form the new prefix argument.
     Don't call this command yourself unless you know what you are
     doing.

==============================================================================
File: elisp.info,  Node: |Recursive_Editing|,  Next: |Disabling_Commands|,  Prev: |Prefix_Command_Arguments|,  Up: |Command_Loop|
==============================================================================

                                                             *Recursive_Editing*

21.13 Recursive Editing
-----------------------

The Emacs command loop is entered automatically when Emacs starts up.
This top-level invocation of the command loop never exits; it keeps
running as long as Emacs does.  Lisp programs can also invoke the
command loop.  Since this makes more than one activation of the command
loop, we call it "recursive editing".  A recursive editing level has the
effect of suspending whatever command invoked it and permitting the user
to do arbitrary editing before resuming that command.

   The commands available during recursive editing are the same ones
available in the top-level editing loop and defined in the keymaps.
Only a few special commands exit the recursive editing level; the others
return to the recursive editing level when they finish.  (The special
commands for exiting are always available, but they do nothing when
recursive editing is not in progress.)

   All command loops, including recursive ones, set up all-purpose error
handlers so that an error in a command run from the command loop will
not exit the loop.

   Minibuffer input is a special kind of recursive editing.  It has a
few special wrinkles, such as enabling display of the minibuffer and the
minibuffer window, but fewer than you might suppose.  Certain keys
behave differently in the minibuffer, but that is only because of the
minibuffer's local map; if you switch windows, you get the usual Emacs
commands.

   To invoke a recursive editing level, call the function
'recursive-edit'.  This function contains the command loop; it also
contains a call to 'catch' with tag 'exit', which makes it possible to
exit the recursive editing level by throwing to 'exit' (*note Catch and
Throw::).  If you throw a value other than 't', then 'recursive-edit'
returns normally to the function that called it.  The command 'C-M-c'
('exit-recursive-edit') does this.  Throwing a 't' value causes
'recursive-edit' to quit, so that control returns to the command loop
one level up.  This is called "aborting", and is done by 'C-]'
('abort-recursive-edit').

   Most applications should not use recursive editing, except as part of
using the minibuffer.  Usually it is more convenient for the user if you
change the major mode of the current buffer temporarily to a special
major mode, which should have a command to go back to the previous mode.
(The 'e' command in Rmail uses this technique.)  Or, if you wish to give
the user different text to edit recursively, create and select a new
buffer in a special mode.  In this mode, define a command to complete
the processing and go back to the previous buffer.  (The 'm' command in
Rmail does this.)

   Recursive edits are useful in debugging.  You can insert a call to
'debug' into a function definition as a sort of breakpoint, so that you
can look around when the function gets there.  'debug' invokes a
recursive edit but also provides the other features of the debugger.

   Recursive editing levels are also used when you type 'C-r' in
'query-replace' or use 'C-x q' ('kbd-macro-query').

 -- Command: recursive-edit
     This function invokes the editor command loop.  It is called
     automatically by the initialization of Emacs, to let the user begin
     editing.  When called from a Lisp program, it enters a recursive
     editing level.

     If the current buffer is not the same as the selected window's
     buffer, 'recursive-edit' saves and restores the current buffer.
     Otherwise, if you switch buffers, the buffer you switched to is
     current after 'recursive-edit' returns.

     In the following example, the function 'simple-rec' first advances
     point one word, then enters a recursive edit, printing out a
     message in the echo area.  The user can then do any editing
     desired, and then type 'C-M-c' to exit and continue executing
     'simple-rec'.

          (defun simple-rec ()
            (forward-word 1)
            (message "Recursive edit in progress")
            (recursive-edit)
            (forward-word 1))
               => simple-rec
          (simple-rec)
               => nil

 -- Command: exit-recursive-edit
     This function exits from the innermost recursive edit (including
     minibuffer input).  Its definition is effectively '(throw 'exit
     nil)'.

 -- Command: abort-recursive-edit
     This function aborts the command that requested the innermost
     recursive edit (including minibuffer input), by signaling 'quit'
     after exiting the recursive edit.  Its definition is effectively
     '(throw 'exit t)'.  *Note Quitting::.

 -- Command: top-level
     This function exits all recursive editing levels; it does not
     return a value, as it jumps completely out of any computation
     directly back to the main command loop.

 -- Function: recursion-depth
     This function returns the current depth of recursive edits.  When
     no recursive edit is active, it returns 0.

==============================================================================
File: elisp.info,  Node: |Disabling_Commands|,  Next: |Command_History|,  Prev: |Recursive_Editing|,  Up: |Command_Loop|
==============================================================================

                                                            *Disabling_Commands*

21.14 Disabling Commands
------------------------

"Disabling a command" marks the command as requiring user confirmation
before it can be executed.  Disabling is used for commands which might
be confusing to beginning users, to prevent them from using the commands
by accident.

   The low-level mechanism for disabling a command is to put a non-'nil'
'disabled' property on the Lisp symbol for the command.  These
properties are normally set up by the user's init file (*note Init
File::) with Lisp expressions such as this:

     (put 'upcase-region 'disabled t)

For a few commands, these properties are present by default (you can
remove them in your init file if you wish).

   If the value of the 'disabled' property is a string, the message
saying the command is disabled includes that string.  For example:

     (put 'delete-region 'disabled
          "Text deleted this way cannot be yanked back!\n")

   *Note (emacs)Disabling::, for the details on what happens when a
disabled command is invoked interactively.  Disabling a command has no
effect on calling it as a function from Lisp programs.

 -- Command: enable-command command
     Allow COMMAND (a symbol) to be executed without special
     confirmation from now on, and alter the user's init file (*note
     Init File::) so that this will apply to future sessions.

 -- Command: disable-command command
     Require special confirmation to execute COMMAND from now on, and
     alter the user's init file so that this will apply to future
     sessions.

 -- Variable: disabled-command-function
     The value of this variable should be a function.  When the user
     invokes a disabled command interactively, this function is called
     instead of the disabled command.  It can use 'this-command-keys' to
     determine what the user typed to run the command, and thus find the
     command itself.

     The value may also be 'nil'.  Then all commands work normally, even
     disabled ones.

     By default, the value is a function that asks the user whether to
     proceed.

==============================================================================
File: elisp.info,  Node: |Command_History|,  Next: |Keyboard_Macros|,  Prev: |Disabling_Commands|,  Up: |Command_Loop|
==============================================================================

                                                               *Command_History*

21.15 Command History
---------------------

The command loop keeps a history of the complex commands that have been
executed, to make it convenient to repeat these commands.  A "complex
command" is one for which the interactive argument reading uses the
minibuffer.  This includes any 'M-x' command, any 'M-:' command, and any
command whose 'interactive' specification reads an argument from the
minibuffer.  Explicit use of the minibuffer during the execution of the
command itself does not cause the command to be considered complex.

 -- Variable: command-history
     This variable's value is a list of recent complex commands, each
     represented as a form to evaluate.  It continues to accumulate all
     complex commands for the duration of the editing session, but when
     it reaches the maximum size (*note Minibuffer History::), the
     oldest elements are deleted as new ones are added.

          command-history
          => ((switch-to-buffer "chistory.texi")
              (describe-key "^X^[")
              (visit-tags-table "~/emacs/src/")
              (find-tag "repeat-complex-command"))

   This history list is actually a special case of minibuffer history
(*note Minibuffer History::), with one special twist: the elements are
expressions rather than strings.

   There are a number of commands devoted to the editing and recall of
previous commands.  The commands 'repeat-complex-command', and
'list-command-history' are described in the user manual (*note
(emacs)Repetition::).  Within the minibuffer, the usual minibuffer
history commands are available.

==============================================================================
File: elisp.info,  Node: |Keyboard_Macros|,  Prev: |Command_History|,  Up: |Command_Loop|
==============================================================================

                                                               *Keyboard_Macros*

21.16 Keyboard Macros
---------------------

A "keyboard macro" is a canned sequence of input events that can be
considered a command and made the definition of a key.  The Lisp
representation of a keyboard macro is a string or vector containing the
events.  Don't confuse keyboard macros with Lisp macros (*note
Macros::).

 -- Function: execute-kbd-macro kbdmacro &optional count loopfunc
     This function executes KBDMACRO as a sequence of events.  If
     KBDMACRO is a string or vector, then the events in it are executed
     exactly as if they had been input by the user.  The sequence is
     _not_ expected to be a single key sequence; normally a keyboard
     macro definition consists of several key sequences concatenated.

     If KBDMACRO is a symbol, then its function definition is used in
     place of KBDMACRO.  If that is another symbol, this process
     repeats.  Eventually the result should be a string or vector.  If
     the result is not a symbol, string, or vector, an error is
     signaled.

     The argument COUNT is a repeat count; KBDMACRO is executed that
     many times.  If COUNT is omitted or 'nil', KBDMACRO is executed
     once.  If it is 0, KBDMACRO is executed over and over until it
     encounters an error or a failing search.

     If LOOPFUNC is non-'nil', it is a function that is called, without
     arguments, prior to each iteration of the macro.  If LOOPFUNC
     returns 'nil', then this stops execution of the macro.

     *Note Reading One Event::, for an example of using
     'execute-kbd-macro'.

 -- Variable: executing-kbd-macro
     This variable contains the string or vector that defines the
     keyboard macro that is currently executing.  It is 'nil' if no
     macro is currently executing.  A command can test this variable so
     as to behave differently when run from an executing macro.  Do not
     set this variable yourself.

 -- Variable: defining-kbd-macro
     This variable is non-'nil' if and only if a keyboard macro is being
     defined.  A command can test this variable so as to behave
     differently while a macro is being defined.  The value is 'append'
     while appending to the definition of an existing macro.  The
     commands 'start-kbd-macro', 'kmacro-start-macro' and
     'end-kbd-macro' set this variable--do not set it yourself.

     The variable is always local to the current terminal and cannot be
     buffer-local.  *Note Multiple Terminals::.

 -- Variable: last-kbd-macro
     This variable is the definition of the most recently defined
     keyboard macro.  Its value is a string or vector, or 'nil'.

     The variable is always local to the current terminal and cannot be
     buffer-local.  *Note Multiple Terminals::.

 -- Variable: kbd-macro-termination-hook
     This normal hook is run when a keyboard macro terminates,
     regardless of what caused it to terminate (reaching the macro end
     or an error which ended the macro prematurely).

==============================================================================
File: elisp.info,  Node: |Keymaps|,  Next: |Modes|,  Prev: |Command_Loop|,  Up: |Top|
==============================================================================

                                                                       *Keymaps*

22 Keymaps
==========

The command bindings of input events are recorded in data structures
called "keymaps".  Each entry in a keymap associates (or "binds") an
individual event type, either to another keymap or to a command.  When
an event type is bound to a keymap, that keymap is used to look up the
next input event; this continues until a command is found.  The whole
process is called "key lookup".

MENU

* |Key_Sequences|::               Key sequences as Lisp objects.
* |Keymap_Basics|::               Basic concepts of keymaps.
* |Format_of_Keymaps|::           What a keymap looks like as a Lisp object.
* |Creating_Keymaps|::            Functions to create and copy keymaps.
* |Inheritance_and_Keymaps|::     How one keymap can inherit the bindings
                                   of another keymap.
* |Prefix_Keys|::                 Defining a key with a keymap as its definition.
* |Active_Keymaps|::              How Emacs searches the active keymaps
                                   for a key binding.
* |Searching_Keymaps|::           A pseudo-Lisp summary of searching active maps.
* |Controlling_Active_Maps|::     Each buffer has a local keymap
                                   to override the standard (global) bindings.
                                   A minor mode can also override them.
* |Key_Lookup|::                  Finding a key's binding in one keymap.
* |Functions_for_Key_Lookup|::    How to request key lookup.
* |Changing_Key_Bindings|::       Redefining a key in a keymap.
* |Remapping_Commands|::          A keymap can translate one command to another.
* |Translation_Keymaps|::         Keymaps for translating sequences of events.
* |Key_Binding_Commands|::        Interactive interfaces for redefining keys.
* |Scanning_Keymaps|::            Looking through all keymaps, for printing help.
* |Menu_Keymaps|::                Defining a menu as a keymap.

==============================================================================
File: elisp.info,  Node: |Key_Sequences|,  Next: |Keymap_Basics|,  Up: |Keymaps|
==============================================================================

                                                                 *Key_Sequences*

22.1 Key Sequences
------------------

A "key sequence", or "key" for short, is a sequence of one or more input
events that form a unit.  Input events include characters, function
keys, mouse actions, or system events external to Emacs, such as
'iconify-frame' (*note Input Events::).  The Emacs Lisp representation
for a key sequence is a string or vector.  Unless otherwise stated, any
Emacs Lisp function that accepts a key sequence as an argument can
handle both representations.

   In the string representation, alphanumeric characters ordinarily
stand for themselves; for example, '"a"' represents 'a' and '"2"'
represents '2'.  Control character events are prefixed by the substring
'"\C-"', and meta characters by '"\M-"'; for example, '"\C-x"'
represents the key 'C-x'.  In addition, the <TAB>, <RET>, <ESC>, and
<DEL> events are represented by '"\t"', '"\r"', '"\e"', and '"\d"'
respectively.  The string representation of a complete key sequence is
the concatenation of the string representations of the constituent
events; thus, '"\C-xl"' represents the key sequence 'C-x l'.

   Key sequences containing function keys, mouse button events, system
events, or non-ASCII characters such as 'C-=' or 'H-a' cannot be
represented as strings; they have to be represented as vectors.

   In the vector representation, each element of the vector represents
an input event, in its Lisp form.  *Note Input Events::.  For example,
the vector '[?\C-x ?l]' represents the key sequence 'C-x l'.

   For examples of key sequences written in string and vector
representations, *note (emacs)Init Rebinding::.

 -- Function: kbd keyseq-text
     This function converts the text KEYSEQ-TEXT (a string constant)
     into a key sequence (a string or vector constant).  The contents of
     KEYSEQ-TEXT should use the same syntax as in the buffer invoked by
     the 'C-x C-k <RET>' ('kmacro-edit-macro') command; in particular,
     you must surround function key names with '<...>'.  *Note
     (emacs)Edit Keyboard Macro::.

          (kbd "C-x") => "\C-x"
          (kbd "C-x C-f") => "\C-x\C-f"
          (kbd "C-x 4 C-f") => "\C-x4\C-f"
          (kbd "X") => "X"
          (kbd "RET") => "\^M"
          (kbd "C-c SPC") => "\C-c "
          (kbd "<f1> SPC") => [f1 32]
          (kbd "C-M-<down>") => [C-M-down]

==============================================================================
File: elisp.info,  Node: |Keymap_Basics|,  Next: |Format_of_Keymaps|,  Prev: |Key_Sequences|,  Up: |Keymaps|
==============================================================================

                                                                 *Keymap_Basics*

22.2 Keymap Basics
------------------

A keymap is a Lisp data structure that specifies "key bindings" for
various key sequences.

   A single keymap directly specifies definitions for individual events.
When a key sequence consists of a single event, its binding in a keymap
is the keymap's definition for that event.  The binding of a longer key
sequence is found by an iterative process: first find the definition of
the first event (which must itself be a keymap); then find the second
event's definition in that keymap, and so on until all the events in the
key sequence have been processed.

   If the binding of a key sequence is a keymap, we call the key
sequence a "prefix key".  Otherwise, we call it a "complete key"
(because no more events can be added to it).  If the binding is 'nil',
we call the key "undefined".  Examples of prefix keys are 'C-c', 'C-x',
and 'C-x 4'.  Examples of defined complete keys are 'X', <RET>, and 'C-x
4 C-f'.  Examples of undefined complete keys are 'C-x C-g', and 'C-c 3'.
*Note Prefix Keys::, for more details.

   The rule for finding the binding of a key sequence assumes that the
intermediate bindings (found for the events before the last) are all
keymaps; if this is not so, the sequence of events does not form a
unit--it is not really one key sequence.  In other words, removing one or
more events from the end of any valid key sequence must always yield a
prefix key.  For example, 'C-f C-n' is not a key sequence; 'C-f' is not
a prefix key, so a longer sequence starting with 'C-f' cannot be a key
sequence.

   The set of possible multi-event key sequences depends on the bindings
for prefix keys; therefore, it can be different for different keymaps,
and can change when bindings are changed.  However, a one-event sequence
is always a key sequence, because it does not depend on any prefix keys
for its well-formedness.

   At any time, several primary keymaps are "active"--that is, in use for
finding key bindings.  These are the "global map", which is shared by
all buffers; the "local keymap", which is usually associated with a
specific major mode; and zero or more "minor mode keymaps", which belong
to currently enabled minor modes.  (Not all minor modes have keymaps.)
The local keymap bindings shadow (i.e., take precedence over) the
corresponding global bindings.  The minor mode keymaps shadow both local
and global keymaps.  *Note Active Keymaps::, for details.

==============================================================================
File: elisp.info,  Node: |Format_of_Keymaps|,  Next: |Creating_Keymaps|,  Prev: |Keymap_Basics|,  Up: |Keymaps|
==============================================================================

                                                             *Format_of_Keymaps*

22.3 Format of Keymaps
----------------------

Each keymap is a list whose CAR is the symbol 'keymap'.  The remaining
elements of the list define the key bindings of the keymap.  A symbol
whose function definition is a keymap is also a keymap.  Use the
function 'keymapp' (see below) to test whether an object is a keymap.

   Several kinds of elements may appear in a keymap, after the symbol
'keymap' that begins it:

'(TYPE . BINDING)'
     This specifies one binding, for events of type TYPE.  Each ordinary
     binding applies to events of a particular "event type", which is
     always a character or a symbol.  *Note Classifying Events::.  In
     this kind of binding, BINDING is a command.

'(TYPE ITEM-NAME . BINDING)'
     This specifies a binding which is also a simple menu item that
     displays as ITEM-NAME in the menu.  *Note Simple Menu Items::.

'(TYPE ITEM-NAME HELP-STRING . BINDING)'
     This is a simple menu item with help string HELP-STRING.

'(TYPE menu-item . DETAILS)'
     This specifies a binding which is also an extended menu item.  This
     allows use of other features.  *Note Extended Menu Items::.

'(t . BINDING)'
     This specifies a "default key binding"; any event not bound by
     other elements of the keymap is given BINDING as its binding.
     Default bindings allow a keymap to bind all possible event types
     without having to enumerate all of them.  A keymap that has a
     default binding completely masks any lower-precedence keymap,
     except for events explicitly bound to 'nil' (see below).

'CHAR-TABLE'
     If an element of a keymap is a char-table, it counts as holding
     bindings for all character events with no modifier bits (*note
     modifier bits::): the element whose index is C is the binding for
     the character C.  This is a compact way to record lots of bindings.
     A keymap with such a char-table is called a "full keymap".  Other
     keymaps are called "sparse keymaps".

'VECTOR'
     This kind of element is similar to a char-table: the element whose
     index is C is the binding for the character C.  Since the range of
     characters that can be bound this way is limited by the vector
     size, and vector creation allocates space for all character codes
     from 0 up, this format should not be used except for creating menu
     keymaps (*note Menu Keymaps::), where the bindings themselves don't
     matter.

'STRING'
     Aside from elements that specify bindings for keys, a keymap can
     also have a string as an element.  This is called the "overall
     prompt string" and makes it possible to use the keymap as a menu.
     *Note Defining Menus::.

'(keymap ...)'
     If an element of a keymap is itself a keymap, it counts as if this
     inner keymap were inlined in the outer keymap.  This is used for
     multiple-inheritance, such as in 'make-composed-keymap'.

   When the binding is 'nil', it doesn't constitute a definition but it
does take precedence over a default binding or a binding in the parent
keymap.  On the other hand, a binding of 'nil' does _not_ override
lower-precedence keymaps; thus, if the local map gives a binding of
'nil', Emacs uses the binding from the global map.

   Keymaps do not directly record bindings for the meta characters.
Instead, meta characters are regarded for purposes of key lookup as
sequences of two characters, the first of which is <ESC> (or whatever is
currently the value of 'meta-prefix-char').  Thus, the key 'M-a' is
internally represented as '<ESC> a', and its global binding is found at
the slot for 'a' in 'esc-map' (*note Prefix Keys::).

   This conversion applies only to characters, not to function keys or
other input events; thus, 'M-<end>' has nothing to do with '<ESC>
<end>'.

   Here as an example is the local keymap for Lisp mode, a sparse
keymap.  It defines bindings for <DEL>, 'C-c C-z', 'C-M-q', and 'C-M-x'
(the actual value also contains a menu binding, which is omitted here
for the sake of brevity).

     lisp-mode-map
     =>
     (keymap
      (3 keymap
         ;; C-c C-z
         (26 . run-lisp))
      (27 keymap
          ;; 'C-M-x', treated as '<ESC> C-x'
          (24 . lisp-send-defun))
      ;; This part is inherited from 'lisp-mode-shared-map'.
      keymap
      ;; <DEL>
      (127 . backward-delete-char-untabify)
      (27 keymap
          ;; 'C-M-q', treated as '<ESC> C-q'
          (17 . indent-sexp)))

 -- Function: keymapp object
     This function returns 't' if OBJECT is a keymap, 'nil' otherwise.
     More precisely, this function tests for a list whose CAR is
     'keymap', or for a symbol whose function definition satisfies
     'keymapp'.

          (keymapp '(keymap))
              => t
          (fset 'foo '(keymap))
          (keymapp 'foo)
              => t
          (keymapp (current-global-map))
              => t

==============================================================================
File: elisp.info,  Node: |Creating_Keymaps|,  Next: |Inheritance_and_Keymaps|,  Prev: |Format_of_Keymaps|,  Up: |Keymaps|
==============================================================================

                                                              *Creating_Keymaps*

22.4 Creating Keymaps
---------------------

Here we describe the functions for creating keymaps.

 -- Function: make-sparse-keymap &optional prompt
     This function creates and returns a new sparse keymap with no
     entries.  (A sparse keymap is the kind of keymap you usually want.)
     The new keymap does not contain a char-table, unlike 'make-keymap',
     and does not bind any events.

          (make-sparse-keymap)
              => (keymap)

     If you specify PROMPT, that becomes the overall prompt string for
     the keymap.  You should specify this only for menu keymaps (*note
     Defining Menus::).  A keymap with an overall prompt string will
     always present a mouse menu or a keyboard menu if it is active for
     looking up the next input event.  Don't specify an overall prompt
     string for the main map of a major or minor mode, because that
     would cause the command loop to present a keyboard menu every time.

 -- Function: make-keymap &optional prompt
     This function creates and returns a new full keymap.  That keymap
     contains a char-table (*note Char-Tables::) with slots for all
     characters without modifiers.  The new keymap initially binds all
     these characters to 'nil', and does not bind any other kind of
     event.  The argument PROMPT specifies a prompt string, as in
     'make-sparse-keymap'.

          (make-keymap)
              => (keymap #^[nil nil keymap nil nil nil ...])

     A full keymap is more efficient than a sparse keymap when it holds
     lots of bindings; for just a few, the sparse keymap is better.

 -- Function: copy-keymap keymap
     This function returns a copy of KEYMAP.  This is almost never
     needed.  If you want a keymap that's like another yet with a few
     changes, you should use map inheritance rather than copying.  I.e.,
     something like:

          (let ((map (make-sparse-keymap)))
            (set-keymap-parent map <theirmap>)
            (define-key map ...)
            ...)

     When performing 'copy-keymap', any keymaps that appear directly as
     bindings in KEYMAP are also copied recursively, and so on to any
     number of levels.  However, recursive copying does not take place
     when the definition of a character is a symbol whose function
     definition is a keymap; the same symbol appears in the new copy.

          (setq map (copy-keymap (current-local-map)))
          => (keymap
               ;; (This implements meta characters.)
               (27 keymap
                   (83 . center-paragraph)
                   (115 . center-line))
               (9 . tab-to-tab-stop))

          (eq map (current-local-map))
              => nil
          (equal map (current-local-map))
              => t

==============================================================================
File: elisp.info,  Node: |Inheritance_and_Keymaps|,  Next: |Prefix_Keys|,  Prev: |Creating_Keymaps|,  Up: |Keymaps|
==============================================================================

                                                       *Inheritance_and_Keymaps*

22.5 Inheritance and Keymaps
----------------------------

A keymap can inherit the bindings of another keymap, which we call the
"parent keymap".  Such a keymap looks like this:

     (keymap ELEMENTS... . PARENT-KEYMAP)

The effect is that this keymap inherits all the bindings of
PARENT-KEYMAP, whatever they may be at the time a key is looked up, but
can add to them or override them with ELEMENTS.

   If you change the bindings in PARENT-KEYMAP using 'define-key' or
other key-binding functions, these changed bindings are visible in the
inheriting keymap, unless shadowed by the bindings made by ELEMENTS.
The converse is not true: if you use 'define-key' to change bindings in
the inheriting keymap, these changes are recorded in ELEMENTS, but have
no effect on PARENT-KEYMAP.

   The proper way to construct a keymap with a parent is to use
'set-keymap-parent'; if you have code that directly constructs a keymap
with a parent, please convert the program to use 'set-keymap-parent'
instead.

 -- Function: keymap-parent keymap
     This returns the parent keymap of KEYMAP.  If KEYMAP has no parent,
     'keymap-parent' returns 'nil'.

 -- Function: set-keymap-parent keymap parent
     This sets the parent keymap of KEYMAP to PARENT, and returns
     PARENT.  If PARENT is 'nil', this function gives KEYMAP no parent
     at all.

     If KEYMAP has submaps (bindings for prefix keys), they too receive
     new parent keymaps that reflect what PARENT specifies for those
     prefix keys.

   Here is an example showing how to make a keymap that inherits from
'text-mode-map':

     (let ((map (make-sparse-keymap)))
       (set-keymap-parent map text-mode-map)
       map)

   A non-sparse keymap can have a parent too, but this is not very
useful.  A non-sparse keymap always specifies something as the binding
for every numeric character code without modifier bits, even if it is
'nil', so these character's bindings are never inherited from the parent
keymap.

   Sometimes you want to make a keymap that inherits from more than one
map.  You can use the function 'make-composed-keymap' for this.

 -- Function: make-composed-keymap maps &optional parent
     This function returns a new keymap composed of the existing
     keymap(s) MAPS, and optionally inheriting from a parent keymap
     PARENT.  MAPS can be a single keymap or a list of more than one.
     When looking up a key in the resulting new map, Emacs searches in
     each of the MAPS in turn, and then in PARENT, stopping at the first
     match.  A 'nil' binding in any one of MAPS overrides any binding in
     PARENT, but it does not override any non-'nil' binding in any other
     of the MAPS.

For example, here is how Emacs sets the parent of 'help-mode-map', such
that it inherits from both 'button-buffer-map' and 'special-mode-map':

     (defvar help-mode-map
       (let ((map (make-sparse-keymap)))
         (set-keymap-parent map
           (make-composed-keymap button-buffer-map special-mode-map))
         ... map) ... )

==============================================================================
File: elisp.info,  Node: |Prefix_Keys|,  Next: |Active_Keymaps|,  Prev: |Inheritance_and_Keymaps|,  Up: |Keymaps|
==============================================================================

                                                                   *Prefix_Keys*

22.6 Prefix Keys
----------------

A "prefix key" is a key sequence whose binding is a keymap.  The keymap
defines what to do with key sequences that extend the prefix key.  For
example, 'C-x' is a prefix key, and it uses a keymap that is also stored
in the variable 'ctl-x-map'.  This keymap defines bindings for key
sequences starting with 'C-x'.

   Some of the standard Emacs prefix keys use keymaps that are also
found in Lisp variables:

   * 'esc-map' is the global keymap for the <ESC> prefix key.  Thus, the
     global definitions of all meta characters are actually found here.
     This map is also the function definition of 'ESC-prefix'.

   * 'help-map' is the global keymap for the 'C-h' prefix key.

   * 'mode-specific-map' is the global keymap for the prefix key 'C-c'.
     This map is actually global, not mode-specific, but its name
     provides useful information about 'C-c' in the output of 'C-h b'
     ('display-bindings'), since the main use of this prefix key is for
     mode-specific bindings.

   * 'ctl-x-map' is the global keymap used for the 'C-x' prefix key.
     This map is found via the function cell of the symbol
     'Control-X-prefix'.

   * 'mule-keymap' is the global keymap used for the 'C-x <RET>' prefix
     key.

   * 'ctl-x-4-map' is the global keymap used for the 'C-x 4' prefix key.

   * 'ctl-x-5-map' is the global keymap used for the 'C-x 5' prefix key.

   * '2C-mode-map' is the global keymap used for the 'C-x 6' prefix key.

   * 'tab-prefix-map' is the global keymap used for the 'C-x t' prefix
     key.

   * 'vc-prefix-map' is the global keymap used for the 'C-x v' prefix
     key.

   * 'goto-map' is the global keymap used for the 'M-g' prefix key.

   * 'search-map' is the global keymap used for the 'M-s' prefix key.

   * 'facemenu-keymap' is the global keymap used for the 'M-o' prefix
     key.

   * The other Emacs prefix keys are 'C-x @', 'C-x a i', 'C-x <ESC>' and
     '<ESC> <ESC>'.  They use keymaps that have no special names.

   The keymap binding of a prefix key is used for looking up the event
that follows the prefix key.  (It may instead be a symbol whose function
definition is a keymap.  The effect is the same, but the symbol serves
as a name for the prefix key.)  Thus, the binding of 'C-x' is the symbol
'Control-X-prefix', whose function cell holds the keymap for 'C-x'
commands.  (The same keymap is also the value of 'ctl-x-map'.)

   Prefix key definitions can appear in any active keymap.  The
definitions of 'C-c', 'C-x', 'C-h' and <ESC> as prefix keys appear in
the global map, so these prefix keys are always available.  Major and
minor modes can redefine a key as a prefix by putting a prefix key
definition for it in the local map or the minor mode's map.  *Note
Active Keymaps::.

   If a key is defined as a prefix in more than one active map, then its
various definitions are in effect merged: the commands defined in the
minor mode keymaps come first, followed by those in the local map's
prefix definition, and then by those from the global map.

   In the following example, we make 'C-p' a prefix key in the local
keymap, in such a way that 'C-p' is identical to 'C-x'.  Then the
binding for 'C-p C-f' is the function 'find-file', just like 'C-x C-f'.
The key sequence 'C-p 6' is not found in any active keymap.

     (use-local-map (make-sparse-keymap))
         => nil
     (local-set-key "\C-p" ctl-x-map)
         => nil
     (key-binding "\C-p\C-f")
         => find-file

     (key-binding "\C-p6")
         => nil

 -- Function: define-prefix-command symbol &optional mapvar prompt
     This function prepares SYMBOL for use as a prefix key's binding: it
     creates a sparse keymap and stores it as SYMBOL's function
     definition.  Subsequently binding a key sequence to SYMBOL will
     make that key sequence into a prefix key.  The return value is
     'symbol'.

     This function also sets SYMBOL as a variable, with the keymap as
     its value.  But if MAPVAR is non-'nil', it sets MAPVAR as a
     variable instead.

     If PROMPT is non-'nil', that becomes the overall prompt string for
     the keymap.  The prompt string should be given for menu keymaps
     (*note Defining Menus::).

==============================================================================
File: elisp.info,  Node: |Active_Keymaps|,  Next: |Searching_Keymaps|,  Prev: |Prefix_Keys|,  Up: |Keymaps|
==============================================================================

                                                                *Active_Keymaps*

22.7 Active Keymaps
-------------------

Emacs contains many keymaps, but at any time only a few keymaps are
"active".  When Emacs receives user input, it translates the input event
(*note Translation Keymaps::), and looks for a key binding in the active
keymaps.

   Usually, the active keymaps are: (i) the keymap specified by the
'keymap' property, (ii) the keymaps of enabled minor modes, (iii) the
current buffer's local keymap, and (iv) the global keymap, in that
order.  Emacs searches for each input key sequence in all these keymaps.

   Of these usual keymaps, the highest-precedence one is specified by
the 'keymap' text or overlay property at point, if any.  (For a mouse
input event, Emacs uses the event position instead of point; *note
Searching Keymaps::.)

   Next in precedence are keymaps specified by enabled minor modes.
These keymaps, if any, are specified by the variables
'emulation-mode-map-alists', 'minor-mode-overriding-map-alist', and
'minor-mode-map-alist'.  *Note Controlling Active Maps::.

   Next in precedence is the buffer's "local keymap", containing key
bindings specific to the buffer.  The minibuffer also has a local keymap
(*note Intro to Minibuffers::).  If there is a 'local-map' text or
overlay property at point, that specifies the local keymap to use, in
place of the buffer's default local keymap.

   The local keymap is normally set by the buffer's major mode, and
every buffer with the same major mode shares the same local keymap.
Hence, if you call 'local-set-key' (*note Key Binding Commands::) to
change the local keymap in one buffer, that also affects the local
keymaps in other buffers with the same major mode.

   Finally, the "global keymap" contains key bindings that are defined
regardless of the current buffer, such as 'C-f'.  It is always active,
and is bound to the variable 'global-map'.

   Apart from the above usual keymaps, Emacs provides special ways for
programs to make other keymaps active.  Firstly, the variable
'overriding-local-map' specifies a keymap that replaces the usual active
keymaps, except for the global keymap.  Secondly, the terminal-local
variable 'overriding-terminal-local-map' specifies a keymap that takes
precedence over _all_ other keymaps (including 'overriding-local-map');
this is normally used for modal/transient keybindings (the function
'set-transient-map' provides a convenient interface for this).  *Note
Controlling Active Maps::, for details.

   Making keymaps active is not the only way to use them.  Keymaps are
also used in other ways, such as for translating events within
'read-key-sequence'.  *Note Translation Keymaps::.

   *Note Standard Keymaps::, for a list of some standard keymaps.

 -- Function: current-active-maps &optional olp position
     This returns the list of active keymaps that would be used by the
     command loop in the current circumstances to look up a key
     sequence.  Normally it ignores 'overriding-local-map' and
     'overriding-terminal-local-map', but if OLP is non-'nil' then it
     pays attention to them.  POSITION can optionally be either an event
     position as returned by 'event-start' or a buffer position, and may
     change the keymaps as described for 'key-binding'.

 -- Function: key-binding key &optional accept-defaults no-remap
          position
     This function returns the binding for KEY according to the current
     active keymaps.  The result is 'nil' if KEY is undefined in the
     keymaps.

     The argument ACCEPT-DEFAULTS controls checking for default
     bindings, as in 'lookup-key' (*note Functions for Key Lookup::).

     When commands are remapped (*note Remapping Commands::),
     'key-binding' normally processes command remappings so as to return
     the remapped command that will actually be executed.  However, if
     NO-REMAP is non-'nil', 'key-binding' ignores remappings and returns
     the binding directly specified for KEY.

     If KEY starts with a mouse event (perhaps following a prefix
     event), the maps to be consulted are determined based on the
     event's position.  Otherwise, they are determined based on the
     value of point.  However, you can override either of them by
     specifying POSITION.  If POSITION is non-'nil', it should be either
     a buffer position or an event position like the value of
     'event-start'.  Then the maps consulted are determined based on
     POSITION.

     Emacs signals an error if KEY is not a string or a vector.

          (key-binding "\C-x\C-f")
              => find-file

==============================================================================
File: elisp.info,  Node: |Searching_Keymaps|,  Next: |Controlling_Active_Maps|,  Prev: |Active_Keymaps|,  Up: |Keymaps|
==============================================================================

                                                             *Searching_Keymaps*

22.8 Searching the Active Keymaps
---------------------------------

Here is a pseudo-Lisp summary of how Emacs searches the active keymaps:

     (or (if overriding-terminal-local-map
             (FIND-IN overriding-terminal-local-map))
         (if overriding-local-map
             (FIND-IN overriding-local-map)
           (or (FIND-IN (get-char-property (point) 'keymap))
               (FIND-IN-ANY emulation-mode-map-alists)
               (FIND-IN-ANY minor-mode-overriding-map-alist)
               (FIND-IN-ANY minor-mode-map-alist)
               (if (get-text-property (point) 'local-map)
                   (FIND-IN (get-char-property (point) 'local-map))
                 (FIND-IN (current-local-map)))))
         (FIND-IN (current-global-map)))

Here, FIND-IN and FIND-IN-ANY are pseudo functions that search in one
keymap and in an alist of keymaps, respectively.  Note that the
'set-transient-map' function works by setting
'overriding-terminal-local-map' (*note Controlling Active Maps::).

   In the above pseudo-code, if a key sequence starts with a mouse event
(*note Mouse Events::), that event's position is used instead of point,
and the event's buffer is used instead of the current buffer.  In
particular, this affects how the 'keymap' and 'local-map' properties are
looked up.  If a mouse event occurs on a string embedded with a
'display', 'before-string', or 'after-string' property (*note Special
Properties::), and the string has a non-'nil' 'keymap' or 'local-map'
property, that overrides the corresponding property in the underlying
buffer text (i.e., the property specified by the underlying text is
ignored).

   When a key binding is found in one of the active keymaps, and that
binding is a command, the search is over--the command is executed.
However, if the binding is a symbol with a value or a string, Emacs
replaces the input key sequences with the variable's value or the
string, and restarts the search of the active keymaps.  *Note Key
Lookup::.

   The command which is finally found might also be remapped.  *Note
Remapping Commands::.

==============================================================================
File: elisp.info,  Node: |Controlling_Active_Maps|,  Next: |Key_Lookup|,  Prev: |Searching_Keymaps|,  Up: |Keymaps|
==============================================================================

                                                       *Controlling_Active_Maps*

22.9 Controlling the Active Keymaps
-----------------------------------

 -- Variable: global-map
     This variable contains the default global keymap that maps Emacs
     keyboard input to commands.  The global keymap is normally this
     keymap.  The default global keymap is a full keymap that binds
     'self-insert-command' to all of the printing characters.

     It is normal practice to change the bindings in the global keymap,
     but you should not assign this variable any value other than the
     keymap it starts out with.

 -- Function: current-global-map
     This function returns the current global keymap.  This is the same
     as the value of 'global-map' unless you change one or the other.
     The return value is a reference, not a copy; if you use
     'define-key' or other functions on it you will alter global
     bindings.

          (current-global-map)
          => (keymap [set-mark-command beginning-of-line ...
                      delete-backward-char])

 -- Function: current-local-map
     This function returns the current buffer's local keymap, or 'nil'
     if it has none.  In the following example, the keymap for the
     'scratch' buffer (using Lisp Interaction mode) is a sparse keymap
     in which the entry for <ESC>, ASCII code 27, is another sparse
     keymap.

          (current-local-map)
          => (keymap
              (10 . eval-print-last-sexp)
              (9 . lisp-indent-line)
              (127 . backward-delete-char-untabify)
              (27 keymap
                  (24 . eval-defun)
                  (17 . indent-sexp)))

   'current-local-map' returns a reference to the local keymap, not a
copy of it; if you use 'define-key' or other functions on it you will
alter local bindings.

 -- Function: current-minor-mode-maps
     This function returns a list of the keymaps of currently enabled
     minor modes.

 -- Function: use-global-map keymap
     This function makes KEYMAP the new current global keymap.  It
     returns 'nil'.

     It is very unusual to change the global keymap.

 -- Function: use-local-map keymap
     This function makes KEYMAP the new local keymap of the current
     buffer.  If KEYMAP is 'nil', then the buffer has no local keymap.
     'use-local-map' returns 'nil'.  Most major mode commands use this
     function.

 -- Variable: minor-mode-map-alist
     This variable is an alist describing keymaps that may or may not be
     active according to the values of certain variables.  Its elements
     look like this:

          (VARIABLE . KEYMAP)

     The keymap KEYMAP is active whenever VARIABLE has a non-'nil'
     value.  Typically VARIABLE is the variable that enables or disables
     a minor mode.  *Note Keymaps and Minor Modes::.

     Note that elements of 'minor-mode-map-alist' do not have the same
     structure as elements of 'minor-mode-alist'.  The map must be the
     CDR of the element; a list with the map as the second element will
     not do.  The CDR can be either a keymap (a list) or a symbol whose
     function definition is a keymap.

     When more than one minor mode keymap is active, the earlier one in
     'minor-mode-map-alist' takes priority.  But you should design minor
     modes so that they don't interfere with each other.  If you do this
     properly, the order will not matter.

     See *note Keymaps and Minor Modes::, for more information about
     minor modes.  See also 'minor-mode-key-binding' (*note Functions
     for Key Lookup::).

 -- Variable: minor-mode-overriding-map-alist
     This variable allows major modes to override the key bindings for
     particular minor modes.  The elements of this alist look like the
     elements of 'minor-mode-map-alist': '(VARIABLE . KEYMAP)'.

     If a variable appears as an element of
     'minor-mode-overriding-map-alist', the map specified by that
     element totally replaces any map specified for the same variable in
     'minor-mode-map-alist'.

     'minor-mode-overriding-map-alist' is automatically buffer-local in
     all buffers.

 -- Variable: overriding-local-map
     If non-'nil', this variable holds a keymap to use instead of the
     buffer's local keymap, any text property or overlay keymaps, and
     any minor mode keymaps.  This keymap, if specified, overrides all
     other maps that would have been active, except for the current
     global map.

 -- Variable: overriding-terminal-local-map
     If non-'nil', this variable holds a keymap to use instead of
     'overriding-local-map', the buffer's local keymap, text property or
     overlay keymaps, and all the minor mode keymaps.

     This variable is always local to the current terminal and cannot be
     buffer-local.  *Note Multiple Terminals::.  It is used to implement
     incremental search mode.

 -- Variable: overriding-local-map-menu-flag
     If this variable is non-'nil', the value of 'overriding-local-map'
     or 'overriding-terminal-local-map' can affect the display of the
     menu bar.  The default value is 'nil', so those map variables have
     no effect on the menu bar.

     Note that these two map variables do affect the execution of key
     sequences entered using the menu bar, even if they do not affect
     the menu bar display.  So if a menu bar key sequence comes in, you
     should clear the variables before looking up and executing that key
     sequence.  Modes that use the variables would typically do this
     anyway; normally they respond to events that they do not handle by
     "unreading" them and exiting.

 -- Variable: special-event-map
     This variable holds a keymap for special events.  If an event type
     has a binding in this keymap, then it is special, and the binding
     for the event is run directly by 'read-event'.  *Note Special
     Events::.

 -- Variable: emulation-mode-map-alists
     This variable holds a list of keymap alists to use for emulation
     modes.  It is intended for modes or packages using multiple
     minor-mode keymaps.  Each element is a keymap alist which has the
     same format and meaning as 'minor-mode-map-alist', or a symbol with
     a variable binding which is such an alist.  The active keymaps in
     each alist are used before 'minor-mode-map-alist' and
     'minor-mode-overriding-map-alist'.

 -- Function: set-transient-map keymap &optional keep-pred on-exit
     This function adds KEYMAP as a "transient" keymap, which takes
     precedence over other keymaps for one (or more) subsequent keys.

     Normally, KEYMAP is used just once, to look up the very next key.
     If the optional argument KEEP-PRED is 't', the map stays active as
     long as the user types keys defined in KEYMAP; when the user types
     a key that is not in KEYMAP, the transient keymap is deactivated
     and normal key lookup continues for that key.

     The KEEP-PRED argument can also be a function.  In that case, the
     function is called with no arguments, prior to running each
     command, while KEYMAP is active; it should return non-'nil' if
     KEYMAP should stay active.

     The optional argument ON-EXIT, if non-'nil', specifies a function
     that is called, with no arguments, after KEYMAP is deactivated.

     This function works by adding and removing KEYMAP from the variable
     'overriding-terminal-local-map', which takes precedence over all
     other active keymaps (*note Searching Keymaps::).

==============================================================================
File: elisp.info,  Node: |Key_Lookup|,  Next: |Functions_for_Key_Lookup|,  Prev: |Controlling_Active_Maps|,  Up: |Keymaps|
==============================================================================

                                                                    *Key_Lookup*

22.10 Key Lookup
----------------

"Key lookup" is the process of finding the binding of a key sequence
from a given keymap.  The execution or use of the binding is not part of
key lookup.

   Key lookup uses just the event type of each event in the key
sequence; the rest of the event is ignored.  In fact, a key sequence
used for key lookup may designate a mouse event with just its types (a
symbol) instead of the entire event (a list).  *Note Input Events::.
Such a key sequence is insufficient for 'command-execute' to run, but it
is sufficient for looking up or rebinding a key.

   When the key sequence consists of multiple events, key lookup
processes the events sequentially: the binding of the first event is
vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
